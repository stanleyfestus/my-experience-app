import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';
import * as ReactRedux from 'react-redux';
import * as Immutable from 'seamless-immutable';
import classNames from 'classnames';
import { v1 as uuidv1 } from 'uuid';
import * as semver from 'semver';
import * as xss from 'xss';
import queryString from 'query-string';
import * as invariant from 'invariant';
import ReactResizeDetector from 'react-resize-detector';
import * as spring from '@react-spring/web';
import { saveAs } from 'file-saver';
import * as restRequest from '@esri/arcgis-rest-request';
import * as restPortal from '@esri/arcgis-rest-portal';
import * as restFeatureService from '@esri/arcgis-rest-feature-service';
import { Sanitizer } from '@esri/arcgis-html-sanitizer';
import * as appActions from './lib/app-actions';
import * as utils from './lib/utils/utils';
import * as urlUtils from './lib/utils/url-utils';
import * as urlManagerUtils from './lib/utils/url-manager-utils';
import * as portalUrlUtils from './lib/utils/portal-url-utils';
import * as serviceUrlUtils from './lib/utils/service-url-utils';
import * as portalUtils from './lib/utils/portal-utils';
import * as appConfigUtils from './lib/utils/app-config-utils';
import * as keyboardUtils from './lib/utils/keyboard-utils';
import * as privilegeUtils from './lib/utils/privilege-utils';
import * as dataSourceUtils from './lib/utils/data-source-utils';
import * as sharedThemeUtils from './lib/utils/shared-theme-utils';
import * as utilityUtils from './lib/utils/utility-utils';
import * as proxyUtils from './lib/utils/proxy-utils';
import * as geometryUtils from './lib/utils/geometry-utils';
import * as extensionSpec from './lib/extension-spec/extension-spec';
import * as moduleLoader from './lib/module-loader';
import * as jimuHistory from './lib/browser-history';
import * as i18n from './lib/i18n';
import * as requestUtils from './lib/utils/request-utils';
import * as expressionUtils from './lib/utils/expression-utils';
import * as dateUtils from './lib/utils/date-utils';
import * as indexedDBUtils from './lib/utils/indexed-db-utils';
import * as messageActionUtils from './lib/message-actions/utils';
import type { I18nMessages } from './lib/i18n';
import type { IntlShape } from 'react-intl';
import { FormattedDate, FormattedMessage, FormattedNumber, FormattedPlural, FormattedRelativeTime, FormattedTime, IntlProvider, injectIntl, createIntl, createIntlCache, useIntl } from 'react-intl';
import type { RepeatedDataSource } from './lib/repeat-data-source-context';
import { RepeatedDataSourceProvider, withRepeatedDataSource } from './lib/repeat-data-source-context';
import * as CONSTANTS from './lib/constants';
import BaseWidget from './lib/base-widget';
import WidgetManager from './lib/widget-manager';
import ConfigManager from './lib/config-manager';
import DataSourceManager from './lib/data-source-manager';
import UtilityManager from './lib/utility-manager';
import MessageManager from './lib/message-manager';
import UrlManager from './lib/url-manager';
import type { NoPermissionResourceInfoList, NoPermissionResourceInfo, SignInError } from './lib/session-manager';
import SessionManager, { SessionChangedReasonType, SignInErrorCode } from './lib/session-manager';
import ExtensionManager from './lib/extension-manager';
import ExportJson from './lib/data-actions/export-json';
import ExportCSV from './lib/data-actions/export-csv';
import ExportGeoJSON from './lib/data-actions/export-geojson';
import SetFilter from './lib/data-actions/set-filter';
import DataActionManager from './lib/data-action-manager';
import ServiceManager from './lib/service-manager';
import IdManager from './lib/id-manager';
import GuideManager, { GuideLevels, type Guide } from './lib/guide-manager';
import AppRoot from './lib/app-root';
import defaultMessages from './lib/translations/default';
import MutableStoreManager from './lib/mutable-store-manager';
import type { DataSourceComponentProps, QueryRequiredInfo } from './lib/data-source-component';
import DataSourceComponent from './lib/data-source-component';
import type { MultipleDataSourceComponentProps } from './lib/multiple-data-source-component';
import MultipleDataSourceComponent from './lib/multiple-data-source-component';
import type { MultipleExpressionResolveResults, SingleExpressionResolveResult, ExpressionResolverComponentProps } from './lib/expression-resolver-component';
import { ExpressionResolverComponent, ExpressionResolverErrorCode, _ExpressionResolverComponent } from './lib/expression-resolver-component';
import Keyboard from './lib/keyboard';
import { keyMap } from './lib/keyboard/key-map';
import AppKeyboardComponent from './lib/app-keyboard-component';
/**
 * A package providing a method to make a promise cancelable (`cancelable`) and a constructor to create a new cancelable promise (`CancelablePromise`).
 * Please see https://github.com/alkemics/CancelablePromise#readme for more details.
 */
import * as cancelablePromise from 'cancelable-promise';
import * as hooks from './lib/hooks';
declare const version: any;
declare const lodash: {
    assign: {
        <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
        <TObject, TSource1, TSource2>(object: TObject, source1: TSource1, source2: TSource2): TObject & TSource1 & TSource2;
        <TObject, TSource1, TSource2, TSource3>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3): TObject & TSource1 & TSource2 & TSource3;
        <TObject, TSource1, TSource2, TSource3, TSource4>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3, source4: TSource4): TObject & TSource1 & TSource2 & TSource3 & TSource4;
        <TObject>(object: TObject): TObject;
        (object: any, ...otherArgs: any[]): any;
    };
    defer: (func: (...args: any[]) => any, ...args: any[]) => number;
    debounce: {
        <T extends (...args: any) => any>(func: T, wait: number | undefined, options: import("lodash").DebounceSettingsLeading): import("lodash").DebouncedFuncLeading<T>;
        <T extends (...args: any) => any>(func: T, wait?: number, options?: import("lodash").DebounceSettings): import("lodash").DebouncedFunc<T>;
    };
    setValue: {
        <T extends object>(object: T, path: import("lodash").PropertyPath, value: any): T;
        <TResult>(object: object, path: import("lodash").PropertyPath, value: any): TResult;
    };
    getValue: {
        <TObject extends object, TKey extends keyof TObject>(object: TObject, path: TKey | [TKey]): TObject[TKey];
        <TObject extends object, TKey extends keyof TObject>(object: TObject | null | undefined, path: TKey | [TKey]): TObject[TKey] | undefined;
        <TObject extends object, TKey extends keyof TObject, TDefault>(object: TObject | null | undefined, path: TKey | [TKey], defaultValue: TDefault): Exclude<TObject[TKey], undefined> | TDefault;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof TObject[TKey1]>(object: TObject, path: [TKey1, TKey2]): TObject[TKey1][TKey2];
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>>(object: TObject | null | undefined, path: [TKey1, TKey2]): NonNullable<TObject[TKey1]>[TKey2] | undefined;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>, TDefault>(object: TObject | null | undefined, path: [TKey1, TKey2], defaultValue: TDefault): Exclude<NonNullable<TObject[TKey1]>[TKey2], undefined> | TDefault;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof TObject[TKey1], TKey3 extends keyof TObject[TKey1][TKey2]>(object: TObject, path: [TKey1, TKey2, TKey3]): TObject[TKey1][TKey2][TKey3];
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>, TKey3 extends keyof NonNullable<NonNullable<TObject[TKey1]>[TKey2]>>(object: TObject | null | undefined, path: [TKey1, TKey2, TKey3]): NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3] | undefined;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>, TKey3 extends keyof NonNullable<NonNullable<TObject[TKey1]>[TKey2]>, TDefault>(object: TObject | null | undefined, path: [TKey1, TKey2, TKey3], defaultValue: TDefault): Exclude<NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3], undefined> | TDefault;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof TObject[TKey1], TKey3 extends keyof TObject[TKey1][TKey2], TKey4 extends keyof TObject[TKey1][TKey2][TKey3]>(object: TObject, path: [TKey1, TKey2, TKey3, TKey4]): TObject[TKey1][TKey2][TKey3][TKey4];
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>, TKey3 extends keyof NonNullable<NonNullable<TObject[TKey1]>[TKey2]>, TKey4 extends keyof NonNullable<NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3]>>(object: TObject | null | undefined, path: [TKey1, TKey2, TKey3, TKey4]): NonNullable<NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3]>[TKey4] | undefined;
        <TObject extends object, TKey1 extends keyof TObject, TKey2 extends keyof NonNullable<TObject[TKey1]>, TKey3 extends keyof NonNullable<NonNullable<TObject[TKey1]>[TKey2]>, TKey4 extends keyof NonNullable<NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3]>, TDefault>(object: TObject | null | undefined, path: [TKey1, TKey2, TKey3, TKey4], defaultValue: TDefault): Exclude<NonNullable<NonNullable<NonNullable<TObject[TKey1]>[TKey2]>[TKey3]>[TKey4], undefined> | TDefault;
        <T>(object: import("lodash").NumericDictionary<T>, path: number): T;
        <T>(object: import("lodash").NumericDictionary<T> | null | undefined, path: number): T | undefined;
        <T, TDefault>(object: import("lodash").NumericDictionary<T> | null | undefined, path: number, defaultValue: TDefault): T | TDefault;
        <TDefault>(object: null | undefined, path: import("lodash").PropertyPath, defaultValue: TDefault): TDefault;
        (object: null | undefined, path: import("lodash").PropertyPath): undefined;
        <TObject, TPath extends string>(data: TObject, path: TPath): string extends TPath ? any : import("lodash").GetFieldType<TObject, TPath>;
        <TObject, TPath extends string, TDefault = import("lodash").GetFieldType<TObject, TPath, "Path">>(data: TObject, path: TPath, defaultValue: TDefault): Exclude<import("lodash").GetFieldType<TObject, TPath>, null | undefined> | TDefault;
        (object: any, path: import("lodash").PropertyPath, defaultValue?: any): any;
    };
    isDeepEqual: (value: any, other: any) => boolean;
    throttle: {
        <T extends (...args: any) => any>(func: T, wait?: number, options?: import("lodash").ThrottleSettingsLeading): import("lodash").DebouncedFuncLeading<T>;
        <T extends (...args: any) => any>(func: T, wait?: number, options?: import("lodash").ThrottleSettings): import("lodash").DebouncedFunc<T>;
    };
    kebabCase: (string?: string) => string;
    camelCase: (string?: string) => string;
    cloneDeep: <T>(value: T) => T;
    clone: <T>(value: T) => T;
    delay: (func: (...args: any[]) => any, wait: number, ...args: any[]) => number;
    merge: {
        <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
        <TObject, TSource1, TSource2>(object: TObject, source1: TSource1, source2: TSource2): TObject & TSource1 & TSource2;
        <TObject, TSource1, TSource2, TSource3>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3): TObject & TSource1 & TSource2 & TSource3;
        <TObject, TSource1, TSource2, TSource3, TSource4>(object: TObject, source1: TSource1, source2: TSource2, source3: TSource3, source4: TSource4): TObject & TSource1 & TSource2 & TSource3 & TSource4;
        (object: any, ...otherArgs: any[]): any;
    };
};
declare const esri: {
    restFeatureService: typeof restFeatureService;
    restPortal: typeof restPortal;
    restRequest: typeof restRequest;
    Sanitizer: typeof Sanitizer;
};
declare const polished: {
    /**
     * https://github.com/styled-components/polished/issues/276
     * The typing of polished is not correct. It says it's fixed but it seems it does not.
     */
    rgba: any;
    parseToRgb: any;
    rem: any;
    readableColor: any;
    lighten: any;
    darken: any;
    ellipsis: any;
    mix: any;
    stripUnit: any;
    math: any;
    borderRadius: any;
    getValueAndUnit: any;
    parseToHsl: any;
    shade: any;
    tint: any;
};
type ImmutableObject<T> = Immutable.ImmutableObject<T>;
type ImmutableArray<T> = Immutable.ImmutableArray<T>;
export { AppRoot, React, ReactDOM, ReactDOMClient, ExtensionManager, BaseWidget, WidgetManager, ConfigManager, UrlManager, DataSourceManager, UtilityManager, urlUtils, urlManagerUtils, SessionManager, SessionChangedReasonType, SignInErrorCode, appActions, extensionSpec, utils, appConfigUtils, ReactRedux, MessageManager, Immutable, classNames, uuidv1, hooks, queryString, moduleLoader, jimuHistory, portalUrlUtils, serviceUrlUtils, portalUtils, i18n, defaultMessages, DataSourceComponent, MultipleDataSourceComponent, IntlProvider, injectIntl, xss, polished, MutableStoreManager, Keyboard, keyMap, AppKeyboardComponent, keyboardUtils, requestUtils, expressionUtils, dateUtils, indexedDBUtils, messageActionUtils, createIntl, createIntlCache, useIntl, FormattedDate, FormattedMessage, FormattedNumber, FormattedPlural, FormattedRelativeTime, FormattedTime, esri, lodash, RepeatedDataSourceProvider, withRepeatedDataSource, dataSourceUtils, sharedThemeUtils, utilityUtils, proxyUtils, geometryUtils, ExportJson, ExportCSV, ExportGeoJSON, SetFilter, DataActionManager, invariant, CONSTANTS, ReactResizeDetector, GuideManager, semver, ExpressionResolverComponent, ExpressionResolverErrorCode, _ExpressionResolverComponent, ServiceManager, IdManager, version, privilegeUtils, spring, saveAs, cancelablePromise, GuideLevels };
export type { NoPermissionResourceInfoList, NoPermissionResourceInfo, SignInError, ImmutableObject, ImmutableArray, DataSourceComponentProps, QueryRequiredInfo, MultipleDataSourceComponentProps, IntlShape, RepeatedDataSource, MultipleExpressionResolveResults, SingleExpressionResolveResult, ExpressionResolverComponentProps, I18nMessages, Guide };
export * from './lib/emotion';
export * from './lib/base-widget';
export * from './lib/types/layout';
export * from './lib/types/props';
export * from './lib/types/state';
export * from './lib/types/app-config';
export * from './lib/types/jimu-config';
export * from './lib/types/url-parameters';
export * from './lib/types/app-info';
export * from './lib/types/manifest';
export * from './lib/types/common';
export * from './lib/types/tracking-manager';
export * from './lib/types/theme';
export * from './lib/types/expression';
export * from './lib/types/sql-expression';
export * from './lib/types/service-definition';
export * from './lib/types/user-settings';
export * from './lib/types/url-info';
export * from './lib/types/image-quality';
export * from './lib/types/utility';
export * from './lib/data-sources/interfaces';
export * from './lib/message/message-base-types';
export * from './lib/init';
export * from './lib/store';
export * from './lib/tracking-manager';
export { LoadingHandler } from './lib/loading-component';
export * from './lib/dependency-loader';
export * from './lib/arcgis-js-api-module-loader';
export * from './lib/error-boundary';
export * from './lib/base-data-action';
export * from './lib/message-actions/filter-data-record-action';
export * from './lib/message-actions/types';
export * from './lib/expression-resolver';
export * from './lib/version-manager';
export * from './lib/app-dialog';
export * from './lib/animation';
export * from './lib/hover';
export * from './lib/transition';
export * from './lib/accessibility';
export * from './lib/extensions/data-source-extension';
export * from './lib/external-resolvable-promise';
export { createSelector } from 'reselect';
