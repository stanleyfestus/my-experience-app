{"version":3,"file":"job.js","sourceRoot":"","sources":["../../src/job.ts"],"names":[],"mappings":"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","sourcesContent":["import { request } from \"./request.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { ArcGISJobError } from \"./utils/ArcGISJobError.js\";\nimport { JOB_STATUSES } from \"./types/job-statuses.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport mitt from \"mitt\";\nimport { processJobParams } from \"./utils/process-job-params.js\";\n\n/**\n * Options for creating a new {@linkcode Job}.\n */\nexport interface IJobOptions {\n  /**\n   * The ID of the job. Can be used to rehydrate an instance of {@linkcode Job} with {@linkcode Job.fromExistingJob} or {@linkcode Job.deserialize}.\n   */\n  id: string;\n\n  /**\n   * The base URL of the job without `/submitJob` or a trailing job id.\n   */\n  url: string;\n\n  /**\n   * Automatically monitor the job for status changes once it is created. Defaults to `false`.\n   */\n  startMonitoring?: boolean;\n\n  /**\n   * Rate in milliseconds to poll for job status changes. Defaults to `2000`.\n   */\n  pollingRate?: number;\n\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  authentication?: IAuthenticationManager | string;\n}\n\n/**\n * Options for {@linkcode Job.submitJob}.\n */\nexport interface ISubmitJobOptions {\n  /**\n   * Parameters necessary that are passed to the {@linkcode Job.submitJob} method.\n   */\n  params: any;\n\n  /**\n   * The base URL of the job without `/submitJob` or a trailing job id.\n   */\n  url: string;\n\n  /**\n   * Automatically monitor the job for status changes once it is created. Defaults to `false`.\n   */\n  startMonitoring?: boolean;\n\n  /**\n   * Rate in milliseconds to poll for job status changes. Defaults to `2000`.\n   */\n  pollingRate?: number;\n\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  authentication?: IAuthenticationManager | string;\n}\n\n/**\n * Describes the status of a job. See the [GP Job documentation for more information](https://developers.arcgis.com/rest/services-reference/enterprise/gp-job.htm).\n */\nexport interface IJobInfo {\n  /**\n   * The ID of the job. Can be used to rehydrate an instance of {@linkcode Job} with {@linkcode Job.fromExistingJob} or {@linkcode Job.deserialize}.\n   */\n  id: string;\n  /**\n   * Represents the status of the current job.\n   */\n  status: JOB_STATUSES;\n  /**\n   * A results property that are returned from a successful job.\n   */\n  results?: {\n    [key: string]: {\n      paramUrl: string;\n    };\n  };\n  /**\n   * An input property that are returned from a successful job.\n   */\n  inputs?: {\n    [key: string]: {\n      paramUrl: string;\n    };\n  };\n  /**\n   * A message property that are returned from a successful job.\n   */\n  messages?: Array<{\n    type: string;\n    description: string;\n  }>;\n  /**\n   * A progress property that is returned while the job status is {@linkcode JOB_STATUSES.Executing}\n   */\n  progress?: {\n    type: string;\n    message: string;\n    percentage: number;\n  };\n}\n\nconst DefaultJobOptions: Partial<IJobOptions> = {\n  pollingRate: 2000,\n  startMonitoring: false\n};\n\n/**\n * Jobs represent long running processing tasks running on ArcGIS Services. Typically these represent complex analysis tasks such as [geoprocessing tasks](https://developers.arcgis.com/rest/services-reference/enterprise/submit-gp-job.htm), [logistics analysis such as fleet routing](https://developers.arcgis.com/rest/network/api-reference/vehicle-routing-problem-service.htm) or [spatial analysis tasks](https://developers.arcgis.com/rest/analysis/api-reference/tasks-overview.htm).\n *\n * To create a {@linkcode Job}, use the {@linkcode Job.submitJob} method which will return an instance of the {@linkcode Job} class with a unique id.\n *\n * If you have an existing job you can use {@linkcode Job.serialize} and {@linkcode Job.deserialize} to save job information as a string and recreate the job to get results later.\n *\n * ```js\n * import { Job,  JOB_STATUSES  } from \"@esri/arcgis-rest-request\";\n *\n * const job  = async Job.submitJob(options);\n *\n * // will automatically wait for job completion and get results when the job is finished.\n * job.getAllResults().then((results) => {console.log(results)})\n *\n * // watch for all status updates\n * job.on(\"status\", ({jobStatus}) => {console.log(job.status)})\n * ```\n *\n * By default event monitoring is started when you call {@linkcode Job.waitForCompletion}, {@linkcode Job.getAllResults} or, {@linkcode Job.getResult} and stops automatically when those promises complete. Use {@linkcode Job.startEventMonitoring} and {@linkcode Job.stopEventMonitoring} to manually start and stop event monitoring outside those methods. Starting monitoring with {@linkcode Job.startEventMonitoring} will not stop monitoring when {@linkcode Job.waitForCompletion}, {@linkcode Job.getAllResults} or, {@linkcode Job.getResult} complete.\n */\nexport class Job {\n  static deserialize(serializeString: string, options?: IJobOptions) {\n    const jobOptions: IJobOptions = {\n      ...DefaultJobOptions,\n      ...JSON.parse(serializeString),\n      ...options\n    };\n\n    return request(`${jobOptions.url}/jobs/${jobOptions.id}`, {\n      authentication: jobOptions.authentication\n    }).then(() => {\n      return new Job(jobOptions);\n    });\n  }\n\n  /**\n   * Creates a new instance of {@linkcode Job} from an existing job id.\n   *\n   * @param options Requires request endpoint url and id from an existing job id.\n   * @returns An new instance of Job class with options.\n   */\n  static fromExistingJob(options: IJobOptions) {\n    const jobOptions: IJobOptions = {\n      ...DefaultJobOptions,\n      ...options\n    };\n    const baseUrl = cleanUrl(jobOptions.url.replace(/\\/submitJob\\/?/, \"\"));\n    return request(`${baseUrl}/jobs/${jobOptions.id}`, {\n      authentication: jobOptions.authentication\n    }).then(() => {\n      return new Job(jobOptions);\n    });\n  }\n\n  /**\n   * Submits a job request that will return a new instance of {@linkcode Job}.\n   *\n   * @param requestOptions Requires url and params from requestOptions.\n   * @returns An new instance of Job class with the returned job id from submitJob request and requestOptions;\n   */\n  static submitJob(requestOptions: ISubmitJobOptions) {\n    const {\n      url,\n      params,\n      authentication,\n      pollingRate,\n      startMonitoring\n    }: Partial<ISubmitJobOptions> = {\n      ...DefaultJobOptions,\n      ...requestOptions\n    };\n\n    const processedParams = processJobParams(params);\n    const baseUrl = cleanUrl(url.replace(/\\/submitJob\\/?/, \"\"));\n    const submitUrl = baseUrl + \"/submitJob\";\n    return request(submitUrl, {\n      params: processedParams,\n      authentication\n    }).then(\n      (response) =>\n        new Job({\n          url: baseUrl,\n          authentication,\n          id: response.jobId,\n          startMonitoring,\n          pollingRate\n        })\n    );\n  }\n\n  /**\n   * The base URL of the job.\n   */\n  readonly url: string;\n  /**\n   * The job id indicating the specific job.\n   */\n  readonly id: string;\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  readonly authentication: IAuthenticationManager | string;\n\n  /**\n   * Internal instance of [`mitt`](https://github.com/developit/mitt) used for event handlers. It is recommended to use {@linkcode Job.on}, {@linkcode Job.off} or {@linkcode Job.once} instead of `emitter.`\n   */\n  private emitter: any;\n\n  /**\n   * Private pollingRate that is set if the user changes the pollingRate.\n   */\n  private _pollingRate: number;\n  /**\n   * Private boolean that checks to see if the user enables startMonitoring.\n   */\n  private didUserEnableMonitoring: any;\n  /**\n   * Internal handler for `setInterval()` used when polling.;\n   */\n  private setIntervalHandler: any;\n\n\n  constructor(options: IJobOptions) {\n    const { url, id, pollingRate, authentication }: Partial<IJobOptions> = {\n      ...DefaultJobOptions,\n      ...options\n    };\n\n    // Setup internal properties\n    this.url = url;\n    this.id = id;\n    this.authentication = authentication;\n    this._pollingRate = pollingRate;\n    this.emitter = mitt();\n\n    if (options.startMonitoring) {\n      this.startEventMonitoring(pollingRate);\n    }\n  }\n\n  /**\n   * Getter that appends the job id to the base url.\n   */\n  private get jobUrl() {\n    return `${this.url}/jobs/${this.id}`;\n  }\n\n  /**\n   * Returns `true` if the job is polling for status changes.\n   */\n  get isMonitoring() {\n    return !!this.setIntervalHandler;\n  }\n\n  /**\n   * The rate at which event monitoring is occurring in milliseconds.\n   */\n  get pollingRate() {\n    return this._pollingRate;\n  }\n\n  /**\n   * Sets a new polling rate and restart polling for status changes.\n   */\n  set pollingRate(newRate: number) {\n    this.stopEventMonitoring();\n    this.startEventMonitoring(newRate);\n  }\n\n  /**\n   * Retrieves the status of the current job.\n   *\n   * @returns An object with the job id and jobStatus.\n   */\n  getJobInfo(): Promise<IJobInfo> {\n    return request(this.jobUrl, {\n      authentication: this.authentication\n    }).then((rawJobInfo: any) => {\n      const info: any = Object.assign(\n        {\n          id: rawJobInfo.jobId,\n          status: undefined\n        },\n        rawJobInfo\n      );\n\n      delete info.jobId;\n      delete info.jobStatus;\n\n      switch (rawJobInfo.jobStatus) {\n        case \"esriJobCancelled\":\n          info.status = JOB_STATUSES.Cancelled;\n          break;\n        case \"esriJobCancelling\":\n          info.status = JOB_STATUSES.Cancelling;\n          break;\n        case \"esriJobNew\":\n          info.status = JOB_STATUSES.New;\n          break;\n        case \"esriJobWaiting\":\n          info.status = JOB_STATUSES.Waiting;\n          break;\n        case \"esriJobExecuting\":\n          info.status = JOB_STATUSES.Executing;\n          break;\n        case \"esriJobSubmitted\":\n          info.status = JOB_STATUSES.Submitted;\n          break;\n        case \"esriJobTimedOut\":\n          info.status = JOB_STATUSES.TimedOut;\n          break;\n        case \"esriJobFailed\":\n          info.status = JOB_STATUSES.Failed;\n          break;\n        case \"expectedFailure\":\n          info.status = JOB_STATUSES.Failure;\n          break;\n        case \"esriJobSucceeded\":\n          info.status = JOB_STATUSES.Success;\n          break;\n      }\n\n      return info as IJobInfo;\n    });\n  }\n\n  /**\n   * Function that calls the {@linkcode Job.getJobInfo} to check the job status, and emits the current job status. There are custom event emitters that\n   * the user is able to listen based on the job status. Refer to {@linkcode JOB_STATUSES} to see the various enums of the job status.\n   * To get results array from the job task, the job status must be {@linkcode JOB_STATUSES.Success}.\n   *\n   * These job statuses are based on what are returned from the job request task and have been into an enum type in {@linkcode JOB_STATUSES}.\n   *\n   * Reference https://developers.arcgis.com/rest/services-reference/enterprise/geoanalytics-checking-job-status.htm\n   */\n  private executePoll = async () => {\n    let result;\n    try {\n      result = await this.getJobInfo();\n    } catch (error) {\n      this.emitter.emit(JOB_STATUSES.Error, error);\n      return;\n    }\n\n    this.emitter.emit(JOB_STATUSES.Status, result);\n    this.emitter.emit(result.status, result);\n  };\n\n  /**\n   * A handler that listens for an eventName and returns custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  on(eventName: string, handler: (e: IJobInfo) => void) {\n    this.emitter.on(eventName, handler);\n  }\n\n  /**\n   * A handler that listens for an event once and returns a custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  once(eventName: string, handler: (e: IJobInfo) => void) {\n    const fn = (arg: any) => {\n      this.emitter.off(eventName, fn);\n      handler(arg);\n    };\n\n    this.emitter.on(eventName, fn);\n\n    (handler as any).__arcgis_job_once_original_function__ = fn;\n  }\n\n  /**\n   * A handler that will remove a listener after its emitted and returns a custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  off(eventName: string, handler: (e: IJobInfo) => void) {\n    if ((handler as any).__arcgis_job_once_original_function__) {\n      this.emitter.off(\n        eventName,\n        (handler as any).__arcgis_job_once_original_function__\n      );\n      return;\n    }\n    this.emitter.off(eventName, handler);\n  }\n\n  /**\n   * Get the specific results of a successful job by result name. To get all results see {@linkcode Job.getAllResults}.\n   *\n   * If monitoring is disabled it will be enabled until the job classes resolves or rejects this promise.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.getResult(\"result_name\")\n   *  }).then(result => {\n   *    console.log(result);\n   *  }).catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   *  Will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * @param result The name of the result that you want to retrieve.\n   * @returns An object representing the individual result of the job.\n   */\n  async getResult(result: string) {\n    return this.waitForCompletion().then((jobInfo: any) => {\n      return request(this.jobUrl + \"/\" + jobInfo.results[result].paramUrl, {\n        authentication: this.authentication\n      });\n    });\n  }\n\n  /**\n   * Formats the requestOptions to JSON format.\n   *\n   * @returns The `Job` as a plain JavaScript object.\n   */\n  toJSON(): IJobOptions {\n    return {\n      id: this.id,\n      url: this.url,\n      startMonitoring: this.isMonitoring,\n      pollingRate: this.pollingRate\n    };\n  }\n\n  /**\n   * Converts the `Job` to a JSON string. You can rehydrate the state of the `Job` with {@linkcode Job.deserialize}.\n   *\n   * @returns A JSON string representing the `Job`.\n   */\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Checks for job status and if the job status is successful it resolves the job information. Otherwise will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.waitForCompletion();\n   *  })\n   * .then((jobInfo) => {\n   *    console.log(\"job finished\", e.jobInfo);\n   *  })\n   * .catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   * @returns An object with a successful job status, id, and results.\n   */\n  async waitForCompletion(): Promise<IJobInfo> {\n    const jobInfo = await this.getJobInfo();\n    if (jobInfo.status === JOB_STATUSES.Success) {\n      return Promise.resolve(jobInfo);\n    }\n    //if jobStatus comes back immediately with one of the statuses\n    if (\n      jobInfo.status === JOB_STATUSES.Cancelling ||\n      jobInfo.status === JOB_STATUSES.Cancelled ||\n      jobInfo.status === JOB_STATUSES.Failed ||\n      jobInfo.status === JOB_STATUSES.Failure ||\n      jobInfo.status === JOB_STATUSES.TimedOut\n    ) {\n      this.stopInternalEventMonitoring();\n\n      return Promise.reject(\n        new ArcGISJobError(\"Job cancelled or failed.\", jobInfo)\n      );\n    }\n\n    //waits to see what the status is if not immediate\n    return new Promise((resolve, reject) => {\n      this.startInternalEventMonitoring();\n\n      this.once(JOB_STATUSES.Cancelled, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job cancelled.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.TimedOut, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job timed out.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.Failed, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job failed.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.Success, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        resolve(jobInfo);\n      });\n    });\n  }\n\n  /**\n   * Gets all the results from a successful job by ordering all the result paramUrl requests and calling each of them until all of them are complete and returns an object with all the results.\n   *\n   * If monitoring is disabled it will be enabled until the job classes resolves or rejects this promise.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.getAllResults();\n   *  }).then(allResults => {\n   *    console.log(allResults);\n   *  }).catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   * Will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * @returns An object representing all the results from a job.\n   */\n  async getAllResults() {\n    return this.waitForCompletion().then((jobInfo: any) => {\n      const keys = Object.keys(jobInfo.results);\n\n      const requests = keys.map((key) => {\n        return request(this.jobUrl + \"/\" + jobInfo.results[key].paramUrl, {\n          authentication: this.authentication\n        }).then((results) => {\n          return results;\n        });\n      });\n\n      return Promise.all(requests).then((resultsArray: any) => {\n        return keys.reduce((finalResults: any, key: string, index: number) => {\n          finalResults[keys[index]] = resultsArray[index];\n          return finalResults;\n        }, {});\n      });\n    });\n  }\n\n  /**\n   * Cancels the job request and voids the job.\n   *\n   * @returns An object that has job id, job status and messages array sequencing the status of the cancellation being submitted and completed.\n   */\n  cancelJob() {\n    return request(this.jobUrl + \"/cancel\", {\n      authentication: this.authentication,\n      params: { id: this.id, returnMessages: false }\n    }).then((response: any) => {\n      this.emitter.emit(\"cancelled\", response);\n      return response;\n    });\n  }\n\n  /**\n   * An internal monitoring if the user specifies startMonitoring: false, we need to check the status to see when the results are returned.\n   */\n  private startInternalEventMonitoring(\n    pollingRate = DefaultJobOptions.pollingRate\n  ) {\n    this._pollingRate = pollingRate;\n\n    /* istanbul ignore else - if monitoring is already running do nothing */\n    if (!this.isMonitoring) {\n      this.setIntervalHandler = setInterval(this.executePoll, this.pollingRate);\n    }\n  }\n\n  /**\n   * Stops the internal monitoring once the job has been successfully completed with results.\n   */\n  private stopInternalEventMonitoring() {\n    if (this.isMonitoring && !this.didUserEnableMonitoring) {\n      clearTimeout(this.setIntervalHandler);\n    }\n  }\n\n  /**\n   * Starts the event polling if the user enables the startMonitoring param.\n   *\n   * @param pollingRate Able to pass in a specific number or will default to 5000.\n   */\n  startEventMonitoring(pollingRate = DefaultJobOptions.pollingRate) {\n    this._pollingRate = pollingRate;\n    this.didUserEnableMonitoring = true;\n\n    /* istanbul ignore else - if not monitoring do nothing */\n    if (!this.isMonitoring) {\n      this.setIntervalHandler = setInterval(this.executePoll, this.pollingRate);\n    }\n  }\n\n  /**\n   * Stops the event polling rate. This is can only be enabled if the user calls this method directly.\n   */\n  stopEventMonitoring() {\n    /* istanbul ignore else - if not monitoring do nothing */\n    if (this.isMonitoring && this.didUserEnableMonitoring) {\n      clearTimeout(this.setIntervalHandler);\n    }\n  }\n}\n"]}