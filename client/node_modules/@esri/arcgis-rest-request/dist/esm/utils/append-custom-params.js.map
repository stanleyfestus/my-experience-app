{"version":3,"file":"append-custom-params.js","sourceRoot":"","sources":["../../../src/utils/append-custom-params.ts"],"names":[],"mappings":"AAAA;gBACgB;AAIhB;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAChC,aAAgB,EAChB,IAAoB,EACpB,WAAwB;IAExB,MAAM,kBAAkB,GAAG;QACzB,QAAQ;QACR,YAAY;QACZ,aAAa;QACb,gBAAgB;QAChB,QAAQ;QACR,OAAO;QACP,cAAc;QACd,SAAS;KACV,CAAC;IAEF,MAAM,OAAO,+BACR,EAAE,MAAM,EAAE,EAAE,EAAE,EACd,WAAW,GACX,aAAa,CACjB,CAAC;IAEF,sDAAsD;IACtD,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,IACE,aAAa,CAAC,GAAG,CAAC;YAClB,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,SAAS;YACvC,CAAC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,QAAQ;gBACpC,aAAa,CAAC,GAAG,CAAa,KAAK,CAAC,CAAC,EACxC;YACA,KAAK,CAAC,GAAU,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;SACxC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAEnB,2EAA2E;IAC3E,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC9C,IAAK,OAAe,CAAC,GAAG,CAAC,EAAE;YACxB,KAAa,CAAC,GAAG,CAAC,GAAI,OAAe,CAAC,GAAG,CAAC,CAAC;SAC7C;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,EAAqB,CAAC,CAAC;AAC5B,CAAC","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"portal\",\n    \"fetch\",\n    \"maxUrlLength\",\n    \"headers\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (\n      customOptions[key] ||\n      typeof customOptions[key] === \"boolean\" ||\n      (typeof customOptions[key] === \"number\" &&\n        (customOptions[key] as unknown) === 0)\n    ) {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce((value, key) => {\n    if ((options as any)[key]) {\n      (value as any)[key] = (options as any)[key];\n    }\n    return value;\n  }, {} as IRequestOptions);\n}\n"]}