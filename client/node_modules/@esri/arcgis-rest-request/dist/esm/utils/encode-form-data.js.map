{"version":3,"file":"encode-form-data.js","sourceRoot":"","sources":["../../../src/utils/encode-form-data.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAC5B,MAAW,EACX,aAAuB;IAEvB,uEAAuE;IACvE,MAAM,WAAW,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC;IAC9D,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,WAAW,EAAE;QACf,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;YAC1C,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,SAAS,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;gBACjE;;;;kBAIE;gBACF,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC;gBACrE,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;aAChD;iBAAM;gBACL,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;KACjB;SAAM;QACL,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAClC;AACH,CAAC","sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n"]}