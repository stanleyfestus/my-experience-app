{"version":3,"file":"generate-code-challenge.js","sourceRoot":"","sources":["../../../src/utils/generate-code-challenge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD;;GAEG;AACH,MAAM,UAAU,qBAAqB,CAAC,YAAoB,EAAE,GAAG,GAAG,MAAM;IACtE,kGAAkG;IAClG,IAAI,CAAC,GAAG,IAAI,MAAM,EAAE;QAClB,GAAG,GAAG,MAAM,CAAC;KACd;IAED,IAAI,YAAY,IAAI,GAAG,CAAC,eAAe,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE;QAC1E,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAE3C,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM;aACrB,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;aACxB,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;KACnE;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to hash the codeVerifier using sha256\n */\nexport function generateCodeChallenge(codeVerifier: string, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n    const encoder = new win.TextEncoder();\n    const bytes = encoder.encode(codeVerifier);\n\n    return win.crypto.subtle\n      .digest(\"SHA-256\", bytes)\n      .then((buffer) => base64UrlEncode(new Uint8Array(buffer), win));\n  }\n\n  return Promise.resolve(null);\n}\n"]}