{"version":3,"file":"request.js","sourceRoot":"","sources":["../../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IParams } from \"./utils/IParams.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { IRetryAuthError } from \"./utils/retryAuthError.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nimport { IAuthenticationManager } from \"./index.js\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: IRequestOptions,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport function getDefaultRequestOptions() {\n  return (\n    (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n      httpMethod: \"POST\",\n      params: {\n        f: \"json\"\n      }\n    }\n  );\n}\n\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 1) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      tries = tries + 1;\n\n      getSession(this.url, this.options)\n        .then((session) => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          return internalRequest(this.url, newOptions);\n        })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((e) => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (\n            e.name === this.name &&\n            e.message === this.message &&\n            tries >= retryLimit\n          ) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (code === 498 || code === 499) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(\n  url: string,\n  requestOptions: IRequestOptions\n): Promise<any> {\n  const defaults = getDefaultRequestOptions();\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...defaults,\n    ...requestOptions,\n    ...{\n      params: {\n        ...defaults.params,\n        ...requestOptions.params\n      },\n      headers: {\n        ...defaults.headers,\n        ...requestOptions.headers\n      }\n    }\n  };\n\n  const { httpMethod, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    signal: options.signal,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: options.credentials || \"same-origin\"\n  };\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  let authentication: IAuthenticationManager;\n\n  // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n  // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n  if (typeof options.authentication === \"string\") {\n    const rawToken = options.authentication;\n\n    authentication = {\n      portal: \"https://www.arcgis.com/sharing/rest\",\n      getToken: () => {\n        return Promise.resolve(rawToken);\n      }\n    };\n\n    /* istanbul ignore else - we don't need to test NOT warning people */\n    if (\n      !options.authentication.startsWith(\"AAPK\") &&\n      !options.authentication.startsWith(\"AATK\") && // doesn't look like an API Key\n      !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n      !(globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we haven't shown the user this warning yet\n    ) {\n      warn(\n        `Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`\n      );\n\n      (globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n    }\n  } else {\n    authentication = options.authentication;\n  }\n\n  // for errors in GET requests we want the URL passed to the error to be the URL before\n  // query params are applied.\n  const originalUrl = url;\n\n  return (\n    authentication\n      ? authentication.getToken(url).catch((err) => {\n          /**\n           * append original request url and requestOptions\n           * to the error thrown by getToken()\n           * to assist with retrying\n           */\n          err.url = url;\n          err.options = options;\n          /**\n           * if an attempt is made to talk to an unfederated server\n           * first try the request anonymously. if a 'token required'\n           * error is thrown, throw the UNFEDERATED error then.\n           */\n          originalAuthError = err;\n          return Promise.resolve(\"\");\n        })\n      : Promise.resolve(\"\")\n  )\n    .then((token) => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (authentication && authentication.getDomainCredentials) {\n        fetchOptions.credentials = authentication.getDomainCredentials(url);\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n\n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (\n          params.token &&\n          options.hideToken &&\n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === \"undefined\"\n        ) {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs specified by the consumer and requires POST\n          (options.maxUrlLength &&\n            urlWithQueryString.length > options.maxUrlLength) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData) as any;\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers\n      };\n\n      // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n      // to ensure that generated tokens have the same referer when used in Node with a username and password.\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (\n        (typeof window === \"undefined\" ||\n          (window && typeof window.document === \"undefined\")) &&\n        !fetchOptions.headers.referer\n      ) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      /**\n       * Check for a global fetch first and use it if available. This allows us to use the default\n       * configuration of fetch-mock in tests.\n       */\n\n      /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n      return globalThis.fetch\n        ? globalThis.fetch(url, fetchOptions)\n        : getFetch().then(({ fetch }) => {\n            return fetch(url, fetchOptions);\n          });\n    })\n    .then((response: any) => {\n      // the request got back an error status code (4xx, 5xx)\n      if (!response.ok) {\n        // we need to determine if the server returned a JSON body with more details.\n        // this is the format used by newer services such as the Places and Style service.\n        return response\n          .json()\n          .then((jsonError: any) => {\n            // The body can be parsed as JSON\n            const { status, statusText } = response;\n            const { message, details } = jsonError.error;\n            const formattedMessage = `${message}. ${\n              details ? details.join(\" \") : \"\"\n            }`.trim();\n\n            throw new ArcGISRequestError(\n              formattedMessage,\n              `HTTP ${status} ${statusText}`,\n              jsonError,\n              url,\n              options\n            );\n          })\n          .catch((e: any) => {\n            // if we already were about to format this as an ArcGISRequestError throw that error\n            if (e.name === \"ArcGISRequestError\") {\n              throw e;\n            }\n\n            // server responded w/ an actual error (404, 500, etc) but we could not parse it as JSON\n            const { status, statusText } = response;\n            throw new ArcGISRequestError(\n              statusText,\n              `HTTP ${status}`,\n              response,\n              url,\n              options\n            );\n          });\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then((data) => {\n      // Check for an error in the JSON body of a successful response.\n      // Most ArcGIS Server services will return a successful status code but include an error in the response body.\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          originalUrl,\n          params,\n          options,\n          originalAuthError\n        );\n\n        if (originalAuthError) {\n          /* If the request was made to an unfederated service that\n          didn't require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n\n          (options.authentication as any).federatedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000)\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  return internalRequest(url, requestOptions).catch((e) => {\n    if (\n      e instanceof ArcGISAuthError &&\n      requestOptions.authentication &&\n      typeof requestOptions.authentication !== \"string\" &&\n      requestOptions.authentication.canRefresh &&\n      requestOptions.authentication.refreshCredentials\n    ) {\n      return e.retry(() => {\n        return (requestOptions.authentication as any).refreshCredentials();\n      }, 1);\n    } else {\n      return Promise.reject(e);\n    }\n  });\n}\n"]}