{"version":3,"file":"ArcGISIdentityManager.js","sourceRoot":"","sources":["../../src/ArcGISIdentityManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport { ArcGISAuthError, request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { decodeQueryString } from \"./utils/decode-query-string.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { IUser } from \"./types/user.js\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token.js\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils.js\";\nimport { IAppAccess, validateAppAccess } from \"./validate-app-access.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { revokeToken } from \"./revoke-token.js\";\nimport { generateCodeChallenge } from \"./utils/generate-code-challenge.js\";\nimport { generateRandomString } from \"./utils/generate-random-string.js\";\nimport { ArcGISAccessDeniedError } from \"./utils/ArcGISAccessDeniedError.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { NODEJS_DEFAULT_REFERER_HEADER } from \"./index.js\";\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.fromToken}.\n */\nexport interface IFromTokenOptions {\n  /**\n   * The token you want to create the {@linkcode ArcGISIdentityManager} instance with.\n   */\n  token: string;\n  /**\n   * Date when this token will expire.\n   */\n  tokenExpires?: Date;\n  /**\n   * The portal that the token was generated from. Defaults to `https://www.arcgis.com/sharing/rest`. Required if you are not using the default portal.\n   */\n  portal?: string;\n  /**\n   * If the token is for a specific instance of ArcGIS Server, set `portal` to `null` or `undefined` and set `server` the URL of the ArcGIS Server.\n   */\n  server?: string;\n  /**\n   * Optionally set the username. Recommended if available.\n   */\n  username?: string;\n  /**\n   * Optional client ID. Used for refreshing expired tokens.\n   */\n  clientId?: string;\n  /**\n   * Optional set a valid redirect URL for the registered client ID. Used internally to refresh expired tokens.\n   */\n  redirectUri?: string;\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.signIn}.\n */\nexport interface ISignInOptions {\n  username: string;\n  password: string;\n  portal?: string;\n  referer?: string;\n}\n\nexport type AuthenticationProvider =\n  | \"arcgis\"\n  | \"facebook\"\n  | \"google\"\n  | \"github\"\n  | \"apple\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\n/**\n * Represents the [`ServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-ServerInfo.html) class\n * in the ArcGIS API for JavaScript.\n */\nexport interface IServerInfo {\n  server: string;\n  hasPortal: boolean;\n  hasServer: boolean;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `ArcGISIdentityManager`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * The requested validity in minutes for a refresh token/access token. Defaults to 20160 (2 weeks).\n   *\n   * When using PKCE or server-based OAuth this will control the duration of the refresh token. In this scenario, access tokens will always have a 30 minute validity.\n   *\n   * When using implicit auth (`pkce: false`) in {@linkcode ArcGISIdentityManager.beginOAuth2}, this controls the duration of the access token and no refresh token will be granted.\n   */\n  expiration?: number;\n\n  /**\n   * If `true` will use the PKCE oAuth 2.0 extension spec in to authorize the user and obtain a token. A value of `false` will use the deprecated oAuth 2.0 implicit grant type.\n   *\n   * @browserOnly\n   */\n  pkce?: boolean;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * The window features passed to [window.open()](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) when `popup` is true. Defaults to `height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes`\n   *\n   * @browserOnly\n   */\n  popupWindowFeatures?: string;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Sets the color theme of the oAuth 2.0 authorization screen. Will use the system preference or a light theme by default.\n   */\n  style?: \"\" | \"light\" | \"dark\";\n\n  /**\n   * Custom value for oAuth 2.0 state. A random identifier will be generated if this is not passed.\n   */\n  state?: string;\n\n  [key: string]: any;\n}\n\n/**\n * Options for the {@linkcode ArcGISIdentityManager} constructor.\n */\nexport interface IArcGISIdentityManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  referer?: string;\n}\n\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} and {@linkcode ArcGISIdentityManager.completeOAuth2} for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} and {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.fromToken} for when you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} for creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} for authenticating directly with a user's username and password for environments with a user interface for oAuth 2.0.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nexport class ArcGISIdentityManager implements IAuthenticationManager {\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  /**\n   * The currently authenticated user.\n   */\n  get username() {\n    if (this._username) {\n      return this._username;\n    }\n\n    if (this._user && this._user.username) {\n      return this._user.username;\n    }\n  }\n\n  /**\n   * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n   */\n  get canRefresh() {\n    if (this.username && this.password) {\n      return true;\n    }\n\n    if (this.clientId && this.refreshToken && this.redirectUri) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n   *\n   * If `popup` is `true` (the default) this method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance and you must call {@linkcode ArcGISIdentityManager.completeOAuth2()} on the page defined in the `redirectUri`. Otherwise it will return undefined and the {@linkcode ArcGISIdentityManager.completeOAuth2()} method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   *\n   * @browserOnly\n   */\n  public static beginOAuth2(\n    options: IOAuth2Options,\n    win?: any\n  ): Promise<ArcGISIdentityManager> | undefined {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    const {\n      portal,\n      provider,\n      clientId,\n      expiration,\n      redirectUri,\n      popup,\n      popupWindowFeatures,\n      locale,\n      params,\n      style,\n      pkce,\n      state\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        expiration: 20160,\n        popup: true,\n        popupWindowFeatures:\n          \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n        locale: \"\",\n        style: \"\",\n        pkce: true\n      },\n      ...options\n    };\n\n    /**\n     * Generate a  random string for the `state` param and store it in local storage. This is used\n     * to validate that all parts of the oAuth process were performed on the same client.\n     */\n    const stateId = state || generateRandomString(win);\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n\n    win.localStorage.setItem(stateStorageKey, stateId);\n\n    // Start setting up the URL to the authorization screen.\n    let authorizeUrl = `${cleanUrl(portal)}/oauth2/authorize`;\n    const authorizeUrlParams: any = {\n      client_id: clientId,\n      response_type: pkce ? \"code\" : \"token\",\n      expiration: expiration,\n      redirect_uri: redirectUri,\n      state: JSON.stringify({\n        id: stateId,\n        originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n      }),\n      locale: locale,\n      style: style\n    };\n\n    // If we are authorizing through a specific social provider update the params and base URL.\n    if (provider !== \"arcgis\") {\n      authorizeUrl = `${cleanUrl(portal)}/oauth2/social/authorize`;\n      authorizeUrlParams.socialLoginProviderName = provider;\n      authorizeUrlParams.autoAccountCreateForSocial = true;\n    }\n\n    /**\n     * set a value that will be set to a promise which will later resolve when we are ready\n     * to send users to the authorization page.\n     */\n    let setupAuth;\n\n    if (pkce) {\n      /**\n       * If we are authenticating with PKCE we need to generate the code challenge which is\n       * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n       */\n      const codeVerifier = generateRandomString(win);\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n\n      win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n\n      setupAuth = generateCodeChallenge(codeVerifier, win).then(function (\n        codeChallenge\n      ) {\n        authorizeUrlParams.code_challenge_method = codeChallenge\n          ? \"S256\"\n          : \"plain\";\n\n        authorizeUrlParams.code_challenge = codeChallenge\n          ? codeChallenge\n          : codeVerifier;\n      });\n    } else {\n      /**\n       * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n       */\n      setupAuth = Promise.resolve();\n    }\n\n    /**\n     * Once we are done setting up with (for PKCE) we can start the auth process.\n     */\n    return setupAuth.then(() => {\n      // combine the authorize URL and params\n      authorizeUrl = `${authorizeUrl}?${encodeQueryString(authorizeUrlParams)}`;\n\n      // append additional params passed by the user\n      if (params) {\n        authorizeUrl = `${authorizeUrl}&${encodeQueryString(params)}`;\n      }\n\n      if (popup) {\n        // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n        return new Promise((resolve, reject) => {\n          // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n          win.addEventListener(\n            `arcgis-rest-js-popup-auth-${clientId}`,\n            (e: CustomEvent<any>) => {\n              if (e.detail.error === \"access_denied\") {\n                const error = new ArcGISAccessDeniedError();\n                reject(error);\n                return error;\n              }\n\n              if (e.detail.errorMessage) {\n                const error = new ArcGISAuthError(\n                  e.detail.errorMessage,\n                  e.detail.error\n                );\n                reject(error);\n                return error;\n              }\n\n              resolve(\n                new ArcGISIdentityManager({\n                  clientId,\n                  portal,\n                  ssl: e.detail.ssl,\n                  token: e.detail.token,\n                  tokenExpires: e.detail.expires,\n                  username: e.detail.username,\n                  refreshToken: e.detail.refreshToken,\n                  refreshTokenExpires: e.detail.refreshTokenExpires,\n                  redirectUri\n                })\n              );\n            },\n            {\n              once: true\n            }\n          );\n\n          // open the popup\n          win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n\n          win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n        });\n      } else {\n        // If we aren't authenticating with a popup just send the user to the authorization page.\n        win.location.href = authorizeUrl;\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n   * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   * @browserOnly\n   */\n  public static completeOAuth2(options: IOAuth2Options, win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    // pull out necessary options\n    const { portal, clientId, popup, pkce, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        popup: true,\n        pkce: true\n      },\n      ...options\n    };\n\n    // pull the saved state id out of local storage\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n    const stateId = win.localStorage.getItem(stateStorageKey);\n\n    // get the params provided by the server and compare the server state with the client saved state\n    const params = decodeQueryString(\n      pkce\n        ? win.location.search.replace(/^\\?/, \"\")\n        : win.location.hash.replace(/^#/, \"\")\n    );\n\n    const state = params && params.state ? JSON.parse(params.state) : undefined;\n\n    function reportError(\n      errorMessage: string,\n      error: string,\n      originalUrl?: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              error,\n              errorMessage\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      if (originalUrl) {\n        win.history.replaceState(win.history.state, \"\", originalUrl);\n      }\n\n      if (error === \"access_denied\") {\n        return Promise.reject(new ArcGISAccessDeniedError());\n      }\n\n      return Promise.reject(new ArcGISAuthError(errorMessage, error));\n    }\n\n    // create a function to create the final ArcGISIdentityManager from the token info.\n    function createManager(\n      oauthInfo: IFetchTokenResponse,\n      originalUrl: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              ...oauthInfo\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      win.history.replaceState(win.history.state, \"\", originalUrl);\n\n      return new ArcGISIdentityManager({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username,\n        refreshToken: oauthInfo.refreshToken,\n        refreshTokenExpires: oauthInfo.refreshTokenExpires,\n        // At 4.0.0 it was possible (in JS code) to not pass redirectUri and fallback to win.location.href, however this broke support for redirect URIs with query params.\n        // Now similar to 3.x.x you must pass the redirectUri parameter explicitly. See https://github.com/Esri/arcgis-rest-js/issues/995\n        redirectUri:\n          redirectUri ||\n          /* istanbul ignore next: TypeScript wont compile if we omit redirectUri */ location.href.replace(\n            location.search,\n            \"\"\n          )\n      });\n    }\n\n    if (!stateId || !state) {\n      return reportError(\n        \"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\",\n        \"no-auth-state\"\n      );\n    }\n\n    if (state.id !== stateId) {\n      return reportError(\n        \"Saved client state did not match server sent state.\",\n        \"mismatched-auth-state\"\n      );\n    }\n\n    if (params.error) {\n      const error = params.error;\n      const errorMessage = params.error_description || \"Unknown error\";\n\n      return reportError(errorMessage, error, state.originalUrl);\n    }\n    /**\n     * If we are using PKCE the authorization code will be in the query params.\n     * For implicit grants the token will be in the hash.\n     */\n    if (pkce && params.code) {\n      const tokenEndpoint = cleanUrl(`${portal}/oauth2/token/`);\n\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n      const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n      win.localStorage.removeItem(codeVerifierStorageKey);\n\n      // exchange our auth code for a token + refresh token\n      return fetchToken(tokenEndpoint, {\n        httpMethod: \"POST\",\n        params: {\n          client_id: clientId,\n          code_verifier: codeVerifier,\n          grant_type: \"authorization_code\",\n          // using location.href here does not support query params but shipped with 4.0.0. See https://github.com/Esri/arcgis-rest-js/issues/995\n          redirect_uri:\n            redirectUri || location.href.replace(location.search, \"\"),\n          code: params.code\n        }\n      })\n        .then((tokenResponse) => {\n          return createManager(\n            { ...tokenResponse, ...state },\n            state.originalUrl\n          );\n        })\n        .catch((e) => {\n          return reportError(e.originalMessage, e.code, state.originalUrl);\n        });\n    }\n\n    if (!pkce && params.access_token) {\n      return Promise.resolve(\n        createManager(\n          {\n            token: params.access_token,\n            expires: new Date(\n              Date.now() + parseInt(params.expires_in, 10) * 1000\n            ),\n            ssl: params.ssl === \"true\",\n            username: params.username,\n            ...state\n          },\n          state.originalUrl\n        )\n      );\n    }\n\n    return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n  }\n\n  /**\n   * Request credentials information from the parent application\n   *\n   * When an application is embedded into another application via an IFrame, the embedded app can\n   * use `window.postMessage` to request credentials from the host application. This function wraps\n   * that behavior.\n   *\n   * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n   *\n   * Note: The parent application will not respond if the embedded app's origin is not:\n   * - the same origin as the parent or *.arcgis.com (JSAPI)\n   * - in the list of valid child origins (REST-JS)\n   *\n   *\n   * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n   * @browserOnly\n   */\n  public static fromParent(parentOrigin: string, win?: any): Promise<any> {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    // Declare handler outside of promise scope so we can detach it\n    let handler: (event: any) => void;\n    // return a promise that will resolve when the handler receives\n    // session information from the correct origin\n    return new Promise((resolve, reject) => {\n      // create an event handler that just wraps the parentMessageHandler\n      handler = (event: any) => {\n        // ensure we only listen to events from the parent\n        if (event.source === win.parent && event.data) {\n          try {\n            return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n          } catch (err) {\n            return reject(err);\n          }\n        }\n      };\n      // add listener\n      win.addEventListener(\"message\", handler, false);\n      win.parent.postMessage(\n        { type: \"arcgis:auth:requestCredential\" },\n        parentOrigin\n      );\n    }).then((manager) => {\n      win.removeEventListener(\"message\", handler, false);\n      return manager;\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, expiration, redirectUri, state }: IOAuth2Options =\n      {\n        ...{ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 },\n        ...options\n      };\n\n    const queryParams: any = {\n      client_id: clientId,\n      expiration,\n      response_type: \"code\",\n      redirect_uri: redirectUri\n    };\n\n    if (state) {\n      queryParams.state = state;\n    }\n\n    const url = `${portal}/oauth2/authorize?${encodeQueryString(queryParams)}`;\n\n    response.writeHead(301, {\n      Location: url\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<ArcGISIdentityManager> {\n    const { portal, clientId, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\"\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    })\n      .then((response) => {\n        return new ArcGISIdentityManager({\n          clientId,\n          portal,\n          ssl: response.ssl,\n          redirectUri,\n          refreshToken: response.refreshToken,\n          refreshTokenExpires: response.refreshTokenExpires,\n          token: response.token,\n          tokenExpires: response.expires,\n          username: response.username\n        });\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new ArcGISIdentityManager({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: options.refreshTokenExpires\n        ? new Date(options.refreshTokenExpires)\n        : undefined,\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: options.tokenExpires\n        ? new Date(options.tokenExpires)\n        : undefined,\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      server: options.server\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [`IdentityManager` class in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html).\n   *\n   * You will need to call both [`IdentityManger.findCredential`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findCredential) and [`IdentityManger.findServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findServerInfo) to obtain both parameters for this method.\n   *\n   * This method can be used with {@linkcode ArcGISIdentityManager.toCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   const credential = esriId.findCredential(\"https://www.arcgis.com/sharing/rest\");\n   *   const serverInfo = esriId.findServerInfo(\"https://www.arcgis.com/sharing/rest\");\n   *\n   *   const manager = ArcGISIdentityManager.fromCredential(credential, serverInfo);\n   * });\n   * ```\n   *\n   * @returns ArcGISIdentityManager\n   */\n  public static fromCredential(\n    credential: ICredential,\n    serverInfo: IServerInfo\n  ) {\n    // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n    // Here, we provide default values for them to cover this condition\n    const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n    const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n\n    if (serverInfo.hasServer) {\n      return new ArcGISIdentityManager({\n        server: credential.server,\n        ssl,\n        token: credential.token,\n        username: credential.userId,\n        tokenExpires: new Date(expires)\n      });\n    }\n    return new ArcGISIdentityManager({\n      portal: cleanUrl(\n        credential.server.includes(\"sharing/rest\")\n          ? credential.server\n          : credential.server + `/sharing/rest`\n      ),\n      ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(expires)\n    });\n  }\n\n  /**\n   * Handle the response from the parent\n   * @param event DOM Event\n   */\n  private static parentMessageHandler(event: any): ArcGISIdentityManager {\n    if (event.data.type === \"arcgis:auth:credential\") {\n      return new ArcGISIdentityManager(event.data.credential);\n    }\n    if (event.data.type === \"arcgis:auth:error\") {\n      const err = new Error(event.data.error.message);\n      err.name = event.data.error.name;\n      throw err;\n    } else {\n      throw new Error(\"Unknown message type.\");\n    }\n  }\n\n  /**\n   * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n   */\n  public static destroy(manager: ArcGISIdentityManager) {\n    return revokeToken({\n      clientId: manager.clientId,\n      portal: manager.portal,\n      token: manager.refreshToken || manager.token\n    });\n  }\n\n  /**\n   * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n   */\n  public static fromToken(\n    options: IFromTokenOptions\n  ): Promise<ArcGISIdentityManager> {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Initialize a {@linkcode ArcGISIdentityManager} with a user's `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n   *\n   * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n   */\n  public static signIn(options: ISignInOptions) {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  public readonly referer: string;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  /**\n   * Hydrated by a call to [getPortal()](#getPortal-summary).\n   */\n  private _portalInfo: any;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingUserRequest: Promise<IUser>;\n  private _pendingPortalRequest: Promise<any>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  private _username: string;\n\n  /**\n   * Internal list of tokens to 3rd party servers (federated servers) that have\n   *  been created via `generateToken`. The object key is the root URL of the server.\n   */\n  private federatedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * Internal list of 3rd party domains that should receive all cookies (credentials: \"include\").\n   * Used to for PKI and IWA workflows in high security environments.\n   */\n  private trustedDomains: string[];\n\n  private _hostHandler: any;\n\n  constructor(options: IArcGISIdentityManagerOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this._username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.server = options.server;\n    this.referer = options.referer;\n\n    this.federatedServers = {};\n    this.trustedDomains = [];\n\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.federatedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [`IdentityManager.registerToken()` method in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#registerToken).\n   * \n   * This method can be used with {@linkcode ArcGISIdentityManager.fromCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   esriId.registerToken(manager.toCredential());\n   * })\n   \n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.server || this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then((response) => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getPortal()\n   *   .then(response => {\n   *     console.log(portal.name); // \"City of ...\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getPortal(requestOptions?: IRequestOptions): Promise<any> {\n    if (this._pendingPortalRequest) {\n      return this._pendingPortalRequest;\n    } else if (this._portalInfo) {\n      return Promise.resolve(this._portalInfo);\n    } else {\n      const url = `${this.portal}/portals/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingPortalRequest = request(url, options).then((response) => {\n        this._portalInfo = response;\n        this._pendingPortalRequest = null;\n        return response;\n      });\n\n      return this._pendingPortalRequest;\n    }\n  }\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   * ```js\n   * manager.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else {\n      return this.getUser().then((user) => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  /**\n   * Get application access information for the current user\n   * see `validateAppAccess` function for details\n   *\n   * @param clientId application client id\n   */\n  public validateAppAccess(clientId: string): Promise<IAppAccess> {\n    return this.getToken(this.portal).then((token) => {\n      return validateAppAccess(token, clientId);\n    });\n  }\n\n  public toJSON(): IArcGISIdentityManagerOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires || undefined,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires || undefined,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      server: this.server\n    };\n  }\n\n  public serialize() {\n    return JSON.stringify(this);\n  }\n  /**\n   * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n   * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n   * this method.\n   *\n   * Internally this adds an event listener on window for the `message` event\n   *\n   * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n   */\n  public enablePostMessageAuth(validChildOrigins: string[], win?: any): any {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n    win.addEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n   * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n   * the event listener and prevent memory leaks\n   */\n  public disablePostMessageAuth(win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    win.removeEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshCredentials(requestOptions?: ITokenRequestOptions) {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this._user = null;\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(\n      new ArcGISTokenRequestError(\n        \"Unable to refresh token. No refresh token or password present.\",\n        ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED\n      )\n    );\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased because in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Returns the proper [`credentials`] option for `fetch` for a given domain.\n   * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n   * Used internally by underlying request methods to add support for specific security considerations.\n   *\n   * @param url The url of the request\n   * @returns \"include\" or \"same-origin\"\n   */\n  public getDomainCredentials(url: string): RequestCredentials {\n    if (!this.trustedDomains || !this.trustedDomains.length) {\n      return \"same-origin\";\n    }\n\n    return this.trustedDomains.some((domainWithProtocol) => {\n      return url.startsWith(domainWithProtocol);\n    })\n      ? \"include\"\n      : \"same-origin\";\n  }\n\n  /**\n   * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n   */\n  public signOut() {\n    return ArcGISIdentityManager.destroy(this);\n  }\n\n  /**\n   * Return a function that closes over the validOrigins array and\n   * can be used as an event handler for the `message` event\n   *\n   * @param validOrigins Array of valid origins\n   */\n  private createPostMessageHandler(\n    validOrigins: string[]\n  ): (event: any) => void {\n    // return a function that closes over the validOrigins and\n    // has access to the credential\n    return (event: any) => {\n      // Verify that the origin is valid\n      // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n      // is in the array via exact match. More info about avoiding postMessage xss issues here\n      // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n      const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n      // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n      // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n      // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n      // use a list of valid origins\n\n      // Ensure the message type is something we want to handle\n      const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n      // Ensure we don't pass an expired session forward\n      const isTokenValid = this.tokenExpires.getTime() > Date.now();\n\n      if (isValidOrigin && isValidType) {\n        let msg = {};\n        if (isTokenValid) {\n          const credential = this.toJSON();\n          msg = {\n            type: \"arcgis:auth:credential\",\n            credential\n          };\n        } else {\n          msg = {\n            type: \"arcgis:auth:error\",\n            error: {\n              name: \"tokenExpiredError\",\n              message:\n                \"Token was expired, and not returned to the child application\"\n            }\n          };\n        }\n\n        event.source.postMessage(msg, event.origin);\n      }\n    };\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `federatedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.federatedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(\n      () => {\n        return request(`${root}/rest/info`, {\n          credentials: this.getDomainCredentials(url)\n        })\n          .then((serverInfo) => {\n            if (serverInfo.owningSystemUrl) {\n              /**\n               * if this server is not owned by this portal\n               * bail out with an error since we know we wont\n               * be able to generate a token\n               */\n              if (!isFederated(serverInfo.owningSystemUrl, this.portal)) {\n                throw new ArcGISTokenRequestError(\n                  `${url} is not federated with ${this.portal}.`,\n                  ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n                );\n              } else {\n                /**\n                 * if the server is federated, use the relevant token endpoint.\n                 */\n                return request(\n                  `${serverInfo.owningSystemUrl}/sharing/rest/info`,\n                  requestOptions\n                );\n              }\n            } else if (\n              serverInfo.authInfo &&\n              this.federatedServers[root] !== undefined\n            ) {\n              /**\n               * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n               * federation, but the root server url is recognized, use its built in token endpoint.\n               */\n              return Promise.resolve({\n                authInfo: serverInfo.authInfo\n              });\n            } else {\n              throw new ArcGISTokenRequestError(\n                `${url} is not federated with any portal and is not explicitly trusted.`,\n                ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n              );\n            }\n          })\n          .then((serverInfo: any) => {\n            // an expired token cant be used to generate a new token so refresh our credentials before trying to generate a server token\n            if (this.token && this.tokenExpires.getTime() < Date.now()) {\n              // If we are authenticated to a single server just refresh with username and password and use the new credentials as the credentials for this server.\n              if (this.server) {\n                return this.refreshCredentials().then(() => {\n                  return {\n                    token: this.token,\n                    expires: this.tokenExpires\n                  };\n                });\n              }\n\n              // Otherwise refresh the credentials for the portal and generate a URL for the specific server.\n              return this.refreshCredentials().then(() => {\n                return this.generateTokenForServer(\n                  serverInfo.authInfo.tokenServicesUrl,\n                  root\n                );\n              });\n            } else {\n              return this.generateTokenForServer(\n                serverInfo.authInfo.tokenServicesUrl,\n                root\n              );\n            }\n          })\n          .then((response) => {\n            this.federatedServers[root] = response;\n            delete this._pendingTokenRequests[root];\n            return response.token;\n          });\n      }\n    );\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Generates a token for a given `serverUrl` using a given `tokenServicesUrl`.\n   */\n  private generateTokenForServer(tokenServicesUrl: string, serverUrl: string) {\n    return request(tokenServicesUrl, {\n      params: {\n        token: this.token,\n        serverUrl,\n        expiration: this.tokenDuration\n      }\n    })\n      .then((response) => {\n        return {\n          token: response.token,\n          expires: new Date(response.expires - 1000 * 60 * 5)\n        };\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.GENERATE_TOKEN_FOR_SERVER_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshCredentials(\n        requestOptions\n      ).then(() => {\n        this._pendingTokenRequests[this.portal] = null;\n        return this.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const params = {\n      username: this.username,\n      password: this.password,\n      expiration: this.tokenDuration,\n      client: \"referer\",\n      referer: this.referer\n        ? this.referer\n        : typeof window !== \"undefined\" &&\n          typeof window.document !== \"undefined\" &&\n          window.location &&\n          window.location.origin\n        ? window.location.origin\n        : /* istanbul ignore next */\n          NODEJS_DEFAULT_REFERER_HEADER\n    };\n\n    return (\n      this.server\n        ? request(`${this.getServerRootUrl(this.server)}/rest/info`).then(\n            (response) => {\n              return request(response.authInfo.tokenServicesUrl, {\n                params,\n                ...requestOptions\n              });\n            }\n          )\n        : request(`${this.portal}/generateToken`, {\n            params,\n            ...requestOptions\n          })\n    )\n      .then((response: any) => {\n        this.updateToken(response.token, new Date(response.expires));\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    // If our refresh token expires sometime in the next 24 hours then refresh the refresh token\n    const ONE_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() - ONE_DAY_IN_MILLISECONDS < Date.now()\n    ) {\n      return this.exchangeRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        return this.updateToken(response.token, response.expires);\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Update the stored {@linkcode ArcGISIdentityManager.token} and {@linkcode ArcGISIdentityManager.tokenExpires} properties. This method is used internally when refreshing tokens.\n   * You may need to call this if you want update the token with a new token from an external source.\n   *\n   * @param newToken The new token to use for this instance of `ArcGISIdentityManager`.\n   * @param newTokenExpiration The new expiration date of the token.\n   * @returns\n   */\n  updateToken(newToken: string, newTokenExpiration: Date) {\n    this._token = newToken;\n    this._tokenExpires = newTokenExpiration;\n\n    return this;\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  exchangeRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        this._token = response.token;\n        this._tokenExpires = response.expires;\n        this._refreshToken = response.refreshToken;\n        this._refreshTokenExpires = response.refreshTokenExpires;\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n   * so we can check them later.\n   *\n   * @returns this\n   */\n  private fetchAuthorizedDomains() {\n    // if this token is for a specific server or we don't have a portal\n    // don't get the portal info because we cant get the authorizedCrossOriginDomains\n    if (this.server || !this.portal) {\n      return Promise.resolve(this);\n    }\n\n    return this.getPortal().then((portalInfo) => {\n      /**\n       * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n       * normalizes to https://secure.esri.com so we can use startsWith later.\n       */\n      if (\n        portalInfo.authorizedCrossOriginDomains &&\n        portalInfo.authorizedCrossOriginDomains.length\n      ) {\n        this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n          .filter((d: string) => !d.startsWith(\"http://\"))\n          .map((d: string) => {\n            if (d.startsWith(\"https://\")) {\n              return d;\n            } else {\n              return `https://${d}`;\n            }\n          });\n      }\n      return this;\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n * @internal\n *\n */ /* istanbul ignore next */\nfunction UserSession(options: IArcGISIdentityManagerOptions) {\n  console.log(\n    \"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManager' instead.\"\n  );\n\n  return new ArcGISIdentityManager(options);\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.beginOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.beginOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.beginOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.beginOAuth2' is deprecated. Use 'ArcGISIdentityManager.beginOAuth2' instead.\"\n  );\n\n  return ArcGISIdentityManager.beginOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.completeOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.completeOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.completeOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.completeOAuth2()' is deprecated. Use 'ArcGISIdentityManager.completeOAuth2()' instead.\"\n  );\n  if (args.length <= 1) {\n    console.warn(\n      \"WARNING:, 'UserSession.completeOAuth2()' is now async and returns a promise the resolves to an instance of `ArcGISIdentityManager`.\"\n    );\n  }\n\n  return ArcGISIdentityManager.completeOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromParent}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromParent = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromParent>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.fromParent' is deprecated. Use 'ArcGISIdentityManager.fromParent' instead.\"\n  );\n\n  return ArcGISIdentityManager.fromParent(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.authorize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.authorize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.authorize>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.authorize' is deprecated. Use 'ArcGISIdentityManager.authorize' instead.\"\n  );\n\n  return ArcGISIdentityManager.authorize(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.exchangeAuthorizationCode = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.exchangeAuthorizationCode>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.exchangeAuthorizationCode' is deprecated. Use 'ArcGISIdentityManager.exchangeAuthorizationCode' instead.\"\n  );\n\n  return ArcGISIdentityManager.exchangeAuthorizationCode(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromCredential}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromCredential = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromCredential>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.fromCredential' is deprecated. Use 'ArcGISIdentityManager.fromCredential' instead.\"\n  );\n\n  console.warn(\n    \"WARNING:, 'UserSession.fromCredential' now requires a `ServerInfo` object from the JS API as a second parameter.\"\n  );\n\n  return ArcGISIdentityManager.fromCredential(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.deserialize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.deserialize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.deserialize>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.deserialize' is deprecated. Use 'ArcGISIdentityManager.deserialize' instead.\"\n  );\n\n  return ArcGISIdentityManager.deserialize(...args);\n};\n\nexport { UserSession };\n"]}