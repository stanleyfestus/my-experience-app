{"version":3,"file":"with-options.js","sourceRoot":"","sources":["../../../src/utils/with-options.ts"],"names":[],"mappings":";;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,SAAgB,WAAW,CAIzB,cAA+B,EAC/B,IAAO;IAEP,OAAO,CAAC,GAAG,IAAmB,EAAiB,EAAE;QAC/C,MAAM,OAAO,GACX,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ;YACvC,CAAC,iCACM,cAAc,GACd,IAAI,CAAC,GAAG,EAAE,EAEjB,CAAC,CAAC,cAAc,CAAC;QAErB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC;AACJ,CAAC;AAlBD,kCAkBC","sourcesContent":["import { IRequestOptions } from \"../utils/IRequestOptions.js\";\n\n/**\n * Allows you to wrap individual methods with a default set of request options. This is useful to avoid setting the same option more then once and allows for interacting and setting defaults in a functional manner.\n *\n * ```js\n * import { withOptions } from \"@esri/arcgis-rest-request\";\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const queryTrails = withOptions({\n *   url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0/\"}, queryFeatures);\n *\n * queryTrails({\n *   where: \"ELEV_FT > 1000\"\n * }).then(result);\n *\n * const queryTrailsAsUser = withOptions({\n *   authentication: ArcGISIdentityManager\n * }, queryTrails);\n *\n * queryTrailsAsUser({\n *   where: \"TRL_NAME LIKE '%backbone%'\"\n * }).then(result);\n * ```\n *\n * @param defaultOptions The options to pass into to the `func`.\n * @param func Any function that accepts anything extending `IRequestOptions` as its last parameter.\n * @returns A copy of `func` with the `defaultOptions` passed in as defaults.\n */\nexport function withOptions<\n  K extends IRequestOptions,\n  T extends (...args: any[]) => any\n>(\n  defaultOptions: IRequestOptions,\n  func: T\n): (...funcArgs: Parameters<T>) => ReturnType<T> {\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const options: K =\n      typeof args[args.length - 1] === \"object\"\n        ? {\n            ...defaultOptions,\n            ...args.pop()\n          }\n        : defaultOptions;\n\n    return func(...[...args, options]);\n  };\n}\n"]}