"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowUndefinedError = exports.injectScriptElement = exports.injectScriptElementAsync = void 0;
const ESRI_TELEMETRY_DATA_ATTRIBUTE = 'esri-telemetry';
function injectScriptElementAsync(attributes) {
    const onloadPromise = new Promise((resolve, reject) => {
        attributes.onload = resolve;
        attributes.onerror = reject;
        const script = injectScriptElement(attributes);
        if (!script || attributes.body) {
            // this is for the case where the script is already loaded or it has a body instead of a src
            resolve();
        }
    });
    return onloadPromise;
}
exports.injectScriptElementAsync = injectScriptElementAsync;
function scriptExists(attributes) {
    const { id, dataAttribute } = attributes;
    return !!document.getElementById(id) || !!document.querySelector(`[data-${ESRI_TELEMETRY_DATA_ATTRIBUTE}="${dataAttribute}"]`);
}
function injectScriptElement(attributes) {
    const { body, src, id, dataAttribute, section = 'body', type = 'text/javascript', async = false, defer = false, onload, onerror } = attributes;
    if (typeof window === 'undefined') {
        throw new WindowUndefinedError('Window is undefined: Cannot add script element.');
    }
    if (scriptExists(attributes)) {
        console.log(`script (${id || dataAttribute}) is already present, skipping`);
        return;
    }
    const scriptElement = createScriptElementWithAttributes({
        id,
        dataAttribute,
        type,
        async,
        defer,
        body,
        src,
        onload,
        onerror
    });
    return section === 'body'
        ? document.body.appendChild(scriptElement)
        : document.head.appendChild(scriptElement);
}
exports.injectScriptElement = injectScriptElement;
class WindowUndefinedError extends Error {
}
exports.WindowUndefinedError = WindowUndefinedError;
function createScriptElementWithAttributes({ id, dataAttribute, type, async, defer, body, src, onload, onerror }) {
    const scriptElement = document.createElement('script');
    if (id) {
        scriptElement.id = id;
    }
    if (dataAttribute) {
        scriptElement.setAttribute(`data-${ESRI_TELEMETRY_DATA_ATTRIBUTE}`, dataAttribute);
    }
    src && (scriptElement.src = src);
    body && (scriptElement.innerText = body);
    scriptElement.type = type;
    scriptElement.async = async;
    scriptElement.defer = defer;
    onload && (scriptElement.onload = onload);
    onerror && (scriptElement.onerror = onerror);
    return scriptElement;
}
//# sourceMappingURL=inject-script-element.js.map