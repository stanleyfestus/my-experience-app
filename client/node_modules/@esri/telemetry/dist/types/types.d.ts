export declare type GenericObject = {
    [key: string]: any;
};
export interface Attributes {
    details?: string;
}
export declare type EventData = GenericObject;
export declare type StorageOptions = GenericObject;
export interface Portal {
    id?: unknown;
    eueiEnabled?: boolean;
    user?: User;
    ipCntryCode?: string;
    subscriptionInfo?: subscriptionInfo;
}
interface subscriptionInfo {
    type: string;
}
export interface ILogger {
    debug: Function;
    warn: Function;
    info: Function;
    error: Function;
}
export interface TelemetryOptions {
    plugins?: Tracker[];
    user?: string | User;
    portal?: Portal;
    disabled?: boolean;
    test?: boolean;
    debug?: boolean;
    suppressDisabledWarnings?: boolean;
    omitComplexData?: boolean;
    logger?: ILogger;
}
export interface Tracker {
    name?: string;
    disabled?: boolean;
    hasError?: boolean;
    getScriptTags?(): string;
    init(): Promise<void>;
    logEvent?(event: EventData): Promise<unknown>;
    logPageView?(page: string, attributes: any): Promise<unknown>;
    enable?(): void;
    disable?(): void;
}
export interface User {
    email?: string;
    username?: string;
    orgId?: string;
    accountType?: string;
    internalUser?: boolean;
    lastLogin?: string;
    created?: string;
}
export interface Workflow {
    name?: string;
    start?: number;
    steps?: unknown[];
    step?: string;
    details?: string;
    workflowId?: string;
}
export interface WorkflowOptions {
    name?: string;
    step?: string;
    details?: string;
}
declare type Noop = () => void;
export interface ITelemetryPlugin {
    name: string;
    disabled: boolean;
    _getScripts(): ScriptElementAttributes[];
    getScriptTags(): string;
    init(): Promise<void>;
    logPageView: Noop | ((page: string, options: ILogPageViewOptions) => boolean | Record<string, any>);
    logEvent: Noop | ((event: EventData, options: ILogPageViewOptions) => boolean | Record<string, any>);
}
export interface ILogPageViewOptions {
    [key: string]: any;
}
export interface ITelemetryOptions {
    plugins?: ITelemetryPlugin[];
    user?: string | IUser;
    portal?: IPortal;
    disabled?: boolean;
    test?: boolean;
    debug?: boolean;
    omitComplexData?: boolean;
}
export interface ITelemetryPluginOptions {
    disabled?: boolean;
}
export interface IPortal {
    id?: unknown;
    eueiEnabled?: boolean;
    user?: IUser;
    ipCntryCode?: string;
    subscriptionInfo?: ISubscriptionInfo;
}
export interface IUser {
    email?: string;
    username?: string;
    orgId?: string;
    accountType?: string;
    internalUser?: boolean;
    lastLogin?: string;
    created?: string;
}
interface ISubscriptionInfo {
    type: string;
}
export interface ScriptElementAttributes {
    src?: string;
    body?: string;
    id?: string;
    dataAttribute?: string;
    section?: string;
    type?: string;
    async?: boolean;
    defer?: boolean;
    onload?: () => void;
    onerror?: () => void;
}
export {};
