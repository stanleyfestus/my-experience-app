import { Attributes, EventData, TelemetryOptions, User, Workflow } from './types';
export * from './utils';
/**
 * Telemetry class
 */
export declare class Telemetry implements TelemetryCore<TelemetryOptions> {
    user: User;
    private options;
    private trackers;
    private debug;
    private disabled;
    private suppressDisabledWarnings;
    private logger;
    constructor(options: TelemetryOptions);
    private initializeTrackers;
    getScriptTags(): string;
    init(): Promise<void>;
    setUser(user?: string | User, orgType?: string): void;
    logPageView(page: string, event?: EventData, options?: TelemetryOptions): boolean;
    logEvent(event: EventData, options?: TelemetryOptions): boolean;
    logError(event?: EventData): void;
    startWorkflow(name: string, attributes?: Attributes): Workflow;
    stepWorkflow(name: string, step: string, attributes?: Attributes): void;
    endWorkflow(name: string, attributes?: Attributes): void;
    cancelWorkflow(name: string, attributes?: {}): void;
    getWorkflow(name: string): any;
    private saveWorkflow;
    private deleteWorkflow;
    private logWorkflow;
    preProcess(event?: EventData, options?: TelemetryOptions): Record<string, any>;
    disableTracker(trackerName: string): void;
    enableTracker(trackerName: string): void;
}
interface TelemetryWorkflowMethods {
    startWorkflow(name: string, attributes: Attributes): Workflow;
    stepWorkflow(name: string, step: string, attributes: Attributes): void;
    endWorkflow(name: string, attributes: Attributes): void;
    cancelWorkflow(name: string, attributes: Attributes): void;
    getWorkflow(name: string): Workflow | void;
}
interface TelemetryTrackerMethods {
    disableTracker(trackerName: string): void;
    enableTracker(trackerName: string): void;
}
declare type Noop = () => void;
export interface TelemetryLogMethods {
    logPageView(page: string, event: EventData, options: TelemetryOptions): boolean | Record<string, any> | Noop;
    logEvent(event: EventData, options: TelemetryOptions): boolean | Record<string, any> | Noop;
    logError?(event: EventData): void | Noop;
}
interface TelemetryScriptMethods {
    getScriptTags(): string;
    init(): Promise<void>;
}
interface TelemetryCore<TelemetryOptions> extends TelemetryLogMethods, TelemetryWorkflowMethods, TelemetryTrackerMethods, TelemetryScriptMethods {
    preProcess?(event: EventData, options: TelemetryOptions): EventData;
}
