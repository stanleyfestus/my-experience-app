{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../src/items/remove.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAAwE;AAExE,iEAAyD;AACzD,6CAMsB;AAEtB;;;;;;;;;;;;;;GAcG;AACH,SAAgB,UAAU,CACxB,cAAgC;IAEhC,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,SAAS,CAAC;QACV,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AATD,gCASC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,sBAAsB,CACpC,cAA8C;IAE9C,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,IAAA,gCAAY,EACzB,cAAc,CACf,kBAAkB,KAAK,qBAAqB,CAAC;QAE9C,MAAM,OAAO,GAAG,IAAA,wCAAkB,EAChC,cAAc,EACd,CAAC,cAAc,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EACzD,EAAE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE,EAAE,CACzC,CAAC;QAEF,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAhBD,wDAgBC;AAED;;;;;GAKG;AACH,SAAgB,kBAAkB,CAChC,cAA0C;IAE1C,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,kBAAkB,CAAC;QAEnB,8BAA8B;QAC9B,cAAc,CAAC,MAAM,mCAChB,cAAc,CAAC,MAAM,KACxB,QAAQ,EAAE,cAAc,CAAC,QAAQ,GAClC,CAAC;QAEF,oFAAoF;QACpF,IAAI,OAAO,cAAc,CAAC,SAAS,KAAK,WAAW,EAAE;YACnD,cAAc,CAAC,MAAM,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;SAC5D;QAED,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AArBD,gDAqBC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,YAAY,CAAC,cAAgC;IAQ3D,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,IAAA,gCAAY,EACzB,cAAc,CACf,kBAAkB,kBAAkB,CAAC,KAAK,CAAC,IAC1C,cAAc,CAAC,QACjB,SAAS,CAAC;QACV,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AAhBD,oCAgBC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IUserItemOptions,\n  IRemoveItemResourceOptions,\n  IFolderIdOptions,\n  determineOwner,\n  IManageItemRelationshipOptions\n} from \"./helpers.js\";\n\n/**\n * Delete an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-item.htm) for more information.\n *\n * ```js\n * import { removeItem } from \"@esri/arcgis-rest-portal\";\n *\n * removeItem({\n *   id: \"3ef\",\n *   authentication\n * })\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item.\n */\nexport function removeItem(\n  requestOptions: IUserItemOptions\n): Promise<{ success: boolean; itemId: string }> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/delete`;\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Remove a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-relationship.htm) for more information.\n *\n * ```js\n * import { removeItemRelationship } from \"@esri/arcgis-rest-portal\";\n *\n * removeItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function removeItemRelationship(\n  requestOptions: IManageItemRelationshipOptions\n): Promise<{ success: boolean }> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(\n      requestOptions\n    )}/content/users/${owner}/deleteRelationship`;\n\n    const options = appendCustomParams<IManageItemRelationshipOptions>(\n      requestOptions,\n      [\"originItemId\", \"destinationItemId\", \"relationshipType\"],\n      { params: { ...requestOptions.params } }\n    );\n\n    return request(url, options);\n  });\n}\n\n/**\n * Remove a resource associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes an item resource.\n */\nexport function removeItemResource(\n  requestOptions: IRemoveItemResourceOptions\n): Promise<{ success: boolean }> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/removeResources`;\n\n    // mix in user supplied params\n    requestOptions.params = {\n      ...requestOptions.params,\n      resource: requestOptions.resource\n    };\n\n    // only override the deleteAll param specified previously if it is passed explicitly\n    if (typeof requestOptions.deleteAll !== \"undefined\") {\n      requestOptions.params.deleteAll = requestOptions.deleteAll;\n    }\n\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Delete a non-root folder and all the items it contains. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/delete-folder.htm) for more information.\n *\n * ```js\n * import { removeFolder } from \"@esri/arcgis-rest-portal\";\n *\n * removeFolder({\n *   folderId: \"fe4\",\n *   owner: \"c@sey\",\n *   authentication\n * })\n *   .then(response)\n *\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that deletes a folder\n */\nexport function removeFolder(requestOptions: IFolderIdOptions): Promise<{\n  success: boolean;\n  folder: {\n    username: string;\n    id: string;\n    title: string;\n  };\n}> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(\n      requestOptions\n    )}/content/users/${encodeURIComponent(owner)}/${\n      requestOptions.folderId\n    }/delete`;\n    return request(url, requestOptions);\n  });\n}\n"]}