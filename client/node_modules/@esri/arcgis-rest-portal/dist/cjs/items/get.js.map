{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../src/items/get.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  appendCustomParams,\n  IGroup\n} from \"@esri/arcgis-rest-request\";\nimport { IItem } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { scrubControlChars } from \"../util/scrub-control-chars.js\";\nimport {\n  IItemDataOptions,\n  IItemRelationshipOptions,\n  IUserItemOptions,\n  determineOwner,\n  FetchReadMethodName\n} from \"./helpers.js\";\n\n/**\n * ```\n * import { getItem } from \"@esri/arcgis-rest-portal\";\n * //\n * getItem(\"ae7\")\n *   .then(response);\n * // or\n * getItem(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get an item by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item.htm) for more information.\n *\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function getItem(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IItem> {\n  const url = getItemBaseUrl(id, requestOptions);\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * Get the fully qualified base URL to the REST end point for an item.\n * @param id Item Id\n * @param portalUrlOrRequestOptions a portal URL or request options\n * @returns URL to the item's REST end point, defaults to `https://www.arcgis.com/sharing/rest/content/items/{id}`\n */\nexport const getItemBaseUrl = (\n  id: string,\n  portalUrlOrRequestOptions?: string | IRequestOptions\n) => {\n  const portalUrl =\n    typeof portalUrlOrRequestOptions === \"string\"\n      ? portalUrlOrRequestOptions\n      : getPortalUrl(portalUrlOrRequestOptions);\n  return `${portalUrl}/content/items/${id}`;\n};\n\n/**\n * ```\n * import { getItemData } from \"@esri/arcgis-rest-portal\";\n * //\n * getItemData(\"ae7\")\n *   .then(response)\n * // or\n * getItemData(\"ae7\", { authentication })\n *   .then(response)\n * ```\n * Get the /data for an item. If no data exists, returns `undefined`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-data.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the json data for the item.\n */\nexport function getItemData(\n  id: string,\n  requestOptions?: IItemDataOptions\n): Promise<any> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/data`;\n  // default to a GET request\n  const options: IItemDataOptions = {\n    ...{ httpMethod: \"GET\", params: {} },\n    ...requestOptions\n  };\n\n  if (options.file) {\n    options.params.f = null;\n  }\n\n  return request(url, options).catch((err) => {\n    /* if the item doesn't include data, the response will be empty\n       and the internal call to response.json() will fail */\n    const emptyResponseErr = RegExp(\n      /The string did not match the expected pattern|(Unexpected end of (JSON input|data at line 1 column 1))/i\n    );\n    /* istanbul ignore else */\n    if (emptyResponseErr.test(err.message)) {\n      return;\n    } else throw err;\n  });\n}\n\nexport interface IGetRelatedItemsResponse {\n  total: number;\n  relatedItems: IItem[];\n}\n\n/**\n * ```\n * import { getRelatedItems } from \"@esri/arcgis-rest-portal\";\n * //\n * getRelatedItems({\n *   id: \"ae7\",\n *   relationshipType: \"Service2Layer\" // or several [\"Service2Layer\", \"Map2Area\"]\n * })\n *   .then(response)\n * ```\n * Get the related items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/related-items.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getRelatedItems(\n  requestOptions: IItemRelationshipOptions\n): Promise<IGetRelatedItemsResponse> {\n  const url = `${getItemBaseUrl(\n    requestOptions.id,\n    requestOptions\n  )}/relatedItems`;\n\n  const options: IItemRelationshipOptions = {\n    httpMethod: \"GET\",\n    params: {\n      direction: requestOptions.direction\n    },\n    ...requestOptions\n  };\n\n  if (typeof requestOptions.relationshipType === \"string\") {\n    options.params.relationshipType = requestOptions.relationshipType;\n  } else {\n    options.params.relationshipTypes = requestOptions.relationshipType;\n  }\n\n  delete options.direction;\n  delete options.relationshipType;\n\n  return request(url, options);\n}\n\n/**\n * Get the resources associated with an item\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item resources.\n */\nexport function getItemResources(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/resources`;\n\n  // Mix in num:1000 with any user supplied params\n  // Key thing - we don't want to mutate the passed in requestOptions\n  // as that may be used in other (subsequent) calls in the course\n  // of a long promise chains\n  const options: IRequestOptions = {\n    ...requestOptions\n  };\n  options.params = { num: 1000, ...options.params };\n\n  return request(url, options);\n}\n\nexport interface IGetItemGroupsResponse {\n  admin?: IGroup[];\n  member?: IGroup[];\n  other?: IGroup[];\n}\n\nexport interface IGetItemResourceOptions extends IRequestOptions {\n  /**\n   * Name of the info file, optionally including the folder path\n   */\n  fileName: string;\n  /**\n   * How the fetch response should be read, see:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods\n   */\n  readAs?: FetchReadMethodName;\n}\n\n/**\n * Fetches an item resource and optionally parses it to the correct format.\n *\n * Provides JSON parse error protection by sanitizing out any unescaped control characters before parsing that would otherwise cause an error to be thrown.\n *\n * ```js\n * import { getItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Parses contents as blob by default\n * getItemResource(\"3ef\", { fileName: \"resource.jpg\", ...})\n *  .then(resourceContents => {});\n *\n * // Can override parse method\n * getItemResource(\"3ef\", { fileName: \"resource.json\", readAs: 'json', ...})\n *  .then(resourceContents => {});\n *\n * // Get the response object instead\n * getItemResource(\"3ef\",{ rawResponse: true, fileName: \"resource.json\" })\n *  .then(response => {})\n * ```\n *\n * @param {string} itemId\n * @param {IGetItemResourceOptions} requestOptions\n */\nexport function getItemResource(\n  itemId: string,\n  requestOptions: IGetItemResourceOptions\n) {\n  const readAs = requestOptions.readAs || \"blob\";\n  return getItemFile(\n    itemId,\n    `/resources/${requestOptions.fileName}`,\n    readAs,\n    requestOptions\n  );\n}\n\n/**\n * Lists the groups of which the item is a part, only showing the groups that the calling user can access. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/groups.htm) for more information.\n *\n * ```js\n * import { getItemGroups } from \"@esri/arcgis-rest-portal\";\n *\n * getItemGroups(\"30e5fe3149c34df1ba922e6f5bbf808f\")\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to query group association for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get some item groups.\n */\nexport function getItemGroups(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGetItemGroupsResponse> {\n  const url = `${getItemBaseUrl(id, requestOptions)}/groups`;\n\n  return request(url, requestOptions);\n}\n\nexport interface IItemStatusOptions extends IUserItemOptions {\n  /**\n   * The type of asynchronous job for which the status has to be checked. Default is none, which check the item's status.\n   */\n  jobType?: \"publish\" | \"generateFeatures\" | \"export\" | \"createService\";\n  /**\n   * The job ID returned during publish, generateFeatures, export, and createService calls.\n   */\n  jobId?: string;\n  /**\n   * The response format. The default and the only response format for this resource is HTML.\n   */\n  format?: \"html\";\n}\n\nexport interface IGetItemStatusResponse {\n  status: \"partial\" | \"processing\" | \"failed\" | \"completed\";\n  statusMessage: string;\n  itemId: string;\n}\n\n/**\n * Inquire about status when publishing an item, adding an item in async mode, or adding with a multipart upload. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/status.htm) for more information.\n *\n * ```js\n * import { getItemStatus } from \"@esri/arcgis-rest-portal\";\n *\n * getItemStatus({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get status for.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item status.\n */\nexport function getItemStatus(\n  requestOptions: IItemStatusOptions\n): Promise<IGetItemStatusResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/status`;\n\n    const options = appendCustomParams<IItemStatusOptions>(\n      requestOptions,\n      [\"jobId\", \"jobType\"],\n      { params: { ...requestOptions.params } }\n    );\n\n    return request(url, options);\n  });\n}\n\nexport interface IGetItemPartsResponse {\n  parts: number[];\n}\n\n/**\n * Lists the part numbers of the file parts that have already been uploaded in a multipart file upload. This method can be used to verify the parts that have been received as well as those parts that were not received by the server. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/parts.htm) for more information.\n *\n * ```js\n * import { getItemParts } from \"@esri/arcgis-rest-portal\";\n *\n * getItemParts({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param id - The Id of the item to get part list.\n * @param requestOptions - Options for the request\n * @returns A Promise to get the item part list.\n */\nexport function getItemParts(\n  requestOptions: IUserItemOptions\n): Promise<IGetItemPartsResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/parts`;\n    return request(url, requestOptions);\n  });\n}\n\nexport interface IGetItemInfoOptions extends IRequestOptions {\n  /**\n   * Name of the info file, optionally including the folder path\n   */\n  fileName?: string;\n  /**\n   * How the fetch response should be read, see:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods\n   */\n  readAs?: FetchReadMethodName;\n}\n\n/**\n * ```\n * import { getItemInfo } from \"@esri/arcgis-rest-portal\";\n * // get the \"Info Card\" for the item\n * getItemInfo(\"ae7\")\n *   .then(itemInfoXml) // XML document as a string\n * // or get the contents of a specific file\n * getItemInfo(\"ae7\", { fileName: \"form.json\", readAs: \"json\", authentication })\n *   .then(formJson) // JSON document as JSON\n * ```\n * Get an info file for an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/item-info-file.htm) for more information.\n * @param id - Item Id\n * @param requestOptions - Options for the request, including the file name which defaults to `iteminfo.xml`.\n * If the file is not a text file (XML, HTML, etc) you will need to specify the `readAs` parameter\n * @returns A Promise that will resolve with the contents of the info file for the item.\n */\nexport function getItemInfo(\n  id: string,\n  requestOptions?: IGetItemInfoOptions\n): Promise<any> {\n  const { fileName = \"iteminfo.xml\", readAs = \"text\" } = requestOptions || {};\n  const options: IRequestOptions = {\n    httpMethod: \"GET\",\n    ...requestOptions\n  };\n  return getItemFile(id, `/info/${fileName}`, readAs, options);\n}\n\n/**\n * ```\n * import { getItemMetadata } from \"@esri/arcgis-rest-portal\";\n * // get the metadata for the item\n * getItemMetadata(\"ae7\")\n *   .then(itemMetadataXml) // XML document as a string\n * // or with additional request options\n * getItemMetadata(\"ae7\", { authentication })\n *   .then(itemMetadataXml) // XML document as a string\n * ```\n * Get the standard formal metadata XML file for an item (`/info/metadata/metadata.xml`)\n * @param id - Item Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the contents of the metadata file for the item as a string.\n */\nexport function getItemMetadata(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const options = {\n    ...requestOptions,\n    fileName: \"metadata/metadata.xml\"\n  } as IGetItemInfoOptions;\n  return getItemInfo(id, options);\n}\n\n// overrides request()'s default behavior for reading the response\n// which is based on `params.f` and defaults to JSON\n// Also adds JSON parse error protection by sanitizing out any unescaped control characters before parsing\nfunction getItemFile(\n  id: string,\n  // NOTE: fileName should include any folder/subfolders\n  fileName: string,\n  readMethod: FetchReadMethodName,\n  requestOptions?: IRequestOptions\n): Promise<any> {\n  const url = `${getItemBaseUrl(id, requestOptions)}${fileName}`;\n  // preserve escape hatch to let the consumer read the response\n  // and ensure the f param is not appended to the query string\n  const options: IRequestOptions = {\n    params: {},\n    ...requestOptions\n  };\n  const justReturnResponse = options.rawResponse;\n  options.rawResponse = true;\n  options.params.f = null;\n\n  return request(url, options).then((response) => {\n    if (justReturnResponse) {\n      return response;\n    }\n    return readMethod !== \"json\"\n      ? response[readMethod]()\n      : response\n          .text()\n          .then((text: string) => JSON.parse(scrubControlChars(text)));\n  });\n}\n"]}