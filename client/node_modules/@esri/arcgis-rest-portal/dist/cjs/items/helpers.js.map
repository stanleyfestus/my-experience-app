{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/items/helpers.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AA0PhB;;GAEG;AACH,SAAgB,cAAc,CAAC,cAAmB;IAChD,IAAI,cAAc,CAAC,KAAK,EAAE;QACxB,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;KAC9C;SAAM,IAAI,cAAc,CAAC,IAAI,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE;QAC3D,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnD;SAAM,IACL,cAAc,CAAC,cAAc;QAC7B,cAAc,CAAC,cAAc,CAAC,WAAW,EACzC;QACA,OAAO,cAAc,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;KACpD;SAAM;QACL,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,yGAAyG,CAC1G,CACF,CAAC;KACH;AACH,CAAC;AAjBD,wCAiBC;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAC,MAAe;IACpC,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QACrB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACzB,CAAC;AACJ,CAAC;AAND,wBAMC;AAED;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,MAAkB;IAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAFD,oCAEC","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IRequestOptions,\n  IUserRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nimport type { Blob, File } from \"@esri/arcgis-rest-request\";\n\n/**\n * Base options interface for making authenticated requests for items.\n */\nexport interface IUserItemOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport interface IFolderIdOptions extends IUserRequestOptions {\n  /**\n   * Unique identifier of the folder.\n   */\n  folderId: string;\n  /**\n   * Item owner username. If not present, `authentication.username` is utilized.\n   */\n  owner?: string;\n}\n\nexport type ItemRelationshipType =\n  | \"APIKey2Item\"\n  | \"Area2CustomPackage\"\n  | \"Area2Package\"\n  | \"Item2Attachment\"\n  | \"Item2Report\"\n  | \"Listed2Provisioned\"\n  | \"Map2AppConfig\"\n  | \"Map2Area\"\n  | \"Map2FeatureCollection\"\n  | \"Map2Service\"\n  | \"MobileApp2Code\"\n  | \"Service2Data\"\n  | \"Service2Layer\"\n  | \"Service2Route\"\n  | \"Service2Service\"\n  | \"Service2Style\"\n  | \"Solution2Item\"\n  | \"Style2Style\"\n  | \"Survey2Data\"\n  | \"Survey2Service\"\n  | \"SurveyAddIn2Data\"\n  | \"Theme2Story\"\n  | \"TrackView2Map\"\n  | \"WebStyle2DesktopStyle\"\n  | \"WMA2Code\"\n  | \"WorkforceMap2FeatureService\";\n\n/**\n * Names of methods for reading the body of a fetch response, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Body#Methods\n */\nexport type FetchReadMethodName =\n  | \"arrayBuffer\"\n  | \"blob\"\n  | \"formData\"\n  | \"json\"\n  | \"text\";\n\nexport interface IItemRelationshipOptions extends IRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n  /**\n   * The type of relationship between the two items.\n   */\n  relationshipType: ItemRelationshipType | ItemRelationshipType[];\n  /**\n   * The direction of the relationship. Either forward (from origin -> destination) or reverse (from destination -> origin).\n   */\n  direction?: \"forward\" | \"reverse\";\n}\n\nexport interface IManageItemRelationshipOptions extends IUserRequestOptions {\n  originItemId: string;\n  destinationItemId: string;\n  relationshipType: ItemRelationshipType;\n}\n\nexport interface IItemInfoOptions extends IUserItemOptions {\n  /**\n   * Subfolder for added information.\n   */\n  folderName?: string;\n  /**\n   * Object to store\n   */\n  file: any;\n}\n\nexport interface IItemResourceOptions extends IUserItemOptions {\n  /**\n   * New resource filename.\n   */\n  name?: string;\n  /**\n   * Folder in which to store the new resource.\n   */\n  prefix?: string;\n  /**\n   * Text input to be added as a file resource.\n   */\n  content?: string;\n  /**\n   * Controls whether access to the file resource is restricted to the owner or inherited from the sharing permissions set for the associated item.\n   */\n  private?: boolean;\n  /**\n   * Object to store\n   */\n  resource?: any;\n}\n\nexport interface IRemoveItemResourceOptions extends IUserItemOptions {\n  /**\n   * Resource item to be removed. Resource prefix needs to be specified if the file resource has one.\n   */\n  resource?: string;\n\n  /**\n   * If true, all file resources are removed.\n   */\n  deleteAll?: boolean;\n}\n\nexport interface ICreateUpdateItemOptions extends IUserRequestOptions {\n  /**\n   * The owner of the item. If this property is not present, `item.owner` will be passed, or lastly `authentication.username`.\n   */\n  owner?: string;\n  /**\n   * Id of the folder to house the item.\n   */\n  folderId?: string;\n  /**\n   * The file to be uploaded. If uploading a file, the request must be a multipart request.\n   */\n  file?: Blob | File;\n  /**\n   * The URL where the item can be downloaded. The resource will be downloaded and stored as a file type. Similar to uploading a file to be added, but instead of transferring the contents of the file, the URL of the data file is referenced and creates a file item.\n   */\n  dataUrl?: string;\n  /**\n   * The text content for the item to be submitted.\n   */\n  text?: string;\n  /**\n   * If true, the file is uploaded asynchronously. If false, the file is uploaded synchronously.\n   */\n  async?: boolean;\n  /**\n   * If true, the file is uploaded in multiple parts.\n   */\n  multipart?: boolean;\n  /**\n   * The filename being uploaded in multipart mode. Required if multipart=true.\n   */\n  filename?: string;\n  /**\n   * If true, overwrite the existing file.\n   */\n  overwrite?: boolean;\n}\n\nexport interface IItemDataOptions extends IRequestOptions {\n  /**\n   * Used to request binary data.\n   */\n  file?: boolean;\n}\n\nexport interface IItemPartOptions extends IUserItemOptions {\n  /**\n   * The file part to be uploaded.\n   */\n  file: any;\n  /**\n   * Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely identifies a part and also defines its position within the object being created. If you upload a new part using the same part number that was used with a previous part, the previously uploaded part is overwritten.\n   */\n  partNum: number;\n}\n\nexport interface IUpdateItemResponse {\n  success: boolean;\n  id: string;\n}\n\nexport interface IItemInfoResponse {\n  success: boolean;\n  itemId: string;\n  owner: string;\n  folder: string;\n}\n\nexport interface IItemResourceResponse {\n  success: boolean;\n  itemId: string;\n  owner: string;\n  folder: string;\n}\n\nexport interface IAddFolderResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Information about created folder: its alphanumeric id, name, and owner's name.\n   */\n  folder: {\n    id: string;\n    title: string;\n    username: string;\n  };\n}\n\nexport interface IMoveItemResponse {\n  /**\n   * Success or failure of request.\n   */\n  success: boolean;\n  /**\n   * Alphanumeric id of moved item.\n   */\n  itemId: string;\n  /**\n   * Name of owner of item.\n   */\n  owner: string;\n  /**\n   * Alphanumeric id of folder now housing item.\n   */\n  folder: string;\n}\n\n/**\n * `requestOptions.owner` is given priority, `requestOptions.item.owner` will be checked next. If neither are present, `authentication.getUserName()` will be used instead.\n */\nexport function determineOwner(requestOptions: any): Promise<string> {\n  if (requestOptions.owner) {\n    return Promise.resolve(requestOptions.owner);\n  } else if (requestOptions.item && requestOptions.item.owner) {\n    return Promise.resolve(requestOptions.item.owner);\n  } else if (\n    requestOptions.authentication &&\n    requestOptions.authentication.getUsername\n  ) {\n    return requestOptions.authentication.getUsername();\n  } else {\n    return Promise.reject(\n      new Error(\n        \"Could not determine the owner of this item. Pass the `owner`, `item.owner`, or `authentication` option.\"\n      )\n    );\n  }\n}\n\n/**\n * checks if the extent is a valid BBox (2 element array of coordinate pair arrays)\n * @param extent\n * @returns\n */\nexport function isBBox(extent: unknown): boolean {\n  return (\n    Array.isArray(extent) &&\n    Array.isArray(extent[0]) &&\n    Array.isArray(extent[1])\n  );\n}\n\n/**\n * Given a Bbox, convert it to a string. Some api endpoints expect a string\n *\n * @param {BBox} extent\n * @return {*}  {string}\n */\nexport function bboxToString(extent: number[][]): string {\n  return extent.join(\",\");\n}\n"]}