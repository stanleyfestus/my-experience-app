{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../src/items/create.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAAwE;AAGxE,iEAAyD;AACzD,6CAOsB;AAiBtB;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,YAAY,CAC1B,cAAoC;IAEpC,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,OAAO,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,KAAK,EAAE,CAAC;QACzE,MAAM,GAAG,GAAG,GAAG,OAAO,eAAe,CAAC;QAEtC,cAAc,CAAC,MAAM,mBACnB,KAAK,EAAE,cAAc,CAAC,KAAK,IACxB,cAAc,CAAC,MAAM,CACzB,CAAC;QAEF,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AAdD,oCAcC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,kBAAkB,CAChC,cAAkC;IAElC,IAAI,cAAc,CAAC,SAAS,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE;QACxD,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAC/D,CAAC;KACH;IAED,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,OAAO,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,KAAK,EAAE,CAAC;QACzE,IAAI,GAAG,GAAG,GAAG,OAAO,UAAU,CAAC;QAE/B,IAAI,cAAc,CAAC,QAAQ,EAAE;YAC3B,GAAG,GAAG,GAAG,OAAO,IAAI,cAAc,CAAC,QAAQ,UAAU,CAAC;SACvD;QAED,cAAc,CAAC,MAAM,mCAChB,cAAc,CAAC,MAAM,GACrB,cAAc,CAAC,IAAI,CACvB,CAAC;QAEF,sDAAsD;QACtD,wDAAwD;QACxD,qDAAqD;QACrD,mDAAmD;QACnD,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,IAAA,mBAAM,EAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YACxE,cAAc,CAAC,MAAM,CAAC,MAAM,GAAG,IAAA,yBAAY,EAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC3E;QAED,uDAAuD;QACvD,MAAM,OAAO,GAAG,IAAA,wCAAkB,EAChC,cAAc,EACd;YACE,OAAO;YACP,UAAU;YACV,MAAM;YACN,SAAS;YACT,MAAM;YACN,OAAO;YACP,WAAW;YACX,UAAU;YACV,WAAW;SACZ,EACD;YACE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE;SACrC,CACF,CAAC;QACF,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAlDD,gDAkDC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,UAAU,CACxB,cAAkC;IAElC,sEAAsE;IACtE,MAAM,OAAO,GAAG,gBACd,QAAQ,EAAE,IAAI,IACX,cAAc,CACI,CAAC;IACxB,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACrC,CAAC;AATD,gCASC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { IItemAdd } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IAddFolderResponse,\n  IUpdateItemResponse,\n  ICreateUpdateItemOptions,\n  determineOwner,\n  isBBox,\n  bboxToString\n} from \"./helpers.js\";\n\nexport interface ICreateFolderOptions extends ICreateUpdateItemOptions {\n  /**\n   * Name of the folder to create.\n   */\n  title: string;\n}\n\nexport interface ICreateItemOptions extends ICreateUpdateItemOptions {\n  item: IItemAdd;\n}\n\nexport interface ICreateItemResponse extends IUpdateItemResponse {\n  folder: string;\n}\n\n/**\n * Create a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/create-folder.htm) for more information.\n *\n * ```js\n * import { createFolder } from \"@esri/arcgis-rest-portal\";\n *\n * createFolder({\n *   title: 'Map Collection',\n *   authentication: ArcGISIdentityManager\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with folder details once the folder has been created\n */\nexport function createFolder(\n  requestOptions: ICreateFolderOptions\n): Promise<IAddFolderResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n    const url = `${baseUrl}/createFolder`;\n\n    requestOptions.params = {\n      title: requestOptions.title,\n      ...requestOptions.params\n    };\n\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Create an item in a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * ```js\n * import { createItemInFolder } from \"@esri/arcgis-rest-portal\";\n *\n * createItemInFolder({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\"\n *   },\n *   folderId: 'fe8',\n *   authentication\n * })\n * ```\n *\n * @param requestOptions = Options for the request\n */\nexport function createItemInFolder(\n  requestOptions: ICreateItemOptions\n): Promise<ICreateItemResponse> {\n  if (requestOptions.multipart && !requestOptions.filename) {\n    return Promise.reject(\n      new Error(\"The filename is required for a multipart request.\")\n    );\n  }\n\n  return determineOwner(requestOptions).then((owner) => {\n    const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n    let url = `${baseUrl}/addItem`;\n\n    if (requestOptions.folderId) {\n      url = `${baseUrl}/${requestOptions.folderId}/addItem`;\n    }\n\n    requestOptions.params = {\n      ...requestOptions.params,\n      ...requestOptions.item\n    };\n\n    // convert extent, if present, into a string from bbox\n    // processParams was previously doing this sort of work,\n    // however now we need to let array of arrays through\n    // Thus for extents we need to move this logic here\n    if (requestOptions.params.extent && isBBox(requestOptions.params.extent)) {\n      requestOptions.params.extent = bboxToString(requestOptions.params.extent);\n    }\n\n    // serialize the item into something Portal will accept\n    const options = appendCustomParams<ICreateItemOptions>(\n      requestOptions,\n      [\n        \"owner\",\n        \"folderId\",\n        \"file\",\n        \"dataUrl\",\n        \"text\",\n        \"async\",\n        \"multipart\",\n        \"filename\",\n        \"overwrite\"\n      ],\n      {\n        params: { ...requestOptions.params }\n      }\n    );\n    return request(url, options);\n  });\n}\n\n/**\n * Create an Item in the user's root folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item.htm) for more information.\n *\n * ```js\n * import { createItem } from \"@esri/arcgis-rest-portal\";\n *\n * createItem({\n *   item: {\n *     title: \"The Amazing Voyage\",\n *     type: \"Web Map\"\n *   },\n *   authentication\n * })\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that creates an item.\n */\nexport function createItem(\n  requestOptions: ICreateItemOptions\n): Promise<ICreateItemResponse> {\n  // delegate to createItemInFolder placing in the root of the filestore\n  const options = {\n    folderId: null,\n    ...requestOptions\n  } as ICreateItemOptions;\n  return createItemInFolder(options);\n}\n"]}