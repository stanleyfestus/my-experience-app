{"version":3,"file":"content.js","sourceRoot":"","sources":["../../../src/items/content.ts"],"names":[],"mappings":";;;AAAA,mEAAqE;AAGrE,iEAAyD;AACzD,6CAA8C;AAkB9C;;;;;;;;;;;;;;;;;;;GAmBG;AACI,MAAM,cAAc,GAAG,CAC5B,cAA0C,EACX,EAAE;IACjC,MAAM,EACJ,QAAQ,EAAE,MAAM,EAChB,KAAK,GAAG,CAAC,EACT,GAAG,GAAG,EAAE,EACR,cAAc,EACf,GAAG,cAAc,CAAC;IACnB,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAE1C,OAAO,IAAA,2BAAc,EAAC,cAAc,CAAC;SAClC,IAAI,CACH,CAAC,KAAK,EAAE,EAAE,CACR,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,KAAK,GAAG,MAAM,EAAE,CACpE;SACA,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CACZ,IAAA,6BAAO,EAAC,GAAG,EAAE;QACX,UAAU,EAAE,KAAK;QACjB,cAAc;QACd,MAAM,EAAE;YACN,KAAK;YACL,GAAG;SACJ;KACF,CAAC,CACH,CAAC;AACN,CAAC,CAAC;AA1BW,QAAA,cAAc,kBA0BzB","sourcesContent":["import { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItem, IFolder, IPagingParams, IPagedResponse } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { determineOwner } from \"./helpers.js\";\n\nexport type UnixTime = number;\n\nexport interface IUserContentRequestOptions\n  extends IPagingParams,\n    IRequestOptions {\n  owner?: string;\n  folderId?: string;\n}\n\nexport interface IUserContentResponse extends IPagedResponse {\n  username: string;\n  currentFolder?: IFolder;\n  items: IItem[];\n  folders: IFolder[];\n}\n\n/**\n * Returns a listing of the user's content. If the `username` is not supplied, it defaults to the username of the authenticated user. If `start` is not specified it defaults to the first page.\n *\n * If the `num` is not supplied it is defaulted to 10. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-content.htm) for more information.\n *\n * ```js\n * import { getUserContent } from \"@esri/arcgis-rest-portal\";\n *\n * getUserContent({\n *    owner: 'geemike',\n *    folderId: 'bao7',\n *    start: 1,\n *    num: 20,\n *    authentication\n * })\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise<IUserContentResponse>\n */\nexport const getUserContent = (\n  requestOptions: IUserContentRequestOptions\n): Promise<IUserContentResponse> => {\n  const {\n    folderId: folder,\n    start = 1,\n    num = 10,\n    authentication\n  } = requestOptions;\n  const suffix = folder ? `/${folder}` : \"\";\n\n  return determineOwner(requestOptions)\n    .then(\n      (owner) =>\n        `${getPortalUrl(requestOptions)}/content/users/${owner}${suffix}`\n    )\n    .then((url) =>\n      request(url, {\n        httpMethod: \"GET\",\n        authentication,\n        params: {\n          start,\n          num\n        }\n      })\n    );\n};\n"]}