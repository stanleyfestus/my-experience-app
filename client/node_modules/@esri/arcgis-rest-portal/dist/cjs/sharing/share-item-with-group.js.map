{"version":3,"file":"share-item-with-group.js","sourceRoot":"","sources":["../../../src/sharing/share-item-with-group.ts"],"names":[],"mappings":"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","sourcesContent":["import { request, IUser } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IGroupSharingOptions,\n  ISharingResponse,\n  getUserMembership\n} from \"./helpers.js\";\nimport { getUser } from \"../users/get-user.js\";\nimport { addGroupUsers, IAddGroupUsersResult } from \"../groups/add-users.js\";\nimport { removeGroupUsers } from \"../groups/remove-users.js\";\nimport {\n  updateUserMemberships,\n  IUpdateGroupUsersResult\n} from \"../groups/update-user-membership.js\";\nimport { isItemSharedWithGroup } from \"../sharing/is-item-shared-with-group.js\";\n\ninterface IEnsureMembershipResult {\n  promise: Promise<IAddGroupUsersResult>;\n  revert: (sharingResults: ISharingResponse) => Promise<ISharingResponse>;\n}\n\n/**\n * Share an item with a group, either as an [item owner](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-item-owner-.htm), [group admin](https://developers.arcgis.com/rest/users-groups-and-items/share-item-as-group-admin-.htm) or organization admin.\n *\n * Sharing the item as an Admin will use the `/content/users/:ownername/items/:itemid/share` end-point\n *\n * ```js\n * import { shareItemWithGroup } from '@esri/arcgis-rest-portal';\n *\n * shareItemWithGroup({\n *   id: \"abc123\",\n *   groupId: \"xyz987\",\n *   owner: \"some-owner\",\n *   authentication\n * })\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function shareItemWithGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<ISharingResponse> {\n  return isItemSharedWithGroup(requestOptions)\n    .then((isShared) => {\n      if (isShared) {\n        // already shared, exit early with success response\n        return {\n          itemId: requestOptions.id,\n          shortcut: true,\n          notSharedWith: []\n        } as ISharingResponse;\n      }\n\n      const {\n        authentication: { username },\n        owner,\n        confirmItemControl\n      } = requestOptions;\n      const itemOwner = owner || username;\n\n      // non-item owner\n      if (itemOwner !== username) {\n        // need to track if the user is an admin\n        let isAdmin = false;\n        // track if the admin & owner are in the same org\n        let isCrossOrgSharing = false;\n        // next perform any necessary membership adjustments for\n        // current user and/or item owner\n        return Promise.all([\n          getUser({\n            username,\n            authentication: requestOptions.authentication\n          }),\n          getUser({\n            username: itemOwner,\n            authentication: requestOptions.authentication\n          }),\n          getUserMembership(requestOptions)\n        ])\n          .then(([currentUser, ownerUser, membership]) => {\n            const isSharedEditingGroup = !!confirmItemControl;\n            isAdmin = currentUser.role === \"org_admin\" && !currentUser.roleId;\n            isCrossOrgSharing = currentUser.orgId !== ownerUser.orgId;\n            return getMembershipAdjustments(\n              currentUser,\n              isSharedEditingGroup,\n              membership,\n              isAdmin,\n              ownerUser,\n              requestOptions\n            );\n          })\n          .then((membershipAdjustments) => {\n            const [\n              { revert } = {\n                promise: Promise.resolve({ notAdded: [] }),\n                revert: (sharingResults: ISharingResponse) => {\n                  return Promise.resolve(sharingResults);\n                }\n              } as IEnsureMembershipResult\n            ] = membershipAdjustments;\n            // perform all membership adjustments\n            return Promise.all(\n              membershipAdjustments.map(({ promise }) => promise)\n            )\n              .then(() => {\n                // then attempt the share\n                return shareToGroup(requestOptions, isAdmin, isCrossOrgSharing);\n              })\n              .then((sharingResults) => {\n                // lastly, if the admin user was added to the group,\n                // remove them from the group. this is a no-op that\n                // immediately resolves the sharingResults when no\n                // membership adjustment was needed\n                return revert(sharingResults);\n              });\n          });\n      }\n\n      // item owner, let it call through\n      return shareToGroup(requestOptions);\n    })\n    .then((sharingResponse) => {\n      if (sharingResponse.notSharedWith.length) {\n        throw Error(\n          `Item ${requestOptions.id} could not be shared to group ${requestOptions.groupId}.`\n        );\n      } else {\n        // all is well\n        return sharingResponse;\n      }\n    });\n}\n\nfunction getMembershipAdjustments(\n  currentUser: IUser,\n  isSharedEditingGroup: boolean,\n  membership: string,\n  isAdmin: boolean,\n  ownerUser: IUser,\n  requestOptions: IGroupSharingOptions\n) {\n  const membershipGuarantees = [];\n  if (requestOptions.groupId !== currentUser.favGroupId) {\n    if (isSharedEditingGroup) {\n      if (!isAdmin) {\n        // abort and reject promise\n        throw Error(\n          `This item can not be shared to shared editing group ${requestOptions.groupId} by ${currentUser.username} as they not the item owner or org admin.`\n        );\n      }\n\n      membershipGuarantees.push(\n        // admin user must be a group member to share, should be reverted afterwards\n        ensureMembership(\n          currentUser,\n          currentUser,\n          false,\n          `Error adding ${currentUser.username} as member to edit group ${requestOptions.groupId}. Consequently item ${requestOptions.id} was not shared to the group.`,\n          requestOptions\n        ),\n        // item owner must be a group admin\n        ensureMembership(\n          currentUser,\n          ownerUser,\n          true,\n          membership === \"none\"\n            ? `Error adding user ${ownerUser.username} to edit group ${requestOptions.groupId}. Consequently item ${requestOptions.id} was not shared to the group.`\n            : `Error promoting user ${ownerUser.username} to admin in edit group ${requestOptions.groupId}. Consequently item ${requestOptions.id} was not shared to the group.`,\n          requestOptions\n        )\n      );\n    } else if (isAdmin) {\n      // admin user must be a group member to share, should be reverted afterwards\n      membershipGuarantees.push(\n        ensureMembership(\n          currentUser,\n          currentUser,\n          false,\n          `Error adding ${currentUser.username} as member to view group ${requestOptions.groupId}. Consequently item ${requestOptions.id} was not shared to the group.`,\n          requestOptions\n        )\n      );\n    } else if (membership === \"none\") {\n      // all other non-item owners must be a group member\n      throw new Error(\n        `This item can not be shared by ${currentUser.username} as they are not a member of the specified group ${requestOptions.groupId}.`\n      );\n    }\n  }\n\n  return membershipGuarantees;\n}\n\nfunction shareToGroup(\n  requestOptions: IGroupSharingOptions,\n  isAdmin = false,\n  isCrossOrgSharing = false\n): Promise<ISharingResponse> {\n  const username = requestOptions.authentication.username;\n  const itemOwner = requestOptions.owner || username;\n  // decide what url to use\n  // default to the non-owner url...\n  let url = `${getPortalUrl(requestOptions)}/content/items/${\n    requestOptions.id\n  }/share`;\n\n  // but if they are the owner, or org_admin, use this route\n  // Note: When using this end-point as an admin, apparently the admin does not need to be a member of the group (the itemOwner does)\n  // Note: Admin's can only use this route when the item is in the same org they are admin for\n  if (itemOwner === username || (isAdmin && !isCrossOrgSharing)) {\n    url = `${getPortalUrl(requestOptions)}/content/users/${itemOwner}/items/${\n      requestOptions.id\n    }/share`;\n  }\n\n  // now its finally time to do the sharing\n  requestOptions.params = {\n    groups: requestOptions.groupId,\n    confirmItemControl: requestOptions.confirmItemControl\n  };\n\n  return request(url, requestOptions);\n}\n\nexport function ensureMembership(\n  currentUser: IUser,\n  ownerUser: IUser,\n  shouldPromote: boolean,\n  errorMessage: string,\n  requestOptions: IGroupSharingOptions\n): IEnsureMembershipResult {\n  const ownerGroups = ownerUser.groups || [];\n  const group = ownerGroups.find((g) => {\n    return g.id === requestOptions.groupId;\n  });\n\n  // if they are in different orgs, eject\n  if (currentUser.orgId !== ownerUser.orgId) {\n    throw Error(\n      `User ${ownerUser.username} is not a member of the same org as ${currentUser.username}. Consequently they can not be added added to group ${requestOptions.groupId} nor can item ${requestOptions.id} be shared to the group.`\n    );\n  }\n\n  // if owner is not a member, and has 512 groups\n  if (!group && ownerGroups.length > 511) {\n    throw Error(\n      `User ${ownerUser.username} already has 512 groups, and can not be added to group ${requestOptions.groupId}. Consequently item ${requestOptions.id} can not be shared to the group.`\n    );\n  }\n\n  let promise: Promise<IAddGroupUsersResult>;\n  let revert: (sharingResults: ISharingResponse) => Promise<ISharingResponse>;\n\n  // decide if we need to add them or upgrade them\n  if (group) {\n    // they are in the group...\n    // check member type\n    if (shouldPromote && group.userMembership.memberType === \"member\") {\n      // promote them\n      promise = updateUserMemberships({\n        id: requestOptions.groupId,\n        users: [ownerUser.username],\n        newMemberType: \"admin\",\n        authentication: requestOptions.authentication\n      })\n        .then((results: IUpdateGroupUsersResult) => {\n          // convert the result into the right type\n          const notAdded = results.results.reduce((acc: any[], entry: any) => {\n            if (!entry.success) {\n              acc.push(entry.username);\n            }\n            return acc;\n          }, []);\n          // and return it\n          return Promise.resolve({ notAdded });\n        })\n        .catch(() => ({ notAdded: [ownerUser.username] }));\n      revert = (sharingResults) =>\n        updateUserMemberships({\n          id: requestOptions.groupId,\n          users: [ownerUser.username],\n          newMemberType: \"member\",\n          authentication: requestOptions.authentication\n        })\n          .then(() => sharingResults)\n          .catch(() => sharingResults);\n    } else {\n      // they are already an admin in the group\n      // return the same response the API would if we added them\n      promise = Promise.resolve({ notAdded: [] });\n      revert = (sharingResults) => Promise.resolve(sharingResults);\n    }\n  } else {\n    // attempt to add user to group\n    const userType = shouldPromote ? \"admins\" : \"users\";\n    // can't currently determine if the group is within the admin's\n    // org without performing a search, so attempt to add and handle\n    // the api error\n    promise = addGroupUsers({\n      id: requestOptions.groupId,\n      [userType]: [ownerUser.username],\n      authentication: requestOptions.authentication\n    })\n      .then((results) => {\n        // results.errors includes an ArcGISAuthError when the group\n        // is in a different org, but notAdded is empty, throw here\n        // to normalize the results in below catch\n        if (results.errors && results.errors.length) {\n          throw results.errors[0];\n        }\n        return results;\n      })\n      .catch(() => ({ notAdded: [ownerUser.username] }));\n    revert = (sharingResults) => {\n      return removeGroupUsers({\n        id: requestOptions.groupId,\n        users: [ownerUser.username],\n        authentication: requestOptions.authentication\n      }).then(() => {\n        // always resolves, suppress any resolved errors\n        return sharingResults;\n      });\n    };\n  }\n\n  return {\n    promise: promise.then((membershipResponse) => {\n      if (membershipResponse.notAdded.length) {\n        throw new Error(errorMessage);\n      }\n      return membershipResponse;\n    }),\n    revert\n  };\n}\n"]}