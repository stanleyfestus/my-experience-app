{"version":3,"file":"unshare-item-with-group.js","sourceRoot":"","sources":["../../../src/sharing/unshare-item-with-group.ts"],"names":[],"mappings":";;;AAAA,mEAAoD;AACpD,iEAAyD;AACzD,6CAIsB;AACtB,iFAAuE;AACvE,sDAA+C;AAE/C;;;;;;;;;;;;;;;;;;;GAmBG;AACH,SAAgB,oBAAoB,CAClC,cAAoC;IAEpC,OAAO,IAAA,oDAAqB,EAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC7D,aAAa;QACb,IAAI,CAAC,QAAQ,EAAE;YACb,mCAAmC;YACnC,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,MAAM,EAAE,cAAc,CAAC,EAAE;gBACzB,QAAQ,EAAE,IAAI;gBACd,eAAe,EAAE,EAAE;aACA,CAAC,CAAC;SACxB;QAED,MAAM,EACJ,cAAc,EAAE,EAAE,QAAQ,EAAE,EAC5B,KAAK,EACN,GAAG,cAAc,CAAC;QAEnB,kDAAkD;QAClD,OAAO,OAAO,CAAC,GAAG,CAAC;YACjB,IAAA,8BAAiB,EAAC,cAAc,CAAC;YACjC,IAAA,qBAAO,EAAC;gBACN,QAAQ;gBACR,cAAc,EAAE,cAAc,CAAC,cAAc;aAC9C,CAAC;SACH,CAAC;aACC,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,EAAE,EAAE;YAClC,MAAM,SAAS,GAAG,KAAK,IAAI,QAAQ,CAAC;YACpC,MAAM,WAAW,GAAG,SAAS,KAAK,QAAQ,CAAC;YAC3C,MAAM,OAAO,GAAG,WAAW,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YAExE,IACE,CAAC,WAAW;gBACZ,CAAC,OAAO;gBACR,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAC1C;gBACA,2BAA2B;gBAC3B,MAAM,KAAK,CACT,4CAA4C,cAAc,CAAC,OAAO,OAAO,QAAQ,wEAAwE,CAC1J,CAAC;aACH;YAED,0BAA0B;YAC1B,OAAO,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAC1C,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,eAAe,EAAE,EAAE;YACxB,IAAI,eAAe,CAAC,eAAe,CAAC,MAAM,EAAE;gBAC1C,MAAM,KAAK,CACT,QAAQ,cAAc,CAAC,EAAE,mCAAmC,cAAc,CAAC,OAAO,EAAE,CACrF,CAAC;aACH;iBAAM;gBACL,cAAc;gBACd,OAAO,eAAe,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC;AAzDD,oDAyDC;AAED,SAAS,gBAAgB,CACvB,cAAoC;IAEpC,MAAM,QAAQ,GAAG,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC;IACxD,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,IAAI,QAAQ,CAAC;IACnD,yBAAyB;IACzB,kCAAkC;IAClC,IAAI,GAAG,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBACvC,cAAc,CAAC,EACjB,UAAU,CAAC;IAEX,wDAAwD;IACxD,IAAI,SAAS,KAAK,QAAQ,EAAE;QAC1B,GAAG,GAAG,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,SAAS,UAC9D,cAAc,CAAC,EACjB,UAAU,CAAC;KACZ;IAED,yCAAyC;IACzC,cAAc,CAAC,MAAM,GAAG;QACtB,MAAM,EAAE,cAAc,CAAC,OAAO;KAC/B,CAAC;IAEF,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACtC,CAAC","sourcesContent":["import { request } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IGroupSharingOptions,\n  ISharingResponse,\n  getUserMembership\n} from \"./helpers.js\";\nimport { isItemSharedWithGroup } from \"./is-item-shared-with-group.js\";\nimport { getUser } from \"../users/get-user.js\";\n\n/**\n * Stop sharing an item with a group, either as an\n * [item owner](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-item-owner-.htm),\n * [group admin](https://developers.arcgis.com/rest/users-groups-and-items/unshare-item-as-group-admin-.htm) or\n * organization admin.\n *\n * ```js\n * import { unshareItemWithGroup } from '@esri/arcgis-rest-portal';\n *\n * unshareItemWithGroup({\n *   id: \"abc123\",\n *   groupId: \"xyz987\",\n *   owner: \"some-owner\",\n *   authentication: session\n * })\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function unshareItemWithGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<ISharingResponse> {\n  return isItemSharedWithGroup(requestOptions).then((isShared) => {\n    // not shared\n    if (!isShared) {\n      // exit early with success response\n      return Promise.resolve({\n        itemId: requestOptions.id,\n        shortcut: true,\n        notUnsharedFrom: []\n      } as ISharingResponse);\n    }\n\n    const {\n      authentication: { username },\n      owner\n    } = requestOptions;\n\n    // next check if the user is a member of the group\n    return Promise.all([\n      getUserMembership(requestOptions),\n      getUser({\n        username,\n        authentication: requestOptions.authentication\n      })\n    ])\n      .then(([membership, currentUser]) => {\n        const itemOwner = owner || username;\n        const isItemOwner = itemOwner === username;\n        const isAdmin = currentUser.role === \"org_admin\" && !currentUser.roleId;\n\n        if (\n          !isItemOwner &&\n          !isAdmin &&\n          [\"admin\", \"owner\"].indexOf(membership) < 0\n        ) {\n          // abort and reject promise\n          throw Error(\n            `This item can not be unshared from group ${requestOptions.groupId} by ${username} as they not the item owner, an org admin, group admin or group owner.`\n          );\n        }\n\n        // let the sharing call go\n        return unshareFromGroup(requestOptions);\n      })\n      .then((sharingResponse) => {\n        if (sharingResponse.notUnsharedFrom.length) {\n          throw Error(\n            `Item ${requestOptions.id} could not be unshared to group ${requestOptions.groupId}`\n          );\n        } else {\n          // all is well\n          return sharingResponse;\n        }\n      });\n  });\n}\n\nfunction unshareFromGroup(\n  requestOptions: IGroupSharingOptions\n): Promise<ISharingResponse> {\n  const username = requestOptions.authentication.username;\n  const itemOwner = requestOptions.owner || username;\n  // decide what url to use\n  // default to the non-owner url...\n  let url = `${getPortalUrl(requestOptions)}/content/items/${\n    requestOptions.id\n  }/unshare`;\n\n  // but if they are the owner, we use a different path...\n  if (itemOwner === username) {\n    url = `${getPortalUrl(requestOptions)}/content/users/${itemOwner}/items/${\n      requestOptions.id\n    }/unshare`;\n  }\n\n  // now its finally time to do the sharing\n  requestOptions.params = {\n    groups: requestOptions.groupId\n  };\n\n  return request(url, requestOptions);\n}\n"]}