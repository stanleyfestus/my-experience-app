{"version":3,"file":"generic-search.js","sourceRoot":"","sources":["../../../src/util/generic-search.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAMmC;AAGnC,mEAA6D;AAC7D,iEAAyD;AAOzD,SAAgB,aAAa,CAC3B,MAIsB,EACtB,UAAwE;IAExE,IAAI,OAAwB,CAAC;IAC7B,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,YAAY,0CAAkB,EAAE;QACtE,OAAO,GAAG;YACR,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE;gBACN,CAAC,EAAE,MAAM;aACV;SACF,CAAC;KACH;SAAM;QACL,8DAA8D;QAC9D,OAAO,GAAG,IAAA,wCAAkB,EAC1B,MAAM,EACN;YACE,GAAG;YACH,KAAK;YACL,OAAO;YACP,WAAW;YACX,WAAW;YACX,kBAAkB;YAClB,gBAAgB;YAChB,QAAQ;YACR,aAAa;YACb,WAAW;YACX,YAAY;YACZ,iBAAiB;SAClB,EACD;YACE,UAAU,EAAE,KAAK;SAClB,CACF,CAAC;KACH;IAED,IAAI,IAAI,CAAC;IACT,QAAQ,UAAU,EAAE;QAClB,KAAK,MAAM;YACT,IAAI,GAAG,SAAS,CAAC;YACjB,MAAM;QACR,KAAK,OAAO;YACV,IAAI,GAAG,mBAAmB,CAAC;YAC3B,MAAM;QACR,KAAK,cAAc;YACjB,6DAA6D;YAC7D,oDAAoD;YACpD,IACE,OAAO,MAAM,KAAK,QAAQ;gBAC1B,CAAC,CAAC,MAAM,YAAY,0CAAkB,CAAC;gBACvC,MAAM,CAAC,OAAO,EACd;gBACA,IAAI,GAAG,mBAAmB,MAAM,CAAC,OAAO,SAAS,CAAC;aACnD;iBAAM;gBACL,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,0DAA0D,CAAC,CACtE,CAAC;aACH;YACD,MAAM;QACR,KAAK,eAAe;YAClB,IAAI,GAAG,kBAAkB,CAAC;YAC1B,MAAM;QACR;YACE,UAAU;YACV,IAAI,GAAG,4BAA4B,CAAC;YACpC,MAAM;KACT;IACD,MAAM,GAAG,GAAG,IAAA,gCAAY,EAAC,OAAO,CAAC,GAAG,IAAI,CAAC;IAEzC,mBAAmB;IACnB,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;QACtC,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,EAAE;YACrC,CAAC,CAAC,QAAQ,GAAG;gBACX,IAAI,UAA0B,CAAC;gBAE/B,IACE,OAAO,MAAM,KAAK,QAAQ;oBAC1B,MAAM,YAAY,0CAAkB,EACpC;oBACA,UAAU,GAAG;wBACX,CAAC,EAAE,MAAM;wBACT,KAAK,EAAE,CAAC,CAAC,SAAS;qBACnB,CAAC;iBACH;qBAAM;oBACL,UAAU,GAAG,MAAM,CAAC;oBACpB,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC;iBAChC;gBAED,OAAO,aAAa,CAAI,UAAU,EAAE,UAAU,CAAC,CAAC;YAClD,CAAC,CAAC;SACH;QAED,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAlGD,sCAkGC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  appendCustomParams,\n  IGroup,\n  IUser\n} from \"@esri/arcgis-rest-request\";\nimport { IItem } from \"../helpers.js\";\n\nimport { SearchQueryBuilder } from \"./SearchQueryBuilder.js\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  ISearchOptions,\n  ISearchGroupContentOptions,\n  ISearchResult\n} from \"../util/search.js\";\n\nexport function genericSearch<T extends IItem | IGroup | IUser>(\n  search:\n    | string\n    | ISearchOptions\n    | ISearchGroupContentOptions\n    | SearchQueryBuilder,\n  searchType: \"item\" | \"group\" | \"groupContent\" | \"user\" | \"communityUser\"\n): Promise<ISearchResult<T>> {\n  let options: IRequestOptions;\n  if (typeof search === \"string\" || search instanceof SearchQueryBuilder) {\n    options = {\n      httpMethod: \"GET\",\n      params: {\n        q: search\n      }\n    };\n  } else {\n    // searchUserAccess has one (known) valid value: \"groupMember\"\n    options = appendCustomParams<ISearchOptions>(\n      search,\n      [\n        \"q\",\n        \"num\",\n        \"start\",\n        \"sortField\",\n        \"sortOrder\",\n        \"searchUserAccess\",\n        \"searchUserName\",\n        \"filter\",\n        \"countFields\",\n        \"countSize\",\n        \"categories\",\n        \"categoryFilters\"\n      ],\n      {\n        httpMethod: \"GET\"\n      }\n    );\n  }\n\n  let path;\n  switch (searchType) {\n    case \"item\":\n      path = \"/search\";\n      break;\n    case \"group\":\n      path = \"/community/groups\";\n      break;\n    case \"groupContent\":\n      // Need to have groupId property to do group contents search,\n      // cso filter out all but ISearchGroupContentOptions\n      if (\n        typeof search !== \"string\" &&\n        !(search instanceof SearchQueryBuilder) &&\n        search.groupId\n      ) {\n        path = `/content/groups/${search.groupId}/search`;\n      } else {\n        return Promise.reject(\n          new Error(\"you must pass a `groupId` option to `searchGroupContent`\")\n        );\n      }\n      break;\n    case \"communityUser\":\n      path = \"/community/users\";\n      break;\n    default:\n      // \"users\"\n      path = \"/portals/self/users/search\";\n      break;\n  }\n  const url = getPortalUrl(options) + path;\n\n  // send the request\n  return request(url, options).then((r) => {\n    if (r.nextStart && r.nextStart !== -1) {\n      r.nextPage = function () {\n        let newOptions: ISearchOptions;\n\n        if (\n          typeof search === \"string\" ||\n          search instanceof SearchQueryBuilder\n        ) {\n          newOptions = {\n            q: search,\n            start: r.nextStart\n          };\n        } else {\n          newOptions = search;\n          newOptions.start = r.nextStart;\n        }\n\n        return genericSearch<T>(newOptions, searchType);\n      };\n    }\n\n    return r;\n  });\n}\n"]}