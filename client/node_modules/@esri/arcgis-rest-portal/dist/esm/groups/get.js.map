{"version":3,"file":"get.js","sourceRoot":"","sources":["../../../src/groups/get.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EACL,OAAO,EAEP,kBAAkB,EAGnB,MAAM,2BAA2B,CAAC;AAGnC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AA8BzD;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,QAAQ,CACtB,EAAU,EACV,cAAgC;IAEhC,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,qBAAqB,EAAE,EAAE,CAAC;IACrE,2BAA2B;IAC3B,MAAM,OAAO,iBACR,EAAE,UAAU,EAAE,KAAK,EAAE,EACrB,cAAc,CAClB,CAAC;IACF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,sBAAsB,CACpC,EAAU,EACV,cAAgC;IAEhC,MAAM,GAAG,GAAG,GAAG,YAAY,CACzB,cAAc,CACf,qBAAqB,EAAE,iBAAiB,CAAC;IAE1C,2BAA2B;IAC3B,MAAM,OAAO,iBACR,EAAE,UAAU,EAAE,KAAK,EAAE,EACrB,cAAc,CAClB,CAAC;IACF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,eAAe,CAC7B,EAAU,EACV,cAAwC;IAExC,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,mBAAmB,EAAE,EAAE,CAAC;IAEnE,2BAA2B;IAC3B,MAAM,OAAO,GAAoB,4BAC5B,EAAE,UAAU,EAAE,KAAK,EAAE,IACxB,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAC3B,cAAc,CACS,CAAC;IAE7B,iEAAiE;IACjE,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,EAAE;QAC3C,OAAO,CAAC,MAAM,qBAAQ,cAAc,CAAC,MAAM,CAAE,CAAC;KAC/C;IAED,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAC3B,EAAU,EACV,cAAgC;IAEhC,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,qBAAqB,EAAE,QAAQ,CAAC;IAC3E,2BAA2B;IAC3B,MAAM,OAAO,iBACR,EAAE,UAAU,EAAE,KAAK,EAAE,EACrB,cAAc,CAClB,CAAC;IACF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAsBD;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,gBAAgB,CAC9B,EAAU,EACV,aAAwC;IAExC,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,aAAa,CAAC,qBAAqB,EAAE,WAAW,CAAC;IAC7E,MAAM,OAAO,GAAG,kBAAkB,CAChC,aAAa,IAAI,EAAE,EACnB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,EAC1E;QACE,UAAU,EAAE,KAAK;KAClB,CACF,CAAC;IACF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  appendCustomParams,\n  IGroup,\n  IUser\n} from \"@esri/arcgis-rest-request\";\nimport { IItem, IPagingParams } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\n\nexport interface IGroupCategorySchema {\n  categorySchema: IGroupCategory[];\n}\n\nexport interface IGroupCategory {\n  title: string;\n  description?: string;\n  categories?: IGroupCategory[];\n}\n\nexport interface IGetGroupContentOptions extends IRequestOptions {\n  paging: IPagingParams;\n}\n\nexport interface IGroupContentResult {\n  total: number;\n  start: number;\n  num: number;\n  nextStart: number;\n  items: IItem[];\n}\n\nexport interface IGroupUsersResult {\n  owner: string;\n  admins: string[];\n  users: string[];\n}\n\n/**\n * Fetch a group using its id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group.htm) for more information.\n *\n * ```js\n * import { getGroup } from \"@esri/arcgis-rest-portal\";\n * //\n * getGroup(\"fxb988\") // id\n *   .then(response)\n * ```\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns  A Promise that will resolve with the data from the response.\n */\nexport function getGroup(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGroup> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${id}`;\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * Gets the category schema set on a group\n *\n * @param id - Group Id\n * @param requestOptions  - Options for the request\n * @returns A promise that will resolve with JSON of group's category schema\n * @see https://developers.arcgis.com/rest/users-groups-and-items/group-category-schema.htm\n */\nexport function getGroupCategorySchema(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGroupCategorySchema> {\n  const url = `${getPortalUrl(\n    requestOptions\n  )}/community/groups/${id}/categorySchema`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\n/**\n * Returns the content of a Group. Since the group may contain 1000s of items\n * the requestParams allow for paging.\n * @param id - Group Id\n * @param requestOptions  - Options for the request, including paging parameters.\n * @returns  A Promise that will resolve with the content of the group.\n */\nexport function getGroupContent(\n  id: string,\n  requestOptions?: IGetGroupContentOptions\n): Promise<IGroupContentResult> {\n  const url = `${getPortalUrl(requestOptions)}/content/groups/${id}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    params: { start: 1, num: 100 },\n    ...requestOptions\n  } as IGetGroupContentOptions;\n\n  // is this the most concise way to mixin with the defaults above?\n  if (requestOptions && requestOptions.paging) {\n    options.params = { ...requestOptions.paging };\n  }\n\n  return request(url, options);\n}\n\n/**\n * Get the usernames of the admins and members. Does not return actual 'User' objects. Those must be\n * retrieved via separate calls to the User's API.\n * @param id - Group Id\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with arrays of the group admin usernames and the member usernames\n */\nexport function getGroupUsers(\n  id: string,\n  requestOptions?: IRequestOptions\n): Promise<IGroupUsersResult> {\n  const url = `${getPortalUrl(requestOptions)}/community/groups/${id}/users`;\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options);\n}\n\nexport interface ISearchGroupUsersOptions\n  extends IRequestOptions,\n    IPagingParams {\n  name?: string;\n  sortField?: string;\n  sortOrder?: string;\n  joined?: number | number[];\n  memberType?: string;\n  [key: string]: any;\n}\n\nexport interface ISearchGroupUsersResult {\n  total: number;\n  start: number;\n  num: number;\n  nextStart: number;\n  owner: IUser;\n  users: any[];\n}\n\n/**\n * Search the users in a group. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/group-users-list.htm) for more information.\n *\n * ```js\n * import { searchGroupUsers } from \"@esri/arcgis-rest-portal\";\n *\n * searchGroupUsers('abc123')\n *   .then(response)\n * ```\n *\n * @param id - The group id\n * @param searchOptions - Options for the request, including paging parameters.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function searchGroupUsers(\n  id: string,\n  searchOptions?: ISearchGroupUsersOptions\n): Promise<ISearchGroupUsersResult> {\n  const url = `${getPortalUrl(searchOptions)}/community/groups/${id}/userlist`;\n  const options = appendCustomParams<ISearchGroupUsersOptions>(\n    searchOptions || {},\n    [\"name\", \"num\", \"start\", \"sortField\", \"sortOrder\", \"joined\", \"memberType\"],\n    {\n      httpMethod: \"GET\"\n    }\n  );\n  return request(url, options);\n}\n"]}