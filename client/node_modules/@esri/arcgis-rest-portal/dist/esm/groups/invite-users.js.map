{"version":3,"file":"invite-users.js","sourceRoot":"","sources":["../../../src/groups/invite-users.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,OAAO,EAGR,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAgCzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,UAAU,gBAAgB,CAC9B,OAAiC;IAEjC,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,qBAAqB,EAAE,SAAS,CAAC;IACrE,MAAM,OAAO,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAEtE,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACrD,CAAC;AAED;;GAEG;AACH,SAAS,sBAAsB,CAAC,OAAiC;IAC/D,MAAM,WAAW,GAAe,KAAK,CAAS,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACjE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7E,CAAC;AAED;;GAEG;AACH,SAAS,uBAAuB,CAC9B,KAAe,EACf,WAAqC;IAErC,MAAM,cAAc,GAA6B,MAAM,CAAC,MAAM,CAC5D,EAAE,EACF,WAAW,CACZ,CAAC;IAEF,cAAc,CAAC,MAAM,mCAChB,cAAc,CAAC,MAAM,KACxB,KAAK,EACL,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,UAAU,EAAE,cAAc,CAAC,UAAU,GACtC,CAAC;IAEF,OAAO,cAAc,CAAC;AACxB,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB,CACvB,GAAW,EACX,cAA+B;IAE/B,OAAO,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9E,CAAC;AAED;;GAEG;AACH,SAAS,eAAe,CACtB,SAAoC;IAEpC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACtD,MAAM,MAAM,GAAyB,SAAS,CAAC,MAAM,CACnD,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,EACxD,EAAE,CACH,CAAC;IACF,MAAM,QAAQ,GAA4B,EAAE,OAAO,EAAE,CAAC;IAEtD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;KAC1B;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import {\n  request,\n  IRequestOptions,\n  ArcGISRequestError\n} from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { chunk } from \"../util/array.js\";\n\nexport interface IInviteGroupUsersOptions extends IRequestOptions {\n  /**\n   * Group ID\n   */\n  id: string;\n  /**\n   * An array of usernames to be added to the group as group members\n   */\n  users: string[];\n  /**\n   * What role the users should be invited as ('group_member' | 'group_admin')\n   */\n  role: string;\n  /**\n   * Expiration date on the invitation can be set for one day, three days, one week, or two weeks, in minutes.\n   */\n  expiration: number;\n}\n\nexport interface IInviteGroupUsersResult {\n  /**\n   * Whether the operation was successful\n   */\n  success: boolean;\n  /**\n   * An array of request errors\n   */\n  errors?: ArcGISRequestError[];\n}\n\n/**\n * Invites users to join a group. Operation success will be indicated by a flag on the return object. If there are any errors, they will be placed in an errors array on the return object.\n *\n * ```js\n * const authentication: IAuthenticationManager; // Typically passed into to the function\n *\n * const options: IInviteGroupUsersOptions = {\n *  id: 'group_id',\n *  users: ['ed', 'edd', 'eddy'],\n *  role: 'group-member',\n *  expiration: 20160,\n *  authentication\n * }\n *\n * const result = await inviteGroupUsers(options);\n *\n * const if_success_result_looks_like = {\n *  success: true\n * }\n *\n * const if_failure_result_looks_like = {\n *  success: false,\n *  errors: [ArcGISRequestError]\n * }\n * ```\n *\n * @param {IInviteGroupUsersOptions} options\n * @returns {Promise<IAddGroupUsersResult>}\n */\nexport function inviteGroupUsers(\n  options: IInviteGroupUsersOptions\n): Promise<IInviteGroupUsersResult> {\n  const id = options.id;\n  const url = `${getPortalUrl(options)}/community/groups/${id}/invite`;\n  const batches = _generateBatchRequests(options);\n  const promises = batches.map((batch) => _sendSafeRequest(url, batch));\n\n  return Promise.all(promises).then(_combineResults);\n}\n\n/**\n * @private\n */\nfunction _generateBatchRequests(options: IInviteGroupUsersOptions) {\n  const userBatches: string[][] = chunk<string>(options.users, 25);\n  return userBatches.map((users) => _generateRequestOptions(users, options));\n}\n\n/**\n * @private\n */\nfunction _generateRequestOptions(\n  users: string[],\n  baseOptions: IInviteGroupUsersOptions\n): IRequestOptions {\n  const requestOptions: IInviteGroupUsersOptions = Object.assign(\n    {},\n    baseOptions\n  );\n\n  requestOptions.params = {\n    ...requestOptions.params,\n    users,\n    role: requestOptions.role,\n    expiration: requestOptions.expiration\n  };\n\n  return requestOptions;\n}\n\n/**\n * @private\n */\nfunction _sendSafeRequest(\n  url: string,\n  requestOptions: IRequestOptions\n): Promise<IInviteGroupUsersResult> {\n  return request(url, requestOptions).catch((error) => ({ errors: [error] }));\n}\n\n/**\n * @private\n */\nfunction _combineResults(\n  responses: IInviteGroupUsersResult[]\n): IInviteGroupUsersResult {\n  const success = responses.every((res) => res.success);\n  const errors: ArcGISRequestError[] = responses.reduce(\n    (collection, res) => collection.concat(res.errors || []),\n    []\n  );\n  const combined: IInviteGroupUsersResult = { success };\n\n  if (errors.length > 0) {\n    combined.errors = errors;\n  }\n\n  return combined;\n}\n"]}