{"version":3,"file":"upload.js","sourceRoot":"","sources":["../../../src/items/upload.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAGxE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAGL,cAAc,EAEf,MAAM,cAAc,CAAC;AAMtB;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,WAAW,CACzB,cAAiC;IAEjC,MAAM,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;IAEvC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,KAAK,EAAE;QAChE,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CACP,mEAAmE,CACpE,CACF,CAAC;KACH;IAED,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,wEAAwE;QACxE,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,oBAAoB,OAAO,EAAE,CAAC;QAE9B,MAAM,OAAO,GAAG,kBAAkB,CAChC,cAAc,EACd,CAAC,MAAM,CAAC,EACR,EAAE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE,EAAE,CACzC,CAAC;QAEF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,gBAAgB,CAC9B,cAAmC;IAEnC,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,SAAS,CAAC;QAEV,MAAM,OAAO,GAAG,kBAAkB,CAAqB,cAAc,EAAE,EAAE,EAAE;YACzE,MAAM,kCACD,cAAc,CAAC,MAAM,GACrB,cAAc,CAAC,IAAI,CACvB;SACF,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,gBAAgB,CAC9B,cAAiC;IAEjC,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,SAAS,CAAC;QAEV,OAAO,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { IItemAdd } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IUserItemOptions,\n  IUpdateItemResponse,\n  determineOwner,\n  IItemPartOptions\n} from \"./helpers.js\";\n\nexport interface ICommitItemOptions extends IUserItemOptions {\n  item: IItemAdd;\n}\n\n/**\n * Add Item Part allows the caller to upload a file part when doing an add or update item operation in multipart mode. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-item-part.htm) for more information.\n *\n * ```js\n * import { addItemPart } from \"@esri/arcgis-rest-portal\";\n *\n * addItemPart({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   file: data,\n *   partNum: 1,\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add the item part status.\n */\nexport function addItemPart(\n  requestOptions?: IItemPartOptions\n): Promise<IUpdateItemResponse> {\n  const partNum = requestOptions.partNum;\n\n  if (!Number.isInteger(partNum) || partNum < 1 || partNum > 10000) {\n    return Promise.reject(\n      new Error(\n        \"The part number must be an integer between 1 to 10000, inclusive.\"\n      )\n    );\n  }\n\n  return determineOwner(requestOptions).then((owner) => {\n    // AGO adds the \"partNum\" parameter in the query string, not in the body\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/addPart?partNum=${partNum}`;\n\n    const options = appendCustomParams<IItemPartOptions>(\n      requestOptions,\n      [\"file\"],\n      { params: { ...requestOptions.params } }\n    );\n\n    return request(url, options);\n  });\n}\n\n/**\n * Commit is called once all parts are uploaded during a multipart Add Item or Update Item operation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/commit.htm) for more information.\n *\n * ```js\n * import { commitItemUpload } from \"@esri/arcgis-rest-portal\";\n * //\n * commitItemUpload({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get the commit result.\n */\nexport function commitItemUpload(\n  requestOptions?: ICommitItemOptions\n): Promise<IUpdateItemResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/commit`;\n\n    const options = appendCustomParams<ICommitItemOptions>(requestOptions, [], {\n      params: {\n        ...requestOptions.params,\n        ...requestOptions.item\n      }\n    });\n\n    return request(url, options);\n  });\n}\n\n/**\n * Cancels a multipart upload on an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/cancel.htm) for more information.\n *\n * ```js\n * import { cancelItemUpload } from \"@esri/arcgis-rest-portal\";\n * //\n * cancelItemUpload({\n *   id: \"30e5fe3149c34df1ba922e6f5bbf808f\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to get the commit result.\n */\nexport function cancelItemUpload(\n  requestOptions?: IUserItemOptions\n): Promise<IUpdateItemResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/cancel`;\n\n    return request(url, requestOptions);\n  });\n}\n"]}