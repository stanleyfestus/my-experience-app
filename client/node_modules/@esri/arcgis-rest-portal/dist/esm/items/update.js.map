{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../src/items/update.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { IItemUpdate } from \"../helpers.js\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  ICreateUpdateItemOptions,\n  IMoveItemResponse,\n  IItemInfoOptions,\n  IItemResourceOptions,\n  IItemInfoResponse,\n  IItemResourceResponse,\n  IUpdateItemResponse,\n  determineOwner,\n  isBBox,\n  bboxToString\n} from \"./helpers.js\";\n\nexport interface IUpdateItemOptions extends ICreateUpdateItemOptions {\n  item: IItemUpdate;\n}\n\nexport interface IMoveItemOptions extends ICreateUpdateItemOptions {\n  /**\n   * Alphanumeric id of item to be moved.\n   */\n  itemId: string;\n  /**\n   * Alphanumeric id of folder to house moved item. If null, empty, or \"/\", the destination is the\n   * root folder.\n   */\n  folderId?: string;\n}\n\n/**\n * Update an Item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * ```js\n * import { updateItem } from \"@esri/arcgis-rest-portal\";\n *\n * updateItem({\n *   item: {\n *     id: \"3ef\",\n *     description: \"A three hour tour\"\n *   },\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that updates an item.\n */\nexport function updateItem(\n  requestOptions: IUpdateItemOptions\n): Promise<IUpdateItemResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = requestOptions.folderId\n      ? `${getPortalUrl(requestOptions)}/content/users/${owner}/${\n          requestOptions.folderId\n        }/items/${requestOptions.item.id}/update`\n      : `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n          requestOptions.item.id\n        }/update`;\n\n    // serialize the item into something Portal will accept\n    requestOptions.params = {\n      ...requestOptions.params,\n      ...requestOptions.item\n    };\n\n    // convert extent, if present, into a string from bbox\n    // processParams was previously doing this sort of work,\n    // however now we need to let array of arrays through\n    // Thus for extents we need to move this logic here\n    if (requestOptions.params.extent && isBBox(requestOptions.params.extent)) {\n      requestOptions.params.extent = bboxToString(requestOptions.params.extent);\n    }\n\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Update an info file associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-info.htm) for more information.\n *\n * ```js\n * import { updateItemInfo } from \"@esri/arcgis-rest-portal\";\n *\n * updateItemInfo({\n *   id: '3ef',\n *   file: file,\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item info file.\n */\nexport function updateItemInfo(\n  requestOptions: IItemInfoOptions\n): Promise<IItemInfoResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(\n      requestOptions as IRequestOptions\n    )}/content/users/${owner}/items/${requestOptions.id}/updateinfo`;\n\n    // mix in user supplied params\n    requestOptions.params = {\n      folderName: requestOptions.folderName,\n      file: requestOptions.file,\n      ...requestOptions.params\n    };\n\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Update an info file associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-info.htm) for more information.\n *\n * ```js\n * import { updateItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * updateItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n * ```\n * Update a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm) for more information.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that updates an item resource.\n */\nexport function updateItemResource(\n  requestOptions: IItemResourceOptions\n): Promise<IItemResourceResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(\n      requestOptions as IRequestOptions\n    )}/content/users/${owner}/items/${requestOptions.id}/updateResources`;\n\n    // mix in user supplied params\n    requestOptions.params = {\n      file: requestOptions.resource,\n      fileName: requestOptions.name,\n      resourcesPrefix: requestOptions.prefix,\n      text: requestOptions.content,\n      ...requestOptions.params\n    };\n\n    // only override the access specified previously if 'private' is passed explicitly\n    if (typeof requestOptions.private !== \"undefined\") {\n      requestOptions.params.access = requestOptions.private\n        ? \"private\"\n        : \"inherit\";\n    }\n    return request(url, requestOptions);\n  });\n}\n\n/**\n * Move an item to a folder. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/move-item.htm) for more information.\n *\n * ```js\n * import { moveItem } from \"@esri/arcgis-rest-portal\";\n * //\n * moveItem({\n *   itemId: \"3ef\",\n *   folderId: \"7c5\",\n *   authentication: ArcGISIdentityManager\n * })\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with owner and folder details once the move has been completed\n */\nexport function moveItem(\n  requestOptions: IMoveItemOptions\n): Promise<IMoveItemResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.itemId\n    }/move`;\n\n    let folderId = requestOptions.folderId;\n    if (!folderId) {\n      folderId = \"/\";\n    }\n    requestOptions.params = {\n      folder: folderId,\n      ...requestOptions.params\n    };\n\n    return request(url, requestOptions);\n  });\n}\n"]}