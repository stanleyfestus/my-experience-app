{"version":3,"file":"export.js","sourceRoot":"","sources":["../../../src/items/export.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAqB,MAAM,2BAA2B,CAAC;AACvE,OAAO,EAAE,cAAc,EAAoB,MAAM,cAAc,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAwCzD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,cAAyC,EACX,EAAE;IAChC,MAAM,EACJ,cAAc,EACd,EAAE,EAAE,MAAM,EACV,KAAK,EACL,YAAY,EACZ,gBAAgB,EACjB,GAAG,cAAc,CAAC;IAEnB,OAAO,cAAc,CAAC,cAAc,CAAC;SAClC,IAAI,CACH,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,YAAY,CAAC,cAAc,CAAC,kBAAkB,KAAK,SAAS,CAC3E;SACA,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CACZ,OAAO,CAAC,GAAG,EAAE;QACX,UAAU,EAAE,MAAM;QAClB,cAAc;QACd,MAAM,EAAE;YACN,MAAM;YACN,KAAK;YACL,YAAY;YACZ,gBAAgB;SACjB;KACF,CAAC,CACH,CAAC;AACN,CAAC,CAAC","sourcesContent":["import { request, ISpatialReference } from \"@esri/arcgis-rest-request\";\nimport { determineOwner, IUserItemOptions } from \"./helpers.js\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\n\ntype ExportFormat =\n  | \"Shapefile\"\n  | \"CSV\"\n  | \"File Geodatabase\"\n  | \"Feature Collection\"\n  | \"GeoJson\"\n  | \"Scene Package\"\n  | \"KML\"\n  | \"Excel\";\n\nexport interface IExportLayerInfo {\n  id: number;\n  where?: string;\n  includeGeometry?: boolean;\n  xColumnName?: string;\n  yColumnName?: string;\n}\n\nexport interface IExportParameters {\n  layers?: IExportLayerInfo[];\n  targetSR?: ISpatialReference | string;\n}\n\nexport interface IExportItemRequestOptions extends IUserItemOptions {\n  title?: string;\n  exportFormat: ExportFormat;\n  exportParameters?: IExportParameters;\n}\n\nexport interface IExportItemResponse {\n  type: string;\n  size: number;\n  jobId: string;\n  exportItemId: string;\n  serviceItemId: string;\n  exportFormat: ExportFormat;\n}\n\n/**\n * Exports an item from the portal. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/export-item.htm) for more information.\n *\n * ```js\n * import { exportItem } from \"@esri/arcgis-rest-portal\";\n *\n * exportItem({\n *   id: '3daf',\n *   owner: 'geemike',\n *   exportFormat: 'CSV',\n *   exportParameters: {\n *     layers: [\n *       { id: 0 },\n *       { id: 1, where: 'POP1999 > 100000' }\n *     ]\n *   },\n *   authentication,\n * })\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise<IExportItemResponse>\n */\nexport const exportItem = (\n  requestOptions: IExportItemRequestOptions\n): Promise<IExportItemResponse> => {\n  const {\n    authentication,\n    id: itemId,\n    title,\n    exportFormat,\n    exportParameters\n  } = requestOptions;\n\n  return determineOwner(requestOptions)\n    .then(\n      (owner) => `${getPortalUrl(requestOptions)}/content/users/${owner}/export`\n    )\n    .then((url) =>\n      request(url, {\n        httpMethod: \"POST\",\n        authentication,\n        params: {\n          itemId,\n          title,\n          exportFormat,\n          exportParameters\n        }\n      })\n    );\n};\n"]}