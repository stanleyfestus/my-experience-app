{"version":3,"file":"add.js","sourceRoot":"","sources":["../../../src/items/add.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAGxE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAKL,cAAc,EAEf,MAAM,cAAc,CAAC;AAEtB,OAAO,EAAE,UAAU,EAAsB,MAAM,aAAa,CAAC;AAa7D;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,WAAW,CACzB,cAAmC;IAEnC,MAAM,OAAO,mBACX,IAAI,EAAE;YACJ,EAAE,EAAE,cAAc,CAAC,EAAE;YACrB,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,IAAI,EAAE,cAAc,CAAC,IAAI;SAC1B,IACE,cAAc,CAClB,CAAC;IAEF,OAAO,OAAO,CAAC,EAAE,CAAC;IAClB,OAAO,OAAO,CAAC,IAAI,CAAC;IAEpB,OAAO,UAAU,CAAC,OAA6B,CAAC,CAAC;AACnD,CAAC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,mBAAmB,CACjC,cAA8C;IAE9C,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,YAAY,CACzB,cAAc,CACf,kBAAkB,KAAK,kBAAkB,CAAC;QAE3C,MAAM,OAAO,GAAG,kBAAkB,CAChC,cAAc,EACd,CAAC,cAAc,EAAE,mBAAmB,EAAE,kBAAkB,CAAC,EACzD,EAAE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE,EAAE,CACzC,CAAC;QACF,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,UAAU,eAAe,CAC7B,cAAoC;IAEpC,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACnD,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC,cAAc,CAAC,kBAAkB,KAAK,UAChE,cAAc,CAAC,EACjB,eAAe,CAAC;QAEhB,cAAc,CAAC,MAAM,mBACnB,IAAI,EAAE,cAAc,CAAC,QAAQ,EAC7B,QAAQ,EAAE,cAAc,CAAC,IAAI,EAC7B,eAAe,EAAE,cAAc,CAAC,MAAM,EACtC,IAAI,EAAE,cAAc,CAAC,OAAO,EAC5B,MAAM,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,IACnD,cAAc,CAAC,MAAM,CACzB,CAAC;QAEF,OAAO,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport type { Blob, File } from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport {\n  IUserItemOptions,\n  IItemResourceOptions,\n  IUpdateItemResponse,\n  IItemResourceResponse,\n  determineOwner,\n  IManageItemRelationshipOptions\n} from \"./helpers.js\";\n\nimport { updateItem, IUpdateItemOptions } from \"./update.js\";\n\nexport interface IAddItemDataOptions extends IUserItemOptions {\n  /**\n   * The [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [File](https://developer.mozilla.org/en-US/docs/Web/API/File) to store. In Node JS `File` and `Blob` can be imported from `@esri/arcgis-rest-request`\n   */\n  file?: Blob | File;\n  /**\n   * Text content to store/\n   */\n  text?: string;\n}\n\n/**\n * Send a file or blob to an item to be stored as the `/data` resource. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/update-item.htm) for more information.\n *\n * ```js\n * import { addItemData } from \"@esri/arcgis-rest-portal\";\n *\n * addItemData({\n *   id: '3ef',\n *   data: file,\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with an object reporting\n *        success/failure and echoing the item id.\n */\nexport function addItemData(\n  requestOptions: IAddItemDataOptions\n): Promise<IUpdateItemResponse> {\n  const options: any = {\n    item: {\n      id: requestOptions.id,\n      text: requestOptions.text,\n      file: requestOptions.file\n    },\n    ...requestOptions\n  };\n\n  delete options.id;\n  delete options.data;\n\n  return updateItem(options as IUpdateItemOptions);\n}\n\n/**\n * Add a relationship between two items. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-relationship.htm) for more information.\n *\n * ```js\n * import { addItemRelationship } from \"@esri/arcgis-rest-portal\";\n *\n * addItemRelationship({\n *   originItemId: '3ef',\n *   destinationItemId: 'ae7',\n *   relationshipType: 'Service2Layer',\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemRelationship(\n  requestOptions: IManageItemRelationshipOptions\n): Promise<{ success: boolean }> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(\n      requestOptions\n    )}/content/users/${owner}/addRelationship`;\n\n    const options = appendCustomParams<IManageItemRelationshipOptions>(\n      requestOptions,\n      [\"originItemId\", \"destinationItemId\", \"relationshipType\"],\n      { params: { ...requestOptions.params } }\n    );\n    return request(url, options);\n  });\n}\n\n/**\n * Add a resource associated with an item. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/add-resources.htm) for more information.\n *\n * ```js\n * import { addItemResource } from \"@esri/arcgis-rest-portal\";\n *\n * // Add a file resource\n * addItemResource({\n *   id: '3ef',\n *   resource: file,\n *   name: 'bigkahuna.jpg',\n *   authentication\n * })\n *   .then(response)\n *\n * // Add a text resource\n * addItemResource({\n *   id: '4fg',\n *   content: \"Text content\",\n *   name: 'bigkahuna.txt',\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise to add item resources.\n */\nexport function addItemResource(\n  requestOptions: IItemResourceOptions\n): Promise<IItemResourceResponse> {\n  return determineOwner(requestOptions).then((owner) => {\n    const url = `${getPortalUrl(requestOptions)}/content/users/${owner}/items/${\n      requestOptions.id\n    }/addResources`;\n\n    requestOptions.params = {\n      file: requestOptions.resource,\n      fileName: requestOptions.name,\n      resourcesPrefix: requestOptions.prefix,\n      text: requestOptions.content,\n      access: requestOptions.private ? \"private\" : \"inherit\",\n      ...requestOptions.params\n    };\n\n    return request(url, requestOptions);\n  });\n}\n"]}