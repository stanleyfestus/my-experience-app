{"version":3,"file":"is-service-name-available.js","sourceRoot":"","sources":["../../../src/services/is-service-name-available.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EAAE,OAAO,EAAyB,MAAM,2BAA2B,CAAC;AAG3E;;;;;;;GAOG;AACH,MAAM,UAAU,sBAAsB,CACpC,IAAY,EACZ,IAAY,EACZ,OAA8B;IAE9B,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,sCAAsC,CAAC;IACpE,OAAO,OAAO,CAAC,GAAG,EAAE;QAClB,MAAM,EAAE;YACN,IAAI;YACJ,IAAI;SACL;QACD,UAAU,EAAE,KAAK;QACjB,cAAc,EAAE,OAAO;KACxB,CAAC,CAAC;AACL,CAAC","sourcesContent":["/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\nimport { IServiceNameAvailable } from \"../helpers.js\";\n\n/**\n * Determine if a specific service name is available in the current user's organization\n *\n * @export\n * @param {string} name\n * @param {ArcGISIdentityManager} session\n * @return {*}  {Promise<IServiceNameAvailable>}\n */\nexport function isServiceNameAvailable(\n  name: string,\n  type: string,\n  session: ArcGISIdentityManager\n): Promise<IServiceNameAvailable> {\n  const url = `${session.portal}/portals/self/isServiceNameAvailable`;\n  return request(url, {\n    params: {\n      name,\n      type\n    },\n    httpMethod: \"GET\",\n    authentication: session\n  });\n}\n"]}