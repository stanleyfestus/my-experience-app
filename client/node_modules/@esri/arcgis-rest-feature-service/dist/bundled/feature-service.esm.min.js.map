{"version":3,"file":"feature-service.esm.min.js","sources":["../../src/add.ts","../../src/addAttachment.ts","../../src/addToServiceDefinition.ts","../../src/applyEdits.ts","../../src/createFeatureService.ts","../../src/getLayer.ts","../../src/decodeValues.ts","../../src/delete.ts","../../src/deleteAttachments.ts","../../src/helpers.ts","../../src/getAllLayersAndTables.ts","../../src/getAttachments.ts","../../src/getService.ts","../../src/getServiceAdminInfo.ts","../../src/getViewSources.ts","../../src/query.ts","../../src/queryRelated.ts","../../src/update.ts","../../src/updateAttachment.ts","../../src/updateServiceDefinition.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IFeature\n} from \"@esri/arcgis-rest-request\";\n\nimport { ISharedEditOptions, IEditFeatureResult } from \"./helpers.js\";\n\n/**\n * Add features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n */\nexport interface IAddFeaturesOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to add.\n   */\n  features: IFeature[];\n}\n\n/**\n * Add features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n * ```js\n * import { addFeatures } from '@esri/arcgis-rest-feature-service';\n * //\n * addFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   features: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function addFeatures(\n  requestOptions: IAddFeaturesOptions\n): Promise<{ addResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/addFeatures`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IAddFeaturesOptions>(\n    requestOptions,\n    [\"features\", \"gdbVersion\", \"returnEditMoment\", \"rollbackOnFailure\"],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers.js\";\n\n/**\n * Request options for adding a related attachment to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n */\nexport interface IAddAttachmentOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to add related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be attached.\n   */\n  attachment: File;\n}\n\n/**\n * Attach a file to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n * ```js\n * import { addAttachment } from '@esri/arcgis-rest-feature-service';\n * //\n * addAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0]\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `addAttachment()` response.\n */\nexport function addAttachment(\n  requestOptions: IAddAttachmentOptions\n): Promise<{ addAttachmentResult: IEditFeatureResult }> {\n  const options: IAddAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/addAttachment`,\n    options\n  );\n}\n","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  IUserRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nimport { ILayer, ITable, ILayerDefinition } from \"./helpers.js\";\n\nexport interface IAddToServiceDefinitionOptions extends IUserRequestOptions {\n  /**\n   * Layers to add\n   */\n  layers?: ILayer[] | ILayerDefinition[];\n  /**\n   * Tables to add\n   */\n  tables?: ITable[];\n}\n\nexport interface IAddToServiceDefinitionItemSummary {\n  name: string;\n  id: any;\n}\n\nexport interface IAddToServiceDefinitionResult {\n  layers?: IAddToServiceDefinitionItemSummary[];\n  tables?: IAddToServiceDefinitionItemSummary[];\n  success: boolean;\n}\n\n/**\n * Add layer(s) and/or table(s) to a hosted feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-to-definition-feature-service-.htm) for more information.\n *\n *  ```js\n * import { addToServiceDefinition } from '@esri/arcgis-rest-service-admin';\n * //\n * addToServiceDefinition(serviceurl, {\n *   authentication: ArcGISIdentityManager,\n *   layers: [],\n *   tables: []\n * });\n * ```\n *\n * @param url - URL of feature service\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with service layer and/or table details once the definition\n * has been updated\n */\nexport function addToServiceDefinition(\n  url: string,\n  requestOptions: IAddToServiceDefinitionOptions\n): Promise<IAddToServiceDefinitionResult> {\n  const adminUrl = `${cleanUrl(url).replace(\n    `/rest/services`,\n    `/rest/admin/services`\n  )}/addToDefinition`;\n\n  requestOptions.params = {\n    addToDefinition: {},\n    ...requestOptions.params\n  };\n\n  if (requestOptions.layers && requestOptions.layers.length > 0) {\n    requestOptions.params.addToDefinition.layers = requestOptions.layers;\n  }\n\n  if (requestOptions.tables && requestOptions.tables.length > 0) {\n    requestOptions.params.addToDefinition.tables = requestOptions.tables;\n  }\n\n  return request(adminUrl, requestOptions);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IFeature\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ISharedEditOptions,\n  IApplyEditsResult,\n  IApplyEditsAddAttachmentOptions,\n  IApplyEditsUpdateAttachmentOptions\n} from \"./helpers.js\";\n\n/**\n * Apply edits request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) for more information.\n *\n */\nexport interface IApplyEditsOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to add.\n   */\n  adds?: IFeature[];\n  /**\n   * Array of JSON features to update.\n   */\n  updates?: IFeature[];\n  /**\n   * Array of objectIds or globalIds to delete.\n   */\n  deletes?: number[] | string[];\n  /**\n   * When set to true, the features and attachments in the adds, updates, deletes, and attachments parameters are identified by their globalIds.\n   */\n  useGlobalIds?: boolean;\n  /**\n   * Optional parameter which is false by default is set by client to indicate to the server that client in true curve capable.\n   */\n  trueCurveClient?: boolean;\n  /**\n   * Use the attachments parameter to add, update or delete attachments. Applies only when the useGlobalIds parameter is set to true.\n   * See [attachment](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) param details.\n   */\n  attachments?: {\n    adds?: IApplyEditsAddAttachmentOptions[];\n    updates?: IApplyEditsUpdateAttachmentOptions[];\n    deletes?: string[];\n  };\n}\n\n/**\n * Apply edits request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/apply-edits-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { applyEdits } from '@esri/arcgis-rest-feature-service';\n * //\n * applyEdits({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   adds: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }],\n *   updates: [{\n *     attributes: { OBJECTID: 1004, status: \"alive\" }\n *   }],\n *   deletes: [862, 1548]\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the applyEdits response.\n */\nexport function applyEdits(\n  requestOptions: IApplyEditsOptions\n): Promise<IApplyEditsResult> {\n  const url = `${cleanUrl(requestOptions.url)}/applyEdits`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IApplyEditsOptions>(\n    requestOptions,\n    [\n      \"adds\",\n      \"updates\",\n      \"deletes\",\n      \"useGlobalIds\",\n      \"attachments\",\n      \"gdbVersion\",\n      \"returnEditMoment\",\n      \"rollbackOnFailure\",\n      \"trueCurveClient\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IExtent, ISpatialReference } from \"@esri/arcgis-rest-request\";\n\nimport {\n  moveItem,\n  ICreateUpdateItemOptions,\n  determineOwner,\n  getPortalUrl\n} from \"@esri/arcgis-rest-portal\";\n\n/**\n * A [`createParameters` JSON object for a new\n * service](https://developers.arcgis.com/rest/users-groups-and-items/create-service.htm).\n */\nexport interface ICreateServiceParams {\n  /**\n   * Name of the service to be created. This name must be unique. If the name already exists, the operation will fail. ArcGIS Enterprise does not allow spaces or special characters other than underscores in a service name.\n   */\n  name: string;\n  /**\n   * Description given to the service.\n   */\n  serviceDescription?: string;\n  /**\n   * Indicates whether the data changes.\n   */\n  hasStaticData?: boolean;\n  /**\n   * A double value indicating any constraints enforced on query operations.\n   */\n  maxRecordCount?: number;\n  /**\n   * The formats in which query results are returned.\n   */\n  supportedQueryFormats?: string;\n  /**\n   * Specify feature service editing capabilities for Create, Delete, Query, Update, and Sync.\n   */\n  capabilities?: string;\n  /**\n   * A user-friendly description for the published dataset.\n   */\n  description?: string;\n  /**\n   * Copyright information associated with the dataset.\n   */\n  copyrightText?: string;\n  /**\n   * All layers added to a hosted feature service need to have the same spatial reference defined for\n   * the feature service. When creating a new empty service without specifying its spatial reference,\n   * the spatial reference of the hosted feature service is set to the first layer added to that\n   * feature service.\n   */\n  spatialReference?: ISpatialReference;\n  /**\n   * The initial extent set for the service.\n   */\n  initialExtent?: IExtent;\n  /**\n   * Indicates if updating the geometry of the service is permitted.\n   */\n  allowGeometryUpdates?: boolean;\n  /**\n   * Units used by the feature service\n   */\n  units?: string;\n  /**\n   * A JSON object specifying the properties of cross-site scripting prevention.\n   */\n  xssPreventionInfo?: any;\n  /**\n   * Editor tracking info.\n   */\n  editorTrackingInfo?: {\n    enableEditorTracking?: boolean;\n    enableOwnershipAccessControl?: boolean;\n    allowOthersToUpdate?: boolean;\n    allowOthersToDelete?: boolean;\n    allowOthersToQuery?: boolean;\n    allowAnonymousToUpdate?: boolean;\n    allowAnonymousToDelete?: boolean;\n  };\n}\n\nexport interface ICreateServiceOptions extends ICreateUpdateItemOptions {\n  /**\n   * A JSON object specifying the properties of the newly-created service. See the [REST\n   * Documentation](https://developers.arcgis.com/rest/users-groups-and-items/working-with-users-groups-and-items.htm)\n   * for more information.\n   */\n  item: ICreateServiceParams;\n  /**\n   * Alphanumeric id of folder to house moved item. If null, empty, or \"/\", the destination is the\n   * root folder.\n   */\n  folderId?: string;\n}\n\nexport interface ICreateServiceResult {\n  /**\n   * The encoded URL to the hosted service.\n   */\n  encodedServiceURL: string;\n\n  /**\n   * Indicates if this feature service represents a view.\n   */\n  isView: boolean;\n\n  /**\n   * The unique ID for this item.\n   */\n  itemId: string;\n\n  /**\n   * Name of the service item.\n   */\n  name: string;\n\n  /**\n   * The ID of the new service item.\n   */\n  serviceItemId: string;\n\n  /**\n   * The URL to the hosted service.\n   */\n  serviceurl: string;\n\n  /**\n   * The size of the item.\n   */\n  size: number;\n\n  /**\n   * Indicates if the operation was successful.\n   */\n  success: boolean;\n\n  /**\n   * The type of service created.\n   */\n  type: string;\n}\n\n/**\n * Create a new [hosted feature service](https://developers.arcgis.com/rest/users-groups-and-items/create-service.htm). After the service has been created, call [`addToServiceDefinition()`](../addToServiceDefinition/) if you'd like to update it's schema.\n *\n * ```js\n * import {\n *   createFeatureService,\n *   addToServiceDefinition\n * } from '@esri/arcgis-rest-service-admin';\n * //\n * createFeatureService({\n *   authentication: ArcGISIdentityManager,\n *   item: {\n *     \"name\": \"NewEmptyService\",\n *     \"capabilities\": \"Create,Delete,Query,Update,Editing\"\n *   }\n * });\n * ```\n *\n * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n * @returns A Promise that resolves with service details once the service has been created\n */\nexport function createFeatureService(\n  requestOptions: ICreateServiceOptions\n): Promise<ICreateServiceResult> {\n  return determineOwner(requestOptions).then((owner) => {\n    const options: ICreateServiceOptions = {\n      ...requestOptions,\n      rawResponse: false\n    };\n    const baseUrl = `${getPortalUrl(requestOptions)}/content/users/${owner}`;\n    const folder =\n      !options.folderId || options.folderId === \"/\"\n        ? \"\"\n        : \"/\" + options.folderId;\n    const url = `${baseUrl}${folder}/createService`;\n\n    // Create the service\n    options.params = {\n      createParameters: options.item,\n      outputType: \"featureService\",\n      ...options.params\n    };\n\n    return request(url, options);\n  });\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, ILayerDefinition } from \"./helpers.js\";\n\n/**\n * Layer (Feature Service) request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/layer-feature-service-.htm) for more information.\n *\n * ```js\n * import { getLayer } from '@esri/arcgis-rest-feature-service';\n * //\n * getLayer({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function getLayer(options: IGetLayerOptions): Promise<ILayerDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions, IField, IFeature } from \"@esri/arcgis-rest-request\";\n\nimport { IQueryFeaturesResponse } from \"./query.js\";\nimport { getLayer } from \"./getLayer.js\";\nimport { ILayerDefinition } from \"./helpers.js\";\n\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IDecodeValuesOptions extends IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url?: string;\n  /**\n   * Unique identifier of the feature.\n   */\n  queryResponse: IQueryFeaturesResponse;\n  /**\n   * * If a fieldset is provided, no internal metadata check will be issued to gather info about coded value domains.\n   *\n   * getFeatureService(url)\n   *   .then(metadata => {\n   *     queryFeatures({ url })\n   *       .then(response => {\n   *         decodeValues({\n   *           url,\n   *           queryResponse,\n   *           fields: metadata.fields\n   *         })\n   *           .then(decodedResponse)\n   *       })\n   *   })\n   */\n  fields?: IField[];\n}\n\n/**\n * ```js\n * import { queryFeatures, decodeValues } from '@esri/arcgis-rest-feature-service';\n * //\n * const url = `https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0`\n * queryFeatures({ url })\n *   .then(queryResponse => {\n *     decodeValues({\n *       url,\n *       queryResponse\n *     })\n *       .then(decodedResponse)\n *   })\n * ```\n * Replaces the raw coded domain values in a query response with descriptions (for legibility).\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function decodeValues(\n  requestOptions: IDecodeValuesOptions\n): Promise<IQueryFeaturesResponse> {\n  let prms;\n  if (requestOptions.fields) {\n    prms = Promise.resolve(requestOptions.fields);\n  } else {\n    prms = getLayer({ url: requestOptions.url }).then(\n      (metadata: ILayerDefinition) => {\n        return metadata.fields;\n      }\n    );\n  }\n  return prms.then((fields) => {\n    // extract coded value domains\n    const domains = extractCodedValueDomains(fields);\n    if (Object.keys(domains).length < 1) {\n      // no values to decode\n      return requestOptions.queryResponse;\n    }\n\n    // don't mutate original features\n    const decodedFeatures = requestOptions.queryResponse.features.map(\n      (feature: IFeature) => {\n        const decodedAttributes: { [index: string]: any } = {};\n        for (const key in feature.attributes) {\n          /* istanbul ignore next */\n          if (!Object.prototype.hasOwnProperty.call(feature.attributes, key))\n            continue;\n          const value = feature.attributes[key];\n          const domain = domains[key];\n          decodedAttributes[key] =\n            value !== null && domain ? decodeValue(value, domain) : value;\n        }\n        // merge decoded attributes into the feature\n        return { ...feature, ...{ attributes: decodedAttributes } };\n      }\n    );\n    // merge decoded features into the response\n    return {\n      ...requestOptions.queryResponse,\n      ...{ features: decodedFeatures }\n    };\n  });\n}\n\nfunction extractCodedValueDomains(fields: IField[]) {\n  return fields.reduce((domains, field) => {\n    const domain = field.domain;\n    if (domain && domain.type === \"codedValue\") {\n      domains[field.name] = domain;\n    }\n    return domains;\n  }, {} as { [index: string]: any });\n}\n\n// TODO: add type for domain?\nfunction decodeValue(value: any, domain: any) {\n  const codedValue = domain.codedValues.find((d: any) => {\n    return value === d.code;\n  });\n  return codedValue ? codedValue.name : value;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ISharedEditOptions,\n  IEditFeatureResult,\n  ISharedQueryOptions\n} from \"./helpers.js\";\n\n/**\n * Delete features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n */\nexport interface IDeleteFeaturesOptions\n  extends ISharedEditOptions,\n    ISharedQueryOptions {\n  /**\n   * Array of objectIds to delete.\n   */\n  objectIds: number[];\n}\n\n/**\n * Delete features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n * ```js\n * import { deleteFeatures } from '@esri/arcgis-rest-feature-service';\n * //\n * deleteFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   objectIds: [1,2,3]\n * });\n * ```\n *\n * @param deleteFeaturesRequestOptions - Options for the request.\n * @returns A Promise that will resolve with the deleteFeatures response.\n */\nexport function deleteFeatures(\n  requestOptions: IDeleteFeaturesOptions\n): Promise<{ deleteResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/deleteFeatures`;\n\n  // edit operations POST only\n  const options = appendCustomParams<IDeleteFeaturesOptions>(\n    requestOptions,\n    [\n      \"where\",\n      \"objectIds\",\n      \"gdbVersion\",\n      \"returnEditMoment\",\n      \"rollbackOnFailure\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers.js\";\n\n/**\n * Request options to for deleting related attachments of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n */\nexport interface IDeleteAttachmentsOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to delete related attachment(s).\n   */\n  featureId: number;\n  /**\n   * Array of unique identifiers of attachments to delete.\n   */\n  attachmentIds: number[];\n}\n\n/**\n * Delete existing attachment files of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n * ```js\n * import { deleteAttachments } from '@esri/arcgis-rest-feature-service';\n * //\n * deleteAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachmentIds: [306]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `deleteAttachments()` response.\n */\nexport function deleteAttachments(\n  requestOptions: IDeleteAttachmentsOptions\n): Promise<{ deleteAttachmentResults: IEditFeatureResult[] }> {\n  const options: IDeleteAttachmentsOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachmentIds` --> params: {}\n  options.params.attachmentIds = requestOptions.attachmentIds;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/deleteAttachments`,\n    options\n  );\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport {\n  cleanUrl,\n  IRequestOptions,\n  GeometryType,\n  IGeometry,\n  ISpatialReference,\n  IHasZM,\n  IExtent,\n  IField,\n  IFeature\n} from \"@esri/arcgis-rest-request\";\n\n/**\n * The spatial relationship used to compare input geometries\n */\nexport type SpatialRelationship =\n  | \"esriSpatialRelIntersects\"\n  | \"esriSpatialRelContains\"\n  | \"esriSpatialRelCrosses\"\n  | \"esriSpatialRelEnvelopeIntersects\"\n  | \"esriSpatialRelIndexIntersects\"\n  | \"esriSpatialRelOverlaps\"\n  | \"esriSpatialRelTouches\"\n  | \"esriSpatialRelWithin\";\n\n/**\n * Base options for making requests against feature layers\n */\nexport interface IGetLayerOptions extends IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url: string;\n}\n\nexport interface ISharedQueryOptions extends IGetLayerOptions {\n  /**\n   * A where clause for the query. Defaults to \"1=1\"\n   */\n  where?: string;\n  geometry?: IGeometry;\n  geometryType?: GeometryType;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  spatialRel?: SpatialRelationship;\n}\n\n/**\n * Add, update and delete features result Object.\n */\nexport interface IEditFeatureResult {\n  objectId: number;\n  globalId?: string;\n  success: boolean;\n  /**\n   * Error is optional and is only returned when `success` is `false`.\n   */\n  error?: {\n    code: number;\n    description: string;\n  };\n}\n\n/**\n * Shared add/update attachment options for apply edits.\n */\ninterface IApplyEditsSharedAttachmentOptions {\n  /**\n   * Attachment file content type.\n   */\n  contentType: string;\n  /**\n   * Name of the file including extension.\n   */\n  name: string;\n  /**\n   * Upload id of file to be attached.\n   */\n  uploadId?: string;\n  /**\n   * Base 64 encoded data of attachment.\n   */\n  data?: string;\n}\n\n/**\n * Add attachment options for apply edits.\n */\nexport interface IApplyEditsAddAttachmentOptions\n  extends IApplyEditsSharedAttachmentOptions {\n  /**\n   * Global id of attachment (must be provided by client).\n   */\n  globalId: string;\n  /**\n   * Global id of feature to attach.\n   */\n  parentGlobalId: string;\n}\n\n/**\n * Update attachment options for apply edits.\n */\nexport interface IApplyEditsUpdateAttachmentOptions\n  extends IApplyEditsSharedAttachmentOptions {\n  /**\n   * Global id of attachment.\n   */\n  globalId: string;\n}\n\n/**\n * `globalId` always returned with attachments via apply edits.\n */\nexport interface IApplyEditsAttachmentResult extends IEditFeatureResult {\n  globalId: string;\n}\n\n/**\n * Apply edits result Object.\n */\nexport interface IApplyEditsResult {\n  addResults: IEditFeatureResult[];\n  updateResults: IEditFeatureResult[];\n  deleteResults: IEditFeatureResult[];\n  attachments?: {\n    addResults?: IApplyEditsAttachmentResult[];\n    updateResults?: IApplyEditsAttachmentResult[];\n    deleteResults?: IApplyEditsAttachmentResult[];\n  };\n}\n\n/**\n * Common add, update, and delete features options.\n */\nexport interface ISharedEditOptions extends IGetLayerOptions {\n  /**\n   * The geodatabase version to apply the edits.\n   */\n  gdbVersion?: string;\n  /**\n   * Optional parameter specifying whether the response will report the time features were added.\n   */\n  returnEditMoment?: boolean;\n  /**\n   * Optional parameter to specify if the edits should be applied only if all submitted edits succeed.\n   */\n  rollbackOnFailure?: boolean;\n}\n\nconst serviceRegex = new RegExp(/.+(?:map|feature|image)server/i);\n/**\n * Return the service url. If not matched, returns what was passed in\n */\nexport function parseServiceUrl(url: string) {\n  const match = url.match(serviceRegex);\n  if (match) {\n    return match[0];\n  } else {\n    return stripQueryString(url);\n  }\n}\n\nfunction stripQueryString(url: string) {\n  const stripped = url.split(\"?\")[0];\n  return cleanUrl(stripped);\n}\n\nexport interface IStatisticDefinition {\n  /**\n   * Statistical operation to perform (count, sum, min, max, avg, stddev, var, percentile_cont, percentile_disc, EnvelopeAggregate, CentroidAggregate, ConvexHullAggregate).\n   */\n  statisticType:\n    | \"count\"\n    | \"sum\"\n    | \"min\"\n    | \"max\"\n    | \"avg\"\n    | \"stddev\"\n    | \"var\"\n    | \"percentile_cont\"\n    | \"percentile_disc\"\n    | \"EnvelopeAggregate\"\n    | \"CentroidAggregate\"\n    | \"ConvexHullAggregate\";\n  /**\n   * Parameters to be used along with statisticType. Currently, only applicable for percentile_cont (continuous percentile) and percentile_disc (discrete percentile).\n   */\n  statisticParameters?: {\n    value: number;\n    orderBy?: \"asc\" | \"desc\";\n  };\n  /**\n   * Field on which to perform the statistical operation.\n   */\n  onStatisticField: string;\n  /**\n   * Field name for the returned statistic field. If outStatisticFieldName is empty or missing, the server will assign one. A valid field name can only contain alphanumeric characters and an underscore. If the outStatisticFieldName is a reserved keyword of the underlying DBMS, the operation can fail. Try specifying an alternative outStatisticFieldName.\n   */\n  outStatisticFieldName?: string;\n}\n\nexport interface ILayer {\n  /** A unique identifying string for the layer. */\n  id: any;\n  /** Layer name */\n  name?: string;\n  /** Optional string containing the item ID of the service if it's registered on ArcGIS Online or your organization's portal. */\n  itemId?: string;\n  /** Indicates the layer type */\n  layerType: string;\n  /** Integer property used to determine the maximum scale at which the layer is displayed. */\n  maxScale?: number;\n  /** Integer property used to determine the minimum scale at which the layer is displayed. */\n  minScale?: number;\n  /** The degree of transparency applied to the layer on the client side, where 0 is full transparency and 1 is no transparency. */\n  opacity?: number;\n  /** Boolean property indicating whether to display in the legend. */\n  showLegend?: boolean;\n  /** A user-friendly string title for the layer that can be used in a table of contents. */\n  title?: string;\n  /**\n   * Deprecated, use layerType instead.\n   * @deprecated\n   */\n  type?: string;\n  /** Boolean property determining whether the layer is initially visible in the web map. */\n  visibility?: boolean;\n  /** The URL to the layer. Not applicable to all layer types. */\n  url?: string;\n}\n\n/**\n * Very generic structure representing the return value from the\n * /arcgis/rest/admin/services/<service-name>/FeatureServer?f=json response\n */\nexport interface IServiceInfo extends Record<string, unknown> {\n  adminServiceInfo: {\n    name: string;\n    type: string;\n    status: string;\n    database: {\n      datasource: {\n        name: string;\n      };\n    };\n  };\n  layers: Record<string, unknown>[];\n}\n\n/**\n * Individual View Source entry\n */\n\nexport interface IViewServiceSource {\n  name: string;\n  type: string;\n  url: string;\n  serviceItemId: string;\n}\n\n/**\n * Response from the /sources end-point of a view service\n */\nexport interface IViewServiceSources {\n  currentVersion: number;\n  services: IViewServiceSource[];\n}\n\n/**\n * `IFeatureServiceDefinition` can also be imported from the following packages:\n *\n * ```js\n * import { IFeatureServiceDefinition } from \"@esri/arcgis-rest-service-admin\";\n * import { IFeatureServiceDefinition } from \"@esri/arcgis-rest-feature-service\";\n * ```\n */\nexport interface IFeatureServiceDefinition {\n  currentVersion?: number;\n  serviceDescription: string;\n  hasVersionedData: boolean;\n  supportsDisconnectedEditing: boolean;\n  supportsReturnDeleteResults: boolean;\n  /** Boolean value indicating whether data changes. True if it does not. */\n  hasStaticData?: boolean;\n  /** Numeric value indicating tbe maximum number of records that will be returned at once for a query. */\n  maxRecordCount: number;\n  /** String value indicating the output formats that are supported in a query. */\n  supportedQueryFormats: string;\n  supportsRelationshipsResource: boolean;\n  /** A comma separated list of supported capabilities, e.g. Query,Editing. */\n  capabilities: string;\n  /** String value of the layer as defined in the map service. */\n  description: string;\n  /** String value for the copyright text information for the layer. */\n  copyrightText: string;\n  advancedEditingCapabilities: { [key: string]: boolean };\n  /** An object containing the WKID or WKT identifying the spatial reference of the layer's geometry. */\n  spatialReference: ISpatialReference;\n  initialExtent: IExtent;\n  fullExtent: IExtent;\n  /** Boolean value indicating whether the geometry of the features in the layer can be edited. */\n  allowGeometryUpdates: boolean;\n  units: string;\n  syncEnabled: boolean;\n  returnServiceEditsHaveSR?: boolean;\n  validationSystemLayers: {\n    validationPointErrorlayerId: number;\n    validationLineErrorlayerId: number;\n    validationPolygonErrorlayerId: number;\n    validationObjectErrortableId: number;\n  };\n  extractChangesCapabilities: {\n    supportsReturnIdsOnly: boolean;\n    supportsReturnExtentOnly: boolean;\n    supportsReturnAttachments: boolean;\n    supportsLayerQueries: boolean;\n    supportsSpatialFilter: boolean;\n    supportsReturnFeature: boolean;\n  };\n  syncCapabilities: {\n    supportsASync: boolean;\n    supportsRegisteringExistingData: boolean;\n    supportsSyncDirectionControl: boolean;\n    supportsPerLayerSync: boolean;\n    supportsPerReplicaSync: boolean;\n    supportsRollbackOnFailure: boolean;\n    supportedSyncDataOptions: number;\n  };\n  editorTrackingInfo: {\n    enableEditorTracking: boolean;\n    enableOwnershipAccessControl: boolean;\n    allowOthersToUpdate: boolean;\n    allowOthersToDelete: boolean;\n  };\n  documentInfo?: { [key: string]: string };\n  // the feature layers published by this service\n  layers: ILayerDefinition[];\n  // the non-spatial tables published by this service\n  tables: ITable[];\n  relationships: [\n    {\n      id: number;\n      name: string;\n      backwardPathLabel: string;\n      originLayerId: number;\n      originPrimaryKey: string;\n      forwardPathLabel: string;\n      destinationLayerId: number;\n      originForeignKey: string;\n      relationshipTableId: number;\n      destinationPrimaryKey: string;\n      destinationForeignKey: string;\n      rules: [\n        {\n          ruleID: number;\n          originSubtypeCode: number;\n          originMinimumCardinality: number;\n          originMaximumCardinality: number;\n          destinationSubtypeCode: number;\n          destinationMinimumCardinality: number;\n          destinationMaximumCardinality: number;\n        }\n      ];\n      cardinality:\n        | \"esriRelCardinalityOneToOne\"\n        | \"esriRelCardinalityOneToMany\"\n        | \"esriRelCardinalityManyToMany\";\n      attributed: boolean;\n      composite: boolean;\n    }\n  ];\n  enableZDefaults?: boolean;\n  isLocationTrackingService: boolean;\n  isLocationTrackingView: boolean;\n  zDefault?: number;\n}\n\n/**\n * Root element in the web map specifying an array of table objects.\n *\n * `ITable` can also be imported from the following packages:\n *\n * ```js\n * import { ITable } from \"@esri-arcgis-rest-service-admin\"\n * ```\n */\nexport interface ITable {\n  /** Table name */\n  name?: string;\n  /** A comma-separated string listing which editing operations are allowed on an editable feature service. Available operations include: 'Create', 'Delete', 'Query', 'Update', and 'Editing'. */\n  capabilities?: string;\n  /** Object indicating the definitionEditor used as a layer's interactive filter. */\n  definitionEditor?: IDefinitionEditor;\n  /** Unique identifier for the table. */\n  id?: number;\n  /** Unique string value indicating an item registered in ArcGIS Online or your organization's portal. */\n  itemId?: string;\n  /** A layerDefinition object defining a definition expression for the table. */\n  layerDefinition?: ILayerDefinition;\n  /** An object defining the content of popup windows when you query a record and the sort option for child related records. */\n  popupInfo?: IPopupInfo;\n  /** String value for the title of the table. */\n  title?: string;\n  /** String value indicating the URL reference of the hosted table. */\n  url?: string;\n}\n\nexport interface IDefinitionParameter {\n  /** The default value that is automatically given if nothing is provided. */\n  defaultValue?: number | string;\n  /** A string value representing the name of the field to query. */\n  fieldName?: string;\n  /** Number given to uniquely identify the specified parameter. */\n  parameterId?: any;\n  /** The field type for the specified field parameter. */\n  type?:\n    | \"esriFieldTypeBlob\"\n    | \"esriFieldTypeDate\"\n    | \"esriFieldTypeDouble\"\n    | \"esriFieldTypeGeometry\"\n    | \"esriFieldTypeGlobalID\"\n    | \"esriFieldTypeGUID\"\n    | \"esriFieldTypeInteger\"\n    | \"esriFieldTypeOID\"\n    | \"esriFieldTypeRaster\"\n    | \"esriFieldTypeSingle\"\n    | \"esriFieldTypeSmallInteger\"\n    | \"esriFieldTypeString\"\n    | \"esriFieldTypeXML\";\n\n  /** An integer value representing exact UNIX time used when defaultValue is a date string. */\n  utcValue?: number;\n}\n\nexport interface IDefinitionInput {\n  /** A string value representing a hint for the input. */\n  hint?: string;\n  /** An array of parameter objects. */\n  parameters?: IDefinitionParameter[];\n  /** A string value representing the prompt for the input. */\n  prompt?: string;\n}\n\n/**\n * The definitionEditor stores interactive filters at the same level as layerDefinition.\n */\nexport interface IDefinitionEditor {\n  /** An array of input objects. */\n  inputs?: IDefinitionInput[];\n  /** A string value representing the where clause for the interactive filter. */\n  parameterizedExpression?: string;\n}\n\n/**\n * Arcade expression added to the pop-up.\n */\nexport interface IPopupExpressionInfo {\n  /** The Arcade expression. */\n  expression?: string;\n  /** Unique identifier for the expression. */\n  name?: string;\n  /** Return type of the Arcade expression, can be number or string. Defaults to string value. Number values are assumed to be double. This can be determined by the authoring client by executing the expression using a sample feature(s), although it can be corrected by the user. Knowing the returnType allows the authoring client to present fields in relevant contexts. For example, numeric fields in numeric contexts such as charts. */\n  returnType?: \"number\" | \"string\";\n  /** Title of the expression. */\n  title?: string;\n}\n\n/**\n * The format object can be used with numerical or date fields to provide more detail about how values should be displayed in popup windows.\n */\nexport interface IFieldFormat {\n  /** A string used with date fields to specify how the date should appear in popup windows. */\n  dateFormat?:\n    | \"shortDate\"\n    | \"shortDateLE\"\n    | \"longMonthDayYear\"\n    | \"dayShortMonthYear\"\n    | \"longDate\"\n    | \"shortDateShortTime\"\n    | \"shortDateLEShortTime\"\n    | \"shortDateShortTime24\"\n    | \"shortDateLEShortTime24\"\n    | \"shortDateLongTime\"\n    | \"shortDateLELongTime\"\n    | \"shortDateLongTime24\"\n    | \"shortDateLELongTime24\"\n    | \"longMonthYear\"\n    | \"shortMonthYear\"\n    | \"year\";\n\n  /**\n   * A Boolean used with numerical fields. A value of true allows the number to have a digit (or thousands) separator when the value appears in popup windows.\n   * Depending on the locale, this separator is a decimal point or a comma. A value of false means that no separator will be used.\n   */\n  digitSeparator?: boolean;\n  /**\n   * An integer used with numerical fields to specify the number of supported decimal places that should appear in popup windows. Any places beyond this value are rounded.\n   */\n  places?: number;\n}\n\n/**\n * Defines how a field in the dataset participates (or does not participate) in a popup window.\n */\nexport interface IFieldInfo {\n  /** A string containing the field name as defined by the service. Anywhere that a fieldname is referenced as {field-name} in popupInfo, an Arcade expression can also be referenced as{expression/}`. */\n  fieldName?: any;\n  /** A format object used with numerical or date fields to provide more detail about how the value should be displayed in a web map popup window. */\n  format?: IFieldFormat;\n  /** A Boolean determining whether users can edit this field. Not applicable to Arcade expressions. */\n  isEditable?: boolean;\n  /** A string containing the field alias. This can be overridden by the web map author. Not applicable to Arcade expressions as title is used instead. */\n  label?: string;\n  /** A string determining what type of input box editors see when editing the field. Applies only to string fields. Not applicable to Arcade expressions. */\n  stringFieldOption?: \"textbox\" | \"textarea\" | \"richtext\";\n\n  /** A string providing an editing hint for editors of the field. Not applicable to Arcade expressions. */\n  tooltip?: string;\n  /** A Boolean determining whether the field is visible in the popup window. */\n  visible?: boolean;\n}\n\n/**\n * Defines the look and feel of popup windows when a user clicks or queries a feature.\n */\nexport interface IPopupInfo {\n  /** A string that appears in the body of the popup window as a description. It is also possible to specify the description as HTML-formatted content. */\n  description?: string | null;\n  /** List of Arcade expressions added to the pop-up. */\n  expressionInfos?: IPopupExpressionInfo[];\n  /** Array of fieldInfo information properties. This information is provided by the service layer definition. When the description uses name/value pairs, the order of the array is how the fields display in the editable Map Viewer popup and the resulting popup. It is also possible to specify HTML-formatted content. */\n  fieldInfos?: IFieldInfo[];\n  /** Additional options that can be defined for the popup layer. */\n  layerOptions?: {\n    /** Indicates whether or not the NoData records should be displayed. */\n    showNoDataRecords: boolean;\n  };\n  /** Array of various mediaInfo to display. Can be of type image, piechart, barchart, columnchart, or linechart. The order given is the order in which is displays. */\n  mediaInfos?: IMediaInfo[];\n  /** An array of popupElement objects that represent an ordered list of popup elements. */\n  popupElements?: IPopupElement[];\n  /** Indicates whether to enable related records if they exist on a layer. */\n  relatedRecordsInfo?: IRelatedRecordsInfo;\n  /** Indicates whether attachments will be loaded for feature layers that have attachments. */\n  showAttachments?: boolean;\n  /** A string that appears at the top of the popup window as a title. */\n  title?: string;\n}\n\n/**\n * The sort in the popupInfo for the parent feature. This impacts the sorting order for the returned child records.\n */\nexport interface IRelatedRecordsInfo {\n  /** Array of orderByFields objects indicating the field display order for the related records and whether they should be sorted in ascending 'asc' or descending 'desc' order. */\n  orderByFields?: IOrderByField[];\n  /** Required boolean value indicating whether to display related records. If true, client should let the user navigate to the related records. Defaults to true if the layer participates in a relationship AND the related layer/table has already been added to the map (either as an operationalLayer or as a table). */\n  showRelatedRecords: boolean;\n}\n\n/**\n * Object indicating the field display order for the related records and whether they should be sorted in ascending or descending order.\n */\nexport interface IOrderByField {\n  /** The attribute value of the field selected that will drive the sorting of related records. */\n  field?: string;\n  /** Set the ascending or descending sort order of the returned related records. */\n  order?: \"asc\" | \"desc\";\n}\n\n/**\n * The value object contains information for popup windows about how images should be retrieved or charts constructed.\n */\nexport interface IMediaInfoValue {\n  /** Used with charts. An array of strings, with each string containing the name of a field to display in the chart. */\n  fields?: string[];\n  /** Used with images. A string containing a URL to be launched in a browser when a user clicks the image. */\n  linkURL?: string;\n  /** Used with charts. An optional string containing the name of a field. The values of all fields in the chart will be normalized (divided) by the value of this field. */\n  normalizeField?: string;\n  /** Used with images. A string containing the URL to the image. */\n  sourceURL?: string;\n  /** String value indicating the tooltip for a chart specified from another field. This field is needed when related records are not sued. It is used for showing tooltips from another field in the same layer or related layer/table. */\n  tooltipField?: string;\n}\n\n/**\n * Defines an image or a chart to be displayed in a popup window.\n */\nexport interface IMediaInfo {\n  /** A string caption describing the media. */\n  caption?: any;\n  /** Refresh interval of the layer in minutes. Non-zero value indicates automatic layer refresh at the specified interval. Value of 0 indicates auto refresh is not enabled. If the property does not exist, it's equivalent to having a value of 0. Only applicable when type is set to image. */\n  refreshInterval?: any;\n  /** A string title for the media. */\n  title?: string | null;\n  /** A string defining the type of media. */\n  type?: \"image\" | \"barchart\" | \"columnchart\" | \"linechart\" | \"piechart\";\n\n  /** A value object containing information about how the image should be retrieved or how the chart should be constructed. */\n  value?: IMediaInfoValue | null;\n}\n\n/**\n * Popup elements allow users to author popups, using multiple elements such as tabular views, string description, media (charts and images), and attachments of the attributes\n * and control the order in which they appear. Specifically, popupElements do the following:\n * 1) provide the ability to explicitly add a field/ value table in addition to a description,\n * 2) allow adding multiple description elements, and\n * 3) allow a user to author and consume elements of a popup in the order of their choosing.\n */\nexport interface IPopupElement {\n  /**\n   * This property applies to elements of type attachments. A string value indicating how to display the attachment.\n   * Possible values are, preview, and list. If list is specified, attachments show as links.\n   */\n  displayType?: \"preview\" | \"list\";\n  /**\n   * This property applies to elements of type fields. It is an array of popupInfo.fieldInfo objects representing a field/value pair displayed as a table within the popupElement.\n   * If the fieldInfos property is not provided, the popupElement will display whatever is specified directly in the popupInfo.fieldInfos property.\n   */\n  fieldInfos?: IFieldInfo[];\n  /**\n   * This property applies to elements of type media. An array of popupInfo.mediaInfo objects representing an image or chart for display.\n   * If no mediaInfos property is provided, the popupElement will display whatever is specified in the popupInfo.mediaInfo property.\n   */\n  mediaInfos?: IMediaInfo[];\n  /**\n   * This property applies to elements of type text. This is string value indicating the text to be displayed within the popupElement.\n   * If no text property is provided, the popupElement will display whatever is specified in the popupInfo.description property.\n   */\n  text?: string;\n  /** String value indicating which elements to use. */\n  type?: \"text\" | \"fields\" | \"media\" | \"attachments\";\n}\n\nexport interface IEditingInfo {\n  /** date of last edit to the layer  */\n  lastEditDate?: number;\n}\n\nexport type FeatureEditTool =\n  | \"esriFeatureEditToolAutoCompletePolygon\"\n  | \"esriFeatureEditToolPolygon\"\n  | \"esriFeatureEditToolTriangle\"\n  | \"esriFeatureEditToolRectangle\"\n  | \"esriFeatureEditToolLeftArrow\"\n  | \"esriFeatureEditToolRightArrow\"\n  | \"esriFeatureEditToolEllipse\"\n  | \"esriFeatureEditToolUpArrow\"\n  | \"esriFeatureEditToolDownArrow\"\n  | \"esriFeatureEditToolCircle\"\n  | \"esriFeatureEditToolFreehand\"\n  | \"esriFeatureEditToolLine\"\n  | \"esriFeatureEditToolNone\"\n  | \"esriFeatureEditToolText\"\n  | \"esriFeatureEditToolPoint\";\n\n/**\n * Templates describe features that can be created in a layer. They are generally used with feature collections and editable web-based CSV layers.\n * Templates are not used with ArcGIS feature services as these already have templates defined in the service. They are also defined as properties\n * of the layer definition when there are no defined types. Otherwise, templates are defined as properties of the types.\n */\nexport interface ITemplate {\n  /** A string value containing a detailed description of the template. */\n  description?: any;\n  /**\n   * An optional string that can define a client-side drawing tool to be used with this feature. For example, map notes used by the Online Map Viewer use this to represent the viewer's different drawing tools.\n   */\n  drawingTool?: FeatureEditTool;\n  /** A string containing a user-friendly name for the template. */\n  name?: string;\n  /** A feature object representing a prototypical feature for the template. */\n  prototype?: IFeature;\n}\n\n/**\n * `ILayerDefinition` can also be imported from the following packages:\n *\n * ```js\n * import { ILayerDefinition } from \"@esri/arcgis-rest-service-admin\";\n * import { ILayerDefinition } from \"@esri/arcgis-rest-feature-service\";\n * ```\n */\nexport interface ILayerDefinition extends IHasZM {\n  /** Boolean value indicating whether the geometry of the features in the layer can be edited. */\n  allowGeometryUpdates?: boolean;\n  /** A comma separated list of supported capabilities, e.g. Query,Editing. */\n  capabilities?: string;\n  /** String value for the copyright text information for the layer. */\n  copyrightText?: string;\n  /** Numeric value indicating the server version of the layer. */\n  currentVersion?: number;\n  /** Boolean value indicating whether the layer's visibility is turned on. */\n  defaultVisibility?: boolean;\n  /** Stores interactive filters. */\n  definitionEditor?: IDefinitionEditor;\n  /** SQL-based definition expression string that narrows the data to be displayed in the layer. */\n  definitionExpression?: string;\n  /** String value of the layer as defined in the map service. */\n  description?: string;\n  /** A string value that summarizes the feature. */\n  displayField?: string;\n  /** Contains drawing, labeling, and transparency information. */\n  drawingInfo?: any;\n  /** An object defining the rectangular area. */\n  extent?: IExtent | null;\n  /** An object defining the editing info (last edit date). */\n  editingInfo?: IEditingInfo;\n  /** Feature reductions declutter the screen by hiding features that would otherwise intersect with other features on screen. */\n  featureReduction?: any;\n  /** An array of field objects containing information about the attribute fields for the feature collection or layer. */\n  fields?: IField[];\n  /** A string defining the type of geometry. Possible geometry types are: esriGeometryPoint, esriGeometryMultipoint, esriGeometryPolyline, esriGeometryPolygon, and esriGeometryEnvelope. */\n  geometryType?: GeometryType;\n  /** The unique identifier for a feature or table row within a geodatabase. */\n  globalIdField?: string;\n  /** Indicates whether attachments should be loaded for the layer. */\n  hasAttachments?: boolean;\n  /** Boolean value indicating whether data changes. True if it does not. */\n  hasStaticData?: boolean;\n  /** String value indicating the HTML popup type. */\n  htmlPopupType?:\n    | \"esriServerHTMLPopupTypeNone\"\n    | \"esriServerHTMLPopupTypeAsURL\"\n    | \"esriServerHTMLPopupTypeAsHTMLText\";\n\n  /** The identifier assigned to the layer. */\n  id?: number;\n  /** Boolean value indicating whether the data is versioned. */\n  isDataVersioned?: boolean;\n  /** Numeric value indicating tbe maximum number of records that will be returned at once for a query. */\n  maxRecordCount?: number;\n  /** Represents the maximum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer. */\n  maxScale?: number;\n  /** Represents the minimum scale at which the layer definition will be applied. This does not apply to layers of type: ArcGISMapServiceLayer, ImageServiceVectorLayer or ImageServiceLayer. */\n  minScale?: number;\n  /** Contains a unique name for the layer that can be displayed in a legend. */\n  name?: string;\n  /** Indicates the name of the object ID field in the dataset. */\n  objectIdField?: string;\n  /** Dictates whether a client can support having an end user modify symbols on individual features. */\n  overrideSymbols?: boolean;\n  /** Indicates range information */\n  rangeInfos?: any;\n  /** An object indicating the layerDefinition's layer source. */\n  source?: any;\n  /** An object containing the WKID or WKT identifying the spatial reference of the layer's geometry. */\n  spatialReference?: ISpatialReference;\n  /** String value indicating the output formats that are supported in a query. */\n  supportedQueryFormats?: string;\n  /** Boolean value indicating whether the layer supports orderByFields in a query operation. */\n  supportsAdvancedQueries?: boolean;\n  /** Boolean value indicating whether the layer supports uploading attachments with the Uploads operation. This can then be used in the Add Attachment and Update Attachment operations. */\n  supportsAttachmentsByUploadId?: boolean;\n  /** Boolean value indicating whether the layer supports the Calculate REST operation when updating features. */\n  supportsCalculate?: boolean;\n  /** Boolean value indicating whether the layer supports rolling back edits made on a feature layer if some of the edits fail. */\n  supportsRollbackOnFailureParameter?: boolean;\n  /** Boolean value indicating whether feature layer query operations support statistical functions. */\n  supportsStatistics?: boolean;\n  /** Boolean value indicating whether the validateSQL operation is supported across a feature service layer. */\n  supportsValidateSql?: boolean;\n  /** A property of the layer definition when there are no types defined; otherwise, templates are defined as properties of the types. */\n  templates?: ITemplate[];\n  /** The time info metadata of the layer. May be set for feature layers inside a feature collection item. */\n  timeInfo?: any;\n  /** Indicates whether the layerDefinition applies to a Feature Layer or a Table. */\n  type?: \"Feature Layer\" | \"Table\";\n  /** Contains the name of the field holding the type ID for the features. */\n  typeIdField?: string;\n  /** Contains information about an attribute field. */\n  types?: any;\n  /** String value indicating the attribute field that is used to control the visibility of a feature.\n   * If applicable, when rendering a feature the client should use this field to control visibility.\n   * The field's values are 0 = do not display, 1 = display.\n   */\n  visibilityField?: string;\n  relationships?: any[];\n  editFieldsInfo?: {\n    creationDateField?: string;\n    creatorField?: string;\n    editDateField?: string;\n    editorField?: string;\n  };\n  parentLayerId?: number;\n  ownershipBasedAccessControlForFeatures?: boolean;\n  syncCanReturnChanges?: boolean;\n  archivingInfo?: {\n    supportsQueryWithHistoricMoment?: boolean;\n    startArchivingMoment?: number;\n  };\n  supportsValidateSQL?: boolean;\n  advancedQueryCapabilities?: {\n    supportsPagination?: boolean;\n    supportsTrueCurve?: boolean;\n    supportsQueryWithDistance?: boolean;\n    supportsReturningQueryExtent?: boolean;\n    supportsStatistics?: boolean;\n    supportsOrderBy?: boolean;\n    supportsDistinct?: boolean;\n    supportsSqlExpression?: boolean;\n    supportsPercentileStatistics?: boolean;\n  };\n  allowTrueCurvesUpdates?: boolean;\n  onlyAllowTrueCurveUpdatesByTrueCurveClients?: boolean;\n  supportsApplyEditsWithGlobalIds?: boolean;\n  subtypeField?: string;\n  indexes?: any[];\n  dateFieldsTimeReference?: {\n    timeZone?: string;\n    respectsDaylightSaving?: boolean;\n  };\n  useStandardizedQueries?: boolean;\n}\n","import { request } from \"@esri/arcgis-rest-request\";\nimport {\n  IGetLayerOptions,\n  parseServiceUrl,\n  ILayerDefinition\n} from \"./helpers.js\";\n\nexport interface IAllLayersAndTablesResponse {\n  layers: ILayerDefinition[];\n  tables: ILayerDefinition[];\n}\n\n/**\n *  * Fetches all the layers and tables associated with a given layer service.\n * Wrapper for https://developers.arcgis.com/rest/services-reference/all-layers-and-tables.htm\n *\n * ```js\n * import { getAllLayersAndTables } from '@esri/arcgis-rest-feature-service';\n * getAllLayersAndTables({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { layers: [...], tables: [...] }\n * ```\n *\n * @param options - Request options, including the url for the layer service\n * @returns A Promise that will resolve with the layers and tables for the given service\n */\n// TODO: should we expand this to support other valid params of the endpoint?\nexport function getAllLayersAndTables(\n  options: IGetLayerOptions\n): Promise<IAllLayersAndTablesResponse> {\n  const { url, ...requestOptions } = options;\n  const layersUrl = `${parseServiceUrl(url)}/layers`;\n  return request(layersUrl, requestOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions } from \"./helpers.js\";\n\n/**\n * Request options to fetch `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n */\nexport interface IGetAttachmentsOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to request related `attachmentInfos`.\n   */\n  featureId: number;\n}\n\n/**\n * Attachment, a.k.a. `attachmentInfo`. See [Attachment](https://developers.arcgis.com/rest/services-reference/attachment-feature-service-.htm) for more information.\n */\nexport interface IAttachmentInfo {\n  id: number;\n  contentType: string;\n  size: number;\n  name: string;\n}\n\n/**\n * Request `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n * ```js\n * import { getAttachments } from '@esri/arcgis-rest-feature-service';\n * //\n * getAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `getAttachments()` response.\n */\nexport function getAttachments(\n  requestOptions: IGetAttachmentsOptions\n): Promise<{ attachmentInfos: IAttachmentInfo[] }> {\n  const options: IGetAttachmentsOptions = {\n    httpMethod: \"GET\",\n    ...requestOptions\n  };\n\n  // pass through\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/attachments`,\n    options\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IFeatureServiceDefinition } from \"./helpers.js\";\n\n/**\n * Feature Service request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/feature-service.htm) for more information.\n *\n * ```js\n * import { getService } from '@esri/arcgis-rest-feature-service';\n * //\n * getService({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer\"\n * })\n *   .then(response) // { name: \"311\", id: 0, ... }\n * ```\n *\n * @param options - Options for the request.\n * @returns A Promise that will resolve with the getService response.\n */\nexport function getService(\n  options: IGetLayerOptions\n): Promise<IFeatureServiceDefinition> {\n  return request(cleanUrl(options.url), options);\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\nimport { IServiceInfo } from \"./helpers.js\";\n\n/**\n * Given a Feature Service URL, fetch the service admin information.\n *\n * The response from this call includes all the detailed information\n * for each layer/table in the service as well as some admin properties\n *\n * @export\n * @param {string} serviceUrl\n * @param {ArcGISIdentityManager} session\n * @return {*}  {Promise<IServiceInfo>}\n */\nexport function getServiceAdminInfo(\n  serviceUrl: string,\n  session: ArcGISIdentityManager\n): Promise<IServiceInfo> {\n  const serviceAdminUrl = serviceUrl.replace(\n    \"/rest/services\",\n    \"/rest/admin/services\"\n  );\n\n  return request(serviceAdminUrl, {\n    authentication: session,\n    params: {\n      f: \"json\"\n    }\n  });\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\nimport { IViewServiceSources } from \"./helpers.js\";\n\n/**\n * Return the sources response for a view service item\n *\n * @param {string} viewServiceUrl\n * @param {ArcGISIdentityManager} session\n * @return {*}  {Promise<Record<string, unknown>>}\n */\nexport function getViewSources(\n  viewServiceUrl: string,\n  session: ArcGISIdentityManager\n): Promise<IViewServiceSources> {\n  return request(`${viewServiceUrl}/sources`, { authentication: session });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ISpatialReference,\n  IFeatureSet,\n  IFeature,\n  Units,\n  IExtent\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  IGetLayerOptions,\n  ISharedQueryOptions,\n  IStatisticDefinition\n} from \"./helpers.js\";\n\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IGetFeatureOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of the feature.\n   */\n  id: number;\n}\n\n/**\n * feature query request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n */\nexport interface IQueryFeaturesOptions extends ISharedQueryOptions {\n  objectIds?: number[];\n  relationParam?: string;\n  // NOTE: either time=1199145600000 or time=1199145600000, 1230768000000\n  time?: number | number[];\n  distance?: number;\n  units?: Units;\n  /**\n   * Attribute fields to include in the response. Defaults to \"*\"\n   */\n  outFields?: \"*\" | string[];\n  returnGeometry?: boolean;\n  maxAllowableOffset?: number;\n  geometryPrecision?: number;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  outSR?: string | ISpatialReference;\n  gdbVersion?: string;\n  returnDistinctValues?: boolean;\n  returnIdsOnly?: boolean;\n  returnCountOnly?: boolean;\n  returnExtentOnly?: boolean;\n  orderByFields?: string;\n  groupByFieldsForStatistics?: string;\n  outStatistics?: IStatisticDefinition[];\n  returnZ?: boolean;\n  returnM?: boolean;\n  multipatchOption?: \"xyFootprint\";\n  resultOffset?: number;\n  resultRecordCount?: number;\n  // TODO: IQuantizationParameters?\n  quantizationParameters?: any;\n  returnCentroid?: boolean;\n  resultType?: \"none\" | \"standard\" | \"tile\";\n  // to do: convert from Date() to epoch time internally\n  historicMoment?: number;\n  returnTrueCurves?: false;\n  sqlFormat?: \"none\" | \"standard\" | \"native\";\n  returnExceededLimitFeatures?: boolean;\n  /**\n   * Response format. Defaults to \"json\"\n   * NOTE: for \"pbf\" you must also supply `rawResponse: true`\n   * and parse the response yourself using `response.arrayBuffer()`\n   */\n  f?: \"json\" | \"geojson\" | \"pbf\";\n  /**\n   * someday...\n   *\n   * If 'true' the query will be preceded by a metadata check to gather info about coded value domains and result values will be decoded. If a fieldset is provided it will be used to decode values and no internal metadata request will be issued.\n   */\n  // decodeValues?: boolean | IField[];\n}\n\nexport interface IQueryFeaturesResponse extends IFeatureSet {\n  exceededTransferLimit?: boolean;\n}\n\nexport interface IQueryResponse {\n  count?: number;\n  extent?: IExtent;\n  objectIdFieldName?: string;\n  objectIds?: number[];\n}\n\n/**\n * Get a feature by id.\n *\n * ```js\n * import { getFeature } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0\";\n *\n * getFeature({\n *   url,\n *   id: 42\n * }).then(feature => {\n *  console.log(feature.attributes.FID); // 42\n * });\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the feature or the [response](https://developer.mozilla.org/en-US/docs/Web/API/Response) itself if `rawResponse: true` was passed in.\n */\nexport function getFeature(\n  requestOptions: IGetFeatureOptions\n): Promise<IFeature> {\n  const url = `${cleanUrl(requestOptions.url)}/${requestOptions.id}`;\n\n  // default to a GET request\n  const options: IGetFeatureOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options).then((response: any) => {\n    if (options.rawResponse) {\n      return response;\n    }\n    return response.feature;\n  });\n}\n\n/**\n * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * queryFeatures({\n *   url: \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\",\n *   where: \"STATE_NAME = 'Alaska'\"\n * })\n *   .then(result)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport function queryFeatures(\n  requestOptions: IQueryFeaturesOptions\n): Promise<IQueryFeaturesResponse | IQueryResponse> {\n  const queryOptions = appendCustomParams<IQueryFeaturesOptions>(\n    requestOptions,\n    [\n      \"where\",\n      \"objectIds\",\n      \"relationParam\",\n      \"time\",\n      \"distance\",\n      \"units\",\n      \"outFields\",\n      \"geometry\",\n      \"geometryType\",\n      \"spatialRel\",\n      \"returnGeometry\",\n      \"maxAllowableOffset\",\n      \"geometryPrecision\",\n      \"inSR\",\n      \"outSR\",\n      \"gdbVersion\",\n      \"returnDistinctValues\",\n      \"returnIdsOnly\",\n      \"returnCountOnly\",\n      \"returnExtentOnly\",\n      \"orderByFields\",\n      \"groupByFieldsForStatistics\",\n      \"outStatistics\",\n      \"returnZ\",\n      \"returnM\",\n      \"multipatchOption\",\n      \"resultOffset\",\n      \"resultRecordCount\",\n      \"quantizationParameters\",\n      \"returnCentroid\",\n      \"resultType\",\n      \"historicMoment\",\n      \"returnTrueCurves\",\n      \"sqlFormat\",\n      \"returnExceededLimitFeatures\",\n      \"f\"\n    ],\n    {\n      httpMethod: \"GET\",\n      params: {\n        // set default query parameters\n        where: \"1=1\",\n        outFields: \"*\",\n        ...requestOptions.params\n      }\n    }\n  );\n\n  return request(`${cleanUrl(requestOptions.url)}/query`, queryOptions);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  ISpatialReference,\n  IFeature,\n  IHasZM,\n  GeometryType,\n  IField\n} from \"@esri/arcgis-rest-request\";\n\nimport { IGetLayerOptions } from \"./helpers.js\";\n\n/**\n * Related record query request options. Additional arguments can be passed via the {@linkcode IQueryRelatedOptions.params} property. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/enterprise/query-related-records-feature-service-.htm) for more information and a full list of parameters.\n */\nexport interface IQueryRelatedOptions extends IGetLayerOptions {\n  relationshipId?: number;\n  objectIds?: number[];\n  outFields?: \"*\" | string[];\n  definitionExpression?: string;\n}\n\n/**\n * Related record data structure\n */\n\nexport interface IRelatedRecordGroup {\n  objectId: number;\n  relatedRecords?: IFeature[];\n  count?: number;\n}\n\n/**\n * Related record response structure\n */\n\nexport interface IQueryRelatedResponse extends IHasZM {\n  geometryType?: GeometryType;\n  spatialReference?: ISpatialReference;\n  fields?: IField[];\n  relatedRecordGroups: IRelatedRecordGroup[];\n}\n/**\n * Query the related records for a feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-related-records-feature-service-.htm) for more information.\n *\n * ```js\n * import { queryRelated } from '@esri/arcgis-rest-feature-service'\n *\n * queryRelated({\n *  url: \"http://services.myserver/OrgID/ArcGIS/rest/services/Petroleum/KSPetro/FeatureServer/0\",\n *  relationshipId: 1,\n *  params: { returnCountOnly: true }\n * })\n *  .then(response) // response.relatedRecords\n * ```\n *\n * @param requestOptions\n * @returns A Promise that will resolve with the query response\n */\nexport function queryRelated(\n  requestOptions: IQueryRelatedOptions\n): Promise<IQueryRelatedResponse> {\n  const options = appendCustomParams<IQueryRelatedOptions>(\n    requestOptions,\n    [\"objectIds\", \"relationshipId\", \"definitionExpression\", \"outFields\"],\n    {\n      httpMethod: \"GET\",\n      params: {\n        // set default query parameters\n        definitionExpression: \"1=1\",\n        outFields: \"*\",\n        relationshipId: 0,\n        ...requestOptions.params\n      }\n    }\n  );\n\n  return request(\n    `${cleanUrl(requestOptions.url)}/queryRelatedRecords`,\n    options\n  );\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IFeature\n} from \"@esri/arcgis-rest-request\";\n\nimport { ISharedEditOptions, IEditFeatureResult } from \"./helpers.js\";\n\n/**\n * Update features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n */\nexport interface IUpdateFeaturesOptions extends ISharedEditOptions {\n  /**\n   * Array of JSON features to update.\n   */\n  features: IFeature[];\n  /**\n   * Optional parameter which is false by default is set by client to indicate to the server that client in true curve capable.\n   */\n  trueCurveClient?: boolean;\n}\n\n/**\n * Update features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n * ```js\n * import { updateFeatures } from '@esri/arcgis-rest-feature-service';\n * //\n * updateFeatures({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   features: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the updateFeatures response.\n */\nexport function updateFeatures(\n  requestOptions: IUpdateFeaturesOptions\n): Promise<{ updateResults: IEditFeatureResult[] }> {\n  const url = `${cleanUrl(requestOptions.url)}/updateFeatures`;\n\n  // edit operations are POST only\n  const options = appendCustomParams<IUpdateFeaturesOptions>(\n    requestOptions,\n    [\n      \"features\",\n      \"gdbVersion\",\n      \"returnEditMoment\",\n      \"rollbackOnFailure\",\n      \"trueCurveClient\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, cleanUrl } from \"@esri/arcgis-rest-request\";\nimport { IGetLayerOptions, IEditFeatureResult } from \"./helpers.js\";\n\n/**\n * Request options to for updating a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n */\nexport interface IUpdateAttachmentOptions extends IGetLayerOptions {\n  /**\n   * Unique identifier of feature to update related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be updated.\n   */\n  attachment: File;\n  /**\n   * Unique identifier of the attachment.\n   */\n  attachmentId: number;\n}\n\n/**\n * Update a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n * ```js\n * import { updateAttachment } from '@esri/arcgis-rest-feature-service';\n * //\n * updateAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0],\n *   attachmentId: 306\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `updateAttachment()` response.\n */\nexport function updateAttachment(\n  requestOptions: IUpdateAttachmentOptions\n): Promise<{ updateAttachmentResult: IEditFeatureResult }> {\n  const options: IUpdateAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` and `attachmentId` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n  options.params.attachmentId = requestOptions.attachmentId;\n\n  return request(\n    `${cleanUrl(options.url)}/${options.featureId}/updateAttachment`,\n    options\n  );\n}\n","/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  IUserRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { IFeatureServiceDefinition } from \"./helpers.js\";\n\nexport interface IUpdateServiceDefinitionOptions extends IUserRequestOptions {\n  updateDefinition?: Partial<IFeatureServiceDefinition>;\n}\n\nexport interface IUpdateServiceDefinitionResult {\n  success: boolean;\n}\n\n/**\n * Update a definition property in a hosted feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/online/update-definition-feature-service-.htm) for more information.\n *\n * ```js\n * import { updateServiceDefinition } from '@esri/arcgis-rest-service-admin';\n * //\n * updateServiceDefinition(serviceurl, {\n *   authentication: ArcGISIdentityManager,\n *   updateDefinition: serviceDefinition\n * });\n * ```\n *\n * @param url - URL of feature service\n * @param requestOptions - Options for the request\n * @returns A Promise that resolves with success or error\n */\nexport function updateServiceDefinition(\n  url: string,\n  requestOptions: IUpdateServiceDefinitionOptions\n): Promise<IUpdateServiceDefinitionResult> {\n  const adminUrl = `${cleanUrl(url).replace(\n    `/rest/services`,\n    `/rest/admin/services`\n  )}/updateDefinition`;\n\n  requestOptions.params = {\n    updateDefinition: {},\n    ...requestOptions.params\n  };\n\n  if (requestOptions.updateDefinition) {\n    requestOptions.params.updateDefinition = requestOptions.updateDefinition;\n  }\n\n  return request(adminUrl, requestOptions);\n}\n"],"names":["addFeatures","requestOptions","url","cleanUrl","options","appendCustomParams","params","request","addAttachment","attachment","featureId","addToServiceDefinition","adminUrl","replace","addToDefinition","layers","length","tables","applyEdits","createFeatureService","determineOwner","then","owner","rawResponse","getPortalUrl","folderId","createParameters","item","outputType","getLayer","decodeValues","prms","fields","Promise","resolve","metadata","domains","reduce","field","domain","type","name","extractCodedValueDomains","Object","keys","queryResponse","decodedFeatures","features","map","feature","decodedAttributes","key","attributes","prototype","hasOwnProperty","call","value","decodeValue","codedValue","codedValues","find","d","code","deleteFeatures","deleteAttachments","attachmentIds","serviceRegex","RegExp","parseServiceUrl","match","stripped","split","stripQueryString","getAllLayersAndTables","layersUrl","getAttachments","httpMethod","getService","getServiceAdminInfo","serviceUrl","session","serviceAdminUrl","authentication","f","getViewSources","viewServiceUrl","getFeature","id","response","queryFeatures","queryOptions","where","outFields","queryRelated","definitionExpression","relationshipId","updateFeatures","updateAttachment","attachmentId","updateServiceDefinition","updateDefinition"],"mappings":"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"}