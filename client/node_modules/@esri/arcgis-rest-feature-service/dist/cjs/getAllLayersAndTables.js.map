{"version":3,"file":"getAllLayersAndTables.js","sourceRoot":"","sources":["../../src/getAllLayersAndTables.ts"],"names":[],"mappings":";;;;AAAA,mEAAoD;AACpD,6CAIsB;AAOtB;;;;;;;;;;;;;;GAcG;AACH,6EAA6E;AAC7E,SAAgB,qBAAqB,CACnC,OAAyB;IAEzB,MAAM,EAAE,GAAG,KAAwB,OAAO,EAA1B,cAAc,uBAAK,OAAO,EAApC,OAA0B,CAAU,CAAC;IAC3C,MAAM,SAAS,GAAG,GAAG,IAAA,4BAAe,EAAC,GAAG,CAAC,SAAS,CAAC;IACnD,OAAO,IAAA,6BAAO,EAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AAC5C,CAAC;AAND,sDAMC","sourcesContent":["import { request } from \"@esri/arcgis-rest-request\";\nimport {\n  IGetLayerOptions,\n  parseServiceUrl,\n  ILayerDefinition\n} from \"./helpers.js\";\n\nexport interface IAllLayersAndTablesResponse {\n  layers: ILayerDefinition[];\n  tables: ILayerDefinition[];\n}\n\n/**\n *  * Fetches all the layers and tables associated with a given layer service.\n * Wrapper for https://developers.arcgis.com/rest/services-reference/all-layers-and-tables.htm\n *\n * ```js\n * import { getAllLayersAndTables } from '@esri/arcgis-rest-feature-service';\n * getAllLayersAndTables({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\"\n * })\n *   .then(response) // { layers: [...], tables: [...] }\n * ```\n *\n * @param options - Request options, including the url for the layer service\n * @returns A Promise that will resolve with the layers and tables for the given service\n */\n// TODO: should we expand this to support other valid params of the endpoint?\nexport function getAllLayersAndTables(\n  options: IGetLayerOptions\n): Promise<IAllLayersAndTablesResponse> {\n  const { url, ...requestOptions } = options;\n  const layersUrl = `${parseServiceUrl(url)}/layers`;\n  return request(layersUrl, requestOptions);\n}\n"]}