import { GoogleAnalytics } from './';
import { Telemetry } from '../../telemetry';
jest.mock('@esri/telemetry', () => {
    const actual = jest.requireActual('@esri/telemetry');
    return Object.assign(Object.assign({}, actual), { injectScriptElementAsync: jest.fn(_ => Promise.resolve()) });
});
describe('Google Analytics', () => {
    beforeAll(() => {
        // mock timers so that we can check date adequately
        jest.useFakeTimers('modern');
        jest.setSystemTime(new Date(2022, 10, 31));
    });
    afterEach(() => {
        jest.restoreAllMocks();
        global.window.dataLayer = undefined;
        global.window.gtag = undefined;
    });
    afterAll(() => {
        jest.useRealTimers();
    });
    describe('constructor', () => {
        it('should call the constructor with options', () => {
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            expect(googleAnalytics).toMatchObject({
                name: 'googleAnalytics',
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 }
            });
        });
    });
    describe('init', () => {
        it('should call injectConfig', async () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'] });
            expect(window.dataLayer).toEqual(undefined);
            await googleAnalytics.init();
            expect(window.dataLayer.length).toEqual(2);
        });
    });
    describe('injectConfig', () => {
        it('should call gtag with right params with no custom metrics or dimensions', async () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'] });
            expect(window.dataLayer).toEqual(undefined);
            await googleAnalytics.init();
            const dataLayer = window.dataLayer;
            expect(dataLayer.length).toBe(2);
            const unzippedDataLayer = dataLayer.map((obj) => Object.entries(obj));
            const dateConfig = unzippedDataLayer[0];
            const customConfig = unzippedDataLayer[1];
            expect(dateConfig).toEqual([['0', 'js'], ['1', new Date()]]);
            expect(customConfig).toEqual([['0', 'config'], ['1', 'G-1234567890'], ['2', { custom_map: {}, send_page_view: false, anonymize_ip: true }]]);
        });
        it('should add in custom metrics and dimensions accordingly', async () => {
            jest.spyOn(GoogleAnalytics.prototype, 'createDimensionsAndMetricsCustomMap').mockImplementation(() => { return { dimension1: 'details', metric3: 'duration' }; });
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'], dimensions: { details: 1 }, metrics: { duration: 3 } });
            expect(window.dataLayer).toEqual(undefined);
            await googleAnalytics.init();
            const dataLayer = window.dataLayer;
            expect(dataLayer.length).toBe(2);
            const unzippedDataLayer = dataLayer.map((obj) => Object.entries(obj));
            const dateConfig = unzippedDataLayer[0];
            const customConfig = unzippedDataLayer[1];
            expect(dateConfig).toEqual([['0', 'js'], ['1', new Date()]]);
            expect(customConfig).toEqual([['0', 'config'], ['1', 'G-1234567890'], ['2', { custom_map: { dimension1: 'details', metric3: 'duration' }, send_page_view: false, anonymize_ip: true }]]);
        });
    });
    describe('createDimensionsAndMetricsCustomMap', () => {
        it('creates dimensions and custom map with no dimensions or metrics', () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'] });
            const customMap = googleAnalytics.createDimensionsAndMetricsCustomMap();
            expect(customMap).toEqual({});
        });
        it('creates dimensions and custom map with dimensions but no custom metrics', () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'], dimensions: { type: 4 } });
            const customMap = googleAnalytics.createDimensionsAndMetricsCustomMap({ type: 4 });
            expect(customMap).toEqual({ dimension4: 'type' });
        });
        it('creates dimensions and custom map with metrics but no custom dimensions', () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'], metrics: { duration: 3 } });
            const customMap = googleAnalytics.createDimensionsAndMetricsCustomMap({}, { duration: 3 });
            expect(customMap).toEqual({ metric3: 'duration' });
        });
        it('creates dimensions and custom map with custom metrics and custom dimensions', () => {
            const googleAnalytics = new GoogleAnalytics({ measurementIds: ['G-1234567890'], dimensions: { type: 4, search: 9 }, metrics: { duration: 3, size: 4 } });
            const customMap = googleAnalytics.createDimensionsAndMetricsCustomMap({ type: 4, search: 9 }, { duration: 3, size: 4 });
            expect(customMap).toEqual({ dimension4: 'type', dimension9: 'search', metric3: 'duration', metric4: 'size' });
        });
    });
    describe('script tag generation', () => {
        it('should generate script tags when not given id', () => {
            const windowSpy = jest
                .spyOn(global, 'window', 'get')
                .mockImplementation(() => undefined);
            const googleAnalytics = new GoogleAnalytics({});
            const scriptTags = googleAnalytics.getScriptTags();
            expect(scriptTags).toEqual(`<script src="https://www.googletagmanager.com/gtag/js?id=" data-esri-telemetry="google-analytics" async></script>`);
            windowSpy.mockRestore();
        });
        it('should generate script tags when given id', () => {
            const windowSpy = jest
                .spyOn(global, 'window', 'get')
                .mockImplementation(() => undefined);
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234321890']
            });
            const scriptTags = googleAnalytics.getScriptTags();
            expect(scriptTags).toEqual(`<script src="https://www.googletagmanager.com/gtag/js?id=G-1234321890" data-esri-telemetry="google-analytics" async></script>`);
            windowSpy.mockRestore();
        });
        it('should generate script tags when given multiple ids', () => {
            const windowSpy = jest
                .spyOn(global, 'window', 'get')
                .mockImplementation(() => undefined);
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234321890', 'G-12312421990']
            });
            const scriptTags = googleAnalytics.getScriptTags();
            expect(scriptTags).toEqual(`<script src="https://www.googletagmanager.com/gtag/js?id=G-1234321890" data-esri-telemetry="google-analytics" async></script>`);
            windowSpy.mockRestore();
        });
    });
    describe('log event', () => {
        it('logs an event', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
            });
            googleAnalytics.logEvent({ action: 'foo' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'foo', {});
        });
        it('logs an event correctly when no action is given', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
            });
            googleAnalytics.logEvent({ wrongStructureAction: 'error' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'other', {});
        });
        it('logs an event with custom metrics and dimensions', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            googleAnalytics.logEvent({ action: 'foo', duration: 100, type: 'page' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'foo', { duration: 100, type: 'page' });
        });
        it('logs an event with category/action/label params', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
            });
            googleAnalytics.logEvent({ action: 'foo', category: 'event', label: 'fast' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'foo', { event_category: 'event', event_label: 'fast' });
        });
        it('logs an event with a telemetry wrapper', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            const telemetry = new Telemetry({
                plugins: [googleAnalytics],
            });
            telemetry.logEvent({ duration: 100, type: 'page', category: 'event', action: 'click' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'click', { duration: 100, type: 'page', event_category: 'event' });
        });
        describe('build event params and verify event params', () => {
            it('builds event params', () => {
                const googleAnalytics = new GoogleAnalytics({
                    dimensions: { details: 1, element: 14 },
                    metrics: { size: 2, duration: 3 },
                    measurementIds: ['G-1234567890']
                });
                const eventParams = googleAnalytics.buildCustomParams({ size: 20, duration: 40, details: 'page', element: 'big' });
                expect(eventParams).toEqual({ size: 20, duration: 40, details: 'page', element: 'big' });
            });
            it('verifies event params', () => {
                const googleAnalytics = new GoogleAnalytics({
                    dimensions: { details: 1, element: 14 },
                    metrics: { size: 2, duration: 3 },
                    measurementIds: ['G-1234567890']
                });
                const eventParams = googleAnalytics.buildCustomParams({ size: 20, duration: 40, unhandledMetric: 20, details: 'page', element: 'big', unhandledDimension: 'invalid' });
                expect(eventParams).toEqual({ size: 20, duration: 40, details: 'page', element: 'big' });
            });
            it('handles action/category/label syntax', () => {
                const googleAnalytics = new GoogleAnalytics({
                    dimensions: { details: 1, element: 14 },
                    metrics: { size: 2, duration: 3 },
                    measurementIds: ['G-1234567890']
                });
                const eventParams = googleAnalytics.buildCustomParams({ size: 20, duration: 40, label: 'labelValue', details: 'page', element: 'big', category: 'categoryValue' });
                expect(eventParams).toEqual({ size: 20, duration: 40, details: 'page', element: 'big', event_category: 'categoryValue', event_label: 'labelValue' });
            });
        });
    });
    describe('log page view', () => {
        it('logs a page view', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
            });
            googleAnalytics.logPageView('fooPage');
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'fooPage' });
        });
        it('logs a page view when (incorrectly) no page name is given', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
            });
            // @ts-ignore
            googleAnalytics.logPageView();
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: '/' });
        });
        it('logs a page view with custom metrics and dimensions', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            googleAnalytics.logPageView('fooPage', { duration: 100, type: 'page' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'fooPage', duration: 100, type: 'page' });
        });
        it('logs a page view with custom metrics and dimensions and removes invalid metrics/dimensions', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            googleAnalytics.logPageView('fooPage', { duration: 100, type: 'page', invalidDimension: 'invalidValue', invalidMetric: 'invalidValue' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'fooPage', duration: 100, type: 'page' });
        });
        it('logs a page with a telemetry wrapper', () => {
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 },
            });
            const telemetry = new Telemetry({
                plugins: [googleAnalytics]
            });
            telemetry.logPageView('fooPage', { duration: 100, type: 'page' });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'fooPage', duration: 100, type: 'page' });
        });
    });
    describe('telemetry wrapper', () => {
        it('works in a browser use case with a telemetry wrapper', async () => {
            const googleAnalytics = new GoogleAnalytics({
                measurementIds: ['G-1234567890'],
                dimensions: { type: 4 },
                metrics: { duration: 3 }
            });
            const telemetry = new Telemetry({
                plugins: [googleAnalytics]
            });
            // checks init() in googleAnalytics
            expect(window.dataLayer).toEqual(undefined);
            await telemetry.init();
            expect(window.dataLayer.length).toEqual(2);
            // checks script tags
            const scriptTags = telemetry.getScriptTags();
            expect(scriptTags).toEqual(`<script src="https://www.googletagmanager.com/gtag/js?id=G-1234567890" data-esri-telemetry="google-analytics" async></script>`);
            // checks event logging
            const mockGtag = jest.fn();
            global.window.gtag = mockGtag;
            telemetry.logEvent({
                action: 'button_click',
                type: 'click',
                duration: 100
            });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'button_click', { duration: 100, type: 'click' });
            mockGtag.mockClear();
            telemetry.logEvent({
                category: 'click',
                action: 'clicked_on',
                label: 'button'
            });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'clicked_on', { event_category: 'click', event_label: 'button' });
            mockGtag.mockClear();
            // checks page view logging
            telemetry.logPageView('homepage', { type: 'view', duration: 26 });
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'homepage', duration: 26, type: 'view' });
            mockGtag.mockClear();
            telemetry.logPageView('home');
            expect(mockGtag).toHaveBeenCalledTimes(1);
            expect(mockGtag).toHaveBeenCalledWith('event', 'page_view', { page_title: 'home' });
            mockGtag.mockClear();
        });
    });
});
//# sourceMappingURL=index.test.js.map