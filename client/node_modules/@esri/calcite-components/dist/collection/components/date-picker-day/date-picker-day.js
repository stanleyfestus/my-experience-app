/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import { dateToISO } from "../../utils/date";
import { closestElementCrossShadowBoundary, toAriaBoolean } from "../../utils/dom";
import { InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { isActivationKey } from "../../utils/key";
import { numberStringFormatter } from "../../utils/locale";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
export class DatePickerDay {
    constructor() {
        //--------------------------------------------------------------------------
        //
        //  Event Listeners
        //
        //--------------------------------------------------------------------------
        this.onClick = () => {
            if (this.disabled) {
                return;
            }
            this.calciteDaySelect.emit();
        };
        this.keyDownHandler = (event) => {
            if (isActivationKey(event.key)) {
                !this.disabled && this.calciteDaySelect.emit();
                event.preventDefault();
            }
        };
        this.day = undefined;
        this.dateTimeFormat = undefined;
        this.disabled = false;
        this.currentMonth = false;
        this.selected = false;
        this.highlighted = false;
        this.range = false;
        this.rangeEdge = undefined;
        this.startOfRange = false;
        this.endOfRange = false;
        this.rangeHover = false;
        this.active = false;
        this.scale = undefined;
        this.value = undefined;
    }
    pointerOverHandler() {
        if (this.disabled) {
            return;
        }
        this.calciteInternalDayHover.emit();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        setUpLoadableComponent(this);
        this.parentDatePickerEl = closestElementCrossShadowBoundary(this.el, "calcite-date-picker");
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Methods
    //
    // --------------------------------------------------------------------------
    /** Sets focus on the component. */
    async setFocus() {
        await componentFocusable(this);
        this.el.focus();
    }
    render() {
        const dayId = dateToISO(this.value).replaceAll("-", "");
        if (this.parentDatePickerEl) {
            const { numberingSystem, lang: locale } = this.parentDatePickerEl;
            numberStringFormatter.numberFormatOptions = {
                useGrouping: false,
                ...(numberingSystem && { numberingSystem }),
                ...(locale && { locale }),
            };
        }
        const formattedDay = numberStringFormatter.localize(String(this.day));
        const dayLabel = this.dateTimeFormat.format(this.value);
        return (h(Host, { key: '99367dbc5f33128ec7e60922a7ccb68f54362f78', "aria-label": dayLabel, "aria-selected": toAriaBoolean(this.active), id: dayId, onClick: this.onClick, onKeyDown: this.keyDownHandler, role: "button", tabIndex: this.active && !this.disabled ? 0 : -1 }, h(InteractiveContainer, { key: '50e5172f11d617e5e52aade2bb9fbdd7c46ccc60', disabled: this.disabled }, h("div", { key: 'cfb5af0dcdb9283e00d3220e3658c253fc8fdc05', "aria-hidden": "true", class: { "day-v-wrapper": true } }, h("div", { key: 'f1a85d642b0abdf35676fea5873c2ac4c92d451c', class: "day-wrapper" }, h("span", { key: '79daaedf22745c9d633b4461c5a28b828b6803ae', class: "day" }, h("span", { key: '14152896fce841cbe975eeabd5171024ae5133d3', class: "text" }, formattedDay)))))));
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    static get is() { return "calcite-date-picker-day"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["date-picker-day.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["date-picker-day.css"]
        };
    }
    static get properties() {
        return {
            "day": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Day of the month to be shown."
                },
                "attribute": "day",
                "reflect": false
            },
            "dateTimeFormat": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Intl.DateTimeFormat",
                    "resolved": "DateTimeFormat",
                    "references": {
                        "Intl": {
                            "location": "global",
                            "id": "global::Intl"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "The DateTimeFormat used to provide screen reader labels."
                }
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "currentMonth": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Date is in the current month."
                },
                "attribute": "current-month",
                "reflect": true,
                "defaultValue": "false"
            },
            "selected": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is selected."
                },
                "attribute": "selected",
                "reflect": true,
                "defaultValue": "false"
            },
            "highlighted": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Date is currently highlighted as part of the range,"
                },
                "attribute": "highlighted",
                "reflect": true,
                "defaultValue": "false"
            },
            "range": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, activates the component's range mode to allow a start and end date."
                },
                "attribute": "range",
                "reflect": true,
                "defaultValue": "false"
            },
            "rangeEdge": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "\"start\" | \"end\" | undefined",
                    "resolved": "\"end\" | \"start\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "When `true`, highlight styling for edge dates is applied."
                },
                "attribute": "range-edge",
                "reflect": true
            },
            "startOfRange": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Date is the start of date range."
                },
                "attribute": "start-of-range",
                "reflect": true,
                "defaultValue": "false"
            },
            "endOfRange": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Date is the end of date range."
                },
                "attribute": "end-of-range",
                "reflect": true,
                "defaultValue": "false"
            },
            "rangeHover": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Date is being hovered and within the set range."
                },
                "attribute": "range-hover",
                "reflect": true,
                "defaultValue": "false"
            },
            "active": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is active."
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true
            },
            "value": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "Date",
                    "resolved": "Date",
                    "references": {
                        "Date": {
                            "location": "global",
                            "id": "global::Date"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component's value."
                }
            }
        };
    }
    static get events() {
        return [{
                "method": "calciteDaySelect",
                "name": "calciteDaySelect",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when user selects day."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteInternalDayHover",
                "name": "calciteInternalDayHover",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Fires when user hovers over a day."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "pointerover",
                "method": "pointerOverHandler",
                "target": undefined,
                "capture": false,
                "passive": true
            }];
    }
}
//# sourceMappingURL=date-picker-day.js.map
