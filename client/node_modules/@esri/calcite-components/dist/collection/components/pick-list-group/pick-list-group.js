/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { Fragment, h } from "@stencil/core";
import { connectConditionalSlotComponent, disconnectConditionalSlotComponent, } from "../../utils/conditionalSlot";
import { getSlotted } from "../../utils/dom";
import { constrainHeadingLevel, Heading } from "../functional/Heading";
import { logger } from "../../utils/logger";
import { CSS, SLOTS } from "./resources";
logger.deprecated("component", {
    name: "pick-list-group",
    removalVersion: 3,
    suggested: "list-item-group",
});
/**
 * @deprecated Use the `calcite-list` component instead.
 * @slot - A slot for adding `calcite-pick-list-item` elements.
 */
export class PickListGroup {
    constructor() {
        this.groupTitle = undefined;
        this.headingLevel = undefined;
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectConditionalSlotComponent(this);
    }
    disconnectedCallback() {
        disconnectConditionalSlotComponent(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    render() {
        const { el, groupTitle, headingLevel } = this;
        const hasParentItem = getSlotted(el, SLOTS.parentItem) !== null;
        const sectionClasses = {
            [CSS.container]: true,
            [CSS.indented]: hasParentItem,
        };
        const title = groupTitle;
        const parentLevel = el.closest("calcite-pick-list")?.headingLevel;
        const relativeLevel = parentLevel ? constrainHeadingLevel(parentLevel + 1) : null;
        const level = headingLevel || relativeLevel;
        return (h(Fragment, { key: '95786626f6bee19eee9695f8bf3c63f0e192a6fe' }, title ? (h(Heading, { class: CSS.heading, level: level }, title)) : null, h("slot", { key: 'd1ebf753d725ab812875fb5f8a9718774b4d9cc7', name: SLOTS.parentItem }), h("section", { key: '3a850b36674c77bd7dc7a05278fd684b06024fb3', class: sectionClasses }, h("slot", { key: '919ef46af0ab6c7f7e8f0dff0a1cda8e01ecdf75' }))));
    }
    static get is() { return "calcite-pick-list-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["pick-list-group.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["pick-list-group.css"]
        };
    }
    static get properties() {
        return {
            "groupTitle": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the title for all nested `calcite-pick-list-item`s."
                },
                "attribute": "group-title",
                "reflect": true
            },
            "headingLevel": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "HeadingLevel",
                    "resolved": "1 | 2 | 3 | 4 | 5 | 6",
                    "references": {
                        "HeadingLevel": {
                            "location": "import",
                            "path": "../functional/Heading",
                            "id": "src/components/functional/Heading.tsx::HeadingLevel"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling."
                },
                "attribute": "heading-level",
                "reflect": true
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=pick-list-group.js.map
