/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import { getSlotted, setRequestedIcon, slotChangeHasAssignedElement, toAriaBoolean, } from "../../utils/dom";
import { getIconScale } from "../../utils/component";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { connectLocalized, disconnectLocalized, NumberStringFormat, } from "../../utils/locale";
import { onToggleOpenCloseComponent } from "../../utils/openCloseComponent";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { KindIcons } from "../resources";
import { CSS, DURATIONS, SLOTS } from "./resources";
import AlertManager from "./AlertManager";
const manager = new AlertManager();
/**
 * Alerts are meant to provide a way to communicate urgent or important information to users, frequently as a result of an action they took in your app. Alerts are positioned
 * at the bottom of the page. Multiple opened alerts will be added to a queue, allowing users to dismiss them in the order they are provided.
 */
/**
 * @slot title - A slot for adding a title to the component.
 * @slot message - A slot for adding main text to the component.
 * @slot link - A slot for adding a `calcite-action` to take from the component such as: "undo", "try again", "link to page", etc.
 * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or fewer actions.
 */
export class Alert {
    constructor() {
        this.handleKeyBoardFocus = () => {
            this.isFocused = true;
            this.handleFocus();
        };
        this.handleKeyBoardBlur = () => {
            this.isFocused = false;
            if (!this.isHovered) {
                this.handleBlur();
            }
        };
        this.autoCloseTimeoutId = null;
        this.totalOpenTime = 0;
        this.totalHoverTime = 0;
        this.openTransitionProp = "opacity";
        this.setTransitionEl = (el) => {
            this.transitionEl = el;
        };
        /** close and emit calciteInternalAlertSync event with the updated queue payload */
        this.closeAlert = () => {
            this.open = false;
            this.clearAutoCloseTimeout();
        };
        this.actionsEndSlotChangeHandler = (event) => {
            this.hasEndActions = slotChangeHasAssignedElement(event);
        };
        this.handleMouseOver = () => {
            this.isHovered = true;
            this.handleFocus();
        };
        this.handleMouseLeave = () => {
            this.isHovered = false;
            if (!this.isFocused) {
                this.handleBlur();
            }
        };
        this.handleFocus = () => {
            this.clearAutoCloseTimeout();
            this.totalOpenTime = Date.now() - this.initialOpenTime;
            this.lastMouseOverBegin = Date.now();
        };
        this.handleBlur = () => {
            const hoverDuration = Date.now() - this.lastMouseOverBegin;
            const timeRemaining = DURATIONS[this.autoCloseDuration] - this.totalOpenTime + this.totalHoverTime;
            this.totalHoverTime = this.totalHoverTime ? hoverDuration + this.totalHoverTime : hoverDuration;
            this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), timeRemaining);
        };
        this.active = false;
        this.openAlertCount = 0;
        this.open = false;
        this.autoClose = false;
        this.autoCloseDuration = "medium";
        this.embedded = false;
        this.kind = "brand";
        this.icon = undefined;
        this.iconFlipRtl = false;
        this.label = undefined;
        this.numberingSystem = undefined;
        this.placement = "bottom";
        this.scale = "m";
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.queue = "last";
        this.defaultMessages = undefined;
        this.effectiveLocale = "";
        this.numberStringFormatter = new NumberStringFormat();
        this.hasEndActions = false;
        this.isFocused = false;
    }
    handleActiveChange() {
        this.clearAutoCloseTimeout();
        if (this.active && this.autoClose && !this.autoCloseTimeoutId) {
            this.initialOpenTime = Date.now();
            this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), DURATIONS[this.autoCloseDuration]);
        }
    }
    openHandler() {
        onToggleOpenCloseComponent(this);
        if (this.open) {
            manager.registerElement(this.el);
        }
        else {
            manager.unregisterElement(this.el);
        }
    }
    updateDuration() {
        if (this.autoClose && this.autoCloseTimeoutId) {
            this.clearAutoCloseTimeout();
            this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), DURATIONS[this.autoCloseDuration]);
        }
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    handleQueueChange() {
        if (this.open) {
            manager.unregisterElement(this.el);
            manager.registerElement(this.el);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        connectLocalized(this);
        connectMessages(this);
        const open = this.open;
        if (open) {
            manager.registerElement(this.el);
        }
        this.numberStringFormatter.numberFormatOptions = {
            locale: this.effectiveLocale,
            numberingSystem: this.numberingSystem,
            signDisplay: "always",
        };
    }
    async componentWillLoad() {
        setUpLoadableComponent(this);
        await setUpMessages(this);
        if (this.open) {
            onToggleOpenCloseComponent(this);
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    disconnectedCallback() {
        manager.unregisterElement(this.el);
        this.clearAutoCloseTimeout();
        disconnectLocalized(this);
        disconnectMessages(this);
        this.embedded = false;
    }
    render() {
        const { open, autoClose, label, placement, active, openAlertCount } = this;
        const role = autoClose ? "alert" : "alertdialog";
        const hidden = !open;
        const effectiveIcon = setRequestedIcon(KindIcons, this.icon, this.kind);
        const hasQueuedAlerts = openAlertCount > 1;
        return (h(Host, { key: 'cecedeaa678e4f6e22fd2aabc4d29bc8589430f6', "aria-hidden": toAriaBoolean(hidden), "aria-label": label, "calcite-hydrated-hidden": hidden, role: role }, h("div", { key: 'ca85d5f5ec313f3a305e01dcc8cbbad9647dd516', class: {
                [CSS.container]: true,
                [CSS.containerActive]: active,
                [`${CSS.container}--${placement}`]: true,
                [CSS.containerEmbedded]: this.embedded,
                [CSS.focused]: this.isFocused,
            }, onPointerEnter: this.autoClose && this.autoCloseTimeoutId ? this.handleMouseOver : null, onPointerLeave: this.autoClose ? this.handleMouseLeave : null, ref: this.setTransitionEl }, effectiveIcon && this.renderIcon(effectiveIcon), h("div", { key: '1f72f255c3e0630eed63bb62d3d50f4a2ba6a528', class: CSS.textContainer, onFocusin: this.autoClose && this.autoCloseTimeoutId ? this.handleKeyBoardFocus : null, onFocusout: this.autoClose ? this.handleKeyBoardBlur : null }, h("slot", { key: 'aade607960adea0a10f5eac85b119444085c9cf9', name: SLOTS.title }), h("slot", { key: '1f47158cfbf8c0626cd49246142fb750311b1d4a', name: SLOTS.message }), h("slot", { key: '5ba06e024b517f23168311828cc8ce41c21926a6', name: SLOTS.link })), this.renderActionsEnd(), hasQueuedAlerts ? this.renderQueueCount() : null, this.renderCloseButton(), open && active && autoClose ? h("div", { class: CSS.dismissProgress }) : null)));
    }
    renderCloseButton() {
        return (h("button", { "aria-label": this.messages.close, class: CSS.close, key: "close", onClick: this.closeAlert, onFocusin: this.autoClose ? this.handleKeyBoardFocus : null, onFocusout: this.autoClose ? this.handleKeyBoardBlur : null, ref: (el) => (this.closeButton = el), type: "button" }, h("calcite-icon", { icon: "x", scale: getIconScale(this.scale) })));
    }
    renderQueueCount() {
        const { openAlertCount } = this;
        const queueNumber = openAlertCount > 2 ? openAlertCount - 1 : 1;
        const queueText = this.numberStringFormatter.numberFormatter.format(queueNumber);
        return (h("div", { class: {
                [CSS.queueCount]: true,
                [CSS.queueCountActive]: openAlertCount > 1,
            }, key: "queue-count" }, h("calcite-chip", { scale: this.scale, value: queueText }, queueText)));
    }
    renderActionsEnd() {
        return (h("div", { class: CSS.actionsEnd }, h("slot", { name: SLOTS.actionsEnd, onSlotchange: this.actionsEndSlotChangeHandler })));
    }
    renderIcon(icon) {
        return (h("div", { class: CSS.icon }, h("calcite-icon", { flipRtl: this.iconFlipRtl, icon: icon, scale: getIconScale(this.scale) })));
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component's "close" button, the first focusable item.
     *
      @returns {Promise<void>}
     */
    async setFocus() {
        await componentFocusable(this);
        const alertLinkEl = getSlotted(this.el, { selector: "calcite-link" });
        if (!this.closeButton && !alertLinkEl) {
            return;
        }
        else if (alertLinkEl) {
            return alertLinkEl.setFocus();
        }
        else if (this.closeButton) {
            this.closeButton.focus();
        }
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
        this.numberStringFormatter.numberFormatOptions = {
            locale: this.effectiveLocale,
            numberingSystem: this.numberingSystem,
            signDisplay: "always",
        };
    }
    numberingSystemChange() {
        this.numberStringFormatter.numberFormatOptions = {
            locale: this.effectiveLocale,
            numberingSystem: this.numberingSystem,
            signDisplay: "always",
        };
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    clearAutoCloseTimeout() {
        window.clearTimeout(this.autoCloseTimeoutId);
        this.autoCloseTimeoutId = null;
    }
    onBeforeOpen() {
        this.calciteAlertBeforeOpen.emit();
    }
    onOpen() {
        this.calciteAlertOpen.emit();
    }
    onBeforeClose() {
        this.calciteAlertBeforeClose.emit();
    }
    onClose() {
        this.calciteAlertClose.emit();
    }
    static get is() { return "calcite-alert"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["alert.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["alert.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This internal property, managed by the AlertManager, is used\nto inform the component if it is the active open Alert."
                },
                "attribute": "active",
                "reflect": false,
                "defaultValue": "false"
            },
            "openAlertCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This internal property, managed by the AlertManager, is used\nto inform the component of how many alerts are currently open."
                },
                "attribute": "open-alert-count",
                "reflect": false,
                "defaultValue": "0"
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays and positions the component."
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "autoClose": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component closes automatically. Recommended for passive, non-blocking alerts."
                },
                "attribute": "auto-close",
                "reflect": true,
                "defaultValue": "false"
            },
            "autoCloseDuration": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "AlertDuration",
                    "resolved": "\"fast\" | \"medium\" | \"slow\"",
                    "references": {
                        "AlertDuration": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/alert/interfaces.ts::AlertDuration"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the duration before the component automatically closes - only use with `autoClose`."
                },
                "attribute": "auto-close-duration",
                "reflect": true,
                "defaultValue": "\"medium\""
            },
            "embedded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This internal property, managed by a containing calcite-shell, is used\nto inform the component if special configuration or styles are needed"
                },
                "attribute": "embedded",
                "reflect": false,
                "defaultValue": "false"
            },
            "kind": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  >",
                    "resolved": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Kind": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Kind"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the kind of the component, which will apply to top border and icon."
                },
                "attribute": "kind",
                "reflect": true,
                "defaultValue": "\"brand\""
            },
            "icon": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString | boolean",
                    "resolved": "boolean | string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, shows a default recommended icon. Alternatively,\npass a Calcite UI Icon name to display a specific icon."
                },
                "attribute": "icon",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an accessible name for the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "numberingSystem": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "NumberingSystem",
                    "resolved": "\"arab\" | \"arabext\" | \"latn\"",
                    "references": {
                        "NumberingSystem": {
                            "location": "import",
                            "path": "../../utils/locale",
                            "id": "src/utils/locale.ts::NumberingSystem"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the Unicode numeral system used by the component for localization."
                },
                "attribute": "numbering-system",
                "reflect": true
            },
            "placement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "MenuPlacement",
                    "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                    "references": {
                        "MenuPlacement": {
                            "location": "import",
                            "path": "../../utils/floating-ui",
                            "id": "src/utils/floating-ui.ts::MenuPlacement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the placement of the component."
                },
                "attribute": "placement",
                "reflect": true,
                "defaultValue": "\"bottom\""
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "AlertMessages",
                    "resolved": "{ close: string; }",
                    "references": {
                        "AlertMessages": {
                            "location": "import",
                            "path": "./assets/alert/t9n",
                            "id": "src/components/alert/assets/alert/t9n/index.d.ts::AlertMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<AlertMessages>",
                    "resolved": "{ close?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "AlertMessages": {
                            "location": "import",
                            "path": "./assets/alert/t9n",
                            "id": "src/components/alert/assets/alert/t9n/index.d.ts::AlertMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            },
            "queue": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "AlertQueue",
                    "resolved": "\"immediate\" | \"last\" | \"next\"",
                    "references": {
                        "AlertQueue": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/alert/interfaces.ts::AlertQueue"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the ordering priority of the component when opened."
                },
                "attribute": "queue",
                "reflect": true,
                "defaultValue": "\"last\""
            }
        };
    }
    static get states() {
        return {
            "defaultMessages": {},
            "effectiveLocale": {},
            "numberStringFormatter": {},
            "hasEndActions": {},
            "isFocused": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteAlertBeforeClose",
                "name": "calciteAlertBeforeClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is requested to be closed and before the closing transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteAlertClose",
                "name": "calciteAlertClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is closed and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteAlertBeforeOpen",
                "name": "calciteAlertBeforeOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteAlertOpen",
                "name": "calciteAlertOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is open and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "HTMLCalciteLinkElement": {
                            "location": "global",
                            "id": "global::HTMLCalciteLinkElement"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component's \"close\" button, the first focusable item.",
                    "tags": [{
                            "name": "returns",
                            "text": undefined
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "handleActiveChange"
            }, {
                "propName": "open",
                "methodName": "openHandler"
            }, {
                "propName": "autoCloseDuration",
                "methodName": "updateDuration"
            }, {
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "queue",
                "methodName": "handleQueueChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }, {
                "propName": "numberingSystem",
                "methodName": "numberingSystemChange"
            }];
    }
}
//# sourceMappingURL=alert.js.map
