/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import { slotChangeHasContent, toAriaBoolean } from "../../utils/dom";
import { CSS, SLOTS } from "./resources";
export class SegmentedControlItem {
    constructor() {
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.handleSlotChange = (event) => {
            this.hasSlottedContent = slotChangeHasContent(event);
        };
        this.checked = false;
        this.iconFlipRtl = false;
        this.iconStart = undefined;
        this.iconEnd = undefined;
        this.value = undefined;
        this.appearance = "solid";
        this.layout = "horizontal";
        this.scale = "m";
        this.hasSlottedContent = false;
    }
    handleCheckedChange() {
        this.calciteInternalSegmentedControlItemChange.emit();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    renderIcon(icon, solo = false) {
        return icon ? (h("calcite-icon", { class: {
                [CSS.icon]: true,
                [CSS.iconSolo]: solo,
            }, flipRtl: this.iconFlipRtl, icon: icon, scale: "s" })) : null;
    }
    render() {
        const { appearance, checked, layout, scale, value } = this;
        return (h(Host, { key: 'f4aa9eaa2e02dae97e647f25b764e1a283f2ad66', "aria-checked": toAriaBoolean(checked), "aria-label": value, role: "radio" }, h("label", { key: '9e3460a279d8c3b876897ea58a004ddd1a43cfc8', class: {
                [CSS.label]: true,
                [CSS.labelScale(scale)]: true,
                [CSS.labelHorizontal]: layout === "horizontal",
                [CSS.labelOutline]: appearance === "outline",
                [CSS.labelOutlineFill]: appearance === "outline-fill",
            } }, this.renderContent())));
    }
    renderContent() {
        const { hasSlottedContent, iconEnd, iconStart } = this;
        const effectiveIcon = iconStart || iconEnd;
        const canRenderIconOnly = !hasSlottedContent && effectiveIcon;
        if (canRenderIconOnly) {
            return [this.renderIcon(effectiveIcon, true), h("slot", { onSlotchange: this.handleSlotChange })];
        }
        return [
            this.renderIcon(iconStart),
            h("slot", { onSlotchange: this.handleSlotChange }),
            h("slot", { name: SLOTS.input }),
            this.renderIcon(iconEnd),
        ];
    }
    static get is() { return "calcite-segmented-control-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["segmented-control-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["segmented-control-item.css"]
        };
    }
    static get properties() {
        return {
            "checked": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is checked."
                },
                "attribute": "checked",
                "reflect": true,
                "defaultValue": "false"
            },
            "iconFlipRtl": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true,
                "defaultValue": "false"
            },
            "iconStart": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the start of the component."
                },
                "attribute": "icon-start",
                "reflect": true
            },
            "iconEnd": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the end of the component."
                },
                "attribute": "icon-end",
                "reflect": true
            },
            "value": {
                "type": "any",
                "mutable": true,
                "complexType": {
                    "original": "any | null",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component's value."
                },
                "attribute": "value",
                "reflect": false
            },
            "appearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"outline\" | \"outline-fill\" | \"solid\", Appearance>",
                    "resolved": "\"outline\" | \"outline-fill\" | \"solid\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Appearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Appearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the appearance style of the component inherited from parent `calcite-segmented-control`, defaults to `solid`."
                },
                "attribute": "appearance",
                "reflect": false,
                "defaultValue": "\"solid\""
            },
            "layout": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout>",
                    "resolved": "\"grid\" | \"horizontal\" | \"vertical\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Layout": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Layout"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Defines the layout of the component inherited from parent `calcite-segmented-control`, defaults to `horizontal`."
                },
                "attribute": "layout",
                "reflect": false,
                "defaultValue": "\"horizontal\""
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the size of the component inherited from the `calcite-segmented-control`, defaults to `m`."
                },
                "attribute": "scale",
                "reflect": false,
                "defaultValue": "\"m\""
            }
        };
    }
    static get states() {
        return {
            "hasSlottedContent": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteInternalSegmentedControlItemChange",
                "name": "calciteInternalSegmentedControlItemChange",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Fires when the item has been selected."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "checked",
                "methodName": "handleCheckedChange"
            }];
    }
}
//# sourceMappingURL=segmented-control-item.js.map
