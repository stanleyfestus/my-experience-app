/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import { connectConditionalSlotComponent, disconnectConditionalSlotComponent, } from "../../utils/conditionalSlot";
import { closestElementCrossShadowBoundary, getElementDir, getSlotted, toAriaBoolean, } from "../../utils/dom";
import { CSS_UTILITY } from "../../utils/resources";
import { getIconScale } from "../../utils/component";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { SLOTS, CSS, IDS } from "./resources";
/**
 * @slot - A slot for adding custom content, including nested `calcite-accordion-item`s.
 * @slot actions-end - A slot for adding `calcite-action`s or content to the end side of the component's header.
 * @slot actions-start - A slot for adding `calcite-action`s or content to the start side of the component's header.
 */
export class AccordionItem {
    constructor() {
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.storeHeaderEl = (el) => {
            this.headerEl = el;
        };
        /** handle clicks on item header */
        this.itemHeaderClickHandler = () => this.emitRequestedItem();
        this.expanded = false;
        this.heading = undefined;
        this.description = undefined;
        this.iconStart = undefined;
        this.iconEnd = undefined;
        this.iconFlipRtl = undefined;
        this.iconPosition = undefined;
        this.iconType = undefined;
        this.accordionParent = undefined;
        this.scale = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        connectConditionalSlotComponent(this);
    }
    componentWillLoad() {
        setUpLoadableComponent(this);
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    disconnectedCallback() {
        disconnectConditionalSlotComponent(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    renderActionsStart() {
        const { el } = this;
        return getSlotted(el, SLOTS.actionsStart) ? (h("div", { class: CSS.actionsStart }, h("slot", { name: SLOTS.actionsStart }))) : null;
    }
    renderActionsEnd() {
        const { el } = this;
        return getSlotted(el, SLOTS.actionsEnd) ? (h("div", { class: CSS.actionsEnd }, h("slot", { name: SLOTS.actionsEnd }))) : null;
    }
    render() {
        const { iconFlipRtl } = this;
        const dir = getElementDir(this.el);
        const iconStartEl = this.iconStart ? (h("calcite-icon", { class: { [CSS.icon]: true, [CSS.iconStart]: true }, flipRtl: iconFlipRtl === "both" || iconFlipRtl === "start", icon: this.iconStart, key: "icon-start", scale: getIconScale(this.scale) })) : null;
        const iconEndEl = this.iconEnd ? (h("calcite-icon", { class: { [CSS.iconEnd]: true, [CSS.icon]: true }, flipRtl: iconFlipRtl === "both" || iconFlipRtl === "end", icon: this.iconEnd, key: "icon-end", scale: getIconScale(this.scale) })) : null;
        const { description } = this;
        return (h(Host, { key: '73a74d61e41199c57868bd5375ba1b08f8e19dbc' }, h("div", { key: 'ce9e0a74ea1eb93b7e2f00e95e6a092dcf99726b', class: {
                [`icon-position--${this.iconPosition}`]: true,
                [`icon-type--${this.iconType}`]: true,
            } }, h("div", { key: '18af6a636b01a816363edf73bd05a486ac0cc2b2', class: { [CSS.header]: true, [CSS_UTILITY.rtl]: dir === "rtl" } }, this.renderActionsStart(), h("div", { key: '8a82a3acec9576d7e936714d1bee0bd2a1cc4ab1', "aria-controls": IDS.section, "aria-expanded": toAriaBoolean(this.expanded), class: CSS.headerContent, id: IDS.sectionToggle, onClick: this.itemHeaderClickHandler, ref: this.storeHeaderEl, role: "button", tabindex: "0" }, h("div", { key: 'b9b223e8e0b0f60d9f6f9c5a9bda1458def7ae01', class: CSS.headerContainer }, iconStartEl, h("div", { key: 'ccdba89b98942b7163d09a0f78175c374aba5875', class: CSS.headerText }, h("span", { key: 'c91bcaf36ba60ac2a8ef06e3356a15d1f3a7e78f', class: CSS.heading }, this.heading), description ? h("span", { class: CSS.description }, description) : null), iconEndEl), h("calcite-icon", { key: 'aebf05069b1ceae376fb67074aad773c4f403c16', class: CSS.expandIcon, icon: this.iconType === "chevron"
                ? "chevronDown"
                : this.iconType === "caret"
                    ? "caretDown"
                    : this.expanded
                        ? "minus"
                        : "plus", scale: getIconScale(this.scale) })), this.renderActionsEnd()), h("section", { key: '7371b06f1ec99aab9351113663eda976540ae7b0', "aria-labelledby": IDS.sectionToggle, class: CSS.content, id: IDS.section }, h("slot", { key: '69b851d2989876bece534e499a039e55eaabb1ec' })))));
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    keyDownHandler(event) {
        if (event.target === this.el) {
            switch (event.key) {
                case " ":
                case "Enter":
                    this.emitRequestedItem();
                    event.preventDefault();
                    break;
            }
        }
    }
    updateActiveItemOnChange(event) {
        const [accordion] = event.composedPath();
        const parent = closestElementCrossShadowBoundary(this.el, "calcite-accordion");
        if (accordion !== parent) {
            return;
        }
        this.determineActiveItem(parent.selectionMode, event.detail.requestedAccordionItem);
        event.stopPropagation();
    }
    accordionItemSyncHandler(event) {
        const [accordion] = event.composedPath();
        const accordionItem = this.el;
        // we sync with our accordion parent via event only if the item is wrapped within another component's shadow DOM,
        // otherwise, the accordion parent will sync the item directly
        const willBeSyncedByDirectParent = accordionItem.parentElement === accordion;
        if (willBeSyncedByDirectParent) {
            return;
        }
        const closestAccordionParent = closestElementCrossShadowBoundary(accordionItem, "calcite-accordion");
        if (accordion !== closestAccordionParent) {
            return;
        }
        this.iconPosition = closestAccordionParent.iconPosition;
        this.iconType = closestAccordionParent.iconType;
        this.scale = closestAccordionParent.scale;
        event.stopPropagation();
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Sets focus on the component. */
    async setFocus() {
        await componentFocusable(this);
        this.headerEl.focus();
    }
    determineActiveItem(selectionMode, requestedItem) {
        switch (selectionMode) {
            case "multiple":
                if (this.el === requestedItem) {
                    this.expanded = !this.expanded;
                }
                break;
            case "single":
                this.expanded = this.el === requestedItem ? !this.expanded : false;
                break;
            case "single-persist":
                this.expanded = this.el === requestedItem;
                break;
        }
    }
    emitRequestedItem() {
        this.calciteInternalAccordionItemSelect.emit({
            requestedAccordionItem: this.el,
        });
    }
    static get is() { return "calcite-accordion-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["accordion-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["accordion-item.css"]
        };
    }
    static get properties() {
        return {
            "expanded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is expanded."
                },
                "attribute": "expanded",
                "reflect": true,
                "defaultValue": "false"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies heading text for the component."
                },
                "attribute": "heading",
                "reflect": false
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies a description for the component."
                },
                "attribute": "description",
                "reflect": false
            },
            "iconStart": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the start of the component."
                },
                "attribute": "icon-start",
                "reflect": true
            },
            "iconEnd": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the end of the component."
                },
                "attribute": "icon-end",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "FlipContext",
                    "resolved": "\"both\" | \"end\" | \"start\"",
                    "references": {
                        "FlipContext": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::FlipContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true
            },
            "iconPosition": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"start\" | \"end\", Position>",
                    "resolved": "\"end\" | \"start\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Position": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Position"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the placement of the icon in the header inherited from the `calcite-accordion`."
                },
                "attribute": "icon-position",
                "reflect": false
            },
            "iconType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"chevron\" | \"caret\" | \"plus-minus\", IconType>",
                    "resolved": "\"caret\" | \"chevron\" | \"plus-minus\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "IconType": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::IconType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the type of the icon in the header inherited from the `calcite-accordion`."
                },
                "attribute": "icon-type",
                "reflect": false
            },
            "accordionParent": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLCalciteAccordionElement",
                    "resolved": "HTMLCalciteAccordionElement",
                    "references": {
                        "HTMLCalciteAccordionElement": {
                            "location": "global",
                            "id": "global::HTMLCalciteAccordionElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "The containing `accordion` element."
                }
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Specifies the size of the component inherited from the `calcite-accordion`."
                },
                "attribute": "scale",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "calciteInternalAccordionItemSelect",
                "name": "calciteInternalAccordionItemSelect",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "RequestedItem",
                    "resolved": "RequestedItem",
                    "references": {
                        "RequestedItem": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/accordion-item/interfaces.ts::RequestedItem"
                        }
                    }
                }
            }, {
                "method": "calciteInternalAccordionItemClose",
                "name": "calciteInternalAccordionItemClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "keyDownHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }, {
                "name": "calciteInternalAccordionChange",
                "method": "updateActiveItemOnChange",
                "target": "body",
                "capture": false,
                "passive": false
            }, {
                "name": "calciteInternalAccordionItemsSync",
                "method": "accordionItemSyncHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=accordion-item.js.map
