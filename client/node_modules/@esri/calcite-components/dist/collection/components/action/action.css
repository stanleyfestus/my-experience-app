/**
 * Do not edit directly
 * Generated on Thu, 24 Oct 2024 00:22:20 GMT
 */
/**
 * Do not edit directly
 * Generated on Thu, 24 Oct 2024 00:22:20 GMT
 */
/**
 * Do not edit directly
 * Generated on Thu, 24 Oct 2024 00:22:20 GMT
 */
/**
 * Do not edit directly
 * Generated on Thu, 24 Oct 2024 00:22:20 GMT
 */
/**
 * Do not edit directly
 * Generated on Thu, 24 Oct 2024 00:22:18 GMT
 */
/* mixins & extensions */
/* helper to properly scale internal durations */
/**
* Currently only used in Checkbox.
*/
:host {
  /* Base ":host" styles for the component */
  box-sizing: border-box;
  background-color: var(--calcite-color-foreground-1);
  color: var(--calcite-color-text-2);
  font-size: var(--calcite-font-size--1);
}
:host * {
  box-sizing: border-box;
}

:host([disabled]) {
  cursor: default;
  -webkit-user-select: none;
          user-select: none;
  opacity: var(--calcite-opacity-disabled);
}

:host([disabled]) *,
:host([disabled]) ::slotted(*) {
  pointer-events: none;
}

/**
* CSS Custom Properties
*
* These properties can be overridden using the component's tag as selector.
*
* @prop --calcite-action-indicator-color: Specifies the component's indicator color.
* @prop --calcite-action-background-color: Specifies the component's background color.
* @prop --calcite-action-background-color-hover: Specifies the component's background color when hovered or focused.
* @prop --calcite-action-background-color-pressed: Specifies the component's background color when active.
* @prop --calcite-action-corner-radius: Specifies the component's corner radius.
* @prop --calcite-action-corner-radius-end-end: Specifies the component's corner radius end end.
* @prop --calcite-action-corner-radius-end-start: Specifies the component's corner radius end start.
* @prop --calcite-action-corner-radius-start-end: Specifies the component's corner radius start end.
* @prop --calcite-action-corner-radius-start-start: Specifies the component's corner radius start start.
* @prop --calcite-action-text-color: Specifies the component's text color.
* @prop --calcite-action-text-color-pressed: Specifies the component's text color when hovered.
*/
:host {
  display: flex;
  background-color: transparent;
}

:host,
button {
  border-end-end-radius: var(--calcite-action-corner-radius-end-end, var(--calcite-action-corner-radius, var(--calcite-corner-radius)));
  border-end-start-radius: var(--calcite-action-corner-radius-end-start, var(--calcite-action-corner-radius, var(--calcite-corner-radius)));
  border-start-end-radius: var(--calcite-action-corner-radius-start-end, var(--calcite-action-corner-radius, var(--calcite-corner-radius)));
  border-start-start-radius: var(--calcite-action-corner-radius-start-start, var(--calcite-action-corner-radius, var(--calcite-corner-radius)));
}

.button {
  position: relative;
  margin: 0px;
  display: flex;
  inline-size: auto;
  cursor: pointer;
  align-items: center;
  justify-content: flex-start;
  border-style: none;
  font-family: var(--calcite-font-family);
  font-size: var(--calcite-font-size--2);
  line-height: 1rem;
  font-weight: var(--calcite-font-weight-medium);
  outline-color: transparent;
  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
  color: var(--calcite-action-text-color, var(--calcite-color-text-3));
  text-align: unset;
  flex: 1 0 auto;
}
.button:hover, .button:focus {
  background-color: var(--calcite-action-background-color-hover, var(--calcite-color-foreground-2));
  color: var(--calcite-action-text-color-pressed, var(--calcite-color-text-1));
}
.button:focus {
  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));
  outline-offset: calc(
            -2px *
            calc(
              1 -
              2 * clamp(
                0,
                var(--calcite-offset-invert-focus),
                1
              )
            )
          );
}
.button:active {
  background-color: var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3));
}

.icon-container {
  pointer-events: none;
  margin: 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  min-inline-size: 1rem;
  min-block-size: 1.5rem;
}

.text-container {
  margin: 0px;
  inline-size: 0px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  line-height: 1.5rem;
  opacity: 0;
  transition-property: opacity;
  transition-duration: 150ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-property: margin;
  transition-property: inline-size;
}

.text-container--visible {
  inline-size: auto;
  flex: 1 1 auto;
  opacity: 1;
}

:host([active]) .button, :host([active]) .button:hover, :host([active]) .button:focus {
  color: var(--calcite-action-text-color-pressed, var(--calcite-color-text-1));
  background-color: var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3));
}
:host([active]) .button:active {
  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
}

:host([loading]) .button:hover, :host([loading]) .button:focus {
  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));
}
:host([loading]) .text-container {
  opacity: var(--calcite-opacity-disabled);
}
:host([loading]) calcite-loader[inline] {
  margin-inline-end: 0px;
}

:host([appearance=transparent]) .button {
  background-color: transparent;
  transition-property: box-shadow;
  transition-duration: 150ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}
:host([appearance=transparent]) .button:hover, :host([appearance=transparent]) .button:focus {
  background-color: var(--calcite-color-transparent-hover);
}
:host([appearance=transparent]) .button:active {
  background-color: var(--calcite-color-transparent-press);
}

:host([data-active]) .button {
  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-color-brand));
  outline-offset: calc(
            -2px *
            calc(
              1 -
              2 * clamp(
                0,
                var(--calcite-offset-invert-focus),
                1
              )
            )
          );
}

:host([scale=s]) .button {
  padding-inline: 0.5rem;
  padding-block: 0.25rem;
  font-size: var(--calcite-font-size--2);
  line-height: 1rem;
  font-weight: var(--calcite-font-weight-normal);
}
:host([scale=s]) .button--text-visible .icon-container {
  margin-inline-end: 0.5rem;
}

:host([scale=m]) .button {
  padding-inline: 1rem;
  padding-block: 0.75rem;
  font-size: var(--calcite-font-size--1);
  line-height: 1rem;
  font-weight: var(--calcite-font-weight-normal);
}
:host([scale=m]) .button--text-visible .icon-container {
  margin-inline-end: 0.75rem;
}

:host([scale=l]) .button {
  padding: 1.25rem;
  font-size: var(--calcite-font-size-0);
  line-height: 1.25rem;
  font-weight: var(--calcite-font-weight-normal);
}
:host([scale=l]) .button--text-visible .icon-container {
  margin-inline-end: 1rem;
}

:host([alignment=center]) .button {
  justify-content: center;
}

:host([alignment=end]) .button {
  justify-content: flex-end;
}

:host([alignment=center]) .button .text-container--visible,
:host([alignment=end]) .button .text-container--visible {
  flex: 0 1 auto;
}

/* [Deprecated]  Compact */
:host([scale=s][compact]) .button,
:host([scale=m][compact]) .button,
:host([scale=l][compact]) .button {
  padding-inline: 0px;
}

.slot-container {
  display: flex;
}

.slot-container--hidden {
  display: none;
}

.button--text-visible {
  inline-size: 100%;
}

.indicator-with-icon {
  position: relative;
}
.indicator-with-icon::after {
  content: "";
  position: absolute;
  block-size: 0.5rem;
  inline-size: 0.5rem;
  border-radius: 9999px;
  inset-block-end: -0.275rem;
  inset-inline-end: -0.275rem;
  background-color: var(--calcite-action-indicator-color, var(--calcite-color-brand));
}

.indicator-without-icon {
  margin-inline: 0.25rem;
  inline-size: 1rem;
  position: relative;
}
.indicator-without-icon::after {
  content: "";
  position: absolute;
  block-size: 0.5rem;
  inline-size: 0.5rem;
  border-radius: 9999px;
  inset-block-end: -0.275rem;
  inset-inline-end: -0.275rem;
  background-color: var(--calcite-action-indicator-color, var(--calcite-color-brand));
}

.indicator-text {
  position: absolute;
  inline-size: 1px;
  block-size: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

:host([hidden]) {
  display: none;
}

[hidden] {
  display: none;
}

:host([disabled]) .button,
:host([disabled]) .button:hover,
:host([disabled]) .button:focus {
  cursor: default;
  background-color: var(--calcite-color-foreground-1);
  opacity: var(--calcite-opacity-disabled);
}
:host([disabled]):host([active]) .button,
:host([disabled]):host([active]) .button:hover,
:host([disabled]):host([active]) .button:focus {
  background-color: var(--calcite-color-foreground-3);
  opacity: var(--calcite-opacity-disabled);
}
:host([disabled]) ::slotted([calcite-hydrated][disabled]),
:host([disabled]) [calcite-hydrated][disabled] {
  /* prevent opacity stacking */
  opacity: 1;
}

.interaction-container {
  display: contents;
}