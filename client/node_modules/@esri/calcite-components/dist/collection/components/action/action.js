/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { forceUpdate, h, Host, } from "@stencil/core";
import { toAriaBoolean } from "../../utils/dom";
import { guid } from "../../utils/guid";
import { InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { connectLocalized, disconnectLocalized } from "../../utils/locale";
import { createObserver } from "../../utils/observers";
import { getIconScale } from "../../utils/component";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { isBrowser } from "../../utils/browser";
import { CSS, SLOTS } from "./resources";
/**
 * @slot - A slot for adding a `calcite-icon`.
 * @slot tooltip - [Deprecated] Use the `calcite-tooltip` component instead.
 */
export class Action {
    constructor() {
        this.mutationObserver = createObserver("mutation", () => forceUpdate(this));
        this.guid = `calcite-action-${guid()}`;
        this.indicatorId = `${this.guid}-indicator`;
        this.buttonId = `${this.guid}-button`;
        // --------------------------------------------------------------------------
        //
        //  Private Methods
        //
        // --------------------------------------------------------------------------
        this.handleTooltipSlotChange = (event) => {
            const tooltips = event.target
                .assignedElements({
                flatten: true,
            })
                .filter((el) => el?.matches("calcite-tooltip"));
            const tooltip = tooltips[0];
            if (tooltip) {
                tooltip.referenceElement = this.buttonEl;
            }
        };
        this.active = false;
        this.alignment = undefined;
        this.appearance = "solid";
        this.compact = false;
        this.disabled = false;
        this.icon = undefined;
        this.iconFlipRtl = false;
        this.indicator = false;
        this.label = undefined;
        this.loading = false;
        this.scale = "m";
        this.text = undefined;
        this.textEnabled = false;
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.effectiveLocale = "";
        this.defaultMessages = undefined;
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectLocalized(this);
        connectMessages(this);
        this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
    }
    async componentWillLoad() {
        setUpLoadableComponent(this);
        if (isBrowser()) {
            await setUpMessages(this);
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    disconnectedCallback() {
        disconnectLocalized(this);
        disconnectMessages(this);
        this.mutationObserver?.disconnect();
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Methods
    //
    // --------------------------------------------------------------------------
    /** Sets focus on the component. */
    async setFocus() {
        await componentFocusable(this);
        this.buttonEl?.focus();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    renderTextContainer() {
        const { text, textEnabled } = this;
        const textContainerClasses = {
            [CSS.textContainer]: true,
            [CSS.textContainerVisible]: textEnabled,
        };
        return text ? (h("div", { class: textContainerClasses, key: "text-container" }, text)) : null;
    }
    renderIndicatorText() {
        const { indicator, messages, indicatorId, buttonId } = this;
        return (h("div", { "aria-labelledby": buttonId, "aria-live": "polite", class: CSS.indicatorText, id: indicatorId, role: "region" }, indicator ? messages.indicator : null));
    }
    renderIconContainer() {
        const { loading, icon, scale, el, iconFlipRtl, indicator } = this;
        const loaderScale = scale === "l" ? "l" : "m";
        const calciteLoaderNode = loading ? (h("calcite-loader", { inline: true, label: this.messages.loading, scale: loaderScale })) : null;
        const calciteIconNode = icon ? (h("calcite-icon", { class: { [CSS.indicatorWithIcon]: indicator }, flipRtl: iconFlipRtl, icon: icon, scale: getIconScale(this.scale) })) : null;
        const iconNode = calciteLoaderNode || calciteIconNode;
        const hasIconToDisplay = iconNode || el.children?.length;
        const slotContainerNode = (h("div", { class: {
                [CSS.slotContainer]: true,
                [CSS.slotContainerHidden]: loading,
            } }, h("slot", null)));
        return hasIconToDisplay ? (h("div", { "aria-hidden": "true", class: CSS.iconContainer, key: "icon-container" }, iconNode, slotContainerNode)) : null;
    }
    render() {
        const { active, compact, disabled, icon, loading, textEnabled, label, text, indicator, indicatorId, buttonId, messages, } = this;
        const labelFallback = label || text;
        const ariaLabel = labelFallback
            ? `${labelFallback}${indicator ? ` (${messages.indicator})` : ""}`
            : "";
        const buttonClasses = {
            [CSS.button]: true,
            [CSS.buttonTextVisible]: textEnabled,
            [CSS.buttonCompact]: compact,
        };
        return (h(Host, { key: '3b459307dcb6f8d373e70cd5c7a45d122565a70e' }, h(InteractiveContainer, { key: '3a81f1fb62a66f1dbd608f095ed90f2d47a9daf6', disabled: disabled }, h("button", { key: 'bb5249babc116d462becd6b9a056ca0d368c6e09', "aria-busy": toAriaBoolean(loading), "aria-controls": indicator ? indicatorId : null, "aria-label": ariaLabel, "aria-pressed": toAriaBoolean(active), class: buttonClasses, disabled: disabled, id: buttonId, ref: (buttonEl) => (this.buttonEl = buttonEl) }, this.renderIconContainer(), this.renderTextContainer(), !icon && indicator && h("div", { class: CSS.indicatorWithoutIcon, key: "indicator-no-icon" })), h("slot", { key: '983989711d64076eca866c1928f9c777331fcba4', name: SLOTS.tooltip, onSlotchange: this.handleTooltipSlotChange }), this.renderIndicatorText())));
    }
    static get is() { return "calcite-action"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["action.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["action.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "active": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is highlighted."
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            },
            "alignment": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Alignment",
                    "resolved": "\"center\" | \"end\" | \"start\"",
                    "references": {
                        "Alignment": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Alignment"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the horizontal alignment of button elements with text content."
                },
                "attribute": "alignment",
                "reflect": true
            },
            "appearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"solid\" | \"transparent\", Appearance>",
                    "resolved": "\"solid\" | \"transparent\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Appearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Appearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the appearance of the component."
                },
                "attribute": "appearance",
                "reflect": true,
                "defaultValue": "\"solid\""
            },
            "compact": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "No longer necessary."
                        }],
                    "text": "When `true`, the side padding of the component is reduced."
                },
                "attribute": "compact",
                "reflect": true,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display."
                },
                "attribute": "icon",
                "reflect": false
            },
            "iconFlipRtl": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true,
                "defaultValue": "false"
            },
            "indicator": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays a visual indicator."
                },
                "attribute": "indicator",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop."
                },
                "attribute": "label",
                "reflect": false
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, a busy indicator is displayed."
                },
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "text": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies text that accompanies the icon."
                },
                "attribute": "text",
                "reflect": false
            },
            "textEnabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Indicates whether the text is displayed."
                },
                "attribute": "text-enabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ActionMessages",
                    "resolved": "{ loading: string; indicator: string; indicatorLabel: string; }",
                    "references": {
                        "ActionMessages": {
                            "location": "import",
                            "path": "./assets/action/t9n",
                            "id": "src/components/action/assets/action/t9n/index.d.ts::ActionMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<ActionMessages>",
                    "resolved": "{ loading?: string; indicator?: string; indicatorLabel?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "ActionMessages": {
                            "location": "import",
                            "path": "./assets/action/t9n",
                            "id": "src/components/action/assets/action/t9n/index.d.ts::ActionMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            }
        };
    }
    static get states() {
        return {
            "effectiveLocale": {},
            "defaultMessages": {}
        };
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }];
    }
}
//# sourceMappingURL=action.js.map
