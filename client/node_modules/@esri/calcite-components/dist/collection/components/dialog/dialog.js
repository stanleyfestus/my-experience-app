/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import interact from "interactjs";
import { focusFirstTabbable, toAriaBoolean } from "../../utils/dom";
import { activateFocusTrap, connectFocusTrap, deactivateFocusTrap, updateFocusTrapElements, } from "../../utils/focusTrapComponent";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { createObserver } from "../../utils/observers";
import { onToggleOpenCloseComponent } from "../../utils/openCloseComponent";
import { connectLocalized, disconnectLocalized } from "../../utils/locale";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { componentOnReady } from "../../utils/component";
import { SLOTS as PANEL_SLOTS } from "../panel/resources";
import { CSS, dialogResizeStep, dialogDragStep, SLOTS, initialDragPosition, initialResizePosition, } from "./resources";
let totalOpenDialogs = 0;
let initialDocumentOverflowStyle = "";
/**
 * @slot - A slot for adding content.
 * @slot content - A slot for adding custom content.
 * @slot action-bar - A slot for adding a `calcite-action-bar` to the component.
 * @slot alerts - A slot for adding `calcite-alert`s to the component.
 * @slot content-bottom - A slot for adding content below the unnamed (default) slot and - if populated - the `footer` slot.
 * @slot content-top - A slot for adding content above the unnamed (default) slot and - if populated - below the `action-bar` slot.
 * @slot header-actions-start - A slot for adding actions or content to the starting side of the component's header.
 * @slot header-actions-end - A slot for adding actions or content to the ending side of the component's header.
 * @slot header-content - A slot for adding custom content to the component's header.
 * @slot header-menu-actions - A slot for adding an overflow menu with actions inside a `calcite-dropdown`.
 * @slot fab - A slot for adding a `calcite-fab` (floating action button) to perform an action.
 * @slot footer - A slot for adding custom content to the component's footer. Should not be used with the `"footer-start"` or `"footer-end"` slots.
 * @slot footer-end - A slot for adding a trailing footer custom content. Should not be used with the `"footer"` slot.
 * @slot footer-start - A slot for adding a leading footer custom content. Should not be used with the `"footer"` slot.
 */
export class Dialog {
    constructor() {
        this.openTransitionProp = "opacity";
        this.resizePosition = { ...initialResizePosition };
        this.dragPosition = { ...initialDragPosition };
        this.ignoreOpenChange = false;
        this.mutationObserver = createObserver("mutation", () => this.handleMutationObserver());
        this.handleKeyDown = (event) => {
            const { key, shiftKey, defaultPrevented } = event;
            const { dragEnabled, resizable, resizePosition, dragPosition, transitionEl } = this;
            const keys = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
            if (defaultPrevented || !keys.includes(key)) {
                return;
            }
            switch (key) {
                case "ArrowUp":
                    if (shiftKey && resizable && transitionEl) {
                        this.updateSize({
                            size: this.getTransitionElDOMRect().height - dialogResizeStep,
                            type: "blockSize",
                        });
                        resizePosition.bottom -= dialogResizeStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    else if (dragEnabled) {
                        dragPosition.y -= dialogDragStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    break;
                case "ArrowDown":
                    if (shiftKey && resizable && transitionEl) {
                        this.updateSize({
                            size: this.getTransitionElDOMRect().height + dialogResizeStep,
                            type: "blockSize",
                        });
                        resizePosition.bottom += dialogResizeStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    else if (dragEnabled) {
                        dragPosition.y += dialogDragStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    break;
                case "ArrowLeft":
                    if (shiftKey && resizable && transitionEl) {
                        this.updateSize({
                            size: this.getTransitionElDOMRect().width - dialogResizeStep,
                            type: "inlineSize",
                        });
                        resizePosition.right -= dialogResizeStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    else if (dragEnabled) {
                        dragPosition.x -= dialogDragStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    break;
                case "ArrowRight":
                    if (shiftKey && resizable && transitionEl) {
                        this.updateSize({
                            size: this.getTransitionElDOMRect().width + dialogResizeStep,
                            type: "inlineSize",
                        });
                        resizePosition.right += dialogResizeStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    else if (dragEnabled) {
                        dragPosition.x += dialogDragStep;
                        this.updateTransform();
                        this.triggerInteractModifiers();
                        event.preventDefault();
                    }
                    break;
            }
        };
        this.setTransitionEl = (el) => {
            this.transitionEl = el;
            this.setupInteractions();
        };
        this.openEnd = () => {
            this.setFocus();
            this.el.removeEventListener("calciteDialogOpen", this.openEnd);
        };
        this.handleInternalPanelScroll = (event) => {
            if (event.target !== this.panelEl) {
                return;
            }
            event.stopPropagation();
            this.calciteDialogScroll.emit();
        };
        this.handleInternalPanelCloseClick = (event) => {
            if (event.target !== this.panelEl) {
                return;
            }
            event.stopPropagation();
            this.open = false;
        };
        this.handlePanelKeyDown = (event) => {
            if (this.escapeDisabled && event.key === "Escape") {
                event.preventDefault();
            }
        };
        this.handleOutsideClose = () => {
            if (this.outsideCloseDisabled) {
                return;
            }
            this.open = false;
        };
        this.closeDialog = async () => {
            if (this.beforeClose) {
                try {
                    await this.beforeClose();
                }
                catch (_error) {
                    // close prevented
                    requestAnimationFrame(() => {
                        this.ignoreOpenChange = true;
                        this.open = true;
                        this.ignoreOpenChange = false;
                    });
                    return;
                }
            }
            totalOpenDialogs--;
            this.opened = false;
            this.updateOverflowHiddenClass();
        };
        this.updateOverflowHiddenClass = () => {
            this.opened && !this.embedded && this.modal
                ? this.addOverflowHiddenClass()
                : this.removeOverflowHiddenClass();
        };
        this.handleMutationObserver = () => {
            this.updateFocusTrapElements();
        };
        this.beforeClose = undefined;
        this.description = undefined;
        this.dragEnabled = false;
        this.closeDisabled = false;
        this.embedded = false;
        this.escapeDisabled = false;
        this.heading = undefined;
        this.headingLevel = undefined;
        this.kind = undefined;
        this.loading = false;
        this.menuOpen = false;
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.modal = false;
        this.open = false;
        this.outsideCloseDisabled = false;
        this.overlayPositioning = "absolute";
        this.placement = "center";
        this.resizable = false;
        this.scale = "m";
        this.widthScale = "m";
        this.opened = false;
        this.hasFooter = true;
        this.hasContentTop = false;
        this.hasContentBottom = false;
        this.effectiveLocale = undefined;
        this.defaultMessages = undefined;
        this.assistiveText = null;
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    onModalChange() {
        this.updateOverflowHiddenClass();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        await setUpMessages(this);
        setUpLoadableComponent(this);
        // when dialog initially renders, if active was set we need to open as watcher doesn't fire
        if (this.open) {
            this.openDialog();
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    connectedCallback() {
        this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
        connectLocalized(this);
        connectMessages(this);
        connectFocusTrap(this);
        this.setupInteractions();
    }
    disconnectedCallback() {
        this.removeOverflowHiddenClass();
        this.mutationObserver?.disconnect();
        deactivateFocusTrap(this);
        disconnectLocalized(this);
        disconnectMessages(this);
        this.embedded = false;
        this.cleanupInteractions();
    }
    render() {
        const { assistiveText, description, heading, opened } = this;
        return (h(Host, { key: 'bf406255eaa6d94c8443af185a74a2b2d58c6d59' }, h("div", { key: 'de2a34b6da4a82c66e9fafdbdd2056e4e11e1315', class: {
                [CSS.container]: true,
                [CSS.containerOpen]: opened,
                [CSS.containerEmbedded]: this.embedded,
            } }, this.modal ? (h("calcite-scrim", { class: CSS.scrim, onClick: this.handleOutsideClose })) : null, h("div", { key: 'be47093e3a955ce45a71c555700143a4a1c7a166', "aria-description": description, "aria-label": heading, "aria-modal": toAriaBoolean(this.modal), class: CSS.dialog, onKeyDown: this.handleKeyDown, ref: this.setTransitionEl, role: "dialog" }, assistiveText ? (h("div", { "aria-live": "polite", class: CSS.assistiveText, key: "assistive-text" }, assistiveText)) : null, h("slot", { key: '6ed9f10ae7d5ecc1ec9062d6aba559001d5194e6', name: SLOTS.content }, h("calcite-panel", { key: 'cd6ebaa7d7362cbeb70e9ae623f38298d1e831e3', beforeClose: this.beforeClose, class: CSS.panel, closable: !this.closeDisabled, closed: !opened, description: description, heading: heading, headingLevel: this.headingLevel, loading: this.loading, menuOpen: this.menuOpen, messageOverrides: this.messageOverrides, onCalcitePanelClose: this.handleInternalPanelCloseClick, onCalcitePanelScroll: this.handleInternalPanelScroll, onKeyDown: this.handlePanelKeyDown, overlayPositioning: this.overlayPositioning, ref: (el) => (this.panelEl = el), scale: this.scale }, h("slot", { key: '2ce955775c33b09fc849a083d0bcc1c8ce523dd8', name: SLOTS.actionBar, slot: PANEL_SLOTS.actionBar }), h("slot", { key: 'dd44184de251320af6225baa2e59571b881a23cd', name: SLOTS.alerts, slot: PANEL_SLOTS.alerts }), h("slot", { key: 'da343a1a10e015b04b37463c10592e612a576e9b', name: SLOTS.headerActionsStart, slot: PANEL_SLOTS.headerActionsStart }), h("slot", { key: '6680fde2bd7ad6dc5803c78ea7250d11d4920b7c', name: SLOTS.headerActionsEnd, slot: PANEL_SLOTS.headerActionsEnd }), h("slot", { key: 'a17ca64188ffe6000792e67eafc838df575ebbc3', name: SLOTS.headerContent, slot: PANEL_SLOTS.headerContent }), h("slot", { key: '7e048c4a9104053ca0a61ab2514b018efb4fc872', name: SLOTS.headerMenuActions, slot: PANEL_SLOTS.headerMenuActions }), h("slot", { key: '6760c8a6c105a511fcb859cfd222f8c1355a82c4', name: SLOTS.fab, slot: PANEL_SLOTS.fab }), h("slot", { key: 'e0f2e7644281d408d8c21ce5bf16b08af0a59c3b', name: SLOTS.contentTop, slot: PANEL_SLOTS.contentTop }), h("slot", { key: '01889c3b7fc13bc49521c27feb2ab35346552504', name: SLOTS.contentBottom, slot: PANEL_SLOTS.contentBottom }), h("slot", { key: '593bad35110b5d7e7b44d598b397e4b87cc28e28', name: SLOTS.footerStart, slot: PANEL_SLOTS.footerStart }), h("slot", { key: '5e84099e096a6afb678cce9731b189f4011dc067', name: SLOTS.footer, slot: PANEL_SLOTS.footer }), h("slot", { key: '69a805bd0c1f43a6d165939e62db562428f39f11', name: SLOTS.footerEnd, slot: PANEL_SLOTS.footerEnd }), h("slot", { key: 'b49e14ff6d2c63caaa8fd296920618e7673eb71b' })))))));
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    handleInteractionChange() {
        this.setupInteractions();
    }
    updateAssistiveText() {
        const { messages } = this;
        this.assistiveText =
            messages && (this.dragEnabled || this.resizable)
                ? `${this.dragEnabled ? messages.dragEnabled : ""} ${this.resizable ? messages.resizeEnabled : ""}`
                : null;
    }
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    handleEscape(event) {
        if (this.open && !this.escapeDisabled && event.key === "Escape" && !event.defaultPrevented) {
            this.open = false;
            event.preventDefault();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component's "close" button (the first focusable item).
     *
     * @returns {Promise<void>} - A promise that is resolved when the operation has completed.
     */
    async setFocus() {
        await componentFocusable(this);
        return this.panelEl?.setFocus() ?? focusFirstTabbable(this.el);
    }
    /**
     * Updates the element(s) that are used within the focus-trap of the component.
     */
    async updateFocusTrapElements() {
        updateFocusTrapElements(this);
    }
    /**
     * Scrolls the component's content to a specified set of coordinates.
     *
     * @example
     * myCalciteFlowItem.scrollContentTo({
     *   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.
     *   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element
     *   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).
     * });
     * @param options - allows specific coordinates to be defined.
     * @returns - promise that resolves once the content is scrolled to.
     */
    async scrollContentTo(options) {
        await this.panelEl?.scrollContentTo(options);
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    onBeforeOpen() {
        this.calciteDialogBeforeOpen.emit();
    }
    onOpen() {
        this.calciteDialogOpen.emit();
        activateFocusTrap(this);
    }
    onBeforeClose() {
        this.calciteDialogBeforeClose.emit();
    }
    onClose() {
        this.calciteDialogClose.emit();
        deactivateFocusTrap(this);
    }
    toggleDialog(value) {
        if (this.ignoreOpenChange) {
            return;
        }
        if (value) {
            this.openDialog();
        }
        else {
            this.closeDialog();
        }
    }
    handleOpenedChange(value) {
        this.transitionEl.classList.toggle(CSS.openingActive, value);
        onToggleOpenCloseComponent(this);
    }
    async triggerInteractModifiers() {
        const { interaction } = this;
        if (!interaction) {
            return;
        }
        await interaction.reflow({
            name: "drag",
        });
        await interaction.reflow({
            name: "resize",
        });
    }
    getTransitionElDOMRect() {
        return this.transitionEl.getBoundingClientRect();
    }
    updateTransform() {
        const { dragPosition: { x, y }, resizePosition, transitionEl, dragEnabled, resizable, } = this;
        if (!transitionEl) {
            return;
        }
        if (!dragEnabled && !resizable) {
            transitionEl.style.transform = null;
            return;
        }
        const { top, right, bottom, left } = this.getAdjustedResizePosition(resizePosition);
        const translateX = Math.round(x + left + right);
        const translateY = Math.round(y + top + bottom);
        transitionEl.style.transform =
            translateX || translateY ? `translate(${translateX}px, ${translateY}px)` : null;
    }
    updateSize({ type, size, }) {
        const { transitionEl } = this;
        if (!transitionEl) {
            return;
        }
        transitionEl.style[type] = size !== null ? `${Math.round(size)}px` : null;
    }
    cleanupInteractions() {
        this.interaction?.unset();
        this.updateSize({ size: null, type: "inlineSize" });
        this.updateSize({ size: null, type: "blockSize" });
        this.dragPosition = { ...initialDragPosition };
        this.resizePosition = { ...initialResizePosition };
        this.updateTransform();
    }
    setupInteractions() {
        this.cleanupInteractions();
        const { el, transitionEl, resizable, dragEnabled, resizePosition, dragPosition } = this;
        if (!transitionEl || !this.open) {
            return;
        }
        if (resizable || dragEnabled) {
            this.interaction = interact(transitionEl, { context: el.ownerDocument });
        }
        if (resizable) {
            const { minInlineSize, minBlockSize, maxInlineSize, maxBlockSize } = window.getComputedStyle(transitionEl);
            this.interaction.resizable({
                edges: {
                    top: true,
                    right: true,
                    bottom: true,
                    left: true,
                },
                modifiers: [
                    interact.modifiers.restrictSize({
                        min: {
                            width: this.isPixelValue(minInlineSize) ? parseInt(minInlineSize, 10) : 0,
                            height: this.isPixelValue(minBlockSize) ? parseInt(minBlockSize, 10) : 0,
                        },
                        max: {
                            width: this.isPixelValue(maxInlineSize)
                                ? parseInt(maxInlineSize, 10)
                                : window.innerWidth,
                            height: this.isPixelValue(maxBlockSize)
                                ? parseInt(maxBlockSize, 10)
                                : window.innerHeight,
                        },
                    }),
                    interact.modifiers.restrict({
                        restriction: "parent",
                    }),
                ],
                listeners: {
                    move: ({ rect, deltaRect }) => {
                        if (deltaRect) {
                            resizePosition.top += deltaRect.top;
                            resizePosition.right += deltaRect.right;
                            resizePosition.bottom += deltaRect.bottom;
                            resizePosition.left += deltaRect.left;
                        }
                        this.updateSize({ size: rect.width, type: "inlineSize" });
                        this.updateSize({ size: rect.height, type: "blockSize" });
                        this.updateTransform();
                    },
                },
            });
        }
        if (dragEnabled) {
            this.interaction.draggable({
                modifiers: [
                    interact.modifiers.restrictRect({
                        restriction: "parent",
                    }),
                ],
                listeners: {
                    move: ({ dx, dy }) => {
                        dragPosition.x += dx;
                        dragPosition.y += dy;
                        this.updateTransform();
                    },
                },
            });
        }
    }
    isPixelValue(value) {
        return value.indexOf("px") !== -1;
    }
    getAdjustedResizePosition({ top, right, bottom, left, }) {
        const halfTop = top / 2;
        const halfRight = right / 2;
        const halfBottom = bottom / 2;
        const halfLeft = left / 2;
        switch (this.placement) {
            case "top":
                return { top, right: halfRight, bottom: 0, left: halfLeft };
            case "top-start":
                return { top, right: 0, bottom: 0, left };
            case "top-end":
                return { top, right, bottom: 0, left: 0 };
            case "bottom":
                return { top: 0, right: halfRight, bottom, left: halfLeft };
            case "bottom-start":
                return { top: 0, right: 0, bottom, left };
            case "bottom-end":
                return { top: 0, right, bottom, left: 0 };
            case "cover":
            case "center":
            default:
                return {
                    top: halfTop,
                    right: halfRight,
                    bottom: halfBottom,
                    left: halfLeft,
                };
        }
    }
    async openDialog() {
        await componentOnReady(this.el);
        this.el.addEventListener("calciteDialogOpen", this.openEnd);
        this.opened = true;
        this.updateOverflowHiddenClass();
    }
    addOverflowHiddenClass() {
        if (totalOpenDialogs === 0) {
            initialDocumentOverflowStyle = document.documentElement.style.overflow;
        }
        totalOpenDialogs++;
        // use an inline style instead of a utility class to avoid global class declarations.
        document.documentElement.style.setProperty("overflow", "hidden");
    }
    removeOverflowHiddenClass() {
        document.documentElement.style.setProperty("overflow", initialDocumentOverflowStyle);
    }
    static get is() { return "calcite-dialog"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["dialog.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["dialog.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "beforeClose": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "() => Promise<void>",
                    "resolved": "() => Promise<void>",
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Passes a function to run before the component closes."
                }
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "A description for the component."
                },
                "attribute": "description",
                "reflect": false
            },
            "dragEnabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is draggable."
                },
                "attribute": "drag-enabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "closeDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, disables the component's close button."
                },
                "attribute": "close-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "embedded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "This internal property, managed by a containing calcite-shell, is used\nto inform the component if special configuration or styles are needed"
                },
                "attribute": "embedded",
                "reflect": false,
                "defaultValue": "false"
            },
            "escapeDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "see",
                            "text": "[Dialog Accessibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility)"
                        }],
                    "text": "When `true`, disables the default close on escape behavior.\n\nBy default, an open dialog can be dismissed by pressing the Esc key."
                },
                "attribute": "escape-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component header text."
                },
                "attribute": "heading",
                "reflect": false
            },
            "headingLevel": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "HeadingLevel",
                    "resolved": "1 | 2 | 3 | 4 | 5 | 6",
                    "references": {
                        "HeadingLevel": {
                            "location": "import",
                            "path": "../functional/Heading",
                            "id": "src/components/functional/Heading.tsx::HeadingLevel"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling."
                },
                "attribute": "heading-level",
                "reflect": true
            },
            "kind": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\", Kind>",
                    "resolved": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Kind": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Kind"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the kind of the component, which will style the top border."
                },
                "attribute": "kind",
                "reflect": true
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, a busy indicator is displayed."
                },
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            },
            "menuOpen": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the action menu items in the `header-menu-actions` slot are open."
                },
                "attribute": "menu-open",
                "reflect": true,
                "defaultValue": "false"
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "DialogMessages",
                    "resolved": "{ close: string; resizeEnabled: string; dragEnabled: string; }",
                    "references": {
                        "DialogMessages": {
                            "location": "import",
                            "path": "./assets/dialog/t9n",
                            "id": "src/components/dialog/assets/dialog/t9n/index.d.ts::DialogMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<DialogMessages>",
                    "resolved": "{ close?: string; resizeEnabled?: string; dragEnabled?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "DialogMessages": {
                            "location": "import",
                            "path": "./assets/dialog/t9n",
                            "id": "src/components/dialog/assets/dialog/t9n/index.d.ts::DialogMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            },
            "modal": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays a scrim blocking interaction underneath the component."
                },
                "attribute": "modal",
                "reflect": true,
                "defaultValue": "false"
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays and positions the component."
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "outsideCloseDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, disables the closing of the component when clicked outside."
                },
                "attribute": "outside-close-disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "overlayPositioning": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "OverlayPositioning",
                    "resolved": "\"absolute\" | \"fixed\"",
                    "references": {
                        "OverlayPositioning": {
                            "location": "import",
                            "path": "../../utils/floating-ui",
                            "id": "src/utils/floating-ui.ts::OverlayPositioning"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`."
                },
                "attribute": "overlay-positioning",
                "reflect": true,
                "defaultValue": "\"absolute\""
            },
            "placement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DialogPlacement",
                    "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"center\" | \"cover\" | \"top\" | \"top-end\" | \"top-start\"",
                    "references": {
                        "DialogPlacement": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/dialog/interfaces.ts::DialogPlacement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the placement of the dialog."
                },
                "attribute": "placement",
                "reflect": true,
                "defaultValue": "\"center\""
            },
            "resizable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is resizable."
                },
                "attribute": "resizable",
                "reflect": true,
                "defaultValue": "false"
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "widthScale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the width of the component."
                },
                "attribute": "width-scale",
                "reflect": true,
                "defaultValue": "\"m\""
            }
        };
    }
    static get states() {
        return {
            "opened": {},
            "hasFooter": {},
            "hasContentTop": {},
            "hasContentBottom": {},
            "effectiveLocale": {},
            "defaultMessages": {},
            "assistiveText": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteDialogBeforeClose",
                "name": "calciteDialogBeforeClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is requested to be closed and before the closing transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteDialogClose",
                "name": "calciteDialogClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is closed and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteDialogBeforeOpen",
                "name": "calciteDialogBeforeOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteDialogOpen",
                "name": "calciteDialogOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is open and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteDialogScroll",
                "name": "calciteDialogScroll",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the content is scrolled."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component's \"close\" button (the first focusable item).",
                    "tags": [{
                            "name": "returns",
                            "text": "- A promise that is resolved when the operation has completed."
                        }]
                }
            },
            "updateFocusTrapElements": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Updates the element(s) that are used within the focus-trap of the component.",
                    "tags": []
                }
            },
            "scrollContentTo": {
                "complexType": {
                    "signature": "(options?: ScrollToOptions) => Promise<void>",
                    "parameters": [{
                            "name": "options",
                            "type": "ScrollToOptions",
                            "docs": "- allows specific coordinates to be defined."
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "ScrollToOptions": {
                            "location": "global",
                            "id": "global::ScrollToOptions"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Scrolls the component's content to a specified set of coordinates.",
                    "tags": [{
                            "name": "example",
                            "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
                        }, {
                            "name": "param",
                            "text": "options - allows specific coordinates to be defined."
                        }, {
                            "name": "returns",
                            "text": "- promise that resolves once the content is scrolled to."
                        }]
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "modal",
                "methodName": "onModalChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }, {
                "propName": "open",
                "methodName": "handleInteractionChange"
            }, {
                "propName": "placement",
                "methodName": "handleInteractionChange"
            }, {
                "propName": "resizable",
                "methodName": "handleInteractionChange"
            }, {
                "propName": "dragEnabled",
                "methodName": "handleInteractionChange"
            }, {
                "propName": "messages",
                "methodName": "updateAssistiveText"
            }, {
                "propName": "dragEnabled",
                "methodName": "updateAssistiveText"
            }, {
                "propName": "resizable",
                "methodName": "updateAssistiveText"
            }, {
                "propName": "open",
                "methodName": "toggleDialog"
            }, {
                "propName": "opened",
                "methodName": "handleOpenedChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "handleEscape",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
}
//# sourceMappingURL=dialog.js.map
