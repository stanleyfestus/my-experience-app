/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { h, Host, } from "@stencil/core";
import { connectConditionalSlotComponent, disconnectConditionalSlotComponent, } from "../../utils/conditionalSlot";
import { focusFirstTabbable, getSlotted, toAriaBoolean, slotChangeHasAssignedElement, } from "../../utils/dom";
import { InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { connectLocalized, disconnectLocalized } from "../../utils/locale";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { Heading } from "../functional/Heading";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { onToggleOpenCloseComponent } from "../../utils/openCloseComponent";
import { defaultEndMenuPlacement, } from "../../utils/floating-ui";
import { CSS, ICONS, IDS, SLOTS } from "./resources";
/**
 * @slot - A slot for adding custom content.
 * @slot actions-end - A slot for adding actionable `calcite-action` elements after the content of the component. It is recommended to use two or fewer actions.
 * @slot icon - [Deprecated] A slot for adding a leading header icon with `calcite-icon`. Use `icon-start` instead.
 * @slot content-start - A slot for adding non-actionable elements before content of the component.
 * @slot control - [Deprecated] A slot for adding a single HTML input element in a header. Use `actions-end` instead.
 * @slot header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu.
 */
export class Block {
    constructor() {
        this.openTransitionProp = "margin-top";
        // --------------------------------------------------------------------------
        //
        //  Private Methods
        //
        // --------------------------------------------------------------------------
        this.onHeaderClick = () => {
            this.open = !this.open;
            this.calciteBlockToggle.emit();
        };
        this.actionsEndSlotChangeHandler = (event) => {
            this.hasEndActions = slotChangeHasAssignedElement(event);
        };
        this.handleContentStartSlotChange = (event) => {
            this.hasContentStart = slotChangeHasAssignedElement(event);
        };
        this.collapsible = false;
        this.disabled = false;
        this.dragHandle = false;
        this.heading = undefined;
        this.headingLevel = undefined;
        this.iconEnd = undefined;
        this.iconFlipRtl = undefined;
        this.iconStart = undefined;
        this.loading = false;
        this.menuFlipPlacements = undefined;
        this.menuPlacement = defaultEndMenuPlacement;
        this.open = false;
        this.status = undefined;
        this.description = undefined;
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.overlayPositioning = "absolute";
        this.defaultMessages = undefined;
        this.effectiveLocale = undefined;
        this.hasContentStart = false;
        this.hasEndActions = false;
    }
    openHandler() {
        onToggleOpenCloseComponent(this);
    }
    onMessagesChange() {
        /* wired up by t9n util */
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Sets focus on the component's first tabbable element.
     *
     */
    async setFocus() {
        await componentFocusable(this);
        focusFirstTabbable(this.el);
    }
    onBeforeOpen() {
        this.calciteBlockBeforeOpen.emit();
    }
    onOpen() {
        this.calciteBlockOpen.emit();
    }
    onBeforeClose() {
        this.calciteBlockBeforeClose.emit();
    }
    onClose() {
        this.calciteBlockClose.emit();
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectConditionalSlotComponent(this);
        connectLocalized(this);
        connectMessages(this);
        this.transitionEl = this.el;
    }
    disconnectedCallback() {
        disconnectLocalized(this);
        disconnectMessages(this);
        disconnectConditionalSlotComponent(this);
    }
    async componentWillLoad() {
        await setUpMessages(this);
        setUpLoadableComponent(this);
        if (this.open) {
            onToggleOpenCloseComponent(this);
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    renderScrim() {
        const { loading } = this;
        const defaultSlot = h("slot", null);
        return [loading ? h("calcite-scrim", { loading: loading }) : null, defaultSlot];
    }
    renderLoaderStatusIcon() {
        const { loading, messages, status } = this;
        const hasSlottedIcon = !!getSlotted(this.el, SLOTS.icon);
        return loading ? (h("div", { class: CSS.icon, key: "loader" }, h("calcite-loader", { inline: true, label: messages.loading }))) : status ? (h("div", { class: CSS.icon, key: "status-icon" }, h("calcite-icon", { class: {
                [CSS.statusIcon]: true,
                [CSS.valid]: status == "valid",
                [CSS.invalid]: status == "invalid",
            }, icon: ICONS[status], scale: "s" }))) : hasSlottedIcon ? (h("div", { class: CSS.icon, key: "icon-slot" }, h("slot", { key: "icon-slot", name: SLOTS.icon }))) : null;
    }
    renderActionsEnd() {
        return (h("div", { class: CSS.actionsEnd }, h("slot", { name: SLOTS.actionsEnd, onSlotchange: this.actionsEndSlotChangeHandler })));
    }
    renderContentStart() {
        const { hasContentStart } = this;
        return (h("div", { class: CSS.contentStart, hidden: !hasContentStart }, h("slot", { name: SLOTS.contentStart, onSlotchange: this.handleContentStartSlotChange })));
    }
    renderTitle() {
        const { heading, headingLevel, description } = this;
        return heading || description ? (h("div", { class: CSS.title }, h(Heading, { class: CSS.heading, level: headingLevel }, heading), description ? h("div", { class: CSS.description }, description) : null)) : null;
    }
    renderIcon(position) {
        const { iconFlipRtl } = this;
        const flipRtl = iconFlipRtl === "both" || position === "start"
            ? iconFlipRtl === "start"
            : iconFlipRtl === "end";
        const iconValue = position === "start" ? this.iconStart : this.iconEnd;
        const iconClass = position === "start" ? CSS.iconStart : CSS.iconEnd;
        if (!iconValue) {
            return undefined;
        }
        /** Icon scale is not variable as the component does not have a scale property */
        return (h("calcite-icon", { class: iconClass, flipRtl: flipRtl, icon: iconValue, key: iconValue, scale: "s" }));
    }
    render() {
        const { collapsible, el, loading, open, heading, messages, description, menuFlipPlacements, menuPlacement, } = this;
        const toggleLabel = open ? messages.collapse : messages.expand;
        const headerContent = (h("header", { key: '439d2866f9c5f13cfd8020812203a6cdf86c964f', class: { [CSS.header]: true, [CSS.headerHasText]: !!(heading || description) }, id: IDS.header }, this.renderIcon("start"), this.renderContentStart(), this.renderLoaderStatusIcon(), this.renderTitle()));
        const hasControl = !!getSlotted(el, SLOTS.control);
        const hasMenuActions = !!getSlotted(el, SLOTS.headerMenuActions);
        const collapseIcon = open ? ICONS.opened : ICONS.closed;
        const headerNode = (h("div", { key: 'a9721a9e145db53a215262190d2f7e46472edec6', class: CSS.headerContainer }, this.dragHandle ? h("calcite-handle", { label: heading }) : null, collapsible ? (h("button", { "aria-controls": IDS.content, "aria-describedby": IDS.header, "aria-expanded": collapsible ? toAriaBoolean(open) : null, class: CSS.toggle, id: IDS.toggle, onClick: this.onHeaderClick, title: toggleLabel }, headerContent, h("div", { class: CSS.iconEndContainer }, this.renderIcon("end"), h("calcite-icon", { class: CSS.toggleIcon, icon: collapseIcon, scale: "s" })))) : this.iconEnd ? (h("div", null, headerContent, h("div", { class: CSS.iconEndContainer }, this.renderIcon("end")))) : (headerContent), hasControl ? (h("div", { "aria-labelledby": IDS.header, class: CSS.controlContainer }, h("slot", { name: SLOTS.control }))) : null, hasMenuActions ? (h("calcite-action-menu", { flipPlacements: menuFlipPlacements ?? ["top", "bottom"], label: messages.options, overlayPositioning: this.overlayPositioning, placement: menuPlacement }, h("slot", { name: SLOTS.headerMenuActions }))) : null, this.renderActionsEnd()));
        return (h(Host, { key: 'cdf7c69cc630466cfd4fb0078735f1e685fde512' }, h(InteractiveContainer, { key: 'ae5b2a044fb337bb2c5c12bee2c9ed4b10e5c373', disabled: this.disabled }, h("article", { key: '01c5c5499d62361cfe26d8b6a878034f0805787b', "aria-busy": toAriaBoolean(loading), class: {
                [CSS.container]: true,
            } }, headerNode, h("section", { key: 'e72271e369055329e4447d15c2deec25599332ec', "aria-labelledby": IDS.toggle, class: CSS.content, hidden: !open, id: IDS.content }, this.renderScrim())))));
    }
    static get is() { return "calcite-block"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["block.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["block.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "collapsible": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the component is collapsible."
                },
                "attribute": "collapsible",
                "reflect": true,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "dragHandle": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, displays a drag handle in the header."
                },
                "attribute": "drag-handle",
                "reflect": true,
                "defaultValue": "false"
            },
            "heading": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": true,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The component header text."
                },
                "attribute": "heading",
                "reflect": false
            },
            "headingLevel": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "HeadingLevel",
                    "resolved": "1 | 2 | 3 | 4 | 5 | 6",
                    "references": {
                        "HeadingLevel": {
                            "location": "import",
                            "path": "../functional/Heading",
                            "id": "src/components/functional/Heading.tsx::HeadingLevel"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling."
                },
                "attribute": "heading-level",
                "reflect": true
            },
            "iconEnd": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the end of the component."
                },
                "attribute": "icon-end",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "FlipContext",
                    "resolved": "\"both\" | \"end\" | \"start\"",
                    "references": {
                        "FlipContext": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::FlipContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true
            },
            "iconStart": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the start of the component."
                },
                "attribute": "icon-start",
                "reflect": true
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, a busy indicator is displayed."
                },
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            },
            "menuFlipPlacements": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "FlipPlacement[]",
                    "resolved": "FlipPlacement[]",
                    "references": {
                        "FlipPlacement": {
                            "location": "import",
                            "path": "../../utils/floating-ui",
                            "id": "src/utils/floating-ui.ts::FlipPlacement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available."
                }
            },
            "menuPlacement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "LogicalPlacement",
                    "resolved": "\"auto\" | \"top\" | \"bottom\" | \"right\" | \"left\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading\" | \"trailing\" | \"auto-start\" | \"auto-end\" | \"leading-start\" | \"leading-end\" | \"trailing-end\" | \"trailing-start\"",
                    "references": {
                        "LogicalPlacement": {
                            "location": "import",
                            "path": "../../utils/floating-ui",
                            "id": "src/utils/floating-ui.ts::LogicalPlacement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Determines where the action menu will be positioned."
                },
                "attribute": "menu-placement",
                "reflect": true,
                "defaultValue": "defaultEndMenuPlacement"
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, expands the component and its contents."
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "status": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Status",
                    "resolved": "\"idle\" | \"invalid\" | \"valid\"",
                    "references": {
                        "Status": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Status"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "Use `icon-start` instead."
                        }],
                    "text": "Displays a status-related indicator icon."
                },
                "attribute": "status",
                "reflect": true
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "A description for the component, which displays below the heading."
                },
                "attribute": "description",
                "reflect": false
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "BlockMessages",
                    "resolved": "{ collapse: string; expand: string; loading: string; options: string; }",
                    "references": {
                        "BlockMessages": {
                            "location": "import",
                            "path": "./assets/block/t9n",
                            "id": "src/components/block/assets/block/t9n/index.d.ts::BlockMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<BlockMessages>",
                    "resolved": "{ collapse?: string; expand?: string; loading?: string; options?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "BlockMessages": {
                            "location": "import",
                            "path": "./assets/block/t9n",
                            "id": "src/components/block/assets/block/t9n/index.d.ts::BlockMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            },
            "overlayPositioning": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "OverlayPositioning",
                    "resolved": "\"absolute\" | \"fixed\"",
                    "references": {
                        "OverlayPositioning": {
                            "location": "import",
                            "path": "../../utils/floating-ui",
                            "id": "src/utils/floating-ui.ts::OverlayPositioning"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`."
                },
                "attribute": "overlay-positioning",
                "reflect": true,
                "defaultValue": "\"absolute\""
            }
        };
    }
    static get states() {
        return {
            "defaultMessages": {},
            "effectiveLocale": {},
            "hasContentStart": {},
            "hasEndActions": {}
        };
    }
    static get events() {
        return [{
                "method": "calciteBlockBeforeClose",
                "name": "calciteBlockBeforeClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is requested to be closed and before the closing transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteBlockBeforeOpen",
                "name": "calciteBlockBeforeOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteBlockClose",
                "name": "calciteBlockClose",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is closed and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteBlockOpen",
                "name": "calciteBlockOpen",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Fires when the component is open and animation is complete."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }, {
                "method": "calciteBlockToggle",
                "name": "calciteBlockToggle",
                "bubbles": true,
                "cancelable": false,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead."
                        }],
                    "text": "Fires when the component's header is clicked."
                },
                "complexType": {
                    "original": "void",
                    "resolved": "void",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component's first tabbable element.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "openHandler"
            }, {
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }];
    }
}
//# sourceMappingURL=block.js.map
