/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { Fragment, h } from "@stencil/core";
import { connectConditionalSlotComponent, disconnectConditionalSlotComponent, } from "../../utils/conditionalSlot";
import { getSlotted } from "../../utils/dom";
import { logger } from "../../utils/logger";
import { CSS, SLOTS } from "./resources";
/**
 * @deprecated Use the `calcite-shell-panel` component instead.
 * @slot - A slot for adding content to the `calcite-shell-panel`.
 * @slot action-bar - A slot for adding a `calcite-action-bar` to the `calcite-shell-panel`.
 */
export class ShellCenterRow {
    constructor() {
        this.detached = false;
        this.heightScale = "s";
        this.position = "end";
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    connectedCallback() {
        connectConditionalSlotComponent(this);
    }
    disconnectedCallback() {
        disconnectConditionalSlotComponent(this);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        logger.deprecated("component", {
            name: "shell-center-row",
            removalVersion: 4,
            suggested: "shell-panel",
        });
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    // --------------------------------------------------------------------------
    render() {
        const { el } = this;
        const contentNode = (h("div", { key: '8e0d7519d5bc01805337748d7b96d7f32f5be5fb', class: CSS.content }, h("slot", { key: 'a8c07dc2518cca396b43de1372d188643dd8174b' })));
        const actionBar = getSlotted(el, SLOTS.actionBar);
        const actionBarNode = actionBar ? (h("div", { class: CSS.actionBarContainer, key: "action-bar" }, h("slot", { name: SLOTS.actionBar }))) : null;
        const children = [actionBarNode, contentNode];
        if (actionBar?.position === "end") {
            children.reverse();
        }
        return h(Fragment, { key: 'b09007c50d4dcc62fb8b43402fa023918d82fe2c' }, children);
    }
    static get is() { return "calcite-shell-center-row"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["shell-center-row.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["shell-center-row.css"]
        };
    }
    static get properties() {
        return {
            "detached": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, the content area displays like a floating panel."
                },
                "attribute": "detached",
                "reflect": true,
                "defaultValue": "false"
            },
            "heightScale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the maximum height of the component."
                },
                "attribute": "height-scale",
                "reflect": true,
                "defaultValue": "\"s\""
            },
            "position": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"start\" | \"end\", Position>",
                    "resolved": "\"end\" | \"start\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Position": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Position"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "position",
                "reflect": true,
                "defaultValue": "\"end\""
            }
        };
    }
    static get elementRef() { return "el"; }
}
//# sourceMappingURL=shell-center-row.js.map
