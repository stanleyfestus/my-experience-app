/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.13.2
 */
import { forceUpdate, h, } from "@stencil/core";
import { findAssociatedForm, resetForm, submitForm } from "../../utils/form";
import { InteractiveContainer, updateHostInteraction, } from "../../utils/interactive";
import { connectLabel, disconnectLabel, getLabelText } from "../../utils/label";
import { componentFocusable, setComponentLoaded, setUpLoadableComponent, } from "../../utils/loadable";
import { connectLocalized, disconnectLocalized } from "../../utils/locale";
import { createObserver } from "../../utils/observers";
import { getIconScale } from "../../utils/component";
import { connectMessages, disconnectMessages, setUpMessages, updateMessages, } from "../../utils/t9n";
import { isBrowser } from "../../utils/browser";
import { toAriaBoolean } from "../../utils/dom";
import { CSS } from "./resources";
/** Passing a 'href' will render an anchor link, instead of a button. Role will be set to link, or button, depending on this. */
/** It is the consumers responsibility to add aria information, rel, target, for links, and any button attributes for form submission */
/** @slot - A slot for adding text. */
export class Button {
    constructor() {
        /** watches for changing text content */
        this.mutationObserver = createObserver("mutation", () => this.updateHasContent());
        this.resizeObserver = createObserver("resize", () => this.setTooltipText());
        // act on a requested or nearby form based on type
        this.handleClick = () => {
            const { type } = this;
            if (this.href) {
                return;
            }
            // this.type refers to type attribute, not child element type
            if (type === "submit") {
                submitForm(this);
            }
            else if (type === "reset") {
                resetForm(this);
            }
        };
        this.setTooltipText = () => {
            const { contentEl } = this;
            if (contentEl) {
                this.tooltipText =
                    contentEl.offsetWidth < contentEl.scrollWidth ? this.el.innerText || null : null;
            }
        };
        this.setChildEl = (el) => {
            this.childEl = el;
            if (el) {
                this.resizeObserver?.observe(el);
            }
        };
        this.alignment = "center";
        this.appearance = "solid";
        this.label = undefined;
        this.kind = "brand";
        this.disabled = false;
        this.form = undefined;
        this.download = false;
        this.href = undefined;
        this.iconEnd = undefined;
        this.iconFlipRtl = undefined;
        this.iconStart = undefined;
        this.loading = false;
        this.name = undefined;
        this.rel = undefined;
        this.round = false;
        this.scale = "m";
        this.splitChild = false;
        this.target = undefined;
        this.type = "button";
        this.width = "auto";
        this.messages = undefined;
        this.messageOverrides = undefined;
        this.hasContent = false;
        this.effectiveLocale = "";
        this.defaultMessages = undefined;
        this.tooltipText = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Global attributes
    //
    //--------------------------------------------------------------------------
    handleGlobalAttributesChanged() {
        forceUpdate(this);
    }
    onMessagesChange() {
        /** referred in t9n util */
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async connectedCallback() {
        connectLocalized(this);
        connectMessages(this);
        this.setupTextContentObserver();
        connectLabel(this);
        this.formEl = findAssociatedForm(this);
    }
    disconnectedCallback() {
        this.mutationObserver?.disconnect();
        disconnectLabel(this);
        disconnectLocalized(this);
        disconnectMessages(this);
        this.resizeObserver?.disconnect();
        this.formEl = null;
    }
    async componentWillLoad() {
        setUpLoadableComponent(this);
        if (isBrowser()) {
            this.updateHasContent();
            await setUpMessages(this);
        }
    }
    componentDidLoad() {
        setComponentLoaded(this);
        this.setTooltipText();
    }
    componentDidRender() {
        updateHostInteraction(this);
    }
    render() {
        const childElType = this.href ? "a" : "button";
        const Tag = childElType;
        const loaderNode = this.loading ? (h("div", { class: CSS.buttonLoader }, h("calcite-loader", { class: this.loading ? CSS.loadingIn : CSS.loadingOut, inline: true, label: this.messages.loading, scale: this.scale === "l" ? "m" : "s" }))) : null;
        const noStartEndIcons = !this.iconStart && !this.iconEnd;
        const iconStartEl = (h("calcite-icon", { key: 'f1036c0a1bf5740fe63806e3559ea66fac29b726', class: { [CSS.icon]: true, [CSS.iconStart]: true }, flipRtl: this.iconFlipRtl === "start" || this.iconFlipRtl === "both", icon: this.iconStart, scale: getIconScale(this.scale) }));
        const iconEndEl = (h("calcite-icon", { key: 'd2c22ecf9ca23426b4c4a3b42d623f35ee988a44', class: { [CSS.icon]: true, [CSS.iconEnd]: true }, flipRtl: this.iconFlipRtl === "end" || this.iconFlipRtl === "both", icon: this.iconEnd, scale: getIconScale(this.scale) }));
        const contentEl = (h("span", { key: 'd1803021f5fa106c9e296402ec0a1498ecdf36c7', class: CSS.content, ref: (el) => (this.contentEl = el) }, h("slot", { key: 'd2f729c16f9c803ffa109b68d58a22a4383dd426' })));
        return (h(InteractiveContainer, { key: '2757c795d29f812cf11def4df108837b9971dcdb', disabled: this.disabled }, h(Tag, { key: 'e67a4882c8a0c13d6b5f98bc8c5b53c10ba36e3e', "aria-busy": toAriaBoolean(this.loading), "aria-expanded": this.el.ariaExpanded ? this.el.ariaExpanded : null, "aria-label": !this.loading ? getLabelText(this) : this.messages.loading, "aria-live": "polite", class: {
                [CSS.buttonPadding]: noStartEndIcons,
                [CSS.buttonPaddingShrunk]: !noStartEndIcons,
                [CSS.contentSlotted]: this.hasContent,
                [CSS.iconStartEmpty]: !this.iconStart,
                [CSS.iconEndEmpty]: !this.iconEnd,
            }, disabled: childElType === "button" ? this.disabled : null, download: childElType === "a"
                ? this.download === true || this.download === ""
                    ? ""
                    : this.download || null
                : null, href: childElType === "a" && this.href, name: childElType === "button" && this.name, onClick: this.handleClick, ref: this.setChildEl, rel: childElType === "a" && this.rel, tabIndex: this.disabled ? -1 : null, target: childElType === "a" && this.target, title: this.tooltipText, type: childElType === "button" && this.type }, loaderNode, this.iconStart ? iconStartEl : null, this.hasContent ? contentEl : null, this.iconEnd ? iconEndEl : null)));
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Sets focus on the component. */
    async setFocus() {
        await componentFocusable(this);
        this.childEl?.focus();
    }
    effectiveLocaleChange() {
        updateMessages(this, this.effectiveLocale);
    }
    updateHasContent() {
        const slottedContent = this.el.textContent.trim().length > 0 || this.el.childNodes.length > 0;
        this.hasContent =
            this.el.childNodes.length === 1 && this.el.childNodes[0]?.nodeName === "#text"
                ? this.el.textContent?.trim().length > 0
                : slottedContent;
    }
    setupTextContentObserver() {
        this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    onLabelClick() {
        this.handleClick();
        this.setFocus();
    }
    static get is() { return "calcite-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["button.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["button.css"]
        };
    }
    static get assetsDirs() { return ["assets"]; }
    static get properties() {
        return {
            "alignment": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ButtonAlignment",
                    "resolved": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
                    "references": {
                        "ButtonAlignment": {
                            "location": "import",
                            "path": "./interfaces",
                            "id": "src/components/button/interfaces.ts::ButtonAlignment"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the alignment of the component's elements."
                },
                "attribute": "alignment",
                "reflect": true,
                "defaultValue": "\"center\""
            },
            "appearance": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\n    \"outline\" | \"outline-fill\" | \"solid\" | \"transparent\",\n    Appearance\n  >",
                    "resolved": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Appearance": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Appearance"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the appearance style of the component."
                },
                "attribute": "appearance",
                "reflect": true,
                "defaultValue": "\"solid\""
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Accessible name for the component."
                },
                "attribute": "label",
                "reflect": false
            },
            "kind": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind>",
                    "resolved": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                    "references": {
                        "Extract": {
                            "location": "global",
                            "id": "global::Extract"
                        },
                        "Kind": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Kind"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the kind of the component, which will apply to the border and background if applicable."
                },
                "attribute": "kind",
                "reflect": true,
                "defaultValue": "\"brand\""
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, interaction is prevented and the component is displayed with lower opacity."
                },
                "attribute": "disabled",
                "reflect": true,
                "defaultValue": "false"
            },
            "form": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any."
                },
                "attribute": "form",
                "reflect": true
            },
            "download": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "string | boolean",
                    "resolved": "boolean | string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download."
                },
                "attribute": "download",
                "reflect": true,
                "defaultValue": "false"
            },
            "href": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the URL of the linked resource, which can be set as an absolute or relative path."
                },
                "attribute": "href",
                "reflect": true
            },
            "iconEnd": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the end of the component."
                },
                "attribute": "icon-end",
                "reflect": true
            },
            "iconFlipRtl": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "FlipContext",
                    "resolved": "\"both\" | \"end\" | \"start\"",
                    "references": {
                        "FlipContext": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::FlipContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`)."
                },
                "attribute": "icon-flip-rtl",
                "reflect": true
            },
            "iconStart": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "IconNameOrString",
                    "resolved": "string",
                    "references": {
                        "IconNameOrString": {
                            "location": "import",
                            "path": "../icon/interfaces",
                            "id": "src/components/icon/interfaces.ts::IconNameOrString"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies an icon to display at the start of the component."
                },
                "attribute": "icon-start",
                "reflect": true
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, a busy indicator is displayed and interaction is disabled."
                },
                "attribute": "loading",
                "reflect": true,
                "defaultValue": "false"
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "Specifies the name of the component on form submission."
                },
                "attribute": "name",
                "reflect": true
            },
            "rel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "mdn",
                            "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
                        }],
                    "text": "Defines the relationship between the `href` value and the current document."
                },
                "attribute": "rel",
                "reflect": true
            },
            "round": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When `true`, adds a round style to the component."
                },
                "attribute": "round",
                "reflect": true,
                "defaultValue": "false"
            },
            "scale": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Scale",
                    "resolved": "\"l\" | \"m\" | \"s\"",
                    "references": {
                        "Scale": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Scale"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the size of the component."
                },
                "attribute": "scale",
                "reflect": true,
                "defaultValue": "\"m\""
            },
            "splitChild": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "\"primary\" | \"secondary\" | false",
                    "resolved": "\"primary\" | \"secondary\" | boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies if the component is a child of a `calcite-split-button`."
                },
                "attribute": "split-child",
                "reflect": true,
                "defaultValue": "false"
            },
            "target": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "mdn",
                            "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
                        }],
                    "text": "Specifies where to open the linked document defined in the `href` property."
                },
                "attribute": "target",
                "reflect": true
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "mdn",
                            "text": "[type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)"
                        }],
                    "text": "Specifies the default behavior of the component."
                },
                "attribute": "type",
                "reflect": true,
                "defaultValue": "\"button\""
            },
            "width": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "Width",
                    "resolved": "\"auto\" | \"full\" | \"half\"",
                    "references": {
                        "Width": {
                            "location": "import",
                            "path": "../interfaces",
                            "id": "src/components/interfaces.ts::Width"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Specifies the width of the component."
                },
                "attribute": "width",
                "reflect": true,
                "defaultValue": "\"auto\""
            },
            "messages": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ButtonMessages",
                    "resolved": "{ loading: string; }",
                    "references": {
                        "ButtonMessages": {
                            "location": "import",
                            "path": "./assets/button/t9n",
                            "id": "src/components/button/assets/button/t9n/index.d.ts::ButtonMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": undefined
                        }],
                    "text": "Made into a prop for testing purposes only"
                }
            },
            "messageOverrides": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "Partial<ButtonMessages>",
                    "resolved": "{ loading?: string; }",
                    "references": {
                        "Partial": {
                            "location": "global",
                            "id": "global::Partial"
                        },
                        "ButtonMessages": {
                            "location": "import",
                            "path": "./assets/button/t9n",
                            "id": "src/components/button/assets/button/t9n/index.d.ts::ButtonMessages"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Use this property to override individual strings used by the component."
                }
            }
        };
    }
    static get states() {
        return {
            "hasContent": {},
            "effectiveLocale": {},
            "defaultMessages": {},
            "tooltipText": {}
        };
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus on the component.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "aria-expanded",
                "methodName": "handleGlobalAttributesChanged"
            }, {
                "propName": "messageOverrides",
                "methodName": "onMessagesChange"
            }, {
                "propName": "effectiveLocale",
                "methodName": "effectiveLocaleChange"
            }];
    }
}
//# sourceMappingURL=button.js.map
