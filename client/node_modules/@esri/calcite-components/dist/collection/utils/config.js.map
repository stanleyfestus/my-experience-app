{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/utils/config.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AA2BtC,MAAM,cAAc,GAAkB,UAAU,CAAC,eAAe,CAAC,CAAC;AAElE,MAAM,CAAC,MAAM,cAAc,GAAgB,cAAc,EAAE,cAAc,IAAI,EAAE,CAAC;AAEhF,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC;AAC5D,MAAM,CAAC,MAAM,QAAQ,GAAa,cAAc,EAAE,QAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAEpG,uDAAuD;AACvD,MAAM,OAAO,GAAG,qBAAqB,CAAC;AACtC,MAAM,SAAS,GAAG,wBAAwB,CAAC;AAC3C,MAAM,QAAQ,GAAG,sBAAsB,CAAC;AAExC;;GAEG;AACH,MAAM,UAAU,YAAY;IAC1B,IAAI,cAAc,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;QAC7C,OAAO;IACT,CAAC;IAED,OAAO,CAAC,IAAI,CAAC,4BAA4B,OAAO,WAAW,SAAS,eAAe,QAAQ,GAAG,CAAC,CAAC;IAEhG,MAAM,MAAM,GAAG,cAAc,IAAI,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;IAEnE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE;QACvC,KAAK,EAAE,OAAO;QACd,QAAQ,EAAE,KAAK;KAChB,CAAC,CAAC;IAEH,UAAU,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC;AACvC,CAAC","sourcesContent":["/**\n * This module allows custom configuration for components.\n */\n\nimport { Build } from \"@stencil/core\";\nimport { FocusTrap } from \"./focusTrapComponent\";\nimport { LogLevel } from \"./logger\";\n\nexport interface CalciteConfig {\n  /**\n   * Defines the global trap stack to use for focus-trapping components.\n   *\n   * This is useful if your application uses its own instance of `focus-trap` and both need to be aware of each other.\n   *\n   * @see https://github.com/focus-trap/focus-trap#createoptions\n   */\n  focusTrapStack: FocusTrap[];\n\n  /**\n   * Defines the global log level to use when logging messages.\n   */\n  logLevel: LogLevel;\n\n  /**\n   * Contains the version of the Calcite components.\n   *\n   * @readonly\n   */\n  version?: string;\n}\n\nconst existingConfig: CalciteConfig = globalThis[\"calciteConfig\"];\n\nexport const focusTrapStack: FocusTrap[] = existingConfig?.focusTrapStack || [];\n\nconst runningInE2ETest = Build.isTesting && Build.isBrowser;\nexport const logLevel: LogLevel = existingConfig?.logLevel || (runningInE2ETest ? \"error\" : \"info\");\n\n// the following placeholders are replaced by the build\nconst version = \"__CALCITE_VERSION__\";\nconst buildDate = \"__CALCITE_BUILD_DATE__\";\nconst revision = \"__CALCITE_REVISION__\";\n\n/**\n * Stamp the version onto the global config.\n */\nexport function stampVersion(): void {\n  if (existingConfig && existingConfig.version) {\n    return;\n  }\n\n  console.info(`Using Calcite Components ${version} [Date: ${buildDate}, Revision: ${revision}]`);\n\n  const target = existingConfig || globalThis[\"calciteConfig\"] || {};\n\n  Object.defineProperty(target, \"version\", {\n    value: version,\n    writable: false,\n  });\n\n  globalThis[\"calciteConfig\"] = target;\n}\n"]}