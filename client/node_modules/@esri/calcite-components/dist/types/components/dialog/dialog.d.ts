import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { FocusTrap, FocusTrapComponent } from "../../utils/focusTrapComponent";
import { LoadableComponent } from "../../utils/loadable";
import { OpenCloseComponent } from "../../utils/openCloseComponent";
import { Kind, Scale } from "../interfaces";
import { LocalizedComponent } from "../../utils/locale";
import { T9nComponent } from "../../utils/t9n";
import { HeadingLevel } from "../functional/Heading";
import type { OverlayPositioning } from "../../utils/floating-ui";
import { DialogMessages } from "./assets/dialog/t9n";
import { DialogPlacement } from "./interfaces";
/**
 * @slot - A slot for adding content.
 * @slot content - A slot for adding custom content.
 * @slot action-bar - A slot for adding a `calcite-action-bar` to the component.
 * @slot alerts - A slot for adding `calcite-alert`s to the component.
 * @slot content-bottom - A slot for adding content below the unnamed (default) slot and - if populated - the `footer` slot.
 * @slot content-top - A slot for adding content above the unnamed (default) slot and - if populated - below the `action-bar` slot.
 * @slot header-actions-start - A slot for adding actions or content to the starting side of the component's header.
 * @slot header-actions-end - A slot for adding actions or content to the ending side of the component's header.
 * @slot header-content - A slot for adding custom content to the component's header.
 * @slot header-menu-actions - A slot for adding an overflow menu with actions inside a `calcite-dropdown`.
 * @slot fab - A slot for adding a `calcite-fab` (floating action button) to perform an action.
 * @slot footer - A slot for adding custom content to the component's footer. Should not be used with the `"footer-start"` or `"footer-end"` slots.
 * @slot footer-end - A slot for adding a trailing footer custom content. Should not be used with the `"footer"` slot.
 * @slot footer-start - A slot for adding a leading footer custom content. Should not be used with the `"footer"` slot.
 */
export declare class Dialog implements OpenCloseComponent, FocusTrapComponent, LoadableComponent, LocalizedComponent, T9nComponent {
    /** Passes a function to run before the component closes. */
    beforeClose: () => Promise<void>;
    /** A description for the component. */
    description: string;
    /**
     * When `true`, the component is draggable.
     */
    dragEnabled: boolean;
    /** When `true`, disables the component's close button. */
    closeDisabled: boolean;
    /**
     * This internal property, managed by a containing calcite-shell, is used
     * to inform the component if special configuration or styles are needed
     *
     * @internal
     */
    embedded: boolean;
    /**
     * When `true`, disables the default close on escape behavior.
     *
     * By default, an open dialog can be dismissed by pressing the Esc key.
     *
     * @see [Dialog Accessibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility)
     */
    escapeDisabled: boolean;
    /**
     * The component header text.
     */
    heading: string;
    /**
     * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
     */
    headingLevel: HeadingLevel;
    /** Specifies the kind of the component, which will style the top border. */
    kind: Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
    /**
     * When `true`, a busy indicator is displayed.
     */
    loading: boolean;
    /**
     * When `true`, the action menu items in the `header-menu-actions` slot are open.
     */
    menuOpen: boolean;
    /**
     * Made into a prop for testing purposes only
     *
     * @internal
     */
    messages: DialogMessages;
    /**
     * Use this property to override individual strings used by the component.
     */
    messageOverrides: Partial<DialogMessages>;
    onMessagesChange(): void;
    /** When `true`, displays a scrim blocking interaction underneath the component.  */
    modal: boolean;
    onModalChange(): void;
    /** When `true`, displays and positions the component. */
    open: boolean;
    /** When `true`, disables the closing of the component when clicked outside. */
    outsideCloseDisabled: boolean;
    /**
     * Determines the type of positioning to use for the overlaid content.
     *
     * Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.
     *
     * `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
     *
     */
    overlayPositioning: OverlayPositioning;
    /**
     * Specifies the placement of the dialog.
     */
    placement: DialogPlacement;
    /**
     * When `true`, the component is resizable.
     */
    resizable: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    /** Specifies the width of the component. */
    widthScale: Scale;
    componentWillLoad(): Promise<void>;
    componentDidLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): VNode;
    el: HTMLCalciteDialogElement;
    opened: boolean;
    hasFooter: boolean;
    hasContentTop: boolean;
    hasContentBottom: boolean;
    effectiveLocale: string;
    effectiveLocaleChange(): void;
    defaultMessages: DialogMessages;
    assistiveText: string | null;
    handleInteractionChange(): void;
    updateAssistiveText(): void;
    openTransitionProp: string;
    transitionEl: HTMLDivElement;
    focusTrap: FocusTrap;
    private resizePosition;
    private dragPosition;
    private interaction;
    private panelEl;
    private ignoreOpenChange;
    private mutationObserver;
    handleEscape(event: KeyboardEvent): void;
    /** Fires when the component is requested to be closed and before the closing transition begins. */
    calciteDialogBeforeClose: EventEmitter<void>;
    /** Fires when the component is closed and animation is complete. */
    calciteDialogClose: EventEmitter<void>;
    /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */
    calciteDialogBeforeOpen: EventEmitter<void>;
    /** Fires when the component is open and animation is complete. */
    calciteDialogOpen: EventEmitter<void>;
    /** Fires when the content is scrolled. */
    calciteDialogScroll: EventEmitter<void>;
    /**
     * Sets focus on the component's "close" button (the first focusable item).
     *
     * @returns {Promise<void>} - A promise that is resolved when the operation has completed.
     */
    setFocus(): Promise<void>;
    /**
     * Updates the element(s) that are used within the focus-trap of the component.
     */
    updateFocusTrapElements(): Promise<void>;
    /**
     * Scrolls the component's content to a specified set of coordinates.
     *
     * @example
     * myCalciteFlowItem.scrollContentTo({
     *   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.
     *   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element
     *   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).
     * });
     * @param options - allows specific coordinates to be defined.
     * @returns - promise that resolves once the content is scrolled to.
     */
    scrollContentTo(options?: ScrollToOptions): Promise<void>;
    onBeforeOpen(): void;
    onOpen(): void;
    onBeforeClose(): void;
    onClose(): void;
    toggleDialog(value: boolean): void;
    handleOpenedChange(value: boolean): void;
    private triggerInteractModifiers;
    private getTransitionElDOMRect;
    private handleKeyDown;
    private updateTransform;
    private updateSize;
    private cleanupInteractions;
    private setupInteractions;
    private isPixelValue;
    private getAdjustedResizePosition;
    private setTransitionEl;
    private openEnd;
    private handleInternalPanelScroll;
    private handleInternalPanelCloseClick;
    private handlePanelKeyDown;
    private openDialog;
    private handleOutsideClose;
    private closeDialog;
    private updateOverflowHiddenClass;
    private addOverflowHiddenClass;
    private removeOverflowHiddenClass;
    private handleMutationObserver;
}
