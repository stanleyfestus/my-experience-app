{"version":3,"file":"formatting.js","sourceRoot":"","sources":["../../support/formatting.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAkC5B,MAAM,UAAU,IAAI,CAAC,OAAY,EAAE,GAAG,YAAmB;IACvD,OAAO,MAAM,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,CAAC;AAC1C,CAAC;AAwBD,MAAM,UAAU,GAAG,CAAC,OAAY,EAAE,GAAG,YAAmB;IACtD,OAAO,MAAM,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import dedent from \"dedent\";\n\n/**\n * Use this tagged template to help Prettier format any HTML template literals.\n *\n * @param strings the input HTML text\n * @example\n *\n * ```ts\n * // select.e2e.ts\n * const page = await newE2EPage({\n *   html: html`\n *     <calcite-select>\n *       <calcite-option id=\"1\">uno</calcite-option>\n *       <calcite-option id=\"2\">dos</calcite-option>\n *       <calcite-option id=\"3\">tres</calcite-option>\n *     </calcite-select>\n *   `\n * });\n * ```\n *\n * ```ts\n * // select.stories.ts\n * export const simple = (): string => html`\n *   <calcite-select>\n *     <calcite-option id=\"1\">uno</calcite-option>\n *     <calcite-option id=\"2\">dos</calcite-option>\n *     <calcite-option id=\"3\">tres</calcite-option>\n *   </calcite-select>\n * `;\n * ```\n */\nexport function html(strings: string): string;\nexport function html(strings: TemplateStringsArray, ...placeholders: any[]): string;\nexport function html(strings: any, ...placeholders: any[]): string {\n  return dedent(strings, ...placeholders);\n}\n\n/**\n * Use this tagged template to help Prettier format any CSS template literals.\n *\n * **Note**: this should only be used when the input string only contains CSS. For style tags and style attributes, use the `html` tagged template literal.\n *\n * @param strings the input CSS text\n * @example\n *\n * ```ts\n * const page = await newE2EPage();\n * await page.setContent(html`...`);\n * await page.addStyleTag({\n *   content: css`\n *     .my-component {\n *        color: red;\n *      }\n * `\n * });\n * ```\n */\nexport function css(strings: string): string;\nexport function css(strings: TemplateStringsArray, ...placeholders: any[]): string;\nexport function css(strings: any, ...placeholders: any[]): string {\n  return dedent(strings, ...placeholders);\n}\n"]}