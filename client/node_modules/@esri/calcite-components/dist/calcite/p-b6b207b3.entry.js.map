{"version":3,"names":["StarIcon","full","scale","partial","h","class","undefined","icon","ratingCss","CalciteRatingStyle0","Rating","this","handleRatingPointerOver","isKeyboardInteraction","handleRatingPointerOut","hoverValue","handleHostKeyDown","handleLabelKeyDown","event","inputValue","getValueFromLabelEvent","key","numberKey","Number","emit","isNaN","value","required","getPreviousRatingValue","updateFocus","preventDefault","getNextRatingValue","max","handleInputChange","inputVal","target","handleLabelPointerOver","handleLabelPointerDown","currentTarget","focus","handleLabelClick","handleLabelFocus","setLabelEl","el","labelElements","push","guid","onMessagesChange","handleValueUpdate","newValue","calciteRatingChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","connectLabel","connectForm","componentWillLoad","setUpMessages","setUpLoadableComponent","componentWillRender","starsMap","Array","from","length","_","i","average","checked","fraction","hovered","id","selected","tabIndex","getTabIndex","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectLabel","disconnectForm","componentDidRender","updateHostInteraction","render","Host","onKeyDown","onPointerOut","onPointerOver","InteractiveContainer","disabled","messages","rating","map","star","htmlFor","onClick","onFocus","onPointerDown","ref","readOnly","name","onChange","type","style","width","stars","replace","count","showChip","toString","HiddenFormInputSlot","component","onLabelClick","setFocus","getAttribute","currentValue","componentFocusable","focusFirstTabbable"],"sources":["src/components/rating/functional/star.tsx","src/components/rating/rating.scss?tag=calcite-rating&encapsulation=shadow","src/components/rating/rating.tsx"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { StarIconProps } from \"../interfaces\";\n\nexport const StarIcon: FunctionalComponent<StarIconProps> = ({ full, scale, partial }): VNode => (\n  <calcite-icon\n    class={partial ? undefined : \"icon\"}\n    icon={full ? \"star-f\" : \"star\"}\n    scale={scale}\n  />\n);\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-rating-spacing-unit: The amount of left and right margin spacing between each rating star.\n */\n\n:host {\n  @apply relative flex items-center;\n  inline-size: fit-content;\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  @apply h-6;\n  --calcite-rating-spacing-unit: theme(\"spacing.1\");\n}\n\n:host([scale=\"m\"]) {\n  @apply h-8;\n  --calcite-rating-spacing-unit: theme(\"spacing.2\");\n}\n\n:host([scale=\"l\"]) {\n  @apply h-11;\n  --calcite-rating-spacing-unit: theme(\"spacing.3\");\n}\n\n:host([read-only]) {\n  @extend %non-interactive-host-contents;\n}\n\n.fieldset {\n  margin: 0;\n  display: flex;\n  border-width: 0;\n  padding: 0;\n  align-items: center;\n  gap: var(--calcite-rating-spacing-unit);\n}\n\n.wrapper {\n  display: inline-block;\n}\n\n.star {\n  @apply transition-default;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  color: theme(\"borderColor.color.input\");\n  &:focus {\n    @apply focus-outset;\n  }\n}\n\n.average,\n.fraction {\n  color: theme(\"colors.warning\");\n}\n\n.hovered,\n.selected {\n  color: theme(\"colors.brand\");\n}\n\n.fraction {\n  @apply transition-default;\n  position: absolute;\n  pointer-events: none;\n  inset-block-start: 0;\n  overflow: hidden;\n  inset-inline-start: 0;\n}\n\n// rating count\ncalcite-chip {\n  pointer-events: none;\n  cursor: default;\n}\n\n.number--average {\n  font-weight: bold;\n}\n\n.number--count {\n  color: var(--calcite-color-text-2);\n  font-style: italic;\n  &:not(:first-child) {\n    margin-inline-start: var(--calcite-rating-spacing-unit);\n  }\n}\n\n.visually-hidden {\n  @apply sr-only;\n}\n\n@include hidden-form-input();\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport { connectForm, disconnectForm, FormComponent, HiddenFormInputSlot } from \"../../utils/form\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Scale } from \"../interfaces\";\nimport { focusFirstTabbable } from \"../../utils/dom\";\nimport { RatingMessages } from \"./assets/rating/t9n\";\nimport { StarIcon } from \"./functional/star\";\nimport { Star } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-rating\",\n  styleUrl: \"rating.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Rating\n  implements\n    LabelableComponent,\n    FormComponent,\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies a cumulative average from previous ratings to display. */\n  @Prop({ reflect: true }) average: number;\n\n  /** Specifies the number of previous ratings to display. */\n  @Prop({ reflect: true }) count: number;\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: RatingMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<RatingMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, the component's value can be read, but cannot be modified. */\n  @Prop({ reflect: true }) readOnly = false;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`. */\n  @Prop({ reflect: true }) showChip = false;\n\n  /** The component's value. */\n  @Prop({ reflect: true, mutable: true }) value = 0;\n\n  @Watch(\"value\")\n  handleValueUpdate(newValue: number): void {\n    this.hoverValue = newValue;\n    if (this.emit) {\n      this.calciteRatingChange.emit();\n    }\n\n    this.emit = false;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component's value changes.\n   */\n  @Event({ cancelable: false }) calciteRatingChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Static\n  //\n  //--------------------------------------------------------------------------\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: RatingMessages;\n\n  @State() hoverValue: number;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectLabel(this);\n    connectForm(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n  }\n\n  componentWillRender(): void {\n    this.starsMap = Array.from({ length: this.max }, (_, i) => {\n      const value = i + 1;\n      const average = !this.hoverValue && this.average && !this.value && value <= this.average;\n      const checked = value === this.value;\n      const fraction = this.average && this.average + 1 - value;\n      const hovered = value <= this.hoverValue;\n      const id = `${this.guid}-${value}`;\n      const partial = !this.hoverValue && !this.value && !hovered && fraction > 0 && fraction < 1;\n      const selected = this.value >= value;\n      const tabIndex = this.getTabIndex(value);\n      return {\n        average,\n        checked,\n        fraction,\n        hovered,\n        id,\n        partial,\n        selected,\n        value,\n        tabIndex,\n      };\n    });\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render() {\n    return (\n      <Host\n        onKeyDown={this.handleHostKeyDown}\n        onPointerOut={this.handleRatingPointerOut}\n        onPointerOver={this.handleRatingPointerOver}\n      >\n        <InteractiveContainer disabled={this.disabled}>\n          <span class=\"wrapper\">\n            <fieldset class=\"fieldset\" disabled={this.disabled}>\n              <legend class=\"visually-hidden\">{this.messages.rating}</legend>\n              {this.starsMap.map(\n                ({\n                  average,\n                  checked,\n                  fraction,\n                  hovered,\n                  id,\n                  partial,\n                  selected,\n                  value,\n                  tabIndex,\n                }) => {\n                  return (\n                    <label\n                      class={{\n                        star: true,\n                        selected,\n                        hovered,\n                        average,\n                        partial,\n                      }}\n                      data-value={value}\n                      htmlFor={id}\n                      onClick={this.handleLabelClick}\n                      onFocus={this.handleLabelFocus}\n                      onKeyDown={this.handleLabelKeyDown}\n                      onPointerDown={this.handleLabelPointerDown}\n                      onPointerOver={this.handleLabelPointerOver}\n                      ref={this.setLabelEl}\n                      tabIndex={tabIndex}\n                    >\n                      <input\n                        checked={checked}\n                        class=\"visually-hidden\"\n                        disabled={this.disabled || this.readOnly}\n                        id={id}\n                        name={this.guid}\n                        onChange={this.handleInputChange}\n                        tabIndex={-1}\n                        type=\"radio\"\n                        value={value}\n                      />\n                      <StarIcon full={selected || average} scale={this.scale} />\n                      {partial && (\n                        <div class=\"fraction\" style={{ width: `${fraction * 100}%` }}>\n                          <StarIcon full partial scale={this.scale} />\n                        </div>\n                      )}\n                      <span class=\"visually-hidden\">\n                        {this.messages.stars.replace(\"{num}\", `${value}`)}\n                      </span>\n                    </label>\n                  );\n                },\n              )}\n\n              {(this.count || this.average) && this.showChip ? (\n                <calcite-chip scale={this.scale} value={this.count?.toString()}>\n                  {!!this.average && <span class=\"number--average\">{this.average.toString()}</span>}\n                  {!!this.count && <span class=\"number--count\">({this.count?.toString()})</span>}\n                </calcite-chip>\n              ) : null}\n            </fieldset>\n            <HiddenFormInputSlot component={this} />\n          </span>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private handleRatingPointerOver = () => {\n    this.isKeyboardInteraction = false;\n  };\n\n  private handleRatingPointerOut = () => {\n    this.isKeyboardInteraction = true;\n    this.hoverValue = null;\n  };\n\n  private handleHostKeyDown = () => {\n    this.isKeyboardInteraction = true;\n  };\n\n  private handleLabelKeyDown = (event: KeyboardEvent) => {\n    const inputValue = this.getValueFromLabelEvent(event);\n    const key = event.key;\n    const numberKey = key == \" \" ? undefined : Number(key);\n\n    this.emit = true;\n    if (isNaN(numberKey)) {\n      switch (key) {\n        case \"Enter\":\n        case \" \":\n          this.value = !this.required && this.value === inputValue ? 0 : inputValue;\n          break;\n        case \"ArrowLeft\":\n          this.value = this.getPreviousRatingValue(inputValue);\n          this.updateFocus();\n          event.preventDefault();\n          break;\n        case \"ArrowRight\":\n          this.value = this.getNextRatingValue(inputValue);\n          this.updateFocus();\n          event.preventDefault();\n          break;\n        case \"Tab\":\n          this.hoverValue = null;\n          break;\n      }\n    } else {\n      if (!this.required && numberKey >= 0 && numberKey <= this.max) {\n        this.value = numberKey;\n      } else if (this.required && numberKey > 0 && numberKey <= this.max) {\n        this.value = numberKey;\n      }\n      this.updateFocus();\n    }\n  };\n\n  private handleInputChange = (event: Event) => {\n    if (this.isKeyboardInteraction === true) {\n      const inputVal = Number(event.target[\"value\"]);\n      this.hoverValue = inputVal;\n      this.value = inputVal;\n    }\n  };\n\n  private handleLabelPointerOver = (event: PointerEvent) => {\n    this.hoverValue = this.getValueFromLabelEvent(event);\n  };\n\n  private handleLabelPointerDown = (event: PointerEvent) => {\n    const target = event.currentTarget as HTMLLabelElement;\n    const inputValue = this.getValueFromLabelEvent(event);\n    this.hoverValue = inputValue;\n    this.emit = true;\n    this.value = !this.required && this.value === inputValue ? 0 : inputValue;\n    target.focus();\n  };\n\n  private handleLabelClick = (event: Event) => {\n    //preventing pointerdown event will supress any compatability mouse events except for click event.\n    event.preventDefault();\n  };\n\n  private handleLabelFocus = (event: FocusEvent) => {\n    const inputValue = this.getValueFromLabelEvent(event);\n    this.hoverValue = inputValue;\n  };\n\n  private updateFocus(): void {\n    this.hoverValue = this.value;\n    this.labelElements[this.value - 1].focus();\n  }\n\n  private getTabIndex(value: number): number {\n    if (this.readOnly || (this.value !== value && (this.value || value !== 1))) {\n      return -1;\n    }\n    return 0;\n  }\n\n  private setLabelEl = (el: HTMLLabelElement): void => {\n    this.labelElements.push(el);\n  };\n\n  private getValueFromLabelEvent(event: FocusEvent | PointerEvent | KeyboardEvent): number {\n    const target = event.currentTarget as HTMLLabelElement;\n    return Number(target.getAttribute(\"data-value\"));\n  }\n\n  getNextRatingValue(currentValue: number): number {\n    return currentValue === 5 ? 1 : currentValue + 1;\n  }\n\n  getPreviousRatingValue(currentValue: number): number {\n    return currentValue === 1 ? 5 : currentValue - 1;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private State / Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteRatingElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: Rating[\"value\"];\n\n  private emit = false;\n\n  private guid = `calcite-ratings-${guid()}`;\n\n  private isKeyboardInteraction = true;\n\n  private labelElements: HTMLLabelElement[] = [];\n\n  private max = 5;\n\n  private starsMap: Star[];\n}\n"],"mappings":"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","ignoreList":[]}