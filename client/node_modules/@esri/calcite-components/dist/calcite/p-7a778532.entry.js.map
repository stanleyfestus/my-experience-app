{"version":3,"names":["CSS","wrapper","confirmChangesButton","cancelEditingButton","inputWrapper","cancelEditingButtonWrapper","enableEditingButton","controlsWrapper","inlineEditableCss","CalciteInlineEditableStyle0","InlineEditable","this","mutationObserver","createObserver","mutationObserverCallback","enableEditing","valuePriorToEditing","inputElement","value","editingEnabled","setFocus","calciteInternalInlineEditableEnableEditingChange","emit","disableEditing","cancelEditing","shouldEmitCancel","calciteInlineEditableEditCancel","escapeKeyHandler","async","event","defaultPrevented","key","preventDefault","shouldShowControls","shiftKey","target","cancelEditingHandler","enableEditingHandler","disabled","confirmEditingButton","confirmChangesHandler","calciteInlineEditableEditConfirm","afterConfirm","loading","error","disabledWatcher","editingEnabledWatcher","newValue","oldValue","onMessagesChange","connectedCallback","connectLabel","connectLocalized","connectMessages","observe","el","childList","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLabel","disconnectLocalized","disconnectMessages","disconnect","componentDidRender","updateHostInteraction","render","h","InteractiveContainer","class","onClick","onKeyDown","appearance","iconStart","kind","label","messages","ref","scale","style","opacity","width","type","confirmChanges","blurHandler","controls","effectiveLocaleChange","updateMessages","effectiveLocale","componentFocusable","focus","updateSlottedInput","onLabelClick","getSlotted","matches","getLabelText"],"sources":["src/components/inline-editable/resources.ts","src/components/inline-editable/inline-editable.scss?tag=calcite-inline-editable&encapsulation=shadow","src/components/inline-editable/inline-editable.tsx"],"sourcesContent":["export const CSS = {\n  wrapper: \"wrapper\",\n  confirmChangesButton: \"confirm-changes-button\",\n  cancelEditingButton: \"cancel-editing-button\",\n  inputWrapper: \"input-wrapper\",\n  cancelEditingButtonWrapper: \"cancel-editing-button-wrapper\",\n  enableEditingButton: \"enable-editing-button\",\n  controlsWrapper: \"controls-wrapper\",\n};\n",":host {\n  @apply block;\n}\n\n:host([scale=\"s\"]) {\n  .controls-wrapper {\n    @apply h-6;\n  }\n}\n\n:host([scale=\"m\"]) {\n  .controls-wrapper {\n    @apply h-8;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .controls-wrapper {\n    @apply h-11;\n  }\n}\n\n:host(:not([editing-enabled]):not([disabled])) {\n  .wrapper {\n    &:hover {\n      @apply bg-foreground-2;\n    }\n  }\n}\n\n.wrapper {\n  @apply bg-foreground-1\n    transition-default\n    box-border\n    flex\n    justify-between;\n\n  .input-wrapper {\n    @apply flex-1;\n  }\n}\n\n.controls-wrapper {\n  @apply flex;\n}\n\n@include disabled() {\n  .cancel-editing-button-wrapper {\n    @apply border-color-2;\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { getSlotted } from \"../../utils/dom\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Scale } from \"../interfaces\";\nimport { InlineEditableMessages } from \"./assets/inline-editable/t9n\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a `calcite-input`.\n */\n@Component({\n  tag: \"calcite-inline-editable\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  styleUrl: \"inline-editable.scss\",\n  assetsDirs: [\"assets\"],\n})\nexport class InlineEditable\n  implements\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Props\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  disabledWatcher(disabled: boolean): void {\n    if (this.inputElement) {\n      this.inputElement.disabled = disabled;\n    }\n  }\n\n  /**\n   * When `true`, inline editing is enabled on the component.\n   */\n  @Prop({ mutable: true, reflect: true }) editingEnabled = false;\n\n  @Watch(\"editingEnabled\")\n  editingEnabledWatcher(newValue: boolean, oldValue: boolean): void {\n    if (this.inputElement) {\n      this.inputElement.editingEnabled = newValue;\n    }\n    if (!newValue && !!oldValue) {\n      this.shouldEmitCancel = true;\n    }\n  }\n\n  /** When `true`, a busy indicator is displayed. */\n  @Prop({ mutable: true, reflect: true }) loading = false;\n\n  /** When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component. */\n  @Prop({ reflect: true }) controls = false;\n\n  /** Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale. */\n  @Prop({ reflect: true, mutable: true }) scale: Scale;\n\n  /** Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically. */\n  @Prop() afterConfirm: () => Promise<void>;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InlineEditableMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InlineEditableMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback() {\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.mutationObserverCallback();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback() {\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  render(): VNode {\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div\n          class={CSS.wrapper}\n          onClick={this.enableEditingHandler}\n          onKeyDown={this.escapeKeyHandler}\n        >\n          <div class={CSS.inputWrapper}>\n            <slot />\n          </div>\n          <div class={CSS.controlsWrapper}>\n            <calcite-button\n              appearance=\"transparent\"\n              class={CSS.enableEditingButton}\n              disabled={this.disabled}\n              iconStart=\"pencil\"\n              kind=\"neutral\"\n              label={this.messages.enableEditing}\n              onClick={this.enableEditingHandler}\n              ref={(el) => (this.enableEditingButton = el)}\n              scale={this.scale}\n              style={{\n                opacity: this.editingEnabled ? \"0\" : \"1\",\n                width: this.editingEnabled ? \"0\" : \"inherit\",\n              }}\n              type=\"button\"\n            />\n            {this.shouldShowControls && [\n              <div class={CSS.cancelEditingButtonWrapper}>\n                <calcite-button\n                  appearance=\"transparent\"\n                  class={CSS.cancelEditingButton}\n                  disabled={this.disabled}\n                  iconStart=\"x\"\n                  kind=\"neutral\"\n                  label={this.messages.cancelEditing}\n                  onClick={this.cancelEditingHandler}\n                  ref={(el) => (this.cancelEditingButton = el)}\n                  scale={this.scale}\n                  type=\"button\"\n                />\n              </div>,\n              <calcite-button\n                appearance=\"solid\"\n                class={CSS.confirmChangesButton}\n                disabled={this.disabled}\n                iconStart=\"check\"\n                kind=\"brand\"\n                label={this.messages.confirmChanges}\n                loading={this.loading}\n                onClick={this.confirmChangesHandler}\n                ref={(el) => (this.confirmEditingButton = el)}\n                scale={this.scale}\n                type=\"button\"\n              />,\n            ]}\n          </div>\n        </div>\n      </InteractiveContainer>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Emits when the component's \"cancel editing\" button is pressed.\n   */\n  @Event({ cancelable: false }) calciteInlineEditableEditCancel: EventEmitter<void>;\n\n  /**\n   * Emits when the component's \"confirm edits\" button is pressed.\n   */\n  @Event({ cancelable: false }) calciteInlineEditableEditConfirm: EventEmitter<void>;\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteInternalInlineEditableEnableEditingChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalInputBlur\")\n  blurHandler(): void {\n    if (!this.controls) {\n      this.disableEditing();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInlineEditableElement;\n\n  private inputElement: HTMLCalciteInputElement;\n\n  private valuePriorToEditing: string;\n\n  private shouldEmitCancel: boolean;\n\n  private enableEditingButton: HTMLCalciteButtonElement;\n\n  private cancelEditingButton: HTMLCalciteButtonElement;\n\n  private confirmEditingButton: HTMLCalciteButtonElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.mutationObserverCallback());\n\n  @State() defaultMessages: InlineEditableMessages;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.el?.focus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  mutationObserverCallback(): void {\n    this.updateSlottedInput();\n    this.scale = this.scale || this.inputElement?.scale;\n  }\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  updateSlottedInput(): void {\n    const inputElement: HTMLCalciteInputElement = getSlotted(this.el, {\n      matches: \"calcite-input\",\n    });\n\n    this.inputElement = inputElement;\n\n    if (!inputElement) {\n      return;\n    }\n\n    this.inputElement.disabled = this.disabled;\n    this.inputElement.label = this.inputElement.label || getLabelText(this);\n  }\n\n  private get shouldShowControls(): boolean {\n    return this.editingEnabled && this.controls;\n  }\n\n  private enableEditing = () => {\n    this.valuePriorToEditing = this.inputElement?.value;\n    this.editingEnabled = true;\n    this.inputElement?.setFocus();\n    this.calciteInternalInlineEditableEnableEditingChange.emit();\n  };\n\n  private disableEditing = () => {\n    this.editingEnabled = false;\n  };\n\n  private cancelEditing = () => {\n    if (this.inputElement) {\n      this.inputElement.value = this.valuePriorToEditing;\n    }\n    this.disableEditing();\n    this.enableEditingButton.setFocus();\n    if (!this.editingEnabled && !!this.shouldEmitCancel) {\n      this.calciteInlineEditableEditCancel.emit();\n    }\n  };\n\n  private escapeKeyHandler = async (event: KeyboardEvent) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === \"Escape\") {\n      event.preventDefault();\n      this.cancelEditing();\n    }\n\n    if (event.key === \"Tab\" && this.shouldShowControls) {\n      if (!event.shiftKey && event.target === this.inputElement) {\n        event.preventDefault();\n        this.cancelEditingButton.setFocus();\n      }\n      if (!!event.shiftKey && event.target === this.cancelEditingButton) {\n        event.preventDefault();\n        this.inputElement?.setFocus();\n      }\n    }\n  };\n\n  private cancelEditingHandler = async (event: MouseEvent) => {\n    event.preventDefault();\n    this.cancelEditing();\n  };\n\n  private enableEditingHandler = async (event: MouseEvent) => {\n    if (\n      this.disabled ||\n      event.target === this.cancelEditingButton ||\n      event.target === this.confirmEditingButton\n    ) {\n      return;\n    }\n\n    event.preventDefault();\n    if (!this.editingEnabled) {\n      this.enableEditing();\n    }\n  };\n\n  private confirmChangesHandler = async (event: MouseEvent) => {\n    event.preventDefault();\n    this.calciteInlineEditableEditConfirm.emit();\n    try {\n      if (this.afterConfirm) {\n        this.loading = true;\n        await this.afterConfirm();\n        this.disableEditing();\n        this.enableEditingButton.setFocus();\n      }\n    } catch (error) {\n      // we handle error in finally block\n    } finally {\n      this.loading = false;\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}