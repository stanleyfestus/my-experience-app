{"version":3,"names":["CSS","actionGroupEnd","container","SLOTS","expandTooltip","actionPadCss","CalciteActionPadStyle0","ActionPad","this","mutationObserver","createObserver","setGroupLayout","Array","from","el","querySelectorAll","actionMenuOpenHandler","event","target","menuOpen","composedPath","forEach","group","includes","toggleExpand","expanded","calciteActionPadToggle","emit","handleDefaultSlotChange","groups","slotChangeGetAssignedElements","filter","matches","handleTooltipSlotChange","tooltips","expandedHandler","toggleChildActionText","layoutHandler","updateGroups","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectConditionalSlotComponent","connectLocalized","connectMessages","observe","childList","subtree","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","disconnect","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","setFocus","componentFocusable","focus","layout","renderBottomActionGroup","expandDisabled","messages","position","scale","actionsEndGroupLabel","overlayPositioning","expandToggleNode","h","ExpandToggle","collapseLabel","collapseText","collapse","expandLabel","expandText","expand","toggle","tooltip","class","label","name","onSlotchange","render","Host","key","onCalciteActionMenuOpen"],"sources":["src/components/action-pad/resources.ts","src/components/action-pad/action-pad.scss?tag=calcite-action-pad&encapsulation=shadow","src/components/action-pad/action-pad.tsx"],"sourcesContent":["export const CSS = {\n  actionGroupEnd: \"action-group--end\",\n  container: \"container\",\n};\n\nexport const SLOTS = {\n  expandTooltip: \"expand-tooltip\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-pad-corner-radius: Specifies the component's border radius.\n * @prop --calcite-action-pad-expanded-max-width: When `layout` is `\"vertical\"`, specifies the component's maximum width when `expanded`.\n * @prop --calcite-action-pad-items-space: Specifies the component's space between slotted components.\n */\n\n:host {\n  @extend %component-host;\n  @apply animate-in block;\n\n  border-radius: var(--calcite-action-pad-corner-radius, 0.125rem /* 2px */);\n  background: transparent;\n}\n\n:host([expanded][layout=\"vertical\"]) .container {\n  max-inline-size: var(--calcite-action-pad-expanded-max-width, auto);\n}\n\n:host([layout=\"vertical\"]) {\n  ::slotted(calcite-action-group:not(:last-of-type)) {\n    @apply border-b;\n  }\n}\n\n.container {\n  @apply shadow-2\n  inline-flex\n  flex-col\n  overflow-y-auto;\n\n  gap: var(--calcite-action-pad-items-space, 0);\n  border-radius: calc(var(--calcite-action-pad-corner-radius, 0.125rem) * 2) /* 4px */;\n  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));\n}\n\n.action-group--bottom {\n  @apply flex-grow justify-end pb-0;\n}\n\n:host([layout=\"horizontal\"]) {\n  .container {\n    @apply flex-row;\n    .action-group--bottom {\n      @apply p-0;\n    }\n    ::slotted(calcite-action-group:not(:last-of-type)) {\n      border-inline-end-width: theme(\"borderWidth.DEFAULT\");\n    }\n  }\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { slotChangeGetAssignedElements } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ExpandToggle, toggleChildActionText } from \"../functional/ExpandToggle\";\nimport { Layout, Position, Scale } from \"../interfaces\";\nimport { createObserver } from \"../../utils/observers\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport { ActionPadMessages } from \"./assets/action-pad/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-action`s to the component.\n * @slot expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle.\n */\n@Component({\n  tag: \"calcite-action-pad\",\n  styleUrl: \"action-pad.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionPad\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Specifies the accessible label for the last `calcite-action-group`.\n   */\n  @Prop() actionsEndGroupLabel: string;\n\n  /**\n   * When `true`, the expand-toggling behavior is disabled.\n   */\n  @Prop({ reflect: true }) expandDisabled = false;\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true, mutable: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(expanded: boolean): void {\n    toggleChildActionText({ el: this.el, expanded });\n  }\n\n  /**\n   * Indicates the layout of the component.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  @Watch(\"layout\")\n  layoutHandler(): void {\n    this.updateGroups();\n  }\n\n  /**\n   * Arranges the component depending on the element's `dir` property.\n   */\n  @Prop({ reflect: true }) position: Extract<\"start\" | \"end\", Position>;\n\n  /**\n   * Specifies the size of the expand `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionPadMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionPadMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `expanded` property is toggled.\n   */\n  @Event({ cancelable: false }) calciteActionPadToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionPadElement;\n\n  @State() expandTooltip: HTMLCalciteTooltipElement;\n\n  mutationObserver = createObserver(\"mutation\", () =>\n    this.setGroupLayout(Array.from(this.el.querySelectorAll(\"calcite-action-group\"))),\n  );\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionPadMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    const { el, expanded } = this;\n    toggleChildActionText({ el, expanded });\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.el?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  actionMenuOpenHandler = (event: CustomEvent<void>): void => {\n    if ((event.target as HTMLCalciteActionGroupElement).menuOpen) {\n      const composedPath = event.composedPath();\n      Array.from(this.el.querySelectorAll(\"calcite-action-group\")).forEach((group) => {\n        if (!composedPath.includes(group)) {\n          group.menuOpen = false;\n        }\n      });\n    }\n  };\n\n  toggleExpand = (): void => {\n    this.expanded = !this.expanded;\n    this.calciteActionPadToggle.emit();\n  };\n\n  updateGroups(): void {\n    this.setGroupLayout(Array.from(this.el.querySelectorAll(\"calcite-action-group\")));\n  }\n\n  setGroupLayout(groups: HTMLCalciteActionGroupElement[]): void {\n    groups.forEach((group) => (group.layout = this.layout));\n  }\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const groups = slotChangeGetAssignedElements(event).filter(\n      (el): el is HTMLCalciteActionGroupElement => el?.matches(\"calcite-action-group\"),\n    );\n\n    this.setGroupLayout(groups);\n  };\n\n  handleTooltipSlotChange = (event: Event): void => {\n    const tooltips = slotChangeGetAssignedElements(event).filter(\n      (el): el is HTMLCalciteTooltipElement => el?.matches(\"calcite-tooltip\"),\n    );\n\n    this.expandTooltip = tooltips[0];\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderBottomActionGroup(): VNode {\n    const {\n      expanded,\n      expandDisabled,\n      messages,\n      el,\n      position,\n      toggleExpand,\n      scale,\n      layout,\n      actionsEndGroupLabel,\n      overlayPositioning,\n    } = this;\n\n    const expandToggleNode = !expandDisabled ? (\n      <ExpandToggle\n        collapseLabel={messages.collapseLabel}\n        collapseText={messages.collapse}\n        el={el}\n        expandLabel={messages.expandLabel}\n        expandText={messages.expand}\n        expanded={expanded}\n        position={position}\n        scale={scale}\n        toggle={toggleExpand}\n        tooltip={this.expandTooltip}\n      />\n    ) : null;\n\n    return expandToggleNode ? (\n      <calcite-action-group\n        class={CSS.actionGroupEnd}\n        label={actionsEndGroupLabel}\n        layout={layout}\n        overlayPositioning={overlayPositioning}\n        scale={scale}\n      >\n        <slot name={SLOTS.expandTooltip} onSlotchange={this.handleTooltipSlotChange} />\n        {expandToggleNode}\n      </calcite-action-group>\n    ) : null;\n  }\n\n  render(): VNode {\n    return (\n      <Host onCalciteActionMenuOpen={this.actionMenuOpenHandler}>\n        <div class={CSS.container}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n          {this.renderBottomActionGroup()}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}