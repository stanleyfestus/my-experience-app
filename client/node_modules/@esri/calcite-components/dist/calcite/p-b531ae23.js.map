{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_toPrimitive","Symbol","toPrimitive","i","call","TypeError","String","Number","activeFocusTraps","activateTrap","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","key","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","Array","_key","getActualTarget","event","target","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","includes","find","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","isFocusable","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","isTabbable","lastDomTabbableNode","slice","reverse","posTabIndexesFound","getTabIndex","nextTabbableNode","forward","nodeIdx","el","group","g","_getActiveElement","getActiveElement","_tryFocus","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref3","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref4","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","nextNode","navAcrossContainers","mruContainerIdx","mruTabIdx","some","n","checkKeyNav","checkTabKey","checkEscapeKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","checkDomRemoval","mutations","isFocusedNodeRemoved","mutation","removedNodes","from","mutationObserver","window","MutationObserver","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","connectFocusTrap","component","focusTrapNode","focusTrapEl","focusTrapOptions","fallbackFocus","setReturnFocus","focusElement","ownerDocument","focusTrapStack","focusTrap","activateFocusTrap","focusTrapDisabled","deactivateFocusTrap","updateFocusTrapElements"],"sources":["../../node_modules/focus-trap/dist/focus-trap.esm.js","src/utils/focusTrapComponent.ts"],"sourcesContent":["/*!\n* focus-trap 7.6.0\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable, getTabIndex } from 'tabbable';\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n    return true; // next\n  });\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var _getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return _getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var _tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === _getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      _tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        _tryFocus(nextNode);\n      } else {\n        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      _tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n  var checkTabKey = function checkTabKey(event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  var checkEscapeKey = function checkEscapeKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      _tryFocus(getInitialFocusNode());\n    }) : _tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      _tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 || onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 || onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 || onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import { createFocusTrap, FocusTrap as _FocusTrap, Options as FocusTrapOptions } from \"focus-trap\";\nimport { FocusableElement, focusElement, tabbableOptions } from \"./dom\";\nimport { focusTrapStack } from \"./config\";\n\n/**\n * Defines interface for components with a focus trap. Focusable content is required for components implementing focus trapping with this interface.\n */\nexport interface FocusTrapComponent {\n  /**\n   * The focus trap element.\n   */\n  el: HTMLElement;\n\n  /**\n   * When `true`, prevents focus trapping.\n   */\n  focusTrapDisabled?: boolean;\n\n  /**\n   * The focus trap instance.\n   */\n  focusTrap: FocusTrap;\n\n  /**\n   * Method to update the element(s) that are used within the FocusTrap component.\n   *\n   * This should be implemented for components that allow user content and/or have conditionally-rendered focusable elements within the trap.\n   */\n  updateFocusTrapElements?: () => Promise<void>;\n}\n\nexport type FocusTrap = _FocusTrap;\n\ninterface ConnectFocusTrapOptions {\n  /**\n   * This option allows the focus trap to be created on a different element that's not the host (e.g., a supporting popup component).\n   */\n  focusTrapEl?: HTMLElement;\n\n  /**\n   * This allows specifying overrides to ConnectFocusTrap options.\n   */\n  focusTrapOptions?: Omit<FocusTrapOptions, \"document\" | \"tabbableOptions\" | \"trapStack\">;\n}\n\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param options\n */\nexport function connectFocusTrap(component: FocusTrapComponent, options?: ConnectFocusTrapOptions): void {\n  const { el } = component;\n  const focusTrapNode = options?.focusTrapEl || el;\n\n  if (!focusTrapNode) {\n    return;\n  }\n\n  const focusTrapOptions: FocusTrapOptions = {\n    clickOutsideDeactivates: true,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapNode,\n    setReturnFocus: (el) => {\n      focusElement(el as FocusableElement);\n      return false;\n    },\n    ...options?.focusTrapOptions,\n\n    // the following options are not overridable\n    document: el.ownerDocument,\n    tabbableOptions,\n    trapStack: focusTrapStack,\n  };\n\n  component.focusTrap = createFocusTrap(focusTrapNode, focusTrapOptions);\n}\n\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap activate options.\n */\nexport function activateFocusTrap(\n  component: FocusTrapComponent,\n  options?: Parameters<_FocusTrap[\"activate\"]>[0],\n): void {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate(options);\n  }\n}\n\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap deactivate options.\n */\nexport function deactivateFocusTrap(\n  component: FocusTrapComponent,\n  options?: Parameters<_FocusTrap[\"deactivate\"]>[0],\n): void {\n  component.focusTrap?.deactivate(options);\n}\n\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nexport function updateFocusTrapElements(component: FocusTrapComponent): void {\n  component.focusTrap?.updateContainerElements(component.el);\n}\n"],"mappings":"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","ignoreList":[]}