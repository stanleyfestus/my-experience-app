{"version":3,"names":["CSS","handle","handleSelected","ICONS","drag","SUBSTITUTIONS","itemLabel","position","total","handleCss","CalciteHandleStyle0","Handle","this","handleKeyDown","event","disabled","key","selected","calciteHandleChange","emit","preventDefault","calciteHandleNudge","direction","handleBlur","blurUnselectDisabled","handleAriaTextChange","message","getAriaText","calciteInternalAssistiveTextChange","onMessagesChange","connectedCallback","connectMessages","connectLocalized","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectMessages","disconnectLocalized","effectiveLocaleChange","updateMessages","effectiveLocale","setFocus","componentFocusable","handleButton","focus","getTooltip","label","messages","dragHandleUntitled","dragHandle","replace","type","setPosition","setSize","text","dragHandleChange","dragHandleIdle","dragHandleActive","dragHandleCommit","replacePosition","toString","replaceLabel","render","h","InteractiveContainer","toAriaBoolean","class","onBlur","onKeyDown","ref","el","role","tabIndex","title","icon","scale"],"sources":["src/components/handle/resources.ts","src/components/handle/handle.scss?tag=calcite-handle&encapsulation=shadow","src/components/handle/handle.tsx"],"sourcesContent":["export const CSS = {\n  handle: \"handle\",\n  handleSelected: \"handle--selected\",\n};\n\nexport const ICONS = {\n  drag: \"drag\",\n} as const;\n\nexport const SUBSTITUTIONS = {\n  itemLabel: \"{itemLabel}\",\n  position: \"{position}\",\n  total: \"{total}\",\n};\n","/**\n* CSS Custom Properties  \n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-handle-background-color: Specifies the component's background color.\n* @prop --calcite-handle-background-color-hover: Specifies the component's background color on hover.\n* @prop --calcite-handle-background-color-selected: Specifies the component's background color when selected.\n* @prop --calcite-handle-icon-color: Specifies the component's icon color.\n* @prop --calcite-handle-icon-color-hover: Specifies the component's icon color on hover.\n* @prop --calcite-handle-icon-color-selected: Specifies the component's icon color when selected.\n*/\n\n:host {\n  @apply flex;\n}\n\n.handle {\n  @apply focus-base\n    flex\n    items-center\n    justify-center\n    self-stretch\n    border-none;\n\n  color: var(--calcite-handle-icon-color, var(--calcite-color-border-input));\n  background-color: var(--calcite-handle-background-color, transparent);\n  padding-block: theme(\"spacing.3\");\n  padding-inline: theme(\"spacing.1\");\n  line-height: 0;\n\n  calcite-icon {\n    color: inherit;\n  }\n}\n\n:host(:not([disabled])) .handle {\n  @apply cursor-move;\n  &:hover {\n    color: var(--calcite-handle-icon-color-hover, var(--calcite-color-text-1));\n    background-color: var(--calcite-handle-background-color-hover, var(--calcite-color-foreground-2));\n  }\n  &:focus {\n    @apply focus-inset;\n\n    color: var(--calcite-handle-icon-color-hover, var(--calcite-color-text-1));\n  }\n  &--selected {\n    color: var(--calcite-handle-icon-color-selected, var(--calcite-color-text-1));\n    background-color: var(--calcite-handle-background-color-selected, var(--calcite-color-foreground-3));\n  }\n}\n\n@include disabled();\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { HandleMessages } from \"./assets/handle/t9n\";\nimport { HandleChange, HandleNudge } from \"./interfaces\";\nimport { CSS, ICONS, SUBSTITUTIONS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-handle\",\n  styleUrl: \"handle.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Handle implements LoadableComponent, T9nComponent, InteractiveComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({ mutable: true, reflect: true }) selected = false;\n\n  @Watch(\"messages\")\n  @Watch(\"label\")\n  @Watch(\"selected\")\n  @Watch(\"setPosition\")\n  @Watch(\"setSize\")\n  handleAriaTextChange(): void {\n    const message = this.getAriaText(\"live\");\n\n    if (message) {\n      this.calciteInternalAssistiveTextChange.emit({\n        message,\n      });\n    }\n  }\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * Value for the button title attribute.\n   */\n  @Prop({ reflect: true }) dragHandle: string;\n\n  /**\n   * Made into a prop for testing purposes only.\n   *\n   * @internal\n   * @readonly\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: HandleMessages;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() setPosition: number;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() setSize: number;\n\n  /**\n   *\n   *\n   * @internal\n   */\n  @Prop() label: string;\n\n  /**\n   * When `true`, disables unselecting the component when blurred.\n   *\n   * @internal\n   */\n  @Prop() blurUnselectDisabled = false;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<HandleMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectMessages(this);\n    connectLocalized(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectMessages(this);\n    disconnectLocalized(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteHandleElement;\n\n  handleButton: HTMLElement;\n\n  @State() effectiveLocale: string;\n\n  @State() defaultMessages: HandleMessages;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires whenever the component is selected or unselected.\n   *\n   */\n  @Event({ cancelable: false }) calciteHandleChange: EventEmitter<void>;\n\n  /**\n   * Fires when the handle is selected and the up or down arrow key is pressed.\n   */\n  @Event({ cancelable: false }) calciteHandleNudge: EventEmitter<HandleNudge>;\n\n  /**\n   * Fires when the assistive text has changed.\n   * @internal\n   */\n  @Event({ cancelable: false }) calciteInternalAssistiveTextChange: EventEmitter<HandleChange>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.handleButton?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private getTooltip(): string {\n    const { label, messages } = this;\n\n    if (!messages) {\n      return \"\";\n    }\n\n    if (!label) {\n      return messages.dragHandleUntitled;\n    }\n\n    return messages.dragHandle.replace(SUBSTITUTIONS.itemLabel, label);\n  }\n\n  getAriaText(type: \"label\" | \"live\"): string {\n    const { setPosition, setSize, label, messages, selected } = this;\n\n    if (!messages || !label || typeof setSize !== \"number\" || typeof setPosition !== \"number\") {\n      return null;\n    }\n\n    const text =\n      type === \"label\"\n        ? selected\n          ? messages.dragHandleChange\n          : messages.dragHandleIdle\n        : selected\n          ? messages.dragHandleActive\n          : messages.dragHandleCommit;\n\n    const replacePosition = text.replace(SUBSTITUTIONS.position, setPosition.toString());\n    const replaceLabel = replacePosition.replace(SUBSTITUTIONS.itemLabel, label);\n    return replaceLabel.replace(SUBSTITUTIONS.total, setSize.toString());\n  }\n\n  handleKeyDown = (event: KeyboardEvent): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.key) {\n      case \" \":\n        this.selected = !this.selected;\n        this.calciteHandleChange.emit();\n        event.preventDefault();\n        break;\n      case \"ArrowUp\":\n        if (!this.selected) {\n          return;\n        }\n        event.preventDefault();\n        this.calciteHandleNudge.emit({ direction: \"up\" });\n        break;\n      case \"ArrowDown\":\n        if (!this.selected) {\n          return;\n        }\n        event.preventDefault();\n        this.calciteHandleNudge.emit({ direction: \"down\" });\n        break;\n    }\n  };\n\n  handleBlur = (): void => {\n    if (this.blurUnselectDisabled || this.disabled) {\n      return;\n    }\n\n    if (this.selected) {\n      this.selected = false;\n      this.calciteHandleChange.emit();\n    }\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <span\n          // Needs to be a span because of https://github.com/SortableJS/Sortable/issues/1486\n          aria-checked={this.disabled ? null : toAriaBoolean(this.selected)}\n          aria-disabled={this.disabled ? toAriaBoolean(this.disabled) : null}\n          aria-label={this.disabled ? null : this.getAriaText(\"label\")}\n          class={{ [CSS.handle]: true, [CSS.handleSelected]: !this.disabled && this.selected }}\n          onBlur={this.handleBlur}\n          onKeyDown={this.handleKeyDown}\n          ref={(el): void => {\n            this.handleButton = el;\n          }}\n          // role of radio is being applied to allow space key to select in screen readers\n          role=\"radio\"\n          tabIndex={this.disabled ? null : 0}\n          title={this.getTooltip()}\n        >\n          <calcite-icon icon={ICONS.drag} scale=\"s\" />\n        </span>\n      </InteractiveContainer>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}