{"version":3,"names":["CSS","offset","hourToMinutes","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","minusSign","hyphen","replace","toOffsetValue","timeZoneName","referenceDateInMs","getTimeZoneShortOffset","Number","getUserTimeZoneOffset","localDate","Date","getTimezoneOffset","getUserTimeZoneName","dateFormatter","Intl","DateTimeFormat","resolvedOptions","timeZone","async","getNormalizer","mode","normalize","import","createTimeZoneItems","locale","messages","referenceDate","standardTime","groupByName","groups","map","label","toUserFriendlyName","value","metadata","filterValue","filter","group","sort","effectiveLocale","getTime","groupByRegion","getCountry","global","globalLabel","Promise","all","region","tzs","timeZoneA","timeZoneB","labeledTimeZoneA","getTimeZoneLabel","labeledTimeZoneB","gmtTimeZoneString","startsWith","offsetStringA","substring","length","offsetStringB","offsetA","parseInt","offsetB","localeCompare","getMessageOrKeyFallback","items","decimalOffset","countryCode","country","undefined","groupA","groupB","groupByOffset","DateEngine","dateEngine","groupDateRange","startDate","toISOString","listFormatter","ListFormat","style","type","offsetTimeZoneNameBlockList","forEach","indexOffsets","removedSoFar","tz","index","includes","labelTzIdx","groupRepTz","tzLabels","createTimeZoneOffsetLabel","format","getCity","getSelectedRegionTimeZoneLabel","city","template","timeZoneRegionLabel","key","split","pop","offsetLabel","groupLabel","timeZoneLabel","now","dateTimeFormat","getDateTimeFormat","parts","formatToParts","find","isGroup","item","flattenTimeZoneItems","timeZoneItems","flatMap","findTimeZoneItemByProp","prop","valueToMatch","inputTimeZoneCss","CalciteInputTimeZoneStyle0","InputTimeZone","this","setComboboxRef","el","comboboxEl","onComboboxBeforeClose","event","stopPropagation","overrideSelectedLabelForRegion","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","combobox","target","selectedItem","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","getAttribute","selectedValue","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItems","updateTimeZoneSelection","openChanged","handleValueChange","oldValue","normalizeValue","clearable","findTimeZoneItem","timeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","onLabelClick","textLabel","fallbackValue","offsetStyle","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","normalizer","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","regionPlaceholder","placeholderIcon","readOnly","ref","scale","selectionMode","status","validationIcon","validationMessage","renderItems","HiddenFormInputSlot","component","renderRegionItems","description","class","slot"],"sources":["src/components/input-time-zone/resources.ts","src/components/input-time-zone/utils.ts","src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","src/components/input-time-zone/input-time-zone.tsx"],"sourcesContent":["export const CSS = {\n  offset: \"offset\",\n};\n","import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"âˆ’\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZone, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\nexport async function getNormalizer(mode: TimeZoneMode): Promise<(timeZone: TimeZone) => TimeZone> {\n  if (mode === \"offset\") {\n    return (timeZone: TimeZone) => timeZone;\n  }\n\n  const { normalize } = await import(\"timezone-groups/dist/utils/time-zones.mjs\");\n  return normalize;\n}\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n  if (mode === \"name\") {\n    const { groupByName } = await import(\"timezone-groups/dist/groupByName/index.mjs\");\n    const groups = await groupByName();\n\n    return groups\n      .map<TimeZoneItem<string>>(({ label: timeZone }) => {\n        const label = toUserFriendlyName(timeZone);\n        const value = timeZone;\n\n        return {\n          label,\n          value,\n          metadata: {\n            filterValue: timeZone,\n          },\n        };\n      })\n      .filter((group) => !!group)\n      .sort();\n  }\n\n  const effectiveLocale =\n    standardTime === \"user\"\n      ? locale\n      : // we use locales that will always yield a short offset that matches `standardTime`\n        standardTime === \"utc\"\n        ? \"fr\"\n        : \"en-GB\";\n  const referenceDateInMs: number = referenceDate.getTime();\n\n  if (mode === \"region\") {\n    const [{ groupByRegion }, { getCountry, global: globalLabel }] = await Promise.all([\n      import(\"timezone-groups/dist/groupByRegion/index.mjs\"),\n      import(\"timezone-groups/dist/utils/region.mjs\"),\n    ]);\n    const groups = await groupByRegion();\n\n    return groups\n      .map<TimeZoneItemGroup>(({ label: region, tzs }) => {\n        tzs.sort((timeZoneA, timeZoneB) => {\n          const labeledTimeZoneA = getTimeZoneLabel(timeZoneA, messages);\n          const labeledTimeZoneB = getTimeZoneLabel(timeZoneB, messages);\n          const gmtTimeZoneString = \"Etc/GMT\";\n\n          if (timeZoneA.startsWith(gmtTimeZoneString) && timeZoneB.startsWith(gmtTimeZoneString)) {\n            // we use the IANA timezone for simpler and consistent sorting across locales\n            const offsetStringA = timeZoneA.substring(gmtTimeZoneString.length);\n            const offsetStringB = timeZoneB.substring(gmtTimeZoneString.length);\n\n            const offsetA = offsetStringA === \"\" ? 0 : parseInt(offsetStringA);\n            const offsetB = offsetStringB === \"\" ? 0 : parseInt(offsetStringB);\n\n            return offsetB - offsetA;\n          }\n\n          return labeledTimeZoneA.localeCompare(labeledTimeZoneB);\n        });\n\n        return {\n          label: getMessageOrKeyFallback(messages, region),\n          items: tzs.map((timeZone) => {\n            const decimalOffset = timeZoneOffsetToDecimal(\n              getTimeZoneShortOffset(timeZone, effectiveLocale, referenceDateInMs),\n            );\n            const label = getTimeZoneLabel(timeZone, messages);\n            const filterValue =\n              region === globalLabel\n                ? // we rely on the label for search since GMT items have their signs inverted (see https://en.wikipedia.org/wiki/Tz_database#Area)\n                  // in addition to the label we also add \"Global\" and \"Etc\" to allow searching for these items\n                  `${getTimeZoneLabel(globalLabel, messages)} Etc`\n                : toUserFriendlyName(timeZone);\n\n            const countryCode = getCountry(timeZone);\n            const country = getMessageOrKeyFallback(messages, countryCode);\n\n            return {\n              label,\n              value: timeZone,\n              metadata: {\n                country: country === label ? undefined : country,\n                filterValue,\n                offset: decimalOffset,\n              },\n            };\n          }),\n        };\n      })\n      .sort((groupA, groupB) =>\n        groupA.label === globalLabel ? -1 : groupB.label === globalLabel ? 1 : groupA.label.localeCompare(groupB.label),\n      );\n  }\n\n  const [{ groupByOffset }, { DateEngine }] = await Promise.all([\n    import(\"timezone-groups/dist/groupByOffset/index.mjs\"),\n    import(\"timezone-groups/dist/groupByOffset/strategy/native/index.mjs\"),\n  ]);\n\n  const groups = await groupByOffset({\n    dateEngine: new DateEngine(),\n    groupDateRange: 1,\n    startDate: new Date(referenceDateInMs).toISOString(),\n  });\n\n  const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n  const offsetTimeZoneNameBlockList = [\"Factory\", \"Etc/UTC\"];\n\n  // we remove blocked entries from tzs and adjust label indices accordingly\n  groups.forEach((group) => {\n    const indexOffsets: number[] = [];\n    let removedSoFar = 0;\n\n    group.tzs.forEach((tz, index) => {\n      if (offsetTimeZoneNameBlockList.includes(tz)) {\n        removedSoFar++;\n      }\n      indexOffsets[index] = removedSoFar;\n    });\n\n    group.tzs = group.tzs.filter((tz) => !offsetTimeZoneNameBlockList.includes(tz));\n\n    group.labelTzIdx = group.labelTzIdx\n      .map((index) => index - indexOffsets[index])\n      .filter((index) => index >= 0 && index < group.tzs.length);\n  });\n\n  return groups\n    .map<TimeZoneItem<number>>(({ labelTzIdx, tzs }) => {\n      const groupRepTz = tzs[0];\n      const decimalOffset = timeZoneOffsetToDecimal(\n        getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n      );\n      const value = toOffsetValue(groupRepTz, referenceDateInMs);\n      const tzLabels = labelTzIdx.map((index: number) => getTimeZoneLabel(tzs[index], messages));\n      const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n      return {\n        label,\n        value,\n        metadata: {\n          filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n        },\n      };\n    })\n    .filter((group) => !!group)\n    .sort((groupA, groupB) => groupA.value - groupB.value);\n}\n\nfunction getTimeZoneLabel(timeZone: string, messages: InputTimeZoneMessages): string {\n  return messages[timeZone] || getCity(timeZone);\n}\n\nexport function getSelectedRegionTimeZoneLabel(city: string, country: string, messages: InputTimeZoneMessages): string {\n  const template = messages.timeZoneRegionLabel;\n  return template.replace(\"{city}\", city).replace(\"{country}\", getMessageOrKeyFallback(messages, country));\n}\n\nexport function getMessageOrKeyFallback(messages: InputTimeZoneMessages, key: string): string {\n  return messages[key] || key;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function getCity(timeZone: string): string {\n  return timeZone.split(\"/\").pop();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZone,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nfunction isGroup(item: TimeZoneItem | TimeZoneItemGroup): item is TimeZoneItemGroup {\n  return (item as TimeZoneItemGroup).items !== undefined;\n}\n\nfunction flattenTimeZoneItems(timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[]): TimeZoneItem[] {\n  return isGroup(timeZoneItems[0]) ? timeZoneItems.flatMap((item) => item.items) : timeZoneItems;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : flattenTimeZoneItems(timeZoneItems).find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n.offset {\n  white-space: nowrap;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getNormalizer,\n  getSelectedRegionTimeZoneLabel,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    if (!this.timeZoneItems) {\n      return;\n    }\n\n    this.updateTimeZoneItems();\n    this.updateTimeZoneSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openChanged(): void {\n    // we set the property instead of the attribute to ensure open/close events are emitted properly\n    this.comboboxEl.open = this.open;\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value) {\n      if (this.clearable) {\n        this.value = value;\n        this.selectedTimeZoneItem = null;\n        return;\n      }\n\n      this.value = oldValue;\n      this.selectedTimeZoneItem = this.findTimeZoneItem(oldValue);\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  /**\n   * Helps override the selected item's label for region mode outside of item rendering logic to avoid flickering text change\n   *\n   * @param open\n   * @private\n   */\n  private overrideSelectedLabelForRegion(open: boolean): void {\n    if (this.mode !== \"region\" || !this.selectedTimeZoneItem) {\n      return;\n    }\n\n    const { label, metadata } = this.selectedTimeZoneItem;\n\n    this.comboboxEl.selectedItems[0].textLabel =\n      !metadata.country || open\n        ? label\n        : getSelectedRegionTimeZoneLabel(label, metadata.country, this.messages);\n  }\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(false);\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(true);\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.getAttribute(\"data-label\"));\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItems(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n  }\n\n  private async updateTimeZoneSelection(): Promise<void> {\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    value = value === null ? \"\" : value;\n\n    return value ? this.normalizer(value) : value;\n  }\n\n  private normalizer: (timeZone: TimeZone) => TimeZone;\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    const [, normalizer] = await Promise.all([setUpMessages(this), getNormalizer(this.mode)]);\n\n    this.normalizer = normalizer;\n    await this.updateTimeZoneItems();\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.openChanged();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n    this.overrideSelectedLabelForRegion(this.open);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\"\n                ? this.messages.namePlaceholder\n                : this.mode === \"offset\"\n                  ? this.messages.offsetPlaceholder\n                  : this.messages.regionPlaceholder\n            }\n            placeholderIcon=\"search\"\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.renderItems()}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  private renderItems(): VNode[] {\n    if (this.mode === \"region\") {\n      return this.renderRegionItems();\n    }\n\n    return this.timeZoneItems.map((group) => {\n      const selected = this.selectedTimeZoneItem === group;\n      const { label, metadata, value } = group;\n\n      return (\n        <calcite-combobox-item\n          data-label={label}\n          key={label}\n          metadata={metadata}\n          selected={selected}\n          textLabel={label}\n          value={value}\n        />\n      );\n    });\n  }\n\n  private renderRegionItems(): VNode[] {\n    return (this.timeZoneItems as TimeZoneItemGroup[]).flatMap(({ label, items }) => (\n      <calcite-combobox-item-group key={label} label={label}>\n        {items.map((item) => {\n          const selected = this.selectedTimeZoneItem === item;\n          const { label, metadata, value } = item;\n\n          return (\n            <calcite-combobox-item\n              data-label={label}\n              description={metadata.country}\n              key={label}\n              metadata={metadata}\n              selected={selected}\n              textLabel={label}\n              value={value}\n            >\n              <span class={CSS.offset} slot=\"content-end\">\n                {metadata.offset}\n              </span>\n            </calcite-combobox-item>\n          );\n        })}\n      </calcite-combobox-item-group>\n    ));\n  }\n}\n"],"mappings":";;;;;0gBAAO,MAAMA,EAAM,CACjBC,OAAQ,UCGV,MAAMC,EAAgB,GAEtB,SAASC,EAAwBC,GAC/B,MAAMC,EAAY,IAClB,MAAMC,EAAS,IAEf,OACEF,EACGG,QAAQ,MAAO,OACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,OAGfA,QAAQF,EAAWC,EAE1B,CAEA,SAASE,EAAcC,EAAwBC,GAE7C,MAAMT,EAASU,EAAuBF,EAAc,QAASC,GAAmBH,QAAQ,MAAO,IAE/F,GAAIN,IAAW,GAAI,CACjB,OAAO,C,CAGT,OAAOW,OAAOT,EAAwBF,IAAWC,CACnD,C,SAEgBW,IACd,MAAMC,EAAY,IAAIC,KACtB,OAAOD,EAAUE,qBAAuB,CAC1C,C,SAEgBC,IACd,MAAMC,EAAgB,IAAIC,KAAKC,eAC/B,OAAOF,EAAcG,kBAAkBC,QACzC,CAEOC,eAAeC,EAAcC,GAClC,GAAIA,IAAS,SAAU,CACrB,OAAQH,GAAuBA,C,CAGjC,MAAMI,UAAEA,SAAoBC,OAAO,mBACnC,OAAOD,CACT,CAEOH,eAAeK,EACpBC,EACAC,EACAL,EACAM,EACAC,GAEA,GAAIP,IAAS,OAAQ,CACnB,MAAMQ,YAAEA,SAAsBN,OAAO,mBACrC,MAAMO,QAAeD,IAErB,OAAOC,EACJC,KAA0B,EAAGC,MAAOd,MACnC,MAAMc,EAAQC,EAAmBf,GACjC,MAAMgB,EAAQhB,EAEd,MAAO,CACLc,QACAE,QACAC,SAAU,CACRC,YAAalB,GAEhB,IAEFmB,QAAQC,KAAYA,IACpBC,M,CAGL,MAAMC,EACJZ,IAAiB,OACbH,EAEAG,IAAiB,MACf,KACA,QACR,MAAMtB,EAA4BqB,EAAcc,UAEhD,GAAIpB,IAAS,SAAU,CACrB,OAAOqB,cAAEA,IAAiBC,WAAEA,EAAYC,OAAQC,UAAuBC,QAAQC,IAAI,CACjFxB,OAAO,mBACPA,OAAO,qBAET,MAAMO,QAAeY,IAErB,OAAOZ,EACJC,KAAuB,EAAGC,MAAOgB,EAAQC,UACxCA,EAAIV,MAAK,CAACW,EAAWC,KACnB,MAAMC,EAAmBC,EAAiBH,EAAWxB,GACrD,MAAM4B,EAAmBD,EAAiBF,EAAWzB,GACrD,MAAM6B,EAAoB,UAE1B,GAAIL,EAAUM,WAAWD,IAAsBJ,EAAUK,WAAWD,GAAoB,CAEtF,MAAME,EAAgBP,EAAUQ,UAAUH,EAAkBI,QAC5D,MAAMC,EAAgBT,EAAUO,UAAUH,EAAkBI,QAE5D,MAAME,EAAUJ,IAAkB,GAAK,EAAIK,SAASL,GACpD,MAAMM,EAAUH,IAAkB,GAAK,EAAIE,SAASF,GAEpD,OAAOG,EAAUF,C,CAGnB,OAAOT,EAAiBY,cAAcV,EAAiB,IAGzD,MAAO,CACLtB,MAAOiC,EAAwBvC,EAAUsB,GACzCkB,MAAOjB,EAAIlB,KAAKb,IACd,MAAMiD,EAAgBpE,EACpBQ,EAAuBW,EAAUsB,EAAiBlC,IAEpD,MAAM0B,EAAQqB,EAAiBnC,EAAUQ,GACzC,MAAMU,EACJY,IAAWH,EAGP,GAAGQ,EAAiBR,EAAanB,SACjCO,EAAmBf,GAEzB,MAAMkD,EAAczB,EAAWzB,GAC/B,MAAMmD,EAAUJ,EAAwBvC,EAAU0C,GAElD,MAAO,CACLpC,QACAE,MAAOhB,EACPiB,SAAU,CACRkC,QAASA,IAAYrC,EAAQsC,UAAYD,EACzCjC,cACAvC,OAAQsE,GAEX,IAEJ,IAEF5B,MAAK,CAACgC,EAAQC,IACbD,EAAOvC,QAAUa,GAAe,EAAI2B,EAAOxC,QAAUa,EAAc,EAAI0B,EAAOvC,MAAMgC,cAAcQ,EAAOxC,Q,CAI/G,OAAOyC,cAAEA,IAAiBC,WAAEA,UAAsB5B,QAAQC,IAAI,CAC5DxB,OAAO,mBACPA,OAAO,qBAGT,MAAMO,QAAe2C,EAAc,CACjCE,WAAY,IAAID,EAChBE,eAAgB,EAChBC,UAAW,IAAIlE,KAAKL,GAAmBwE,gBAGzC,MAAMC,EAAgB,IAAIhE,KAAKiE,WAAWvD,EAAQ,CAAEwD,MAAO,OAAQC,KAAM,gBACzE,MAAMC,EAA8B,CAAC,UAAW,WAGhDrD,EAAOsD,SAAS9C,IACd,MAAM+C,EAAyB,GAC/B,IAAIC,EAAe,EAEnBhD,EAAMW,IAAImC,SAAQ,CAACG,EAAIC,KACrB,GAAIL,EAA4BM,SAASF,GAAK,CAC5CD,G,CAEFD,EAAaG,GAASF,CAAY,IAGpChD,EAAMW,IAAMX,EAAMW,IAAIZ,QAAQkD,IAAQJ,EAA4BM,SAASF,KAE3EjD,EAAMoD,WAAapD,EAAMoD,WACtB3D,KAAKyD,GAAUA,EAAQH,EAAaG,KACpCnD,QAAQmD,GAAUA,GAAS,GAAKA,EAAQlD,EAAMW,IAAIU,QAAO,IAG9D,OAAO7B,EACJC,KAA0B,EAAG2D,aAAYzC,UACxC,MAAM0C,EAAa1C,EAAI,GACvB,MAAMkB,EAAgBpE,EACpBQ,EAAuBoF,EAAYnD,EAAiBlC,IAEtD,MAAM4B,EAAQ9B,EAAcuF,EAAYrF,GACxC,MAAMsF,EAAWF,EAAW3D,KAAKyD,GAAkBnC,EAAiBJ,EAAIuC,GAAQ9D,KAChF,MAAMM,EAAQ6D,EAA0BnE,EAAUyC,EAAeY,EAAce,OAAOF,IAEtF,MAAO,CACL5D,QACAE,QACAC,SAAU,CACRC,YAAaa,EAAIlB,KAAKwD,GAAOtD,EAAmBsD,MAEnD,IAEFlD,QAAQC,KAAYA,IACpBC,MAAK,CAACgC,EAAQC,IAAWD,EAAOrC,MAAQsC,EAAOtC,OACpD,CAEA,SAASmB,EAAiBnC,EAAkBQ,GAC1C,OAAOA,EAASR,IAAa6E,EAAQ7E,EACvC,C,SAEgB8E,EAA+BC,EAAc5B,EAAiB3C,GAC5E,MAAMwE,EAAWxE,EAASyE,oBAC1B,OAAOD,EAAS/F,QAAQ,SAAU8F,GAAM9F,QAAQ,YAAa8D,EAAwBvC,EAAU2C,GACjG,C,SAEgBJ,EAAwBvC,EAAiC0E,GACvE,OAAO1E,EAAS0E,IAAQA,CAC1B,C,SAOgBL,EAAQ7E,GACtB,OAAOA,EAASmF,MAAM,KAAKC,KAC7B,C,SAOgBrE,EAAmB5B,GACjC,OAAOA,EAAaF,QAAQ,KAAM,IACpC,CAEA,SAAS0F,EAA0BnE,EAAiC6E,EAAqBC,GACvF,OAAO9E,EAAS+E,cAActG,QAAQ,WAAYoG,GAAapG,QAAQ,WAAYqG,EACrF,CAEA,SAASjG,EACPW,EACAO,EACAnB,EAA4BK,KAAK+F,OAEjC,MAAMC,EAAiBC,EAAkBnF,EAAQ,CAAEP,WAAUb,aAAc,gBAC3E,MAAMwG,EAAQF,EAAeG,cAAcxG,GAC3C,OAAOuG,EAAME,MAAK,EAAG7B,UAAWA,IAAS,iBAAgBhD,KAC3D,CAEA,SAAS8E,EAAQC,GACf,OAAQA,EAA2B/C,QAAUI,SAC/C,CAEA,SAAS4C,EAAqBC,GAC5B,OAAOH,EAAQG,EAAc,IAAMA,EAAcC,SAASH,GAASA,EAAK/C,QAASiD,CACnF,C,SAEgBE,EACdF,EACAG,EACAC,GAEA,OAAOA,GAAgB,KACnB,KACAL,EAAqBC,GAAeJ,MACjCE,GAECA,EAAKK,IAASC,GAExB,CC9QA,MAAMC,EAAmB,4rBACzB,MAAAC,EAAeD,E,MCoEFE,EAAa,M,wYAiShBC,KAAAC,eAAkBC,IACxBF,KAAKG,WAAaD,CAAE,EAsBdF,KAAAI,sBAAyBC,IAC/BA,EAAMC,kBACNN,KAAKO,+BAA+B,OACpCP,KAAKQ,gCAAgCC,MAAM,EAGrCT,KAAAU,qBAAwBL,IAC9BA,EAAMC,kBACNN,KAAKO,+BAA+B,MACpCP,KAAKW,+BAA+BF,MAAM,EAGpCT,KAAAY,iBAAoBP,IAC1BA,EAAMC,kBACN,MAAMO,EAAWR,EAAMS,OACvB,MAAMC,EAAeF,EAASG,cAAc,GAE5C,IAAKD,EAAc,CACjBf,KAAKzF,MAAQ,KACbyF,KAAKiB,qBAAuB,KAC5BjB,KAAKkB,2BAA2BT,OAChC,M,CAGF,MAAMU,EAAWnB,KAAKoB,wBAAwBL,EAAaM,aAAa,eACxE,MAAMC,EAAgB,GAAGH,EAAS5G,QAElC,GAAIyF,KAAKzF,QAAU+G,GAAiBH,EAAS9G,QAAU2F,KAAKiB,qBAAqB5G,MAAO,CACtF,M,CAGF2F,KAAKzF,MAAQ+G,EACbtB,KAAKiB,qBAAuBE,EAC5BnB,KAAKkB,2BAA2BT,MAAM,EAGhCT,KAAAuB,gBAAmBlB,IACzBA,EAAMC,kBACNN,KAAKwB,KAAO,MACZxB,KAAKyB,0BAA0BhB,MAAM,EAG/BT,KAAA0B,eAAkBrB,IACxBL,KAAKwB,KAAO,KACZnB,EAAMC,kBACNN,KAAK2B,yBAAyBlB,MAAM,E,eAjVD,M,cAKD,M,kCAUA,E,kEA8BU,S,iBAyBM,O,6EAeM,CACxDmB,MAAO,MACPC,SAAU,MACVC,YAAa,MACbC,gBAAiB,MACjBC,cAAe,MACfC,eAAgB,MAChBC,aAAc,MACdC,QAAS,MACTC,SAAU,MACVC,aAAc,MACdC,aAAc,O,8BAW+B,M,wBAgBmB,W,2CAgB9B,M,WAGI,I,YAGE,O,mCAwCN,M,oDA2DQ,E,CApN5C,gBAAAC,G,CAkBA,6BAAAC,GACE,IAAKxC,KAAKR,cAAe,CACvB,M,CAGFQ,KAAKyC,sBACLzC,KAAK0C,yB,CAsDP,WAAAC,GAEE3C,KAAKG,WAAWqB,KAAOxB,KAAKwB,I,CA6C9B,iBAAAoB,CAAkBrI,EAAesI,GAC/BtI,EAAQyF,KAAK8C,eAAevI,GAE5B,IAAKA,EAAO,CACV,GAAIyF,KAAK+C,UAAW,CAClB/C,KAAKzF,MAAQA,EACbyF,KAAKiB,qBAAuB,KAC5B,M,CAGFjB,KAAKzF,MAAQsI,EACb7C,KAAKiB,qBAAuBjB,KAAKgD,iBAAiBH,GAClD,M,CAGF,MAAMI,EAAejD,KAAKgD,iBAAiBzI,GAE3C,IAAK0I,EAAc,CACjBjD,KAAKzF,MAAQsI,EACb,M,CAGF7C,KAAKiB,qBAAuBgC,C,CAe9B,cAAMC,SACEC,EAAmBnD,YACnBA,KAAKG,WAAW+C,U,CAmDxB,sBAAAE,GACEC,EAAerD,KAAMA,KAAKnF,gB,CAiB5B,YAAAyI,GACEtD,KAAKkD,U,CAaC,8BAAA3C,CAA+BiB,GACrC,GAAIxB,KAAKtG,OAAS,WAAasG,KAAKiB,qBAAsB,CACxD,M,CAGF,MAAM5G,MAAEA,EAAKG,SAAEA,GAAawF,KAAKiB,qBAEjCjB,KAAKG,WAAWa,cAAc,GAAGuC,WAC9B/I,EAASkC,SAAW8E,EACjBnH,EACAgE,EAA+BhE,EAAOG,EAASkC,QAASsD,KAAKjG,S,CAmD7D,gBAAAiJ,CAAiBzI,GACvB,OAAOmF,EAAuBM,KAAKR,cAAe,QAASjF,E,CAGrD,uBAAA6G,CAAwB/G,GAC9B,OAAOqF,EAAuBM,KAAKR,cAAe,QAASnF,E,CAGrD,yBAAMoI,GACZzC,KAAKR,oBAAsBQ,KAAKnG,qB,CAG1B,6BAAM6I,GACZ,GAAI1C,KAAKzF,QAAU,IAAMyF,KAAK+C,UAAW,CACvC/C,KAAKiB,qBAAuB,KAC5B,M,CAGF,MAAMuC,EAAgBxD,KAAKtG,OAAS,SAAWZ,IAA0BI,IACzE,MAAM0G,EAAeI,KAAKzF,OAASiJ,EAEnCxD,KAAKiB,qBACHjB,KAAKgD,iBAAiBpD,IAAiBI,KAAKgD,iBAAiBQ,E,CAGzD,yBAAM3J,GACZ,IAAKmG,KAAKnF,kBAAoBmF,KAAKjG,SAAU,CAC3C,MAAO,E,CAGT,OAAOF,EACLmG,KAAKnF,gBACLmF,KAAKjG,SACLiG,KAAKtG,KACLsG,KAAKhG,yBAAyBhB,KAC1BgH,KAAKhG,cACL,IAAIhB,KAAKgH,KAAKhG,eAAiBhB,KAAK+F,OACxCiB,KAAKyD,Y,CAUT,iBAAAC,GACEC,EAAY3D,MACZ4D,EAAa5D,MACb6D,EAAiB7D,MACjB8D,EAAgB9D,K,CAGlB,oBAAA+D,GACEC,EAAehE,MACfiE,EAAgBjE,MAChBkE,EAAoBlE,MACpBmE,EAAmBnE,K,CAGb,cAAA8C,CAAevI,GACrBA,EAAQA,IAAU,KAAO,GAAKA,EAE9B,OAAOA,EAAQyF,KAAKoE,WAAW7J,GAASA,C,CAK1C,uBAAM8J,GACJC,EAAuBtE,MACvB,MAAM,CAAGoE,SAAoBjJ,QAAQC,IAAI,CAACmJ,EAAcvE,MAAOvG,EAAcuG,KAAKtG,QAElFsG,KAAKoE,WAAaA,QACZpE,KAAKyC,sBACXzC,KAAKzF,MAAQyF,KAAK8C,eAAe9C,KAAKzF,aAEhCyF,KAAK0C,0BAEX,MAAMpB,EAAgBtB,KAAKiB,qBAAuB,GAAGjB,KAAKiB,qBAAqB1G,QAAU,KACzFiK,EAA4BxE,KAAMsB,GAClCtB,KAAKzF,MAAQ+G,C,CAGf,gBAAAmD,GACEC,EAAmB1E,MACnBA,KAAK2C,a,CAGP,kBAAAgC,GACEC,EAAsB5E,MACtBA,KAAKO,+BAA+BP,KAAKwB,K,CAG3C,MAAAqD,GACE,OACEC,EAACC,EAAI,CAAAtG,IAAA,4CACHqG,EAACE,EAAoB,CAAAvG,IAAA,2CAACwG,SAAUjF,KAAKiF,UACnCH,EAAA,oBAAArG,IAAA,2CACEyG,eAAgBlF,KAAK+C,UACrBkC,SAAUjF,KAAKiF,SACf5K,MAAO2F,KAAKjG,SAASoL,eACrBC,KAAMpF,KAAKnF,gBACXwK,SAAUrF,KAAKqF,SACfC,6BAA8BtF,KAAKI,sBACnCmF,4BAA6BvF,KAAKU,qBAClC8E,wBAAyBxF,KAAKY,iBAC9B6E,uBAAwBzF,KAAKuB,gBAC7BmE,sBAAuB1F,KAAK0B,eAC5BiE,mBAAoB3F,KAAK2F,mBACzBC,YACE5F,KAAKtG,OAAS,OACVsG,KAAKjG,SAAS8L,gBACd7F,KAAKtG,OAAS,SACZsG,KAAKjG,SAAS+L,kBACd9F,KAAKjG,SAASgM,kBAEtBC,gBAAgB,SAChBC,SAAUjG,KAAKiG,SACfC,IAAKlG,KAAKC,eACVkG,MAAOnG,KAAKmG,MACZC,cAAepG,KAAK+C,UAAY,SAAW,iBAC3CsD,OAAQrG,KAAKqG,OAAM,kBACFrG,KAAKsG,eAAc,qBAChBtG,KAAKuG,mBAExBvG,KAAKwG,eAER1B,EAAC2B,EAAmB,CAAAhI,IAAA,2CAACiI,UAAW1G,Q,CAMhC,WAAAwG,GACN,GAAIxG,KAAKtG,OAAS,SAAU,CAC1B,OAAOsG,KAAK2G,mB,CAGd,OAAO3G,KAAKR,cAAcpF,KAAKO,IAC7B,MAAMwG,EAAWnB,KAAKiB,uBAAyBtG,EAC/C,MAAMN,MAAEA,EAAKG,SAAEA,EAAQD,MAAEA,GAAUI,EAEnC,OACEmK,EAAA,sCACczK,EACZoE,IAAKpE,EACLG,SAAUA,EACV2G,SAAUA,EACVoC,UAAWlJ,EACXE,MAAOA,GACP,G,CAKA,iBAAAoM,GACN,OAAQ3G,KAAKR,cAAsCC,SAAQ,EAAGpF,QAAOkC,WACnEuI,EAAA,+BAA6BrG,IAAKpE,EAAOA,MAAOA,GAC7CkC,EAAMnC,KAAKkF,IACV,MAAM6B,EAAWnB,KAAKiB,uBAAyB3B,EAC/C,MAAMjF,MAAEA,EAAKG,SAAEA,EAAQD,MAAEA,GAAU+E,EAEnC,OACEwF,EAAA,sCACczK,EACZuM,YAAapM,EAASkC,QACtB+B,IAAKpE,EACLG,SAAUA,EACV2G,SAAUA,EACVoC,UAAWlJ,EACXE,MAAOA,GAEPuK,EAAA,QAAM+B,MAAO5O,EAAIC,OAAQ4O,KAAK,eAC3BtM,EAAStC,QAEU,M","ignoreList":[]}