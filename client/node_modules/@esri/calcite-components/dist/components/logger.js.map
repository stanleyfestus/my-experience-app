{"file":"logger.js","mappings":";;;;;;;AAuBA;;;AAGO,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAU,CAAC;AAEpD,MAAM,SAAS,GAAG;IAChB,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;IACR,GAAG,EAAE,EAAE;CACC,CAAC;AAEX,SAAS,OAAO,CAAC,KAAe;IAC9B,OAAO,SAAS,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAED,SAAS,gBAAgB,CAAC,KAAe,EAAE,GAAG,IAAW;IACvD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO;KACR;IAED,MAAM,aAAa,GAAG,WAAW,CAAC;IAClC,MAAM,UAAU,GAAG,yEAAyE,CAAC;IAE7F,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC;AAChE,CAAC;AAED,IAAI,aAA8B,CAAC;MAEtB,MAAM,GAAG;IACpB,KAAK,EAAE,CAAC,OAAgB,KAAK,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC;IAC/D,IAAI,EAAE,CAAC,OAAgB,KAAK,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC;IAC7D,IAAI,EAAE,CAAC,OAAgB,KAAK,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC;IAC7D,KAAK,EAAE,CAAC,OAAgB,KAAK,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC;IAC/D,KAAK,EAAE,CAAC,OAAgB,KAAK,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC;IAE/D,UAAU;EACD;AAUX,SAAS,UAAU,CACjB,OAA0B,EAC1B,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAgD;IAE5F,MAAM,GAAG,GAAG,GAAG,OAAO,IAAI,OAAO,KAAK,WAAW,GAAG,EAAE,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;IAE5E,IAAI,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC/B,OAAO;KACR;IAED,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAE5B,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAElD,IAAI,gBAAgB,IAAI,CAAC,aAAa,EAAE;QACtC,aAAa,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;KACnF;IAED,MAAM,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,yCAAyC,cAAc,KAAK,QAAQ,GAAG,kBAAkB,GAAG,IAAI,cAAc,EAAE,IAAI,SAAS,GAAG,QAAQ,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,UAAU,KAAK,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,SAAS,GAAG,WAAW,GAAG,EAAE,EAAE,CAAC;IAE3S,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACpC;;;;","names":[],"sources":["src/utils/logger.ts"],"sourcesContent":["import type { JSX } from \"../components\";\nimport { logLevel } from \"./config\";\n\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"trace\" | \"off\";\n\ntype Message = string;\ntype MajorVersion = number;\n\ntype DeprecatedContext = \"component\" | \"property\" | \"method\" | \"event\" | \"slot\";\n\ntype DeprecatedParams = {\n  name: string;\n  suggested?: string | string[];\n  component?: string;\n  removalVersion: MajorVersion | \"future\";\n};\n\ntype SimpleComponentName<T> = T extends `calcite-${infer Name}` ? Name : T;\n\ntype ComponentDeprecatedParams = Omit<DeprecatedParams, \"name\"> & {\n  name: SimpleComponentName<keyof JSX.IntrinsicElements>;\n};\n\n/**\n * Exported for testing purposes only\n */\nexport const loggedDeprecations = new Set<string>();\n\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10,\n} as const;\n\nfunction willLog(level: LogLevel): boolean {\n  return logLevels[level] >= logLevels[logLevel];\n}\n\nfunction forwardToConsole(level: LogLevel, ...data: any[]): void {\n  if (!willLog(level)) {\n    return;\n  }\n\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\n\nlet listFormatter: Intl.ListFormat;\n\nexport const logger = {\n  debug: (message: Message) => forwardToConsole(\"debug\", message),\n  info: (message: Message) => forwardToConsole(\"info\", message),\n  warn: (message: Message) => forwardToConsole(\"warn\", message),\n  error: (message: Message) => forwardToConsole(\"error\", message),\n  trace: (message: Message) => forwardToConsole(\"trace\", message),\n\n  deprecated,\n} as const;\n\n/**\n * Logs a deprecation warning to the console.\n *\n * @param context the context in which the deprecation is occurring\n * @param params the deprecation details\n */\nfunction deprecated(context: Exclude<DeprecatedContext, \"component\">, params: DeprecatedParams): void;\nfunction deprecated(context: Extract<DeprecatedContext, \"component\">, params: ComponentDeprecatedParams): void;\nfunction deprecated(\n  context: DeprecatedContext,\n  { component, name, suggested, removalVersion }: DeprecatedParams | ComponentDeprecatedParams,\n): void {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n\n  loggedDeprecations.add(key);\n\n  const multiSuggestions = Array.isArray(suggested);\n\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n\n  forwardToConsole(\"warn\", message);\n}\n"],"version":3}