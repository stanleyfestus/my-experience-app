import type { ISimpleLineSymbol, ISimpleFillSymbol, ISimpleMarkerSymbol, ITextSymbol, Color, IExtent, IEnvelope, IPoint, IPolygon, IPolygonWithCurves, IPolyline, IDrawingInfo, IStatisticDefinition, IFeatureLayer } from "./rest-js-types";
import type { WebChartTypes, WebChartLegendPositions, WebChartStackedKinds, WebChartDataTransformations, WebChartProbabilityPlotKinds, WebChartTimeIntervalUnits, WebChartTimeAggregationTypes, WebChartNullPolicyTypes, WebChartLabelBehavior, GaugeChartSubTypes, SizePolicyScaleTypes, WebChartRadarChartAxisLabelsOrientation, WebChartOrderSeriesBy, WebChartDirectionalDataOrder, WebChartPredefinedLabelsDataOrder } from "./chart-object-literals";
import type { RESTUnits } from "./rest-js-object-literals";
/**
 * Version of the current specification.
 */
export declare const WebChartCurrentVersion: "17.2.0";
/**
 * Stores information regarding a numeric conversion
 */
export interface ValueConversion {
    /**
     * A numeric value multiplying the value to convert
     */
    factor?: number;
    /**
     * A numeric offset to apply to the value to convert
     */
    offset?: number;
}
/**
 * Describes the properties of an axis scrollbar
 */
export interface WebChartAxisScrollBar {
    /**
     * Scrollbar visibility
     * @default false
     */
    visible?: boolean;
    /**
     * Scrollbar width in pixels
     */
    width?: number;
    /**
     * Scrollbar color
     */
    color?: Color;
    /**
     * Grip size in pixels
     */
    gripSize?: number;
    /**
     * Margin between the scrollbar and the series container in pixels
     */
    margin?: number;
}
/**
 * Represents a text symbol.
 */
export type WebChartTextSymbol = Omit<ITextSymbol, "xoffset" | "yoffset"> & {
    /**
     * Horizontal offset. Can be a number for a fixed value in pixels, or a string as "25%" for a value
     * relative to the label's container width.
     */
    xoffset?: number | string;
    /**
     * Horizontal offset. Can be a number for a fixed value in pixels, or a string as "25%" for a value
     * relative to the label's container height.
     */
    yoffset?: number | string;
};
/**
 * Stores info on how some text is rendered on the chart and whether it is visible or not.
 */
export interface WebChartText {
    /**
     * Represents a unique string identifier for the ChartText object. For ChartText object, it is "chartText".
     */
    type: typeof WebChartTypes.Text;
    /**
     * Determines the visibility of the content.
     * @default true
     */
    visible?: boolean;
    /**
     * Contains the styling info and text content. Details on **esriTS** are [here](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm).
     */
    content: WebChartTextSymbol;
}
/**
 *  JSON representation of the cursor's crosshair for a chart.
 */
export interface WebChartCursorCrosshair {
    /**
     * Represents a unique string identifier for the chart cursor's crosshair.
     */
    type: typeof WebChartTypes.CursorCrosshair;
    /**
     * Contains styling info on how the chart cursor's crosshair should be rendered.
     */
    style?: ISimpleLineSymbol;
    /**
     * Indicates whether the vertical crosshair line should be displayed
     * @default false
     */
    verticalLineVisible?: boolean;
    /**
     * Indicates whether the horizontal crosshair line should be displayed
     * @default false
     */
    horizontalLineVisible?: boolean;
}
/**
 * Chart Building Blocks Interfaces
 */
/**
 * JSON representation of the Chart's legend box
 */
export interface WebChartLegend {
    /**
     * Represents a unique string identifier for the ChartLegend object. For ChartLegend object, it is "chartLegend".
     */
    type: typeof WebChartTypes.Legend;
    /**
     * Determines the visibility of the content.
     * @default true
     */
    visible?: boolean;
    /**
     * Contains styling info on how the title of the legend box should be rendered
     */
    title?: WebChartText;
    /**
     * Contains styling info on how legend body (excluding the **title**) should be rendered.
     * Will use default styling if not provided.
     */
    body?: WebChartTextSymbol;
    /**
     * Positions the legends at `"right"`, `"left"`, `"top"`, or `"bottom"` of the chart.
     * @default WebChartLegendPositions.Right
     */
    position?: WebChartLegendPositions;
    /**
     * Legend's maximum height. If not set the legend will occupy the same height as the series container or pie chart.
     * @default null
     */
    maxHeight?: number | null;
    /**
     * Allows the legend markers to be displayed as circles. If the property is to:
     * - `false` or `undefined` they will be rounded rectangles
     * - `true` they will be circles
     * @default false
     */
    roundMarkers?: boolean;
}
/**
 * Specific legend for the Pie chart
 */
export interface WebChartPieChartLegend extends WebChartLegend {
    /**
     * Indicates whether the numeric value associated to a slice is to be displayed in the legend.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`
     * @default false
     */
    displayNumericValue?: boolean;
    /**
     * Indicates whether the percentage to a slice is to be displayed in the legend.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`
     * @default false
     */
    displayPercentage?: boolean;
    /**
     * Maximum width in pixels of the label displaying the slice name. If the label is larger than the maximum width, it will automatically wrap.
     * @default 200
     */
    labelMaxWidth?: number;
    /**
     * Maximum width in pixels of the label displaying the slice name. If the label is larger than the maximum width, it will automatically wrap.
     * @default 200
     */
    valueLabelMaxWidth?: number;
}
/**
 * JSON representation of the chart's overlays like trendline scatter plot, and median in histogram
 */
export interface WebChartOverlay {
    /**
     * Represents a unique string identifier for the ChartOverlay object. For ChartOverlay object, it is "chartOverlay".
     */
    type: typeof WebChartTypes.Overlay;
    /**
     * Determines whether the overlay is created under the hood. It may or may not be visible.
     * @default false
     */
    created?: boolean;
    /**
     * Determines the visibility of the content.
     * @default true
     */
    visible?: boolean;
    /**
     * Contains styling info on how the overlay should be rendered
     * If not provided a default style is applied.
     */
    symbol?: ISimpleLineSymbol;
}
/**
 * Defines how the numerical(value) axis data should be formatted.
 */
export interface NumberFormatOptions {
    /**
     * Represents a unique string identifier for the NumberFormatOptions object. For NumberFormatOptions object, it is "number". It can help us to differentiate numerical (value) axis from other types of axes viz., date-time axis and category axis.
     */
    type: typeof WebChartTypes.NumberAxisFormat;
    /**
     * Represents the JS native [Intl.NumberFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat), which is based on [CLDR](http://cldr.unicode.org/translation/numbers-currency/number-patterns) specifications.
     */
    intlOptions: Intl.NumberFormatOptions;
}
/**
 * Interface used by the axis `valueFormat` property to describe how to format specific date and time units when displayed on the axis.
 * For instance:
 * "year": { year: "numeric" }
 * "month": { month: "numeric" }
 * "day": { day: "2-digit" }
 * "hour": { day: "numeric" }
 * "minute": { minute: "numeric" }
 * "second": { second: "numeric" }
 * Reference: https://tc39.es/ecma402/#sec-datetimeformat-abstracts
 */
export interface WebChartDateTimeUnitFormatOptions {
    year?: Intl.DateTimeFormatOptions;
    month?: Intl.DateTimeFormatOptions;
    day?: Intl.DateTimeFormatOptions;
    hour?: Intl.DateTimeFormatOptions;
    minute?: Intl.DateTimeFormatOptions;
    second?: Intl.DateTimeFormatOptions;
}
/**
 * Defines how the DateTime axis data should be formatted.
 */
export interface DateTimeFormatOptions {
    /**
     * Represents a unique string identifier for the NumberFormatOptions object. For NumberFormatOptions object, it is "date". It can help us to differentiate date-time axis from other types of axes viz., numeric (value) axis and category axis.
     */
    type: typeof WebChartTypes.DateAxisFormat;
    /**
     * Represent the JS native [Intl.DateTimeFormatOptions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormatt), which is based on [CLDR](http://cldr.unicode.org/translation/date-time-1/date-time-patterns) specifications.
     */
    intlOptions: Intl.DateTimeFormatOptions;
    /**
     * Represents how to format specific date and time units when displayed on the axis, independently from the `intlOptions`.
     */
    formatPerDateTimeUnit?: WebChartDateTimeUnitFormatOptions;
}
/**
 * Defines how the category axis data (Categories) should be formatted.
 */
export interface CategoryFormatOptions {
    /**
     * Represents a unique string identifier for the CategoryFormatOptions object. For CategoryFormatOptions object, it is "category". It can help us to differentiate category axis from other types of axes, viz., date-time axis and numeric (value) axis.
     */
    type: typeof WebChartTypes.CategoryAxisFormat;
    /**
     * Represents a positive integer which represents the limit on the number of characters to be displayed for all the category strings. The truncated string are appended with `...`. If property is not present or `null`, no truncation is done.
     * @minimum 1
     * @multipleOf 1
     */
    characterLimit?: number | null;
}
/**
 * JSON representation of the chart's guide object. Can be used to represent both line and fill guides.
 */
export interface WebChartGuide {
    /**
     * Represents a unique string identifier for the Guide object. For Guide class, it is "chartGuide".
     */
    type: typeof WebChartTypes.Guide;
    /**
     * Determines the value where the guide should begin.
     */
    start: Date | number | string | null;
    /**
     * Determines the value where the guide should end. If it is not specified, we get a line guide, otherwise we get a fill/rectangular guide.
     */
    end?: Date | number | string | null;
    /**
     * Determines how the guide should be rendered. Line guide requires [esriSLS](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm) format, and fill guide requires [esriSFS](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm) format.
     */
    style: ISimpleFillSymbol | ISimpleLineSymbol;
    /**
     * A unique string identifier which is used to refer to a particular guide. It is displayed in the Chart Authoring UI to differentiate between different guides.
     */
    name: string;
    /**
     * Defines a text label for the given guide. It is displayed on the chart next to the concerned guide and is styled using **esriTS** format.
     */
    label?: WebChartTextSymbol;
    /**
     * Determines the visibility of the content.
     * @default true
     */
    visible?: boolean;
    /**
     * Determines whether the guide should be rendered on top of (overlapping) the series or under the series.
     * @default false
     */
    above?: boolean;
    /**
     * Indicates whether to apply the hovered element's color to the guide's tooltip background (false) or its outline (true).
     * @default false
     */
    tooltipReverseColor?: boolean;
}
/**
 * JSON representation of the chart's axis object
 */
export interface WebChartAxis {
    /**
     * Represents a unique string identifier for the WebChartAxis object. For ChartAxis object, it is "chartAxis".
     */
    type: typeof WebChartTypes.Axis;
    /**
     * Determines the visibility of the content.
     * @default true
     */
    visible?: boolean;
    /**
     * Specifies whether the axis has a logarithmic scale or not.
     * @default false
     */
    isLogarithmic?: boolean;
    /**
     * Contains styling info on how the title of the axis should be rendered
     */
    title?: WebChartText;
    /**
     * Specifies how numerical/categorical/date-time values should be formatted.
     */
    valueFormat: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions;
    /**
     * The minimum value which the axis should represent, when it is not defined or null, then the minimum value for the corresponding axis is automatically calculated.
     */
    minimum?: number | null;
    /**
     * The maximum value which the axis should represent, when it is not defined or null, then the maximum value for the corresponding axis is automatically calculated.
     */
    maximum?: number | null;
    /**
     * Dictates how the grid lines associated with a particular axis should be rendered.
     */
    grid?: ISimpleLineSymbol;
    /**
     * Represent an array of guides that should be rendered onto the axis.
     */
    guides?: WebChartGuide[];
    /**
     * Contains styling info on how the axis line should be rendered.
     * If not provided a default style is applied.
     */
    lineSymbol?: ISimpleLineSymbol;
    /**
     * Contains styling info on how the axis labels should be rendered.
     */
    labels: WebChartText;
    /**
     * Represents the axis scrollbar style and visibility
     */
    scrollbar?: WebChartAxisScrollBar;
    /**
     * Represents an option to hide/un-hide the zero line on value axis
     * @default false
     */
    displayZeroLine?: boolean;
    /**
     * Represents an option to show `integer-only` values for a value axis
     * @default false
     */
    integerOnlyValues?: boolean;
    /**
     * Specifies whether cursor tooltip should be displayed.
     * @default false
     */
    displayCursorTooltip?: boolean;
    /**
     * Allows setting a buffer to a **value axis** to provide some space around the series.
     * @default false
     */
    buffer?: boolean;
}
/**
 * JSON representation of the gauge axis ticks. Currently only used by WebChartGaugeAxis.
 */
export interface WebChartGaugeAxisTick {
    /**
     * Represents a unique string identifier for the GaugeAxisTick object. For WebChartGaugeAxisTick object, it is "gaugeAxisTick".
     */
    type: typeof WebChartTypes.GaugeAxisTick;
    /**
     * Determines the visibility of the axis ticks.
     * @default true
     */
    visible?: boolean;
}
/**
 * JSON representation of a gauge needle.
 */
export interface WebChartNeedle {
    /**
     * Represents a unique string identifier for the ChartNeedle object. For WebChartNeedle object, it is "gaugeNeedle".
     */
    type: typeof WebChartTypes.GaugeNeedle;
    /**
     * Hides or shows the needle.
     * @default true
     */
    visible?: boolean;
    /**
     * Contains styling info on how the needle should be rendered
     */
    symbol?: ISimpleFillSymbol;
    /**
     * Represents the needle's thickness at the bottom (chart's center), in px
     * @minimum 1
     * @default 10
     */
    startWidth?: number | null;
    /**
     * Represents the needle's thickness at the top, in px
     * @minimum 1
     * @default 1
     */
    endWidth?: number | null;
    /**
     * Represents the size of the hole in the middle of the chart. Can be visualized when guides are displayed.
     * @minimum 0
     * @maximum 100
     * @default 25
     */
    innerRadius?: number | null;
    /**
     * Hides or shows the needle's pin (centroid circle)
     * @default false
     */
    displayPin?: boolean;
}
/**
 * JSON representation of the gauge chart's axis object. Inherits from the WebChartAxis properties.
 */
export interface WebChartGaugeAxis extends WebChartAxis {
    /**
     * Specifies how the axis' inner label needs to be displayed
     */
    innerLabel?: WebChartText;
    /**
     * Specifies how the axis' needle needs to be displayed
     */
    needle?: WebChartNeedle;
    /**
     * Specifies how the axis' ticks need to be displayed
     */
    ticks?: WebChartGaugeAxisTick;
    /**
     * If a label has a value being a multiple of that property, it will be displayed. Otherwise it will be hidden.
     *
     * If the property is `undefined` or 0, the chart will be displayed with 6 axis labels distributed evenly along
     * the axis min and max.
     *
     * If the property has a value that results in more than a set limit of axis labels (25 as defined in `ChartDefaults.gauge.maximumNumberOfLabelIntervals`)
     * this property value will be ignored and the chart will be displayed with only axis min/max with 4 ticks in between.
     * @default undefined
     * @min 0
     */
    labelsIncrement?: number;
    /**
     * Specifies if only the first and last labels need to be displayed. If set to `true` all the other labels
     * will be hidden.
     * Their visibility still depends on the axis labels visibility (WebChartAxis.labels.visible).
     * @default false
     */
    onlyShowFirstAndLastLabels?: boolean;
    /**
     * Defines how to convert the axis minimum
     */
    minimumValueConversion?: ValueConversion;
    /**
     * Defines how to convert the axis maximum
     */
    maximumValueConversion?: ValueConversion;
    /**
     * If used with a gauge by feature:
     * - `minimumFromField` is expected to be a field name. The value from that field for the given feature is mapped to the axis minimum value
     * If used with a statistic gauge:
     * - If `minimumFromField` is set to a field name (string), the minimum from that field is mapped to the axis minimum value
     * - If it is set to an `IStatisticDefinition` the statistic (min, max, avg...) from the given field is mapped to the axis minimum value
     * When `minimumFromField` is not provided or when it leads to an invalid value, the `minimum` value from the axis config, if provided, or
     * the default value of 0, in that order, will be used.
     */
    minimumFromField?: IStatisticDefinition | string;
    /**
     * If used with a gauge by feature:
     * - `maximumFromField` is expected to be a field name. The value from that field for the given feature is mapped to the axis maximum value
     * If used with a statistic gauge:
     * - If `maximumFromField` is set to a field name (string), the maximum from that field is mapped to the axis maximum value
     * - If it is set to an `IStatisticDefinition` the statistic (min, max, avg...) from the given field is mapped to the axis maximum value
     * When `maximumFromField` is not provided or when it leads to an invalid value, the `maximum` value from the axis config, if provided, or
     * the default value of 0, in that order, will be used.
     */
    maximumFromField?: IStatisticDefinition | string;
}
/**
 * JSON representation of the radar chart's axis object.
 */
export interface WebChartRadarChartAxis extends WebChartAxis {
    /**
     * Defines the labels orientation
     * @default WebChartRadarChartAxisLabelsOrientation.Circular
     */
    labelsOrientation?: WebChartRadarChartAxisLabelsOrientation;
}
/**
 * Chart query object inspired by [JSAPI Query](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html) class.
 */
export interface WebChartQuery {
    /**
     * Attribute fields to include in the FeatureSet. Will have an effect on chart with no aggregation.
     */
    outFields?: string[];
    /**
     * Acts as a filter on the base data for attribute-based filtering, expect for bar/line charts for which is is used to handle the split-by field values.
     */
    where?: string;
    /**
     * An array of fields which determine how the base data is grouped. Only one **groupBy** Field is supported, but ArcGIS JSAPI [supports multiple groupBy fields](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#groupByFieldsForStatistics). While splitting by multiple group-by fields is possible, it is not being done because of the number of series it will give rise to (equal to the length of the Cartesian product set) possibly making the visualization hard to interpret.
     * @maxItems 1
     */
    groupByFieldsForStatistics?: string[];
    /**
     * Represents an array of statistics definitions which dictate how a particular field should be aggregated. Refer to [JSAPI Statistics Definition class](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-StatisticDefinition.html) for more info.
     */
    outStatistics?: IStatisticDefinition[];
    /**
     * Represents the sorting order of the output result. More info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).
     * The format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending.
     * @example ["STATE_NAME DESC", "CITY_NAME ASC", "CITY_NAME"]
     *
     * It's recommended to use the `orderByFields` property of the chart's `orderOptions` object instead of this one.
     * If both are used, the `orderByFields` property of the chart's `orderOptions` object will take precedence.
     *
     */
    orderByFields?: string[];
    /**
     * Specifies the geodatabase version to display for feature service queries.
     */
    gdbVersion?: string;
    /**
     * The geometry to apply to the spatial filter. A buffer can be applied to it by setting the properties `distance` and `units`.
     */
    geometry?: IEnvelope | IExtent | IPoint | IPolygon | IPolygonWithCurves | IPolyline;
    /**
     * Specifies a search distance for the `geometry`. To be associated with the `units` property. For compatible layers only.
     */
    distance?: number;
    /**
     * The unit for calculating the buffer distance when `distance` and `geometry` are provided.
     * If not specified, the unit is derived from the geometry spatial reference.
     */
    units?: RESTUnits;
    /**
     * A time extent ([timestamp, timestamp]) for a temporal query against time-aware layers.
     */
    timeExtent?: [number, number];
    /**
     * The zero-based index indicating where to begin retrieving features.
     */
    start?: number;
    /**
     * The number of features to retrieve.
     */
    num?: number;
    /**
     * If true then the query returns distinct values based on the field(s) specified in outFields. Available for count-based aggregations only.
     * @default false
     */
    returnDistinctValues?: boolean;
    /**
     * Indicates whether to fetch null values for them to be counted or displayed as categories on the chart.
     * @default false
     */
    fetchNullValues?: boolean;
}
/**
 * Subset of the WebChartQuery, used at the series level
 */
type WebChartSeriesQuery = Omit<WebChartQuery, "distance" | "gdbVersion" | "geometry" | "num" | "start" | "timeExtent" | "units">;
/**
 * JSON representation of filters applied to the data
 */
export type WebChartDataFilters = Pick<WebChartQuery, "distance" | "gdbVersion" | "geometry" | "timeExtent" | "units" | "where">;
/**
 * JSON representation of the chart's series object. All other series extends this interface.
 */
export interface WebChartSeries {
    type: string;
    /**
     * A unique string used to differentiate the series on a chart.
     */
    id: string;
    /**
     * Hides or shows the series. If the series is has **visible** set to `false`, the corresponding legend is grayed out in the legend box.
     * @default true
     */
    visible?: boolean;
    /**
     * Hides or shows data tooltips.
     * Applies to all charts but Gauge.
     * @default true
     */
    dataTooltipVisible?: boolean;
    /**
     * Indicates whether to apply the hovered element's color to the background (false) or the outline (true).
     * Applies to all charts but Gauge.
     * @default false
     */
    dataTooltipReverseColor?: boolean;
    /**
     * Defines how to render numeric values in tooltips.
     */
    dataTooltipValueFormat?: NumberFormatOptions;
    /**
     * Defines how to render percent values in tooltips.
     * Currently used for stacked 100% bar and line charts, as well as pie charts.
     */
    dataTooltipPercentFormat?: NumberFormatOptions;
    /**
     * Defines how to render dates in tooltips.
     * Currently used for bar and line charts using a date x-axis with no time binning.
     */
    dataTooltipDateFormat?: DateTimeFormatOptions;
    /**
     * Specifies the name of the series. It would be reflected in the chart [legends](#legend)
     */
    name: string;
    /**
     * Specifies a query object associated with a particular series containing info on what data to fetch for that series.
     */
    query?: WebChartSeriesQuery;
    /**
     * Specifies which field represents the x-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.
     * @minLength 1
     */
    x: string;
    /**
     * Specifies how the data labels should be rendered.
     */
    dataLabels?: WebChartText;
    /**
     * Specifies whether the series should be assigned to the second value axis, when the `axes` property defines it.
     * Supported by bar and line series.
     * @default false
     */
    assignToSecondValueAxis?: boolean;
}
/**
 * Describes the properties related to a temporal series
 */
export interface WebChartTemporalSeries {
    /**
     * Whether to use the time properties to bin the temporal data.
     * If set to `false` the `timeIntervalSize` and `timeIntervalUnits` properties can be used to set the date axis base interval.
     * @default true
     */
    binTemporalData?: boolean;
    /**
     * The time unit that corresponds to the `timeIntervalSize`. Valid options include seconds, minutes, hours, days, weeks, months, and years.
     */
    timeIntervalUnits?: WebChartTimeIntervalUnits;
    /**
     * The span of time that will be binned or aggregated together. This property must be used in conjunction with `timeIntervalUnits`.
     */
    timeIntervalSize?: number;
    /**
     * The time interval alignment type. Valid options include `equalIntervalsFromStartTime` and `equalIntervalsFromEndTime`.
     * @default "equalIntervalsFromStartTime"
     */
    timeAggregationType?: WebChartTimeAggregationTypes;
    /**
     * Determines whether incomplete time intervals at the start or end of the data span (depending on the `timeAggregationType`) will be removed from the chart.
     * Incomplete intervals on a chart can cause misleading results in which the period in question is under- or overreported due to a different amount of time in the interval.
     * Setting `true` indicates to trim these incomplete intervals. Setting `false` does not trim incomplete intervals.
     * @default true
     */
    trimIncompleteTimeInterval?: boolean;
    /**
     * How summarized bins returning a null value are displayed. Supported options are:
     * - `null`, `zero`, and `interpolate` for line series
     * - `null` and `zero` for bar series
     * @default "null"
     */
    nullPolicy?: WebChartNullPolicyTypes;
}
/**
 * Bar Chart Interfaces
 */
/**
 * [Bar chart](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/bar-chart.htm) shows the categorical distribution of String/DateTime data.
 */
export interface WebChartBarChartSeries extends WebChartSeries, WebChartTemporalSeries {
    /**
     * Represents a unique string identifier for the BarChartSeries object. For BarSeries object, it is "barSeries".
     */
    type: typeof WebChartTypes.BarSeries;
    /**
     * Specifies which field represents the y-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.
     * @minLength 1
     */
    y: string;
    /**
     * Contains styling info on how the columns/bars should be rendered
     */
    fillSymbol?: ISimpleFillSymbol;
    /**
     * When true or undefined (default), the labels displayed within a small column or stack are hidden to avoid cluttering.
     * When false, all the data labels are displayed.
     * @default true
     */
    hideOversizedStackedLabels?: boolean;
}
/**
 * Histogram Interfaces
 */
/**
 * Object containing Histogram overlays
 */
export interface HistogramOverlays {
    /**
     * Represents a unique string identifier for the HistogramOverlays object. For HistogramOverlays object, it is "chartOverlays".
     */
    type: typeof WebChartTypes.Overlays;
    /**
     * Specifies the mean overlay for histogram.
     * If not provided, the mean overlay is not displayed.
     */
    mean?: WebChartOverlay;
    /**
     * Specifies the median overlay for histogram.
     * If not provided, the median overlay is not displayed.
     */
    median?: WebChartOverlay;
    /**
     * Specifies the standard deviation overlay for histogram.
     * If not provided, the standard deviation overlay is not displayed.
     */
    standardDeviation?: WebChartOverlay;
    /**
     * Specifies the comparison distribution overlay for histogram.
     * If not provided, the comparison distribution overlay is not displayed.
     */
    comparisonDistribution?: WebChartOverlay;
}
/**
 * [Histogram](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/histogram.htm) shows the numerical(frequency) distribution of a numerical field.
 */
export interface WebChartHistogramSeries extends WebChartSeries {
    /**
     * Represents a unique string identifier for the HistogramSeries object. For BarSeries object, it is "histogramSeries".
     */
    type: typeof WebChartTypes.HistogramSeries;
    /**
     * Bin count must be a positive integer.
     * @minimum 1
     * @multipleOf 1
     * @default 32
     */
    binCount?: number | null;
    /**
     * Specifies the chart overlays. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
     * The overlays won't show if the property is not defined.
     */
    overlays?: HistogramOverlays;
    /**
     * Specifies how the data should be transformed (e.g. square root, log, etc.) before binning.
     */
    dataTransformationType?: WebChartDataTransformations;
    /**
     * Contains styling info on how the columns/bars should be rendered
     */
    fillSymbol?: ISimpleFillSymbol;
}
/**
 * Scatter Plot Interfaces
 */
/**
 * Object containing Scatter Plot overlays
 */
export interface ScatterPlotOverlays {
    /**
     * Represents a unique string identifier for the ScatterPlotOverlays object. For ScatterPlotOverlays object, it is "chartOverlays".
     */
    type: typeof WebChartTypes.Overlays;
    /**
     * Specifies the trendline overlay for scatter plot.
     * The trendline won't show if the property is not defined.
     */
    trendLine?: WebChartOverlay;
}
export interface SizePolicy {
    /**
     * Represents a unique string identifier for the sizePolicy object. For sizePolicy object, it is "sizeScale".
     */
    type: typeof WebChartTypes.SizePolicy;
    /**
     * The type of scale to apply to the markers (linear or logarithmic)
     * @default SizePolicyScaleTypes.Linear
     */
    scaleType?: SizePolicyScaleTypes;
    /**
     * The field which determines the markers size
     */
    field: string;
    /**
     * The minimum marker size
     * @default 5
     * @min 1
     * @multipleOf 1
     */
    minSize?: number;
    /**
     * The maximum marker size
     * @default 30
     * @min 1
     * @multipleOf 1
     */
    maxSize?: number;
}
/**
 * [Scatter plot](https://pro.arcgis.com/en/pro-app/help/analysis/geoprocessing/charts/scatter-plot.htm) shows the relationship between two numerical fields.
 */
export interface WebChartScatterPlotSeries extends WebChartSeries {
    /**
     * Represents a unique string identifier for the ScatterSeries object. For ScatterSeries object, it is "scatterSeries".
     */
    type: typeof WebChartTypes.ScatterSeries;
    /**
     * Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.
     * @minLength 1
     */
    y: string;
    /**
     * Specifies how each data point in the scatter plot should be rendered. The type is `"esriSMS"` and it is adopted from the [REST API Types](https://developers.arcgis.com/documentation/common-data-types/symbol-objects.htm#GUID-C8D40B32-5F4B-45EB-8048-6D5A8763E13B).
     */
    markerSymbol?: ISimpleMarkerSymbol;
    /**
     * Specifies all the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
     * The overlays won't show if the property is not defined.
     */
    overlays?: ScatterPlotOverlays;
    /**
     * Specifies rules to use the scatter plot as bubble plot, by changing dynamically the markers size according to a specific field value
     */
    sizePolicy?: SizePolicy;
}
/**
 * Pie Chart Interfaces
 */
/**
 * JSON representation of the pie ticks.
 */
export interface WebChartPieChartTick {
    /**
     * Represents a unique string identifier for the WebChartPieChartTick object. For PieTick object, it is "pieTick".
     */
    type: typeof WebChartTypes.PieTick;
    /**
     * Determines the visibility of the tick.
     * Assigning the `true` value will only be considered when the data labels are visible (`series.dataLabels.visible`) and
     * when the data label associated to the tick is outside of the chart (`series.dataLabelsOffset` > 0).
     */
    visible?: boolean;
    /**
     * Contains styling info on how the pie chart ticks should be rendered
     */
    lineSymbol?: ISimpleLineSymbol;
}
/**
 * JSON representation of the pie slices
 */
export interface WebChartPieChartSlice {
    /**
     * A unique string used identify the slice of a pie chart.
     * @readonly
     */
    sliceId: string;
    /**
     * The slice's original label.
     * @readonly
     */
    originalLabel?: Date | number | string | null;
    /**
     * Custom label for the slice.
     * For grouped slice, the default value is `Other`.
     * For regular slice, it will be either the category or field name.
     */
    label?: string;
    /**
     * Contains styling info on how the slice should be rendered. If not provided, the slice will
     * be styled with default values.
     */
    fillSymbol?: ISimpleFillSymbol;
}
/**
 * JSON representation of the pie grouped slice
 */
export interface WebChartPieChartGroupSlice extends WebChartPieChartSlice {
    /**
     * Slices that have a percent value equal or lesser to this threshold are grouped into a unique slice
     * @min 0
     * @max 100
     */
    percentageThreshold: number;
    /**
     * Specifies how the grouped slice data labels should be rendered.
     * If the property is not set the `series.dataLabels` will be used instead.
     */
    dataLabels?: WebChartText;
}
/**
 * JSON representation of the Pie Chart series
 */
export interface WebChartPieChartSeries extends WebChartSeries {
    /**
     * Represents a unique string identifier for the PieSeries object. For PieSeries object, it is "pieSeries".
     */
    type: typeof WebChartTypes.PieSeries;
    /**
     * Specifies which field represents the y-coordinates of this series. Empty string or one with just white spaces is not allowed. At least 1 or more word characters (a-z, A-Z, _) are needed.
     * @minLength 1
     */
    y: string;
    /**
     * Represents the size of the hole in middle of the chart. The number is used as a percentage rather than a fixed value.
     * @minimum 0
     * @maximum 100
     * @default 50
     */
    innerRadius?: number | null;
    /**
     * @default -90
     */
    startAngle?: number | null;
    /**
     * @default 270
     */
    endAngle?: number | null;
    /**
     * Contains styling info on how the slices should be rendered
     */
    fillSymbol?: ISimpleFillSymbol;
    /**
     * Indicates whether the numeric value associated to a slice is to be displayed on its data label.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`.
     * This property will be ignored if the chart options `dataLabelFormatter` is provided.
     * @default true
     */
    displayNumericValueOnDataLabel?: boolean;
    /**
     * Indicates whether the percentage associated to a slice is to be displayed on its data label.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`
     * This property will be ignored if the chart options `dataLabelFormatter` is provided.
     * @default false
     */
    displayPercentageOnDataLabel?: boolean;
    /**
     * Indicates whether the numeric value associated to a slice is to be displayed on its tooltip.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`
     * This property will be ignored if the chart options `tooltipFormatter` is provided.
     * @default true
     */
    displayNumericValueOnTooltip?: boolean;
    /**
     * Indicates whether the percentage associated to a slice is to be displayed on its tooltip.
     * If both displayNumericValue & displayPercentage are true on a same label, they will be displayed as `percentage (value)`
     * This property will be ignored if the chart options `tooltipFormatter` is provided.
     * @default true
     */
    displayPercentageOnTooltip?: boolean;
    /**
     * Specifies how the numerical values should be formatted (applied to label, tooltip and legend).
     * Can be overridden for the tooltips by series.dataTooltipValueFormat.
     */
    numericValueFormat?: NumberFormatOptions;
    /**
     * Specifies how the percent values should be formatted (applied to label, tooltip and legend)
     * Can be overridden for the tooltips by series.dataTooltipPercentFormat.
     */
    percentValueFormat?: NumberFormatOptions;
    /**
     * Adds a prefix to all the values displayed on the pie chart: data labels, tooltips and legend
     */
    valuePrefix?: string;
    /**
     * Adds a suffix to all the values displayed on the pie chart: data labels, tooltips and legend
     */
    valueSuffix?: string;
    /**
     * Adds a prefix to all the percentages displayed on the pie chart: data labels, tooltips and legend
     */
    percentagePrefix?: string;
    /**
     * Adds a suffix to all the percentages displayed on the pie chart: data labels, tooltips and legend
     */
    percentageSuffix?: string;
    /**
     * If set, the category on the data label is truncated to display only `characterLimit` characters, and an ellipsis ("...")
     * is added to the end of the label.
     * This does not affect the value and percentage part of the labels.
     * Does not apply to tooltips and legend labels.
     * @default undefined
     * @minimum 1
     * @multipleOf 1
     */
    dataLabelsCharacterLimit?: number | null;
    /**
     * Specifies how to render the ticks shown on each slide.
     * Ticks will be displayed with default values if not provided.
     */
    ticks?: WebChartPieChartTick;
    /**
     * Determines in pixel how far the data labels should be placed from their slice.
     * If a negative value is provided the label will be placed inside of the chart.
     * @default 10
     */
    dataLabelsOffset?: number;
    /**
     * Aligns labels into columns to make them more readable and avoid them to overlap each other.
     * @default false
     */
    alignDataLabels?: boolean;
    /**
     * Optimizes the data labels rendering to avoid them to be cut off on the edges or to overlap the legend by wrapping them and adding padding to the chart.
     * @default false
     */
    optimizeDataLabelsOverlapping?: boolean;
    /**
     * Specifies if and how the slices under a given percentage threshold are grouped into a unique slice
     */
    sliceGrouping?: WebChartPieChartGroupSlice;
    /**
     * An array of WebChartPieChartSlice representing the ids, labels and styles of the pie slices.
     *
     * When this property is not defined, or when a pie slice does not have a matching slice in this array,
     * the series' fillSymbol will be used. If the series' fillSymbol does not contain color information, colors from the
     * color ramps will be utilized.
     */
    slices?: WebChartPieChartSlice[];
}
/**
 * JSON representation of the `Gauge` series
 */
export interface WebChartGaugeSeries extends WebChartSeries {
    /**
     * Represents a unique string identifier for the GaugeSeries object. For GaugeSeries object, it is "gaugeSeries".
     */
    type: typeof WebChartTypes.GaugeSeries;
    /**
     * Defines the conversion to apply to the gauge value
     */
    valueConversion?: ValueConversion;
    /**
     * Specifies the index of the feature to be rendered.
     * This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
     * For feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)
     */
    featureIndex?: number;
}
/**
 * Line Chart Interfaces
 */
/**
 * JSON representation of the Line Chart series
 */
export interface WebChartLineChartSeries extends WebChartSeries, WebChartTemporalSeries {
    /**
     * Represents a unique string identifier for the LineSeries object. For LineSeries object, it is "lineSeries".
     */
    type: typeof WebChartTypes.LineSeries;
    /**
     * Specifies the numeric field(s) used by the series. The array type is useful when used for a box plot.
     */
    y: string[] | string;
    /**
     * Contains styling info on how the line/line segments should be rendered
     */
    lineSymbol?: ISimpleLineSymbol;
    /**
     * Specifies whether line segments should be smoothed.
     * @default false
     */
    lineSmoothed?: boolean;
    /**
     * Indicates whether line series show area.
     * @default false
     */
    showArea?: boolean;
    /**
     * Indicates whether to show or hide the markers/bullets of the line series.
     * @default true
     */
    markerVisible?: boolean;
    /**
     * Contains styling info on how the marker should be rendered
     */
    markerSymbol?: ISimpleMarkerSymbol;
    /**
     * Specifies the color of the filled area for line chart.
     * areaColor will be applied only if showArea is true, and is defaulted to the line color if not provided.
     */
    areaColor?: Color;
    /**
     * Specifies how negative values are treated in stacked series.
     * If true, negative values will be stacked on the base line.
     * If false, negative values will be stacked in relation to their previous values in the stack.
     * @default true
     */
    stackNegativeValuesToBaseline?: boolean;
}
/**
 * Box Plot Interfaces
 */
/**
 * JSON representation of the Box plot series
 */
export interface WebChartBoxPlotSeries extends WebChartSeries {
    type: typeof WebChartTypes.BoxPlotSeries;
    /**
     * Specifies the numeric field(s) used by the box plot series.
     */
    y: string[] | string;
    /**
     * Contains styling info on how the box and whiskers should be rendered. The whiskers use the fillSymbol.outline.
     */
    fillSymbol?: ISimpleFillSymbol;
}
export type WebChartRadarChartSeries = Omit<WebChartLineChartSeries, "type"> & {
    type: typeof WebChartTypes.RadarSeries;
};
/**
 * Probability Plot Interfaces
 */
/**
 * JSON representation of the Probability plot series
 */
export interface WebChartProbabilityPlotSeries extends WebChartSeries {
    type: typeof WebChartTypes.ProbabilityPlotSeries;
    y: string;
    probabilityPlotType: WebChartProbabilityPlotKinds;
    dataTransformationType: WebChartDataTransformations;
    showReferenceLine: boolean;
    standardizeValues: boolean;
    markerSymbol: ISimpleMarkerSymbol;
    referenceLineSymbol: ISimpleLineSymbol;
}
/**
 * Profile Graph Interfaces
 */
/**
 * JSON representation of the Profile graph series
 */
export interface WebChartProfileGraphSeries extends WebChartSeries {
    type: typeof WebChartTypes.ProfileGraphSeries;
    y: string;
    horizontalUnits: string;
    verticalUnits: string;
    lineSymbol: ISimpleLineSymbol;
    markerSymbol: ISimpleMarkerSymbol;
}
/**
 * Type containing all the series types available
 */
export type WebChartSeriesType = WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartGaugeSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartPieChartSeries | WebChartProbabilityPlotSeries | WebChartProfileGraphSeries | WebChartRadarChartSeries | WebChartScatterPlotSeries;
/**
 * Gives a JSON representation of the Chart object.
 */
export interface WebMapWebChart {
    /**
     * Version of the specification. Used to identify when a saved config was created.
     */
    version: typeof WebChartCurrentVersion;
    /**
     * Represents a unique string identifier for the Chart object. For Chart object, it is **chart**.
     */
    type: typeof WebChartTypes.Chart;
    /**
     * Can be used to uniquely identify a chart. The consumer app can choose whether to use it or not.
     */
    id?: string;
    /**
     * Used to filter the chart's data while in Layer mode.
     */
    dataFilters?: WebChartDataFilters;
    /**
     * Specifies heading/title of the chart.
     */
    title?: WebChartText;
    /**
     * Specifies sub-heading/subtitle of the chart.
     */
    subTitle?: WebChartText;
    /**
     * Specifies footer of the chart
     */
    footer?: WebChartText;
    /**
     * Specifies the background color of the chart.
     * @default [255, 255, 255, 255]
     */
    background?: Color;
    /**
     * A unique string that specifies the styling theme currently applied to the chart. This property needs to finalized and not in active use currently.
     */
    theme?: string;
    /**
     * Specifies cursor's crosshair information for the chart. Only for XY charts.
     */
    cursorCrosshair?: WebChartCursorCrosshair;
    /**
     * Specifies the Legend information for the chart.
     */
    legend?: WebChartLegend | WebChartPieChartLegend;
    /**
     * Represents an array of **at least 1 or at most 3** Chart Axis accompanying the chart. The axes property is optional because Pie chart does not use any axis.
     * The third axis config is used when a series `assignToSecondValueAxis` is set to `true`.
     * Some of the axis features won't apply to the third axis (e.g. labels behaviors).
     */
    axes?: [WebChartAxis, WebChartAxis?, WebChartAxis?];
    /**
     * Represents the way the labels should behave when the horizontal axis can't display them all.
     * The available options are: "none", "rotate", "stagger" and "wrap".
     * For XY Chart only. Histogram can handle "none" and "rotate" only.
     * The default value for the horizontal axis is "rotate".
     * @default "rotate"
     */
    horizontalAxisLabelsBehavior?: WebChartLabelBehavior;
    /**
     * Represents the way the labels should behave when the vertical axis can't display them all. For XY Chart only.
     * The available options are: "none" and "wrap".
     * The default value for the vertical axis is "wrap".
     * @default "wrap"
     */
    verticalAxisLabelsBehavior?: WebChartLabelBehavior;
    /**
     * Represents an array of various chart series to be plot inside the chart.
     * Empty array is not allowed.
     * @minItems 1
     */
    series: WebChartSeriesType[];
    /**
     * Specifies whether or not the chart is rotated. Applied to Bar, Line, and Combo Bar and Line charts.
     * @default false
     */
    rotated?: boolean;
    /**
     * Specifies how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or
     * when multiple attributes/fields corresponding to the same set of classes are to be visualized.
     *
     * Currently this property is only used for bar and line series.
     * @default sideBySide
     */
    stackedType?: WebChartStackedKinds;
    /**
     * Specifies whether to first try matching the colors from the layer renderer or the chart renderer
     * for coloring the chart elements, like markers, line segments, columns, etc.
     *
     * To do so, this property needs to be set to `true`.
     *
     * When there is no matching color found (for when `colorMatch = true`) or when `colorMatch = false`,
     * the colors from the config, and then from the color ramps will be used, in that order.
     *
     * @default false
     */
    colorMatch?: boolean;
    /**
     * Renderer to use to style the series when the chart uses the color match mode.
     * Considered before the layer's renderer.
     */
    chartRenderer?: IDrawingInfo["renderer"];
    /**
     * Chart order options (data and series)
     */
    orderOptions?: {
        /**
         * How series should be ordered and dislayed in a multi-series chart.
         * If not provided the series will be displayed as they are ordered in the config.
         */
        series?: WebChartOrderSeriesBy;
        /**
         * How data for a chart should be ordered. It is recommended to use this property over its sibling `orderByFields` to order the chart data.
         *
         * If not provided, the data will be displayed as it was retrieved from the server. No additional ordering will be applied.
         */
        data?: WebChartDirectionalDataOrder | WebChartPredefinedLabelsDataOrder;
        /**
         * The orderByFields to be sent with the query when retrieving data for the chart.  It represents the desired sorting order of the output result from the server.
         *
         * More info present in [JSAPI docs](https://developers.arcgis.com/javascript/latest/api-reference/esri-tasks-support-Query.html#orderByFields).
         * The format of any entry in this array is `field_name sorting_order`. When `sorting_order` is not defined, it is assumed to be ascending
         * @example ["STATE_NAME DESC", "CITY_NAME ASC", "CITY_NAME"]
         *
         * In case both this property and its sibling `data` object are provided, the order of the chart elements are settled by the order instruction in the `data` property.
         */
        orderByFields?: string[];
    };
}
/**
 * JSON representation of Gauge chart.
 */
export interface WebMapWebGaugeChart extends WebMapWebChart {
    /**
     * Represents the size of the hole in middle of the chart. The number is used as a percentage rather than a fixed value.
     * @default 50
     */
    innerRadius?: number | null;
    /**
     * Represents where is the chart's starting point
     * @default -180
     */
    startAngle?: number | null;
    /**
     * Represents where is the chart's ending point. To be related with startAngle. If endAngle-startAngle is 360 the chart will render as full circle.
     * @default 180
     */
    endAngle?: number | null;
    /**
     * Array of one WebChartGaugeAxis
     */
    axes: [WebChartGaugeAxis];
    /**
     * The type of Gauge, like FeatureGauge and StatisticGauge.
     *
     * When this property is not specified, it will be defaulted to `GaugeChartSubTypes.StatisticGauge`.
     */
    subType?: GaugeChartSubTypes;
}
/**
 * JSON representation of Gauge
 */
export interface WebMapWebBoxPlot extends WebMapWebChart {
    /**
     * Whether to show the outliers on the chart
     */
    showOutliers?: boolean;
    /**
     * Whether to standardize the values by calculating the series z-score
     */
    standardizeValues?: boolean;
    /**
     * Whether to show the mean lines on the chart. Applies only if a split-by field is set.
     * Additionally the chart will render with that option enabled only if the the series array
     * contains one box plot series and N lines series.
     * @default false
     */
    showMean?: boolean;
    /**
     * The box plot series can be of type "boxPlotSeries" or "lineSeries".
     */
    series: (WebChartBoxPlotSeries | WebChartLineChartSeries)[];
}
interface WebChartDataSource {
    /**
     * Property representing the layer to be used by the chart.
     */
    iLayer?: IFeatureLayer;
}
/**
 * Gives a JSON representation of the Chart object when using a `iLayer`.
 */
export interface WebChart extends WebMapWebChart, WebChartDataSource {
}
/**
 * Gives a JSON representation of the Gauge Chart object when using a `iLayer`.
 */
export interface WebGaugeChart extends WebMapWebGaugeChart, WebChartDataSource {
}
/**
 * Gives a JSON representation of the Box Plot Chart object when a `iLayer`.
 */
export interface WebBoxPlot extends WebMapWebBoxPlot, WebChartDataSource {
}
/**
 * Gives a JSON representation of the Radar Chart object.
 */
export interface WebMapWebRadarChart extends WebMapWebChart {
    /**
     * The radar chart series
     * @minItems 1
     */
    series: WebChartRadarChartSeries[];
    /**
     * Array of two axes, one specific to the radar chart and the other one common to all charts
     */
    axes: [WebChartRadarChartAxis, WebChartAxis];
}
/**
 * Gives a JSON representation of the Radar Chart object when using a `iLayer`.
 */
export interface WebRadarChart extends WebMapWebRadarChart, WebChartDataSource {
}
export {};
