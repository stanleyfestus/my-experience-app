/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"./has.js";import{strict as e}from"./jsonMap.js";import{getReferenceEllipsoid as s}from"../geometry/ellipsoidUtils.js";import{earth as t,mars as r,moon as n}from"../geometry/support/Ellipsoid.js";import{isEarth as i,isWKIDFromMars as a,isWKIDFromMoon as u,isGeographic as c}from"../geometry/support/spatialReferenceUtils.js";import l from"../geometry/support/WKIDUnitConversion.js";const o=39.37,m=t.radius*Math.PI/200,f=/(?:LENGTH)?UNIT\[([^\]]+)]]$/i,U=l,d=/UNIT\[([^\]]+)]/i,h=new Set([4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104025,104026,104139,104140]),B=e()({meter:"meters",foot:"feet",foot_us:"us-feet",foot_clarke:"clarke-feet",yard_clarke:"clarke-yards",link_clarke:"clarke-links",yard_sears:"sears-yards",foot_sears:"sears-feet",chain_sears:"sears-chains",chain_benoit_1895_b:"benoit-1895-b-chains",yard_indian:"indian-yards",yard_indian_1937:"indian-1937-yards",foot_gold_coast:"gold-coast-feet",chain:"chains",chain_sears_1922_truncated:"sears-1922-truncated-chains","50_kilometers":"50-kilometers","150_kilometers":"150-kilometers"}),q=e=>e*e,k=e=>e*e*e,b={length:{baseUnit:"meters",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},"nautical-miles":{inBaseUnits:1852},"us-feet":{inBaseUnits:1200/3937},"clarke-feet":{inBaseUnits:.3047972654},"clarke-yards":{inBaseUnits:.9143917962},"clarke-links":{inBaseUnits:.201166195164},"sears-yards":{inBaseUnits:.9143984146160287},"sears-feet":{inBaseUnits:.3047994715386762},"sears-chains":{inBaseUnits:20.11676512155263},"benoit-1895-b-chains":{inBaseUnits:20.11678249437587},"indian-yards":{inBaseUnits:.9143985307444408},"indian-1937-yards":{inBaseUnits:.91439523},"gold-coast-feet":{inBaseUnits:.3047997101815088},chains:{inBaseUnits:20.1168},"sears-1922-truncated-chains":{inBaseUnits:20.116756},"50-kilometers":{inBaseUnits:5e4},"150-kilometers":{inBaseUnits:15e4}}},area:{baseUnit:"square-meters",units:{"square-millimeters":{inBaseUnits:q(.001)},"square-centimeters":{inBaseUnits:q(.01)},"square-decimeters":{inBaseUnits:q(.1)},"square-meters":{inBaseUnits:1},"square-kilometers":{inBaseUnits:q(1e3)},"square-inches":{inBaseUnits:q(.0254)},"square-feet":{inBaseUnits:q(.3048)},"square-yards":{inBaseUnits:q(.9144)},"square-miles":{inBaseUnits:q(1609.344)},"square-us-feet":{inBaseUnits:q(1200/3937)},acres:{inBaseUnits:.0015625*q(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:"liters",units:{liters:{inBaseUnits:1},"cubic-millimeters":{inBaseUnits:1e3*k(.001)},"cubic-centimeters":{inBaseUnits:1e3*k(.01)},"cubic-decimeters":{inBaseUnits:1e3*k(.1)},"cubic-meters":{inBaseUnits:1e3},"cubic-kilometers":{inBaseUnits:1e3*k(1e3)},"cubic-inches":{inBaseUnits:1e3*k(.0254)},"cubic-feet":{inBaseUnits:1e3*k(.3048)},"cubic-yards":{inBaseUnits:1e3*k(.9144)},"cubic-miles":{inBaseUnits:1e3*k(1609.344)}}},angle:{baseUnit:"radians",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},p=(()=>{const e={};for(const s in b)for(const t in b[s].units)e[t]=s;return e})();function y(e,s,t){return e*b[t].units[s].inBaseUnits}function g(e,s,t){return e/b[t].units[s].inBaseUnits}const w=["metric","imperial","square-inches","square-feet","square-yards","square-miles","square-us-feet","square-meters","square-kilometers","acres","ares","hectares"],_=["metric","imperial","inches","feet","yards","miles","nautical-miles","us-feet","meters","kilometers"],M=new Map([["meters","square-meters"],["feet","square-feet"],["us-feet","square-us-feet"]]);function S(e){return"imperial"===e||"metric"===e}function D(e){const s=p[e];if(!s)throw new Error("unknown type");return s}function C(e){return b[e].baseUnit}function P(e){return C(D(e))}function E(e,s=null){return s=s||D(e),b[s].baseUnit===e}function I(e,s,t){if(s===t)return e;const r=D(s);if(r!==D(t))throw new Error("incompatible units");const n=E(s,r)?e:y(e,s,r);return E(t,r)?n:g(n,t,r)}function j(e,s,t,r=!1){if(!r&&s.isGeographic)throw new Error("Unable to convert from an angular unit to a linear unit.");const n=ee(s);return n!==t&&(e=n?I(e,n,t):I(e*=z(s),"meters",t)),e}function R(e,s,t,r=!1){if(!r&&t.isGeographic)throw new Error("Unable to convert from a linear unit to an angular unit.");const n=ee(t);return s!==n&&(e=n?I(e,s,n):I(e,s,"meters")/z(t)),e}function v(e){switch(e){case"metric":return"meters";case"imperial":return"feet";default:return e}}function x(e){return v(e)}function N(e){switch(e){case"metric":return"square-meters";case"imperial":return"square-feet";default:return e}}function O(e,s,t){switch(t){case"metric":return G(e,s);case"imperial":return T(e,s);default:return t}}function F(e,s,t){switch(t){case"metric":return J(e,s);case"imperial":return K(e,s);default:return t}}function G(e,s){const t=I(e,s,"meters");return Math.abs(t)<3e3?"meters":"kilometers"}function J(e,s){const t=I(e,s,"meters");return Math.abs(t)<1e5?"meters":"kilometers"}function T(e,s){const t=I(e,s,"feet");return Math.abs(t)<1e3?"feet":"miles"}function K(e,s){const t=I(e,s,"feet");return Math.abs(t)<1e5?"feet":"miles"}function A(e,s){const t=I(e,s,"square-meters");return Math.abs(t)<3e6?"square-meters":"square-kilometers"}function H(e,s){const t=I(e,s,"square-feet");return Math.abs(t)<1e6?"square-feet":"square-miles"}function L(e,s,t){return I(e,s,"meters")/(t*Math.PI/180)}function Y(e){return B.fromJSON(e.toLowerCase())||null}function W(e){if(null!=e&&!i(e))return 1;const s=z(e);return s>1e5?1:s}function $(e){return z(e)>=s(e).metersPerDegree?"meters":ee(e)}function z(e,s=t.metersPerDegree){return Q(e,!0)??s}function Q(e,s=!1){const t=e?.wkid??null,i=e?.wkt2??e?.wkt??null;let c=null;if(t){if(a(t))return r.metersPerDegree;if(u(t))return n.metersPerDegree;c=U.values[U[t]],!c&&s&&h.has(t)&&(c=m)}else i&&(ie(i)?c=X(f.exec(i),c):ne(i)&&(c=X(d.exec(i),c)));return c}function V(e){return c(e)?1:z(e)}function X(e,s){return e?.[1]?Z(e[1]):s}function Z(e){return parseFloat(e.split(",")[1])}function ee(e){const s=e?.wkid??null,t=e?.wkt2??e?.wkt??null;let r=null;if(s)r=U.units[U[s]];else if(t){const e=ie(t)?f:ne(t)?d:null;if(e){const s=e.exec(t);s?.[1]&&(r=ue(s[1]))}}return null!=r?Y(r):null}function se(e){const s=ee(e);return null!=s&&_.includes(s)?s:null}function te(e){const s=$(e);return null!=s&&_.includes(s)?s:null}function re(e){const s=ee(e);return null==s?null:M.get(s)}function ne(e){return/^GEOCCS/i.test(e)}function ie(e){return/^\s*(?:PROJCS|PROJCRS|PROJECTEDCRS)/i.test(e)}const ae=1e-7;function ue(e){const s=/[\\"']{1}([^\\"']+)/.exec(e);let t=s?.[1];if(!t||!U.units.includes(t)){const s=Z(e);t=null;const r=U.values;for(let e=0;e<r.length;++e)if(Math.abs(s-r[e])<ae){t=U.units[e];break}}return t}function ce(e){const s=ee(e);if(null==s)return null;switch(s){case"feet":case"us-feet":case"clarke-feet":case"clarke-yards":case"clarke-links":case"sears-yards":case"sears-feet":case"sears-chains":case"benoit-1895-b-chains":case"indian-yards":case"indian-1937-yards":case"gold-coast-feet":case"chains":case"sears-1922-truncated-chains":return"imperial";case"50-kilometers":case"150-kilometers":case"meters":return"metric"}return null}const le={esriAcres:"acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-feet",esriSquareInches:"square-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-miles",esriSquareMillimeters:"square-millimeters",esriSquareUsFeet:"square-us-feet",esriSquareYards:"square-yards"},oe={esriCentimeters:"centimeters",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriYards:"yards"},me={esriDUDecimalDegrees:"degrees",esriDURadians:"radians"},fe=e()(le),Ue=e()(oe),de=e()(me);export{H as adaptiveImperialAreaUnit,T as adaptiveImperialLengthUnit,K as adaptiveImperialVerticalLengthUnit,O as adaptiveLengthUnit,A as adaptiveMetricAreaUnit,G as adaptiveMetricLengthUnit,J as adaptiveMetricVerticalLengthUnit,F as adaptiveVerticalLengthUnit,de as angleUnitsJSONMap,re as areaUnitFromSpatialReference,fe as areaUnitsJSONMap,P as baseUnitForUnit,C as baseUnitForUnitType,j as convertFromSpatialReferenceUnit,R as convertToSpatialReferenceUnit,I as convertUnit,N as defaultAreaUnit,v as defaultLengthUnit,x as defaultVerticalLengthUnit,ce as getDefaultUnitSystem,V as getMetersPerCartesianUnitForSR,Q as getMetersPerUnit,z as getMetersPerUnitForSR,W as getMetersPerVerticalUnitForSR,ee as getUnitString,$ as getVerticalUnitStringForSR,h as gradGcsIds,o as inchesPerMeter,E as isBaseUnit,S as isMeasurementSystem,ie as isProjectedWKT,L as lengthToDegrees,se as lengthUnitFromSpatialReference,Ue as lengthUnitsJSONMap,w as measurementAreaUnits,_ as measurementLengthUnits,Y as unitFromRESTJSON,D as unitType,te as verticalLengthUnitFromSpatialReference};
