/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{createUniqueColors as e}from"../../../core/colorUtils.js";import a from"../../../core/Error.js";import r from"../../../renderers/support/AuthoringInfo.js";import i from"../../../renderers/support/AuthoringInfoVisualVariable.js";import{createFlowRenderer as t,estimateMagnitudeRange as n}from"../../../renderers/support/rasterRendererHelper.js";import o from"../../../renderers/visualVariables/ColorVariable.js";import l from"../../../renderers/visualVariables/OpacityVariable.js";import s from"../../../renderers/visualVariables/SizeVariable.js";import m from"../../../renderers/visualVariables/support/ColorStop.js";import p from"../../../renderers/visualVariables/support/OpacityStop.js";import u from"../../../renderers/visualVariables/support/SizeStop.js";import{processRasterRendererParameters as c}from"../support/utils.js";import{getDataRange as f,createDataValues as d,getBasemapInfo as h}from"../../renderers/support/utils.js";import{cloneScheme as w,getSchemes as b}from"../../symbology/flow.js";const y=5;async function V(e){const a={...e};return a.theme||(a.theme="flow-line"),c(a)}async function S(e){let a=e.flowScheme,r=null,i=null;const t=await h(null,e.view);if(r=null!=t.basemapId?t.basemapId:null,i=null!=t.basemapTheme?t.basemapTheme:null,a)return{scheme:w(a),basemapId:r,basemapTheme:i};const n=b({basemapTheme:i,theme:e.theme,hasSizeVariable:e.hasSizeVariable});return n&&(a=n.primaryScheme,r=n.basemapId,i=n.basemapTheme),{scheme:a,basemapId:r,basemapTheme:i}}async function v(t,c){c.flowRepresentation&&(t.flowRepresentation=c.flowRepresentation);const h=await S({theme:c.theme,flowScheme:c.flowScheme,view:c.view,hasSizeVariable:c.includeSizeVariable}),b=h.scheme;if(!b)throw new a("flow-renderer:insufficient-info","Unable to find flow scheme");t.flowSpeed=b.flowSpeed,t.density=b.density,t.trailLength=b.trailLength,t.trailWidth=b.trailWidth,t.trailCap=b.trailCap,t.color=b.color;const V=[],v=[],g="Magnitude",x=c.layer.rasterInfo,j=null==x?.statistics||"vector-magdir"!==x.dataType&&"vector-uv"!==x.dataType?{minMagnitude:0,maxMagnitude:10}:n(x.dataType,x.statistics);if(null==j?.minMagnitude||null==j.maxMagnitude)throw new a("flow-renderer:insufficient-info","stats not available");const z={min:j.minMagnitude,max:j.maxMagnitude},I={min:z.min,max:null!=z.max?z.max/2:null},T=f(I,null,null),O=d(T,I,null);if(c.includeColorVariable){const r=e(b.colors,y);if(r.length<y)throw new a("flow-renderer:insufficient-info","Flow scheme does not have enough colors");const t=new o({field:g,stops:O.map(((e,a)=>new m({value:e,color:r[a]})))});V.push(t);const n=new i({type:"color",minSliderValue:z.min,maxSliderValue:z.max,theme:"high-to-low"});v.push(n)}if(c.includeOpacityVariable){const e=new l({field:g,stops:[new p({value:O[0],opacity:b.minOpacity}),new p({value:O[4],opacity:b.maxOpacity})]});V.push(e);const a=new i({type:"opacity",minSliderValue:z.min,maxSliderValue:z.max});v.push(a)}if(c.includeSizeVariable){const e=new s({field:g,stops:[new u({value:z.min,size:b.minSize}),new u({value:z.max,size:b.maxSize})]});V.push(e);const a=new i({type:"size",minSliderValue:z.min,maxSliderValue:z.max,theme:"high-to-low"});v.push(a)}const M=new r({type:"flow",visualVariables:v.length?v:void 0,flowTheme:b.theme});return t.visualVariables=V,t.authoringInfo=M,t.legendOptions=c.legendOptions,{renderer:t,visualVariables:V.map((e=>e.clone())),flowScheme:w(b),basemapId:h.basemapId,basemapTheme:h.basemapTheme,layerEffect:b.layerEffect,statistics:z}}async function g(e){e=await V(e);const r=t(e.layer.rasterInfo);if(null==r)throw new a("flow-renderer:not-supported","Only vector data is supported");return v(r,e)}export{g as createRenderer};
