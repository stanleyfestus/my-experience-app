/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import t from"../../Graphic.js";import"../../symbols.js";import{isSome as r,equals as i}from"../../core/arrayUtils.js";import{createTask as a}from"../../core/asyncUtils.js";import o from"../../core/Collection.js";import{deprecatedProperty as s}from"../../core/deprecate.js";import n from"../../core/Error.js";import l from"../../core/Evented.js";import{isSerializable as c}from"../../core/JSONSupport.js";import{equalsShallow as h}from"../../core/lang.js";import u from"../../core/Logger.js";import{clamp as p}from"../../core/mathUtils.js";import{abortMaybe as m,destroyMaybe as d}from"../../core/maybe.js";import{EsriPromise as g}from"../../core/Promise.js";import{isAbortError as y,throwIfAborted as f,waitTick as v}from"../../core/promiseUtils.js";import w from"../../core/ReactiveMap.js";import{on as b,watch as F,syncAndInitial as _,initial as I}from"../../core/reactiveUtils.js";import{sqlAnd as P}from"../../core/sql.js";import{getMetersPerUnitForSR as S}from"../../core/unitUtils.js";import{property as C}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import{subclass as V}from"../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as A}from"../../core/support/UpdatingHandles.js";import{union as O}from"../../geometry/geometryEngineAsync.js";import{projectWithZConversion as j}from"../../geometry/projection.js";import{isClockwise as M}from"../../geometry/support/coordsUtils.js";import{geographicToWebMercator as R}from"../../geometry/support/webMercatorUtils.js";import k from"../../layers/GraphicsLayer.js";import{searchImages as B}from"../../layers/orientedImagery/queries.js";import{calculateSuitabilities as L}from"../../layers/orientedImagery/core/bestImageUtils.js";import{createCoveragePolygon as G,computePolygonForInspection as x,resizePolygon as E,checkIfPolygonContainsSelectedPoint as H}from"../../layers/orientedImagery/core/coverageUtils.js";import{isConstantElevation as T,isElevationSource as D}from"../../layers/orientedImagery/core/ElevationSourceDefinitions.js";import{imageToWorld as z,imageToWorldPanoramic as U}from"../../layers/orientedImagery/transformations/imageToWorld.js";import N from"../../layers/orientedImagery/transformations/updateElevation.js";import{getElevationSampler as W}from"../../layers/orientedImagery/transformations/updateElevationUtils.js";import{getInitialAngle as q,convertPixelToHeadingPitch as $,pointToArray as J,getUpdateElevationProps as K,isElevationSampler as Q,getImageToWorldProperties as Z,getImageToWorldPanoramicProperties as X,getWorldToImageProperties as Y,convertHeadingPitchToSphereVertex as ee,or as te}from"../../layers/orientedImagery/transformations/utils.js";import{worldToImagePanoramic as re,worldToImage as ie}from"../../layers/orientedImagery/transformations/worldToImage.js";import{getFloorFilterClause as ae}from"../../layers/support/floorFilterUtils.js";import oe from"../../rest/support/AttachmentQuery.js";import{scale as se}from"../../views/draw/support/drawUtils.js";import{ViewEventPriorities as ne}from"../../views/input/InputManager.js";import le from"../PanoramicViewer.js";import{invalidCameraHeading as ce,sectorsInOrder as he,sectorsRadii as ue}from"./constants.js";import{crossSymbol as pe,crossSymbol3D as me,sourcePointSymbol as de,diamondSymbol as ge,diamondSymbol3D as ye,activeSourcePointSymbol as fe}from"./symbols.js";import{isNoAttachmentError as ve,getContentType as we,isTifOrMrf as be,filterOILLayerView as Fe,isSceneView as _e,isGraphic as Ie,calculateSegment as Pe,calculateDirection as Se}from"./utils.js";import Ce from"./components/ImageViewer.js";import Ve from"../../geometry/Point.js";import Ae from"../../geometry/SpatialReference.js";import Oe from"../../symbols/SimpleLineSymbol.js";import je from"../../geometry/Multipoint.js";import Me from"../../geometry/Polyline.js";import Re from"../../geometry/Polygon.js";const ke={click:"view-click",imageClick:"image-click",interactionHandles:"interaction-handles",footprintHandles:"footprint-handles"},Be=new Set(["JPG","JPEG"]),Le=/\.(\w+)$/,Ge=e=>"FA"===e;let xe=class extends(l.EventedMixin(g)){constructor(e){super(e),this.additionalFeatures=new o,this.additionalCameraLocations=new o,this.additionalFootprints=new o,this.bestFeatureAngle=0,this.bestFeatureCurrentFootprint=null,this.bestFeatureFootprint=null,this.coverageFrustums=new o,this.coveragePolygons=new o,this.currentBestFeature=null,this.currentBestFeatureLocation=null,this.currentCoverageVisible=!0,this.determineWorkflowForFeature=async(e,t,r)=>{const{currentBestFeature:i,selectedPoint:a,view:o}=this;if(o?.closePopup(),i&&a){this._initialCurrentCoverageUpdate=!0;try{await this._updatePointsAndPolygons(r),await this._loadImage(r)}catch(s){y(s)||(this.loadImageError(s),u.getLogger(this).error("#loadIImage()","error occured while loading image",s))}}},this.disabled=!1,this.displayMessage={key:"onLoadMessage",type:"info"},this.features=new o,this.isAdditionalCoverageVisible=!1,this.isAdditionalPointSourcesVisible=!1,this.layer=null,this.localPort=null,this.mapImageConversionToolState=!1,this.navigatorCurrentBestFeature=null,this.overlayedCameraLocations=new o,this.overlayedMapFeatures=new w,this.pointSources=new o,this.previousFeatureAngle=0,this.selectedPoint=null,this.shouldShowSelectedImage=!1,this.updateFootprint=async(e,t)=>{"image-loaded"===this.state&&await(this._adapter?.updateFootprint(e,t))},this.updateFootprintPanorama=async(e,t)=>{await(this._adapter?.updateFootprintPanorama(e,t))},this._adapter=null,this._highlightedFeatureHandle=null,this._imageViewer=new Ce,this._initialCurrentCoverageUpdate=!0,this._overlays=new k({listMode:"hide",internal:!0,elevationInfo:{mode:"absolute-height"}}),this._panoramicViewer=new le,this._referencePointOnGround=null,this._referencePointOnImage=null,this._sectorData=null,this._updatingHandles=new A,this._clickTask=null,this._crossSymbol=null,this.footprintExtent=null,this._featureChangedTask=null,this._openPopupTask=null,this._suitabilities=null,this._transformController=new AbortController,this._updateFootprintTask=null,this.highlight=e=>{if(!this._overlaysView)return;this.removeHighlight();const t=this.additionalFootprints.find((({attributes:{imageID:t}})=>t===Number(e)));this._highlightedFeatureHandle=t?this._overlaysView?.highlight(t):null},this.loadImageFromSource=async(e,t)=>this._updatingHandles.addPromise(this._loadImageFromSourceInternal(e,t)),this.loadImageViewer=e=>{this._imageViewer.container=e},this.loadPanoramicViewer=e=>{this._panoramicViewer.container=e},this.removeHighlight=()=>this._highlightedFeatureHandle?.remove(),this.toggleImageAttributes=()=>{m(this._openPopupTask),this._openPopupTask=a((async e=>{const{currentBestFeature:r,popupEnabled:i,layer:a,view:o}=this;if(o?.closePopup(),!(o&&r&&i&&a))return;const{attributes:s,geometry:n}=r,l=new t({geometry:n,attributes:s.toJSON(),layer:a});f(e),await o.openPopup({features:[l],location:s.location.clone()})}))},this._createViewClickHandle=()=>{if(this.removeHandles(ke.click),"disabled"===this.state||null==this.view)return;const e=this.mapImageConversionToolState&&"image-loaded"===this.state?this._mapImageConversionToolViewClickHandler:this._viewClickHandler;this.addHandles(this.view.on("click",e,ne.WIDGET),ke.click)},this._createImageClickHandle=()=>{this.removeHandles(ke.imageClick);const{mapImageConversionToolState:e,mode:t,activeViewer:r,currentBestFeature:i,footprintExtent:o}=this,s=r?.imageSize;if(!(e&&"none"!==t&&s&&o&&i))return;r.clickAction="pixel-location";let n=null;const l=b((()=>r),"pixel-location",(e=>{this.plotReferencePointOnImage(e),n?.abort(),n=a((async r=>{if(!e)return;const a=await this.getMapPoint(e,{feature:i,imageSize:s,mode:t}).then((e=>{const t=this.view?.spatialReference;return te(!t,e.spatialReference.equals(t))?e:j(e,t)}));f(r),this.plotReferencePointOnGround(a)}))}));this.addHandles(l,ke.imageClick)},this._getImageSourceFromAttachment=async(e,t,r)=>{const i=new oe({objectIds:[t]}),a=await e.queryAttachments(i,r),o=a[`${t}`]?.[0],s=o?.url;if(!s)throw new n("NoAttachmentError","no attachments found",{[e.objectIdField]:t,layer:e});return{datasetFormat:o.contentType.split("/")[1].toUpperCase(),url:s}},this._loadAdapter=async e=>{const{view:t}=this;if(t)switch(t.type){case"2d":{const{default:t}=await import("./adapters/OrientedImageryViewerViewModelAdapter2D.js");f(e),this._adapter=new t(this);break}case"3d":{const{default:t}=await import("./adapters/OrientedImageryViewerViewModelAdapter3D.js");f(e),this._adapter=new t(this);break}}else this._adapter=null},this._loadImage=async e=>{const{currentBestFeature:t,layer:r,mode:i}=this;if(this.clearGraphics(),!r||!t||"none"===i)return;const{attributes:a}=t,{imagePath:o,imageRotation:s,cameraHeading:n,cameraRoll:l,cameraPitch:c,objectId:h,cameraOrientation:p,location:m}=a,d=(l??0)+(s??0),g=m.spatialReference.isWGS84&&4!==p?.type?R(m):new Ve(m);let v=o;if(Ge(o))try{v=await this._getImageSourceFromAttachment(r,h,e)}catch(w){if(y(w))return;return ve(w)?(u.getLogger(this).error(w),void this.setMessage("noAttachment","error",`${r.objectIdField}: ${h}`)):(u.getLogger(this).error(w,{[r.objectIdField]:h,layer:r}),void this.setMessage("imageLoadError","error",`query-attachments-failed:${r.objectIdField} ${h}`))}try{await this.loadImageFromSource(v,{imageRotation:d,options:e,pitch:c,yaw:n,mode:i,cameraLocation:g}),f(e),await this.transformAndPlotSelectedLocation(e)}catch(w){y(w)||this.loadImageError(w)}},this._loadImageFromSourceInternal=async(e,t)=>{const{mode:r,imageRotation:i,options:a}=t,o="string"==typeof e,s=o?e:e.url,{origin:n,pathname:l,searchParams:c}=new URL(s);let h=o?l.match(Le)?.[1]??"":e.datasetFormat;if(!h){const e=await we(s,{...t.options});e&&(h=e.split("/")[1]),h??="UNKNOWN FORMAT"}switch(r){case"default":this._imageViewer.imageSource={datasetFormat:h.toUpperCase(),url:`${n}${l}`},this._imageViewer.customParameters=Object.fromEntries(c),this._imageViewer.imageRotation=i??0,await this._imageViewer.loadImage(a);break;case"panoramic":if(Be.has(h.toUpperCase())){const{selectedPoint:e}=this,{pitch:r,yaw:i,cameraLocation:o,viewAngle:n}=t;this._panoramicViewer.imageSource=s;let l=i??0;"number"==typeof n?l=n-l:o&&e&&(l=await q(o,e)-l),this._panoramicViewer.pitch=r??0,this._panoramicViewer.yaw=l,await this._panoramicViewer.loadImage(a)}else this.setMessage("unsupportedPanoramicImageryError","error",void 0,{datasetFormat:h});break}},this._mapImageConversionToolViewClickHandler=e=>{e.stopPropagation(),e.preventDefault(),e.mapPoint&&this.plotMapPoint(e.mapPoint)},this._viewClickHandler=e=>{this._clickTask?.abort(),this._clickTask=a((async t=>{const{pointerType:r,button:i,mapPoint:a}=e;if(("mouse"!==r||0===i)&&a)return e.stopPropagation(),e.preventDefault(),this._updatingHandles.addPromise(this.loadBestImage(a,{signal:t}))}))},this.plotSelectedPointOnImage=async(e,r)=>{if(await v(r),!e)return;const i=new Ve({...c(e)?e.toJSON():e});if("default"===this.mode)i.x-=.5,i.y=.5-i.y,i.spatialReference=this._imageViewer.imageRenderer.spatialReference.clone(),this._crossSymbol=new t({geometry:i,symbol:pe}),this._imageViewer.addGraphic(this._crossSymbol,0);else if("panoramic"===this.mode){const{imageSize:r}=this._panoramicViewer;if(!r)return;const[i,a]=r,{heading:o,pitch:s}=$(e,i,a),n=ee(o,s);this._crossSymbol=new t({geometry:new Ve(n,Ae.WebMercator),symbol:me}),this._panoramicViewer.addGraphic(this._crossSymbol,0)}},this.handleSectorClick=this.handleSectorClick.bind(this),this.searchBestImage=this.searchBestImage.bind(this),this.transformAndPlotReferencePointOnImage=this.transformAndPlotReferencePointOnImage.bind(this),this.updateSuitabilities=this.updateSuitabilities.bind(this),this.selectBestFeature=this.selectBestFeature.bind(this)}initialize(){this.addHandles([F((()=>this.view),(()=>{this.load()}),_),F((()=>this.view?.map),((e,t)=>{t?.layers.remove(this._overlays),e?.layers.add(this._overlays)}),I),F((()=>this.view?.map?.allLayers?.length),(e=>{e&&this.view?.map?.layers.reorder(this._overlays,e-1)}),I),F((()=>[this.state,this.mapImageConversionToolState,this.view]),(()=>{this._createViewClickHandle(),this._createImageClickHandle()}),_),F((()=>this.bestFeatureAngle),((e,t)=>{this.previousFeatureAngle=t??0}),_),F((()=>this.currentBestFeature),(async(e,t)=>{m(this._featureChangedTask),this._featureChangedTask=a((async r=>this.determineWorkflowForFeature.apply(this,[e,t,{signal:r}]))),await this._featureChangedTask.promise}),{sync:!0}),F((()=>this.mode),(e=>{switch(this.removeHandles(ke.interactionHandles),e){case"default":this.addHandles(F((()=>this._imageViewer.imagePointsInView),(e=>{e&&(m(this._updateFootprintTask),this._updateFootprintTask=a((async t=>{await this.updateFootprint(e,{signal:t})})))}),{..._,equals:(e,t)=>i(e,t,h)}),ke.interactionHandles);break;case"panoramic":this.addHandles(F((()=>{const{currentBestFeature:e,state:t}=this,{imageSize:r,vfov:i,hfov:a,pitch:o,yaw:s}=this._panoramicViewer;return e&&r&&"image-loading"!==t?[i,a,s,o]:null}),(e=>{if(!e||"image-loading"===this.state)return;const[t,r,i,o]=e;m(this._updateFootprintTask),this._updateFootprintTask=a((async e=>{await this.updateFootprintPanorama({verticalFieldOfView:t,horizontalFieldOfView:r,yaw:i,pitch:o},{signal:e})}))}),{..._,equals:(e,t)=>i(e,t,h)}),ke.interactionHandles)}}),_),F((()=>[this.brightness,this.contrast,this.sharpness]),(()=>{const{_imageViewer:e,brightness:t,contrast:r,mode:i,sharpness:a}=this;"default"===i&&(e.brightness=t,e.contrast=r,e.sharpness=a)}),_)])}destroy(){this._updateFootprintTask=m(this._updateFootprintTask),this._clickTask=m(this._clickTask),this.coverageFrustums.destroy(),this.coveragePolygons.destroy(),this.pointSources.destroy(),this.additionalFootprints.destroy(),this.additionalCameraLocations.destroy(),this.bestFeatureFootprint=d(this.bestFeatureFootprint),this.bestFeatureCurrentFootprint=d(this.bestFeatureCurrentFootprint),this._crossSymbol=d(this._crossSymbol),this._referencePointOnGround=d(this._referencePointOnGround),this._referencePointOnImage=d(this._referencePointOnImage),this._overlays&&this.view?.map?.remove(this._overlays),this._overlays.destroy()}get activeLayer(){return s(u.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer}set activeLayer(e){s(u.getLogger(this),"activeLayer",{replacement:"layer"}),this.layer=e}get activeViewer(){const{_imageViewer:e,_panoramicViewer:t,mode:r}=this;switch(r){case"default":return e;case"panoramic":return t;default:return null}}get brightness(){return this._get("brightness")??0}set brightness(e){this._set("brightness",p(e,-10,10))}get contrast(){return this._get("contrast")??0}set contrast(e){this._set("contrast",p(e,-10,10))}get featureCount(){return this.features?.length??0}get imageGalleryEnabled(){return be(this.currentBestFeature?.attributes.imagePath.trim())}get imageLoaded(){return s(u.getLogger(this),"imageLoaded",{replacement:'Use OrientedImageryViewer.state === "image-loaded"',version:"4.29",warnOnce:!0}),"image-loaded"===this.state}get invalidCameraHeading(){return this.currentBestFeature?.attributes?.cameraHeading===ce}get imagePointsInView(){const{mode:e,_imageViewer:t}=this;return"default"===e?t.imagePointsInView:null}get layerView(){const{layer:e,view:t}=this;if(e&&t)return t.allLayerViews.find(Fe(e))}get layerFloorFilterClause(){const{layerView:e}=this;return e?ae(e):null}get mode(){const e=this.currentBestFeature?.attributes;if(!e)return"none";const{horizontalFieldOfView:t,isSpherical:r}=e;return 360===t||r?"panoramic":"default"}get popupEnabled(){return!0===this.layer?.popupEnabled}get referencePoint(){return this._referencePointOnGround?.geometry}get sectorData(){const{_sectorData:e}=this;return e?he.map((t=>e[t])):null}get sharpness(){return this._get("sharpness")??0}set sharpness(e){this._set("sharpness",p(e,0,1))}get state(){const{mode:e,disabled:t}=this;if(t)return"disabled";if(!this.isFulfilled())return"loading";if(this.isRejected())return"error";if(this._updatingHandles.updating)return"image-loading";if("error"===this.displayMessage?.type)return"image-load-error";switch(e){case"default":return this._imageViewer.state;case"panoramic":return this._panoramicViewer.state}return"ready"}get thumbnails(){const{features:e}=this;return e?new o(e.map((({attributes:{imagePath:e,objectId:t,cameraRoll:r,imageRotation:i}})=>{const a=e.trim();return be(a)?{url:a,objectId:t,rotation:(r??0)+(i??0)}:null})).filter(r)):null}set view(e){this._set("view",e)}get _overlaysView(){return this.view?.layerViews.find((({layer:e})=>e===this._overlays))}filterByFootprints(e,t){const r=[],i=[],a=[];return e.forEach((e=>{const{layer:{coveragePercent:o},attributes:s}=e;let n;const l=S(e.geometry.spatialReference);s.cameraHeight/=l,s.farDistance/=l,s.nearDistance/=l,T(s.elevationSource)&&(s.elevationSource.constantElevation/=l);const{polygon:c,frustum:h}=G(s);if(n=c.clone(),s.isInspection&&(n=x(s)),o&&(n=E(n,o)),H(n,t)){a.push(e);const{geometry:t,objectId:o,cameraHeight:n,cameraHeading:l}=s,u=t.clone();u.z=n,u.imageID=o,this.pointSources.push(u),l!==ce&&(r.push(c),h&&i.push(h))}})),{features:a,polygons:r,frustums:i}}handleSectorClick(e){if(isNaN(e))return;const t=this._sectorData?.[he[e]];t?.length&&this._updateCurrentBestFeature(t.at(0))}handleFeatureClick(e){const{sector:t,featureIndexInSector:r}=e;if(isNaN(r))return;const i=this._sectorData?.[t];i?.length&&this._updateCurrentBestFeature(i.at(r))}async load(e){return this.addResolvingPromise(this._loadAdapter(e).catch((e=>{if(!y(e))throw e}))),this}async loadBestImage(e,t){return this.view?.closePopup(),this.displayMessage=null,this.selectedPoint=e.spatialReference.isGeographic?R(e):e.clone(),this.features.removeAll(),this.currentBestFeature=null,this.additionalFeatures.removeAll(),this.additionalFootprints.removeAll(),this.additionalCameraLocations.removeAll(),this.bestFeatureCurrentFootprint=d(this.bestFeatureCurrentFootprint),this._overlays?.removeAll(),this._fetchFeaturesWithController(e,t)}loadImageError(e){u.getLogger(this).error("oriented-imagery-viewer:load-image",e),this.setMessage("imageLoadError","error",e.message)}async overlayCameraLocations(e){const{activeViewer:r,currentBestFeature:i,overlayedCameraLocations:a,layer:o,mode:s,state:n}=this,l=r?.imageSize;if(!l||!i||!o||"none"===s||n.includes("loading"))return;const{polygon:c}=G(i.attributes);if(r.removeManyGraphics(a.toArray()),a.removeAll(),e){const{features:e}=await o.queryFeatures({where:`${o.objectIdField} <> ${i.attributes.objectId}`,geometry:c,returnGeometry:!0,outFields:[o.objectIdField]}),n=await Promise.all(e.map((async e=>{const{attributes:r,geometry:a}=e,o=await this.getPixels(a,{feature:i,imageSize:l,mode:s}),n=de.clone();return n.outline=new Oe({color:[0,0,0],width:1}),new t({attributes:r,symbol:n,geometry:o})})));a.addMany(n),r.addManyGraphics(a.toArray())}}overlayGraphicsOnImage(e,t){this.overlayedMapFeatures.set(e,t),this.activeViewer?.addManyGraphics(t.toArray())}async overlayMapFeatures(e,i=!1){const{activeViewer:a,currentBestFeature:s,mode:n,state:l}=this,c=a?.imageSize;if(!c||!s||"none"===n||l.includes("loading"))return;const{polygon:h}=G(s.attributes),{features:u}=await e.queryFeatures({geometry:h,returnGeometry:!0,outFields:[e.objectIdField]}),p=new o((await Promise.all(u.map((async r=>{const{attributes:a,geometry:o}=r,l=r.symbol?.clone()??e.renderer?.getSymbol(r).clone();switch(o?.type){case"point":{const r=await this.getPixels(o,{feature:s,imageSize:c,mode:n});return new t({attributes:a,layer:e,symbol:l,geometry:r,visible:e.visible&&i})}case"polygon":{const{rings:r,spatialReference:h}=o,u=r.map((e=>e.map((([e,t,r])=>new Ve({x:e,y:t,z:r,spatialReference:h}))))),p=await Promise.all(u.map((async e=>this.getPixels(e,{feature:s,imageSize:c,mode:n}).then((e=>e.map(J))))));return new t({attributes:a,layer:e,symbol:l,geometry:new Re({rings:p,spatialReference:Ae.WebMercator}),visible:e.visible&&i})}case"polyline":{const{paths:r,spatialReference:h}=o,u=r.map((e=>e.map((([e,t,r])=>new Ve({x:e,y:t,z:r,spatialReference:h}))))),p=await Promise.all(u.map((async e=>this.getPixels(e,{feature:s,imageSize:c,mode:n}).then((e=>e.map(J))))));return new t({attributes:a,layer:e,symbol:l,geometry:new Me({paths:p,spatialReference:Ae.WebMercator}),visible:e.visible&&i})}case"multipoint":{const{points:r,spatialReference:h}=o,u=r.map((([e,t,r])=>new Ve({x:e,y:t,z:r,spatialReference:h}))),p=await this.getPixels(u,{feature:s,imageSize:c,mode:n}).then((e=>e.map(J)));return new t({attributes:a,layer:e,symbol:l,geometry:new je({points:p,spatialReference:Ae.WebMercator}),visible:e.visible&&i})}}return null})))).filter(r));this.overlayGraphicsOnImage(`${e.id}`,p)}async getPixels(e,t){const{imageSize:r,mode:i}=t,a=(await this.worldToImage(Array.isArray(e)?e:[e])).map((e=>{if("default"===i)return new Ve({x:e.x-.5,y:.5-e.y,spatialReference:Ae.WebMercator});const[t,a]=r,{heading:o,pitch:s}=$(e,t,a),n=ee(o,s);return new Ve(n,Ae.WebMercator)}));return Array.isArray(e)?a:a[0]}async getMapPoint(e,t){const{feature:r,mode:i,imageSize:a}=t,{elevationSample:o,attributes:s}=r,{elevationSource:n,location:l,elevation:c,cameraHeight:h}=s;let u=l.clone();u.spatialReference.isGeographic&&(u=await j(u,Ae.WebMercator));const p=await K(c??(l.z??0)-h,{elevationSample:o,elevationSource:n,extent:this.footprintExtent});let m;if("elevationSample"in p&&Q(p.elevationSample)&&(r.elevationSample=p.elevationSample),"default"===i){const t=Z(s,a[0],a[1]);m=await z(Array.isArray(e)?e:[e],{...t,cameraLocation:u},p)}else{const t=X(s,a[0],a[1]);m=await U(Array.isArray(e)?e:[e],{...t,cameraLocation:u},p)}return Array.isArray(e)?m:m[0]}async plotMapPoint(e){return this.plotReferencePoint(e),this.transformAndPlotReferencePointOnImage({feature:this.currentBestFeature,selectedLocation:e,options:{signal:this._transformController?.signal}})}plotReferencePointOnGround(e){this._referencePointOnGround&&(this._overlays?.remove(this._referencePointOnGround),this._referencePointOnGround.destroy()),null!=e&&(this._referencePointOnGround=new t({geometry:new Ve({...e.toJSON()}),symbol:ge}),this.view?this._overlays?.add(this._referencePointOnGround):this.emit("plot-ground-point",{data:{point:this._referencePointOnGround?.geometry}}))}plotReferencePointOnImage(e){if("image-loaded"===this.state)switch(this.clearReferencePointOnImage(),this.mode){case"default":{const r=c(e)?e.toJSON():e;r.x-=.5,r.y=.5-r.y,this._referencePointOnImage=new t({geometry:new Ve({spatialReference:this._imageViewer.imageRenderer.spatialReference.clone(),...r}),symbol:ge}),this._imageViewer.addGraphic(this._referencePointOnImage,0);break}case"panoramic":{const{imageSize:r}=this._panoramicViewer;if(!r)return;const[i,a]=r,{heading:o,pitch:s}=$(e,i,a),n=ee(o,s);this._referencePointOnImage=new t({geometry:new Ve(n,Ae.WebMercator),symbol:ye}),this._panoramicViewer.addGraphic(this._referencePointOnImage,0);break}}}removeAllOverlayMapFeatures(){this.overlayedMapFeatures.forEach((e=>{this._imageViewer.removeManyGraphics(e.toArray())})),this.overlayedMapFeatures.clear()}removeOverlayedGraphicsOnImage(e){const t=this.overlayedMapFeatures.get(e);t?.length&&(this.activeViewer?.removeManyGraphics(t.toArray()),this.overlayedMapFeatures.delete(e))}resetImage(){switch(this.setMessage("onLoadMessage","info"),this.mode){case"default":this._imageViewer.clearImage(),this._imageViewer.clearGraphics();break;case"panoramic":this._panoramicViewer.clearGraphics()}this._clickTask=m(this._clickTask)}async searchBestImage(e,t){try{const r=await B(e,t);r&&await this._processFeatureResponse(r,e.point,{signal:t?.signal})}catch(r){y(r)||(this.setMessage("imageLoadError","error",r.message),u.getLogger(this).error("error occurred while finding best image",r))}}selectBestFeature(e){this.currentBestFeature=this.features?.find((({attributes:t})=>t.objectId===Number(e)))}setAdditionalCameraLocationsVisibility(e){this.additionalCameraLocations.forEach((t=>{t.visible=e}))}setAdditionalCoverageVisibility(e){this.additionalFootprints.forEach((t=>{t.visible=e}))}setCurrentCoverageVisibility(e){this.bestFeatureCurrentFootprint&&(this.bestFeatureCurrentFootprint.visible=e),this.currentBestFeatureLocation&&(this.currentBestFeatureLocation.visible=e)}setMapImageConversionToolState(e){this.mapImageConversionToolState=e}toggleAllOverlayMapFeatures(e){this.overlayedMapFeatures.forEach((t=>{this._toggleVisiblity(t,e)}))}toggleOverlayMapFeatures(e,t){const r=this.overlayedMapFeatures.get(e);r&&this._toggleVisiblity(r,t)}async transformAndPlotReferencePointOnImage(e){const{selectedLocation:t,options:r}=e;let i=!1,a=!1;const o=this.bestFeatureFootprint?.geometry;switch(o?.type){case"polygon":{const e=t.spatialReference.equals(o.spatialReference)?t:await j(t,o.spatialReference);i=o.contains(e);break}case"mesh":{const e=t.spatialReference.equals(o.spatialReference)?t:await j(t,o.spatialReference);a=o.extent.contains(e);break}}if(!i&&!a)return void this.clearReferencePointOnImage();const s=await this.worldToImage(t,r);if(s)return f(r),this.plotReferencePointOnImage(s),{x:s.x,y:s.y};this.clearReferencePointOnImage()}updateSuitabilities(e){e.sort(((e,t)=>e.suitability-t.suitability)),this._suitabilities=e;const t=this._suitabilities.map((({feature:e})=>e));this._initialCurrentCoverageUpdate=!0,this._updateFeatures(t),this._groupFeaturesBySectors()}async _fetchFeatures(e,t){if(!this.view)return;const r=this.layer;if(r){const i={include:r},a=this.view.toScreen(e);if(!a)return;const o=await this.view.hitTest(a,i);return this._processHitTestResults(r,o,t)}}async _fetchFeaturesWithController(e,t){try{await this._fetchFeatures(e,t)}catch(r){if(y(r))return;this.setMessage("imageLoadError","error"),u.getLogger(this).error("error occurred while fetching features",r)}}_groupFeaturesBySectors(){const{_suitabilities:e,additionalFeatures:t,currentBestFeature:r,features:i,invalidCameraHeading:a}=this;if(!e||!t||!r||!i||a)return void(this._sectorData=null);this._sectorData={};for(const c of he)this._sectorData[c]=new o;const s=e.map(((e,t)=>({...e,featureIndex:t})));s.sort(((e,t)=>e.trueSuitability-t.trueSuitability));const n=s.map((({distance:e})=>e)),l=Math.max(...n);s.forEach((e=>{const{distance:t,angle:r,featureIndex:a}=e,o=t/l*ue[2],s=Pe(t,l),n=Se(r);if(!this._sectorData)return;const c=ue[3]+o*Math.sin(r*Math.PI/180),h=ue[3]+o*Math.cos(r*Math.PI/180);let u;const p=i.at(a),m=p===this.currentBestFeature,d=this.currentBestFeature?.attributes.cameraPitch&&this.currentBestFeature?.attributes.cameraPitch<5;if(m&&d)u=-90;else{const e=c-ue[3],t=h-ue[3],r=t/Math.sqrt(e**2+t**2);let i=180*Math.acos(r)/Math.PI;(e<0&&t<0||e<0&&t>0)&&(i*=-1),u=i}const g=""===s?n:`${s}_${n}`;m&&(u===this.bestFeatureAngle?this.previousFeatureAngle=u:this.bestFeatureAngle=u,this.navigatorCurrentBestFeature=d?null:{x:c,y:h,direction:n});const y=this._sectorData[g];y.add({angle:r,featureIndex:a,x:c,y:h,objectID:p.attributes.objectId,sector:g,featureIndexInSector:y.length})}))}async _processFeatureResponse(e,t,r){const{features:i}=e;if(!i?.length)return this.setMessage("noImageError","error"),void(this.currentBestFeature=null);this.coveragePolygons.removeAll(),this.coverageFrustums.removeAll(),this.pointSources.removeAll();const{features:a,polygons:o,frustums:s}=this.filterByFootprints(i,t);if(!a.length)return this.setMessage("noImageError","error"),void(this.currentBestFeature=null);let n;if(this.coveragePolygons.addMany(o),this.coverageFrustums.addMany(s),o[0]){let e=new Re({spatialReference:o[0].spatialReference});for(const r of o)e=await O(e,r);const t=[];for(const{geometry:r}of a)e.contains(r)||t.push([r.x,r.y]);if(t.sort(((e,t)=>+M([e,t]))),e.addRing(t),this.footprintExtent=se(e.extent,2,2),this.view?.supportsGround)try{n=await this.view.map.ground.createElevationSampler(this.footprintExtent,r)}catch(l){y(l)||u.getLogger(this).error(l)}}if((n||a[0].attributes.elevationSource)&&this.footprintExtent){const e=a[0].attributes.elevationSource;D(e)&&!n&&(n=await W({extent:this.footprintExtent,lod:e.lod,url:e.url,rasterFunction:e.rasterFunction}));const r=await K((a[0].attributes.location.z??0)-a[0].attributes.cameraHeight,{elevationSample:n,elevationSource:e,extent:this.footprintExtent}),[i,...o]=await N([t,...a.map((e=>e.attributes.geometry.clone()))],r);a[0].elevationSample=n??r.elevationSample,t.elevation=i.z,a.forEach(((e,t)=>{e.attributes.elevation=o[t].z}))}a[0].elevationSample&&a.forEach((e=>{e.elevationSample=a[0].elevationSample})),this._suitabilities=L({features:a,selectedPoint:t,camera:_e(this.view)?this.view.camera:null,currentImage:this.currentBestFeature}),this.updateSuitabilities(this._suitabilities)}async _processHitTestResults(e,t,r){const{screenPoint:i,results:[a]}=t,o="graphic"===a?.type&&this.shouldShowSelectedImage,s=a?.mapPoint??this.view?.toMap(i);if(!s)return;const{layerFloorFilterClause:n}=this,l=P("1=1",P(e.definitionExpression,n)),c=s.spatialReference.isGeographic?1:S(s.spatialReference),h={layerInstanceOrURL:e,point:s,queryParams:{where:l,maximumDistance:e.maximumDistance?e.maximumDistance/c:void 0,objectIds:o?[a.graphic.getAttribute(e.objectIdField)]:void 0}};await this.searchBestImage(h,r)}_toggleVisiblity(e,t){e.forEach((e=>{e.visible=t}))}_updateFeatures(e){if(!e.length)return this.currentBestFeature=null,void this.additionalFeatures.removeAll();this.features.removeAll(),this.features.addMany(e),e.length>1?this.additionalFeatures.addMany(e.slice(1)):this.additionalFeatures.removeAll(),this.currentBestFeature=e[0]}async _updatePointsAndPolygons(e){const{pointSources:r,currentBestFeature:i,currentCoverageVisible:a,isAdditionalPointSourcesVisible:o}=this;if(i&&(this.additionalFootprints.removeAll(),this.additionalCameraLocations.removeAll(),this.bestFeatureCurrentFootprint&&(this.bestFeatureCurrentFootprint.destroy(),this.bestFeatureCurrentFootprint=null,this.bestFeatureFootprint=null),!this.invalidCameraHeading)){await(this._adapter?.createFootprints(e)),f(e);for(const e of r)e.imageID===i.attributes.objectId?this.currentBestFeatureLocation=new t({attributes:{imageID:e.imageID},geometry:e,symbol:fe,visible:a}):this.additionalCameraLocations.push(new t({attributes:{imageID:e.imageID},geometry:e,symbol:de,visible:o}))}}_updateCurrentBestFeature(e){if(!e)return;this.currentBestFeature=this.features?.at(e.featureIndex);const t=this.currentBestFeature?.attributes.cameraPitch&&this.currentBestFeature?.attributes.cameraPitch<5;let r;if(t)r=-90;else{const t=e.x-ue[3],i=e.y-ue[3],a=i/Math.sqrt(t**2+i**2);let o=180*Math.acos(a)/Math.PI;(t<0&&i<0||t<0&&i>0)&&(o*=-1),r=o}r===this.bestFeatureAngle?this.previousFeatureAngle=r:this.bestFeatureAngle=r,this.navigatorCurrentBestFeature=t?null:{x:e.x,y:e.y,direction:e.sector.includes("_")?e.sector.split("_")[1]:e.sector}}clearGraphics(){this._imageViewer.clearGraphics(),this._panoramicViewer.clearGraphics()}clearReferencePointOnImage(){this._referencePointOnImage&&(this._imageViewer.removeGraphic(this._referencePointOnImage),this._panoramicViewer.removeGraphic(this._referencePointOnImage),this._referencePointOnImage=d(this._referencePointOnImage))}plotReferencePoint(e){"mapPoint"in e?this.plotReferencePointOnGround(e.mapPoint):this.plotReferencePointOnGround(e)}setMessage(e,t,r,i){this.displayMessage={key:e,type:t,data:r,map:i}}async transformAndPlotSelectedLocation(e){const{currentBestFeature:t,invalidCameraHeading:r,selectedPoint:i,state:a}=this;if(this._crossSymbol&&(this._panoramicViewer.removeGraphic(this._crossSymbol),this._imageViewer.removeGraphic(this._crossSymbol),this._crossSymbol=d(this._crossSymbol)),!i||!t||"image-loaded"!==a||r)return;let o;try{o=await this.worldToImage(i,e),f(e),await this.plotSelectedPointOnImage(o,e)}catch(s){y(s)||u.getLogger(this).error("failed to transform map point to pixel, cross symbol will not be plotted on image",{error:s,selectedPoint:i,feature:t})}}async worldToImage(e,t){const{footprintExtent:r}=this,{imageSize:i}=this.activeViewer;if("none"===this.mode||!this.currentBestFeature||!i||!r)return;const{attributes:{location:a,elevationSource:o,cameraHeading:s,elevation:n,cameraHeight:l},elevationSample:c}=this.currentBestFeature;let h=a.clone();const u=await K(n??(a.z??0)-l,{elevationSample:c,elevationSource:o});this.currentBestFeature.elevationSample=u.elevationSample;const p=Array.isArray(e)?e:[e];let m,d=await Promise.all(p.map((e=>new Promise((t=>{if(!e.hasZ)return t(N(e,u));t(e)})))));if(a.spatialReference.isGeographic&&(h=await j(h,Ae.WebMercator,t)),d=await Promise.all(d.map((async e=>h.spatialReference.equals(e.spatialReference)?e:await j(e,h.spatialReference,t)))),f(t),"panoramic"===this.mode)m=re(d,{imageHeight:i[1],imageWidth:i[0],cameraHeading:s,cameraLocation:h});else{const e=Y(this.currentBestFeature.attributes,i[0],i[1]);m=ie(d,{...e,cameraLocation:h})}return Array.isArray(e)?m:m[0]}updateCurrentCoveragePolygon(e){const{additionalFootprints:r,additionalCameraLocations:i,currentBestFeature:a,currentBestFeatureLocation:o,currentCoverageVisible:s,selectedPoint:n,view:l,_adapter:c}=this,{attributes:{objectId:h},elevationSample:u}=a;if(this._initialCurrentCoverageUpdate){if(this._overlays?.removeAll(),this._initialCurrentCoverageUpdate=!1,this.bestFeatureCurrentFootprint=d(this.bestFeatureCurrentFootprint),e&&!this.invalidCameraHeading&&(e.visible=s,this.bestFeatureCurrentFootprint=e),l){const e=[...r,...i,this.bestFeatureCurrentFootprint,o].filter(Ie);l.supportsGround&&u&&c?.updateGroundElevation&&c.updateGroundElevation(e,u),n&&e.push(new t({geometry:n.clone(),symbol:pe.clone(),attributes:{imageID:h}})),this._overlays.graphics.addMany(e)}}else if(l){if(this.invalidCameraHeading)return;this.bestFeatureCurrentFootprint&&(this._overlays?.remove(this.bestFeatureCurrentFootprint),this.bestFeatureCurrentFootprint=d(this.bestFeatureCurrentFootprint));const t=this.bestFeatureCurrentFootprint&&this._overlays?this._overlays.graphics.indexOf(this.bestFeatureCurrentFootprint):-1;e&&(this.bestFeatureCurrentFootprint=e,l?.supportsGround&&u&&c?.updateGroundElevation&&c.updateGroundElevation([e],u),e.visible=this.currentCoverageVisible,this._overlays?.graphics.add(this.bestFeatureCurrentFootprint,t>=0?t:this._overlays.graphics.length-1))}}};e([C()],xe.prototype,"activeLayer",null),e([C({readOnly:!0})],xe.prototype,"activeViewer",null),e([C()],xe.prototype,"additionalFeatures",void 0),e([C({type:o.ofType(t)})],xe.prototype,"additionalCameraLocations",void 0),e([C({type:o.ofType(t)})],xe.prototype,"additionalFootprints",void 0),e([C()],xe.prototype,"bestFeatureAngle",void 0),e([C()],xe.prototype,"bestFeatureCurrentFootprint",void 0),e([C({type:t})],xe.prototype,"bestFeatureFootprint",void 0),e([C({type:Number})],xe.prototype,"brightness",null),e([C({type:Number})],xe.prototype,"contrast",null),e([C()],xe.prototype,"coverageFrustums",void 0),e([C()],xe.prototype,"coveragePolygons",void 0),e([C()],xe.prototype,"currentBestFeature",void 0),e([C()],xe.prototype,"currentBestFeatureLocation",void 0),e([C()],xe.prototype,"currentCoverageVisible",void 0),e([C({json:{write:!1}})],xe.prototype,"determineWorkflowForFeature",void 0),e([C()],xe.prototype,"disabled",void 0),e([C()],xe.prototype,"displayMessage",void 0),e([C({readOnly:!0})],xe.prototype,"featureCount",null),e([C()],xe.prototype,"features",void 0),e([C({readOnly:!0})],xe.prototype,"imageGalleryEnabled",null),e([C({readOnly:!0})],xe.prototype,"imageLoaded",null),e([C({readOnly:!0})],xe.prototype,"invalidCameraHeading",null),e([C()],xe.prototype,"imagePointsInView",null),e([C()],xe.prototype,"isAdditionalCoverageVisible",void 0),e([C()],xe.prototype,"isAdditionalPointSourcesVisible",void 0),e([C()],xe.prototype,"layer",void 0),e([C()],xe.prototype,"layerView",null),e([C({readOnly:!0})],xe.prototype,"layerFloorFilterClause",null),e([C({type:Number})],xe.prototype,"localPort",void 0),e([C()],xe.prototype,"mapImageConversionToolState",void 0),e([C({readOnly:!0,value:"none"})],xe.prototype,"mode",null),e([C()],xe.prototype,"navigatorCurrentBestFeature",void 0),e([C({type:o.ofType(t)})],xe.prototype,"overlayedCameraLocations",void 0),e([C()],xe.prototype,"overlayedMapFeatures",void 0),e([C()],xe.prototype,"pointSources",void 0),e([C({readOnly:!0})],xe.prototype,"popupEnabled",null),e([C()],xe.prototype,"previousFeatureAngle",void 0),e([C()],xe.prototype,"referencePoint",null),e([C({readOnly:!0})],xe.prototype,"sectorData",null),e([C()],xe.prototype,"selectedPoint",void 0),e([C({type:Number})],xe.prototype,"sharpness",null),e([C()],xe.prototype,"shouldShowSelectedImage",void 0),e([C({readOnly:!0})],xe.prototype,"state",null),e([C({readOnly:!0})],xe.prototype,"thumbnails",null),e([C()],xe.prototype,"updateFootprint",void 0),e([C()],xe.prototype,"updateFootprintPanorama",void 0),e([C({value:null})],xe.prototype,"view",null),e([C()],xe.prototype,"_adapter",void 0),e([C()],xe.prototype,"_highlightedFeatureHandle",void 0),e([C()],xe.prototype,"_imageViewer",void 0),e([C()],xe.prototype,"_initialCurrentCoverageUpdate",void 0),e([C()],xe.prototype,"_overlays",void 0),e([C({readOnly:!0})],xe.prototype,"_overlaysView",null),e([C()],xe.prototype,"_panoramicViewer",void 0),e([C()],xe.prototype,"_referencePointOnGround",void 0),e([C()],xe.prototype,"_referencePointOnImage",void 0),e([C()],xe.prototype,"_sectorData",void 0),e([C({readOnly:!0})],xe.prototype,"_updatingHandles",void 0),e([C()],xe.prototype,"footprintExtent",void 0),xe=e([V("esri.widgets.OrientedImageryViewer.OrientedImageryViewerViewModel")],xe);const Ee=xe;export{Ee as default};
