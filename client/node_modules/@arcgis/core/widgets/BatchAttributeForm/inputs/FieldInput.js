/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{property as t}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{isTextInput as i}from"../../../form/support/formUtils.js";import{isNumericField as s,isStringField as o,isTimeOnlyField as u}from"../../../layers/support/fieldUtils.js";import{isAnyDateField as l}from"../../../smartMapping/support/utils.js";import{EditableInput as a}from"./EditableInput.js";import{differentValuesString as n}from"./support/inputUtils.js";import{FieldInputDataTypes as p}from"../../support/forms/formUtils.js";let d=class extends a{constructor(e){super(e),this.group=null,this.type="field",this.userHasChangedValue=!1}get dataType(){const{field:e}=this;return s(e)?p.Number:o(e)?p.Text:l(e)||u(e)?p.Date:p.Unsupported}get distinctValues(){if(this.featuresHaveSameValue)return[this.value];const e=new Set;for(const t of this.features)e.add(t.getAttribute(this.fieldName));return Array.from(e)}get editable(){return!!this.field.editable&&(this._evaluatedEditableExpression??!0)}get featuresHaveSameValue(){const{fieldName:e}=this,t=this.features.at(0)?.getAttribute(e);return this.features.every((r=>r.getAttribute(e)===t))}get field(){return this.template.field}get fieldName(){return this.field.name}get isSubtypeField(){return this.layers.some((e=>{if(e&&"subtypeField"in e){const{subtypeField:t,fieldsIndex:r}=e;return(r.get(t)?.name??t)===this.fieldName}return!1}))}get maxLength(){if(this.dataType===p.Date)return;const e=this.field.length,{input:t}=this.template;if(!t||!i(t))return e;const r=t.maxLength;return"number"!=typeof r?e:"number"!=typeof e?r:Math.min(e,r)}get minLength(){if(this.dataType===p.Date)return;const{input:e}=this.template;if(!e||!i(e))return;const t=e.minLength;if("number"!=typeof t)return;const r=this.field.length;return"number"==typeof r&&t>r?void 0:t}get required(){if(!this.editable)return!1;if(!this.field.nullable||this.isSubtypeField)return!0;const e=this.visible&&!1!==this.group?.visible,t=this._evaluatedRequiredExpression;return!(!e||null==t)&&t}get valid(){return!0}get value(){return this.featuresHaveSameValue?this.features.at(0)?.getAttribute(this.fieldName)??null:n}get visible(){return!!this.field.visible&&this._visible}get _evaluatedRequiredExpression(){return null}async setValueFromExpressionManager(e){}async setValueFromUser(e){this.userHasChangedValue=!0,this._setValue(e)}_setValue(e){const{fieldName:t}=this;for(const r of this.features)r.setAttribute(t,e)}};e([t()],d.prototype,"dataType",null),e([t()],d.prototype,"distinctValues",null),e([t()],d.prototype,"editable",null),e([t()],d.prototype,"featuresHaveSameValue",null),e([t()],d.prototype,"field",null),e([t()],d.prototype,"fieldName",null),e([t()],d.prototype,"group",void 0),e([t()],d.prototype,"isSubtypeField",null),e([t()],d.prototype,"maxLength",null),e([t()],d.prototype,"minLength",null),e([t()],d.prototype,"required",null),e([t({readOnly:!0})],d.prototype,"type",void 0),e([t()],d.prototype,"userHasChangedValue",void 0),e([t()],d.prototype,"valid",null),e([t()],d.prototype,"value",null),e([t()],d.prototype,"visible",null),d=e([r("esri.widgets.BatchAttributeForm.inputs.FieldInput")],d);export{d as FieldInput};
