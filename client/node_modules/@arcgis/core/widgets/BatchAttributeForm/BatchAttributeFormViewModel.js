/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{createTask as t}from"../../core/asyncUtils.js";import r from"../../core/Collection.js";import o from"../../core/Error.js";import s from"../../core/Evented.js";import{getOrCreateMapValue as a}from"../../core/MapUtils.js";import{abortMaybe as i}from"../../core/maybe.js";import{throwIfAborted as n}from"../../core/promiseUtils.js";import p from"../../core/ReactiveMap.js";import{on as d,watch as m,sync as u}from"../../core/reactiveUtils.js";import{property as l}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as h}from"../../core/accessorSupport/decorators/subclass.js";import{UpdatingHandles as c}from"../../core/support/UpdatingHandles.js";import{createReactiveGraphic as F}from"./batchAttributeFormUtils.js";import{ArcadeExecutorProvider as f}from"./expressions/ArcadeExecutorProvider.js";import{BatchFormInputs as y}from"./inputs/BatchFormInputs.js";import{createBatchFormInputsFromBatchFormTemplate as v}from"./inputs/support/createBatchFormInputs.js";import g from"./templates/BatchFormTemplate.js";import{createBatchFormTemplate as _}from"./templates/support/createBatchFormTemplate.js";let w=class extends s.EventedAccessor{constructor(e){super(e),this.activeFeatureIndex=-1,this.disabled=!1,this.editType="NA",this.features=new r,this.userHasChangedValues=!1,this._arcadeExecutorProvider=new f,this._activeFormInputsByFieldName=new Map,this._emptyForm=new y({inputs:new r}),this._emptyFormTemplate=new g({elements:[]}),this._featureFormMap=new Map,this._prepareTask=null,this._updatingHandles=new c,this._layerTemplateMap=new p,this._workingFeatures=new r,this.sharedForm=this._emptyForm,this.sharedFormTemplate=this._emptyFormTemplate}initialize(){this.addHandles([d((()=>this.features),"after-changes",(()=>this._prepare()),{onListenerAdd:()=>this._prepare(),sync:!0}),m((()=>this.activeForm),(()=>this._activeFormInputsByFieldName.clear()),u)]),this._prepare()}destroy(){this._prepareTask=i(this._prepareTask),this._workingFeatures.destroyAll(),this._emptyForm.destroy(),this._emptyFormTemplate.destroy()}get activeFeature(){const e=this.activeFeatureIndex;return e<0?null:this.features.at(e)}get activeForm(){if("batch"===this.mode)return this.sharedForm;const e=this._workingFeatures.at(this.activeFeatureIndex);if(!e)return this._emptyForm;const t=this._featureFormMap.get(e);if(t)return t;const r=this._makeBatchFormInputsForFeature(e);return r!==this._emptyForm&&this._featureFormMap.set(e,r),r}get activeFormIsValid(){return!0}get allHiddenErrors(){const e=this.hiddenIndividualFormErrors,t=this.hiddenSharedFormErrors;return Array.from(new Set([...e,...t]))}get hiddenIndividualFormErrors(){if("batch"===this.mode)return[];const e=[];return this.activeForm.inputs.forEach((t=>{!1!==t.visible||t.valid||e.push(t)})),e}get hiddenSharedFormErrors(){const e=[];return this.sharedForm?.inputs.forEach((t=>{!1!==t.visible||t.valid||e.push(t)})),e}get status(){const e=this._prepareTask;return null==e?"not-loaded":e.finished?null!=e.error?"failed":"loaded":"loading"}get submittable(){return this.valid,!0}get updating(){return this._updatingHandles.updating}get valid(){return!0}get layers(){const e=new Set;return this.features.forEach((t=>{const r=t.sourceLayer??t.layer;e.add(r)})),Array.from(e)}get mode(){return this.activeFeatureIndex>-1?"single":"batch"}getValues(e){const t=this._workingFeatures.find((({original:t})=>t===e));if(!t)throw new o("feature-not-found","The given feature is not present in the BatchAttributeForm");return{...t.attributes}}setFieldInputValue(e,t){e.setValueFromUser(t),this.emit("value-change",{features:e.features.toArray().map((e=>e.original)),fieldName:e.fieldName,name:"value-change",value:t})}setValue(e,t){const r=a(this._activeFormInputsByFieldName,e,(()=>{const t=this.activeForm.allFieldInputs.find((t=>t.fieldName===e));if(!t)throw new o("no-FieldInput-found",`Cannot set the value of field '${e}' because there is no FieldInput representing it`);return t}));this.setFieldInputValue(r,t)}validate(){return!1}getCodedValueOptions(e){return e.codedValues.map((({name:e,code:t})=>({name:e,value:t})))}_makeBatchFormInputsForFeature(e){const t=this._layerTemplateMap.get(e.layer);return t?v(t,new r([e])):this._emptyForm}async _prepare(){this._prepareTask=i(this._prepareTask),this._updateWorkingFeatures();const{layers:e}=this;if(0===e.length)return;const r=t((async t=>{n(t);const r=new Map;for(const s of e){const e=await _(s,{arcadeExecutorProvider:this._arcadeExecutorProvider});this._layerTemplateMap.set(s,e);for(const t of e.elements){const{elementId:e}=t;r.has(e)?r.get(e).foldIn(t):r.set(e,t.clone())}}const o=new g({elements:Array.from(r.values())});this.sharedFormTemplate=o,this.sharedForm=v(o,this._workingFeatures)}));this._updatingHandles.addPromise(r.promise),this._prepareTask=r}_updateWorkingFeatures(){this._workingFeatures.destroyAll();const{features:e}=this;0!==e.length&&this._workingFeatures.addMany(e.map(F))}};e([l({readOnly:!0})],w.prototype,"activeFeature",null),e([l()],w.prototype,"activeFeatureIndex",void 0),e([l({readOnly:!0})],w.prototype,"activeForm",null),e([l()],w.prototype,"activeFormIsValid",null),e([l()],w.prototype,"disabled",void 0),e([l()],w.prototype,"editType",void 0),e([l()],w.prototype,"features",void 0),e([l()],w.prototype,"hiddenIndividualFormErrors",null),e([l()],w.prototype,"updating",null),e([l()],w.prototype,"valid",null),e([l()],w.prototype,"layers",null),e([l()],w.prototype,"mode",null),e([l()],w.prototype,"sharedForm",void 0),e([l()],w.prototype,"sharedFormTemplate",void 0),e([l()],w.prototype,"userHasChangedValues",void 0),e([l()],w.prototype,"_arcadeExecutorProvider",void 0),e([l()],w.prototype,"_prepareTask",void 0),e([l()],w.prototype,"_layerTemplateMap",void 0),e([l()],w.prototype,"_workingFeatures",void 0),w=e([h("esri.widgets.BatchAttributeForm.BatchAttributeFormViewModel")],w);const I=w;export{I as default};
