/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{t as e,d as t,G as r}from"./Geometry.js";import{t as s,w as n,q as o}from"./QuadraticBezier.js";import{m as i,a,c as u}from"./SideCalculator2D-CsYV5zVZ.js";import{P as c}from"./Transformation2D.js";class m{getOperatorType(){return 10500}accelerateGeometry(e,t,r){return!1}canAccelerateGeometry(e){return!1}supportsCurves(){return!0}getNearestCoordinate(s,n,o,a){if(n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return i();switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(s,n);case r.enumMultiPoint:return this.multiVertexGetNearestVertex(s,n);case r.enumPolyline:case r.enumPolygon:return this.multiPathGetNearestCoordinate(s,n,o,a);default:t("")}}getNearestVertex(s,n){if(n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return i();switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertex(s,n);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertex(s,n);default:t("")}}getNearestVertices(s,n,o,i){if(0===i&&e(""),n.isNAN()&&e("NAN xy coordinates are not allowed"),s.isEmpty())return[];switch(s.getGeometryType()){case r.enumPoint:return this.pointGetNearestVertices(s,n,o,i);case r.enumMultiPoint:case r.enumPolyline:case r.enumPolygon:return this.multiVertexGetNearestVertices(s,n,o,i);default:t("")}}multiPathGetNearestCoordinate(t,i,m,l){if(t.getGeometryType()===r.enumPolygon&&m){const e=new s;t.queryEnvelope(e);const r=n(null,e,!1);let u;if(u=o(t,i,l?0:r),0!==u){const e=a(i,-1,0);return l&&(e.m_bRightSide=!0),e}}const g=t.querySegmentIterator(),y=new c;let N=-1,d=-1,f=Number.MAX_VALUE,h=0;for(;g.nextPath();)for(;g.hasNextSegment();){const e=g.nextSegment(),t=e.getClosestCoordinate(i,!1),r=e.getCoord2D(t),s=c.sqrDistance(r,i);s<f?(h=1,y.assign(r),N=g.getStartPointIndex(),d=g.getPathIndex(),f=s):s===f&&h++}-1===N&&e("");const p=a(y,N,Math.sqrt(f));if(l)if(t.getGeometryType()!==r.enumPolygon){let e=!1;if(h>1){const r=u(t,i,N,d);e=0!==r&&3!==r}else{g.resetToVertex(N,d);const t=g.nextSegment();e=0!==u(t,i)}p.m_bRightSide=e}else if(!m){0!==o(t,i,0)&&(p.m_bRightSide=!0)}return p}pointGetNearestVertex(e,t){const r=e.getXY(),s=c.distance(r,t);return a(r,0,s)}multiVertexGetNearestVertex(e,t){const r=e.getAttributeStreamRef(0),s=e.getPointCount();let n=-1;const o=new c;let i=Number.MAX_VALUE;const u=new c;for(let a=0;a<s;a++){r.queryPoint2D(2*a,u);const e=c.sqrDistance(u,t);e<i&&(o.assign(u),n=a,i=e)}return a(o,n,Math.sqrt(i))}pointGetNearestVertices(e,t,r,s){const n=[];if(0!==s){const s=r*r,o=e.getXY(),i=c.sqrDistance(o,t);i<=s&&n.push(a(o,0,Math.sqrt(i)))}return n}multiVertexGetNearestVertices(e,t,r,s){const n=[];if(0!==s){const o=e.getAttributeStreamRef(0),i=e.getPointCount();n.length=s+1;const u=r*r;for(let e=0;e<i;e++){const r=o.read(2*e),s=o.read(2*e+1),i=t.x-r,m=t.y-s,l=i*i+m*m;l<=u&&n.push(a(c.construct(r,s),e,Math.sqrt(l)))}n.sort(((e,t)=>e.m_distance-t.m_distance))}return n.slice(0,s)}}export{m as O};
