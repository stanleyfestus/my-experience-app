/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{gauss as e}from"../core/mathUtils.js";import{ScreenSpacePass as o}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js";import{Gamma as r}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Gamma.glsl.js";import{FloatPassUniform as t}from"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js";import{IntegerPassUniform as l}from"../views/3d/webgl-engine/core/shaderModules/IntegerPassUniform.js";import{NoParameters as s,glsl as i}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as a}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Texture2DPassUniform as u}from"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js";var c;!function(e){e[e.BlurHorizontal=0]="BlurHorizontal",e[e.BlurVertical=1]="BlurVertical",e[e.Composite=2]="Composite",e[e.COUNT=3]="COUNT"}(c||(c={}));class n extends s{constructor(){super(...arguments),this.exposure=25,this.blurRadius=.0033,this.bloomLod=-1}}function d(s){const n=new a,d=n.fragment;switch(n.include(o),s.bloomStage){case c.BlurHorizontal:case c.BlurVertical:{n.include(r),d.uniforms.add(new u("colorTexture",(e=>e.colorTexture)),new t("blurRadius",(e=>e.blurRadius)));let o="";const l=15;for(let e=0;e<l;e++){o+=`locations1D[${e}] = ${(e/(l-1)*2-1).toFixed(3).toString()};`}const a=2;let m="";for(let r=0;r<l;r++){m+=`locations1DWeights[${r}] = ${e(r-Math.floor(l/2),a).toFixed(7).toString()};`}const f=s.bloomStage===c.BlurHorizontal;d.code.add(i`
      float locations1D[${i.int(l)}];
      float locations1DWeights[${i.int(l)}];

      vec4 blurUniformSamples(sampler2D toBlur) {
        vec4 res = vec4(0.0);
        vec2 size = vec2(textureSize(toBlur, 0));
        vec2 aspectCorrection = vec2(1.0, size.x / size.y);
        vec2 uvInPixel = uv * size;

        ${o}
        ${m}
        vec2 pixelCenterShift = 0.5 / size;

        for(int i=0;i < ${i.int(l)}; i++) {
          float uv1D = locations1D[i] + ${f?"pixelCenterShift.x":"pixelCenterShift.y"};
          vec2 uvOffset = ${f?"vec2(uv1D, 0.0)":"vec2(0.0, uv1D)"};

          vec2 uvDistorted = uv + uvOffset * blurRadius * aspectCorrection;
          vec4 sampleColor = texture(toBlur, uvDistorted);
          res += pow(sampleColor, vec4(2.2)) * locations1DWeights[i];
        }
        res = pow(res, vec4(1.0/2.2));
        res.a = 1.0;

        return res;
      }
    `),d.main.add(i`fragColor = blurUniformSamples(colorTexture);`)}break;case c.Composite:n.include(r),d.uniforms.add(new u("colorTexture",(e=>e.colorTexture))),d.uniforms.add(new u("bloomTexture0",(e=>e.bloomTexture0))),d.uniforms.add(new u("bloomTexture1",(e=>e.bloomTexture1))),d.uniforms.add(new u("bloomTexture2",(e=>e.bloomTexture2))),d.uniforms.add(new u("bloomTexture3",(e=>e.bloomTexture3))),d.uniforms.add(new u("bloomTexture4",(e=>e.bloomTexture4))),d.uniforms.add(new t("exposure",(e=>e.exposure))),d.uniforms.add(new l("bloomLod",(e=>e.bloomLod))),d.uniforms.add(new t("blurRadius",(e=>e.blurRadius))),d.code.add(i`float factors[5] = float[5]( 1.0, 0.8, 0.6, 0.4, 0.2 );`),d.code.add(i`vec3 simpleExposureTonemap(vec3 hdrColor, float exposure) {
vec3 mapped = vec3(1.0) - exp(-hdrColor * exposure);
return mapped;
}`),d.main.add(i`vec4 color = texture(colorTexture, uv);
color = vec4(linearizeGamma(color.rgb), color.w);
vec4 bloomLod0 = pow(texture(bloomTexture0, uv), vec4(2.2));
vec4 bloomLod1 = pow(texture(bloomTexture1, uv), vec4(2.2));
vec4 bloomLod2 = pow(texture(bloomTexture2, uv), vec4(2.2));
vec4 bloomLod3 = pow(texture(bloomTexture3, uv), vec4(2.2));
vec4 bloomLod4 = pow(texture(bloomTexture4, uv), vec4(2.2));
fragColor = factors[0] * bloomLod0 + factors[1] * bloomLod1 + factors[2] * bloomLod2 + factors[3] * bloomLod3 + factors[4] * bloomLod4;
fragColor = vec4(simpleExposureTonemap(fragColor.rgb, exposure), fragColor.w);
fragColor += color;
fragColor = vec4(pow(fragColor.rgb, vec3(1.0 / 2.2)), fragColor.a);`)}return n}const m=Object.freeze(Object.defineProperty({__proto__:null,get BloomCompositionPass(){return c},BloomCompositionPassParameters:n,build:d},Symbol.toStringTag,{value:"Module"}));export{c as B,n as a,m as b,d as c};
