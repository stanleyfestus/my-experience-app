/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{isSymbol3D as o}from"../../symbols.js";import e from"../../core/Error.js";import{defaultRendererPolygonSymbol3D as r,defaultRendererPolylineSymbol3D as l}from"./defaults3D.js";import m from"../WebStyleSymbol.js";import i from"../PointSymbol3D.js";import n from"../SimpleLineSymbol.js";import s from"../LineSymbol3D.js";import t from"../SimpleMarkerSymbol.js";import y from"../PictureMarkerSymbol.js";import b from"../SimpleFillSymbol.js";import a from"../MeshSymbol3D.js";import f from"../PolygonSymbol3D.js";import p from"../TextSymbol.js";import c from"../LabelSymbol3D.js";const S="#useCIMFallbackSymbology()",g={retainId:!1,ignoreDrivers:!1,hasLabelingContext:!0};function u(u,d=g){if(!u)return{symbol:null};const{retainId:D=g.retainId,ignoreDrivers:M=g.ignoreDrivers,hasLabelingContext:j=g.hasLabelingContext,retainCIM:C=g.retainCIM,cimFallbackEnabled:I=g.cimFallbackEnabled}=d;let k=null;if(o(u)||u instanceof m)k=u.clone();else if("cim"===u.type){const o=u.data?.symbol?.type;switch(o){case"CIMPointSymbol":k=C?u.clone():i.fromCIMSymbol(u);break;case"CIMLineSymbol":I&&(k=l.clone(),d?.logWarning?.(S,"Unsupported CIM line symbology converted to fallback 3D line symbology"));break;case"CIMPolygonSymbol":I&&(k=r.clone(),d?.logWarning?.(S,"Unsupported CIM polygon symbology converted to fallback 3D polygon symbology"))}if(!k)return{error:new e("symbol-conversion:unsupported-cim-symbol",`CIM symbol of type '${o||"unknown"}' is unsupported in 3D`,{symbol:u})}}else if(u instanceof n)k=s.fromSimpleLineSymbol(u);else if(u instanceof t)k=i.fromSimpleMarkerSymbol(u);else if(u instanceof y)k=i.fromPictureMarkerSymbol(u);else if(u instanceof b)k=d.geometryType&&"mesh"===d.geometryType?a.fromSimpleFillSymbol(u):f.fromSimpleFillSymbol(u);else{if(!(u instanceof p))return{error:new e("symbol-conversion:unsupported-2d-symbol",`2D symbol of type '${u.type||u.declaredClass}' is unsupported in 3D`,{symbol:u})};k=j?c.fromTextSymbol(u):i.fromTextSymbol(u)}return D&&k&&"cim"!==k.type&&(k.id=u.id),M&&o(k)&&k.symbolLayers.forEach((o=>o.ignoreDrivers=!0)),{symbol:k}}export{g as defaultTo3DOptions,u as to3D};
