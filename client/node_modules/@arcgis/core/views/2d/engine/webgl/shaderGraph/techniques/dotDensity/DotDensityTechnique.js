/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{tileSize as e,textureBindingRenderer0 as t,textureBindingRenderer1 as i}from"../../../definitions.js";import{getLocations as o}from"../../utils.js";import{FeatureTechnique as r}from"../FeatureTechnique.js";import{isHighlight as s,isHittest as n,getFeatureUniforms as a,getSelectionDefines as l,getFeaturePipelineState as d,getViewUniforms as u}from"../featureTechniqueUtils.js";import{TechniqueType as c}from"../TechniqueType.js";import{DotDensityPointShader as p}from"./DotDensityPointShader.js";import{DotDensityPolygonShader as h}from"./DotDensityPolygonShader.js";import{DotDensityResources as m}from"./DotDensityResources.js";import{FillShader as f}from"../shaders/FillShader.js";import{FramebufferBit as w}from"../../../../../../webgl/enums.js";class g extends r{constructor(){super(...arguments),this.type=c.DotDensity,this.shaders={polygon:new h,point:new p,fill:new f},this._resources=new Map}render(e,t){s(e)||n(e)?this._renderPolygons(e,t):this._renderDotDensity(e,t)}_renderPolygons(e,t){const{painter:i}=e;i.setShader({shader:this.shaders.fill,uniforms:{...a(e,t.target),visualVariableColor:null,visualVariableOpacity:null},defines:{...l(e)},optionalAttributes:{zoomRange:!1},useComputeBuffer:n(e)}),i.setPipelineState(d(e)),i.submitDraw(e,t)}_renderDotDensity(r,s){const{context:n,painter:c,requiredLevel:p}=r,h=s.instance.getInput().uniforms,m=this._getOrCreateResourcesRecord(n),f=m.getDotDensityTextures(n,e,h.seed),g=1/2**(p-s.target.key.level),x=e,D=x*window.devicePixelRatio*x*window.devicePixelRatio,y=1/g*(1/g),b=h.dotScale?r.state.scale/h.dotScale:1,R=h.dotValue*b*y;c.setShader({shader:this.shaders.polygon,uniforms:{...a(r,s.target),instance:{isActive:h.isActive,colors:h.colors,dotValue:Math.max(1,R)},draw:{dotTexture0:{unit:t,texture:f[0]},dotTexture1:{unit:i,texture:f[1]},tileZoomFactor:g,pixelRatio:window.devicePixelRatio,tileDotsOverArea:D/(e*window.devicePixelRatio*e*window.devicePixelRatio)}},defines:{...l(r),blending:h.blending},optionalAttributes:{},useComputeBuffer:!1});const v=n.getViewport();n.setViewport(0,0,e,e);const P=n.getBoundFramebufferObject(),S=m.getFBO(n);n.bindFramebuffer(S),n.setClearColor(0,0,0,0),n.clear(w.COLOR),c.setPipelineState({color:{write:[!0,!0,!0,!0],blendMode:"composite"},depth:!1,stencil:!1}),c.updatePipelineState(n),c.submitDraw(r,s),n.bindFramebuffer(P),n.setViewport(v.x,v.y,v.width,v.height);const j=m.getFBO(n).colorTexture,_={shader:this.shaders.point,uniforms:{view:u(r,s.target),instance:{dotSize:h.dotSize},draw:{locations:{unit:t,texture:j},tileZoomFactor:1,pixelRatio:window.devicePixelRatio}},defines:{...l(r)},optionalAttributes:{},useComputeBuffer:!1};c.setPipelineState(d(r)),c.submitDrawMesh(n,_,m.getDotDensityMesh(n,o(this.shaders.point)))}shutdown(e){super.shutdown(e),this._resources.get(e)?.destroy(),this._resources.delete(e)}_getOrCreateResourcesRecord(e){let t=this._resources.get(e);return null==t&&(t=new m,this._resources.set(e,t)),t}}export{g as DotDensityTechnique};
