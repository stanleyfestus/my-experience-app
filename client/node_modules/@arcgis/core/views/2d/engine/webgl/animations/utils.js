/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import e from"../../../../../Color.js";import{getStartGroup as o,getRandomValue as t}from"../grouping.js";import{hydrate as r}from"./infos.js";import{instructions as n}from"./instructions.js";function s(e){return f(e.map((e=>u(e))).map((e=>r(e).simplify())))}function i(e){const o=[];return o.push(e.transform),o.push(e.fromColor),o.push(e.toColor),o.push(e.colorMix),o.push(e.toOpacity),o.push(e.opacityMix),o}function f(e){const o=[],t=[];let r=0;for(const s of e){const i=[...s.encode(),...n.ret.encode()];o.push([r+e.length,0,0,0]),t.push(...i),r+=i.length}return[...o,...t]}async function a(e,o){const t=e;let r;if("number"==typeof t||"string"==typeof t||"boolean"==typeof t)r=t;else if(Array.isArray(t))r=await Promise.all(t.map((e=>a(e,o))));else if("object"==typeof t)if("valueExpressionInfo"in t){const{valueExpressionInfo:e}=t,{expression:n}=e;r={...t,computed:await o.createComputedField({expression:n})}}else{r={};for(const e in t)r[e]=await a(t[e],o)}return r}function u(r,n,s){function i(o){if(!("computed"in o))return o;let t=o.computed.readWithDefault(n,s,[255*o.defaultValue[0],255*o.defaultValue[1],255*o.defaultValue[2],o.defaultValue[3]]);if("string"==typeof t){const o=e.fromString(t);o&&(t=[o.r,o.g,o.b,o.a])}return t}const f=r;let a;if("number"==typeof f||"string"==typeof f||"boolean"==typeof f)a=f;else if(Array.isArray(f))a=f.map((e=>u(e,n,s)));else if("object"==typeof f)if("type"in f&&null!=f.type&&"Process"===f.type)switch(f.op){case"ArcadeColor":{const e=u(f.value,n,s);p(Array.isArray(e)&&4===e.length);a=[e[0]/255,e[1]/255,e[2]/255,e[3]]}break;case"Transparency":{const e=u(f.value,n,s);p("number"==typeof e),a=1-e/100}break;case"Divide":{const e=u(f.left,n,s);p("number"==typeof e);const o=u(f.right,n,s);p("number"==typeof o),a=e/o}break;case"Random":{const e=u(f.seed,n,s),r=u(f.min,n,s),i=u(f.max,n,s),p=n.getObjectId(),c=o(p||0);a=r+t(c,e)*(i-r)}}else if("computed"in f)a=i(f);else{a={};for(const e in f)a[e]=u(f[e],n,s)}return a}function p(e){if(!e)throw new Error("Assertion failed.")}export{p as assert,a as compileAnimationParam,i as createParamList,f as encodeParamList,s as fromJSON,u as resolveToAnimationInfo};
