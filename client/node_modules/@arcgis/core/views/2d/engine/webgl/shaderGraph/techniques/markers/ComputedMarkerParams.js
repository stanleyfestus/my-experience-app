/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{pt2px as t}from"../../../../../../../core/screenUtils.js";import{Alignment as e}from"../../../../../../../symbols/cim/enums.js";import{applyParentTransform as i}from"../../../../../../../symbols/cim/utils.js";import{spritePadding as o}from"../../../definitions.js";class s{static from(t){return"width"in t?this.fromSimpleMeshParams(t):this.fromComplexMeshParams(t)}static fromSimpleMeshParams(e){const i=new s(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects),{type:o,width:h,height:r,angle:a,alignment:n,outlineSize:c,referenceSize:f,sprite:l,overrideOutlineColor:m}=e;return i.rawWidth=t(h),i.rawHeight=t(r),i.angle=a,i.alignment=n,i.outlineSize=t(c),i.referenceSize=t(f),i.overrideOutlineColor=m,i.offsetX=t(e.offsetX),i.offsetY=t(e.offsetY),"simple"!==o||l.sdf||(i.rawWidth=l.width,i.rawHeight=l.height),i._computeSize(e,!1),i}static fromComplexMeshParams(e){const o=new s(e.sprite,e.color,e.outlineColor,e.minPixelBuffer,e.placement,e.scaleInfo,e.effects);let{alignment:h,transforms:r,size:a,scaleX:n,anchorX:c,anchorY:f,angle:l,colorLocked:m,frameHeight:d,widthRatio:u,offsetX:p,offsetY:g,outlineSize:x,referenceSize:w,scaleFactor:z,sizeRatio:S,isAbsoluteAnchorPoint:X,rotateClockwise:Y,scaleSymbolsProportionally:C,sprite:H}=e;if(r&&r.infos.length>0){const t=i(a,l,Y,p,g,r);a=t.size,l=t.rotation,p=t.offsetX,g=t.offsetY,Y=!1}z&&(a*=z,p*=z,g*=z);const M=n*(H.width/H.height);o.alignment=h,o.rawHeight=t(a),o.rawWidth=o.rawHeight*M,o.referenceSize=t(w),o.sizeRatio=S,o.sdfDecodeCoeff=(H.sdfDecodeCoeff??1)*S,o.angle=l,o.rotateClockwise=Y,o.anchorX=c,o.anchorY=f,o.offsetX=t(p),o.offsetY=t(g),X&&a&&(H.sdf?o.anchorX=c/(a*u):o.anchorX=c/(a*M),o.anchorY=f/a);const P=C&&d?a/d:1;return o.outlineSize=0===x||isNaN(x)?0:t(x)*P,o.scaleSymbolsProportionally=C,o.colorLocked=m,o._computeSize(e,!0),o}constructor(t,i,o,s,h,r,a){this.sprite=t,this.color=i,this.outlineColor=o,this.minPixelBuffer=s,this.placement=h,this.scaleInfo=r,this.effects=a,this.rawWidth=0,this.rawHeight=0,this.angle=0,this.outlineSize=0,this.referenceSize=0,this.sizeRatio=1,this.sdfDecodeCoeff=1,this.alignment=e.SCREEN,this.scaleSymbolsProportionally=!1,this.overrideOutlineColor=!1,this.colorLocked=!1,this.anchorX=0,this.anchorY=0,this.computedWidth=0,this.computedHeight=0,this.texXmin=0,this.texYmin=0,this.texXmax=0,this.texYmax=0,this.offsetX=0,this.offsetY=0,this.rotateClockwise=!0}get boundsInfo(){return{size:Math.max(this.computedHeight,this.computedWidth),offsetX:this.offsetX,offsetY:this.offsetY}}_computeSize(t,e){const{sprite:i,hasSizeVV:s}=t,h=!!i.sdf,r=i.sdfPaddingRatio??.5,{rawWidth:a,rawHeight:n,sizeRatio:c,outlineSize:f}=this,l=c*(h?1/(1-r):1),m=a*l,d=n*l;if(h&&!s){const t=e&&a>n?m:a,i=n,o=f+2*1;this.computedWidth=Math.min(t+o,m),this.computedHeight=Math.min(i+o,d)}else this.computedWidth=m,this.computedHeight=d;const u=h?Math.max(i.width,i.height)/Math.max(m,d):1,p=.5*(m-this.computedWidth)*u,g=.5*(d-this.computedHeight)*u,x=i.rect.x+o+p,w=i.rect.y+o+g,z=x+i.width-2*p,S=w+i.height-2*g;this.texXmin=Math.floor(x),this.texYmin=Math.floor(w),this.texXmax=Math.ceil(z),this.texYmax=Math.ceil(S),this.computedWidth*=(this.texXmax-this.texXmin)/(z-x),this.computedHeight*=(this.texYmax-this.texYmin)/(S-w),this.anchorX*=m/this.computedWidth,this.anchorY*=d/this.computedHeight}}export{s as ComputedMarkerParams};
