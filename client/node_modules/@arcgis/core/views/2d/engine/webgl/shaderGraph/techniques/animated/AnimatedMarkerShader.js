/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as t,a as e}from"../../../../../../../chunks/tslib.es6.js";import{animationDebugFlags as i}from"../../../../../../../symbols/cim/animationDebugFlags.js";import{location as s,ComputeVertexInput as o,input as r}from"../../GraphShaderModule.js";import{cond as l,Float as a,equal as n,Mat2 as d,cos as m,sin as u,Vec4 as p,or as h,Bool as c,mix as x,Mat3 as y,ifElse as v,lessThan as f,Vec3 as w,distance as b,greaterThan as S,Vec2 as g,negate as z,step as P}from"../../graph/glsl.js";import{AAnimatedVertexInput as _,AAnimatedFragmentInput as V,AAnimatedShader as C,getValue as N}from"./AnimatedShader.js";import{AnimationParamIndex as M}from"./enums.js";import{MarkerConstants as k}from"../markers/markerConstants.js";import{c256ToRad as D}from"../shaders/constants.js";import{distPointTriangle as j,xyToBarycentric as F,inTriangle as R,failHittest as U}from"../shaders/hittestUtils.js";import{getBit as T,getBitBool as q}from"../shaders/utils.js";import{getVisualVariableSize as A,getVisualVariableColor as I,getVisualVariableOpacity as O}from"../shaders/vvUtils.js";class W extends _{}t([s(5,g)],W.prototype,"offset",void 0),t([s(6,g)],W.prototype,"uv",void 0),t([s(7,p)],W.prototype,"sizing",void 0),t([s(8,a)],W.prototype,"angle",void 0);class B extends o{}t([s(12,g)],B.prototype,"offsetNextVertex1",void 0),t([s(13,g)],B.prototype,"offsetNextVertex2",void 0),t([s(14,g)],B.prototype,"textureUVNextVertex1",void 0),t([s(15,g)],B.prototype,"textureUVNextVertex2",void 0);class E extends V{}function G(t,e,i,s){return e.multiply(t.x).add(i.multiply(t.y)).add(s.multiply(t.z))}class H extends C{constructor(){super(...arguments),this.computeAttributes={offset:["offsetNextVertex1","offsetNextVertex2"],uv:["textureUVNextVertex1","textureUVNextVertex2"]}}_vertexPreamble(t){const{id:e,pos:i,offset:s,animationPointerAndBaseSizeAndReferenceSize:o,uv:r,sizing:p,angle:h}=t,c=o.xy,x=o.z,y=o.w,v=p.xy,f=p.z,w=T(t.bitset,k.bitset.isStroke),b=p.w,S=T(t.bitset,k.bitset.scaleSymbolsProportionally),g=this._getEvalParams(t,v),z=N(c,M.transform,g),P=l([n(T(t.bitset,k.bitset.isMapAligned),new a(1)),this.view.rotation.divide(180).multiply(Math.PI)],[!0,new a(0)]),_=new d(m(P),u(P.multiply(-1)),u(P),m(P)).multiply(z.xy),V=z.z.subtract(P).subtract(h.multiply(D)),C=z.w,j=T(t.bitset,k.bitset.isSDF),F=A(this,e,new a(y)).divide(new a(y));return{baseSize:x,animationPointer:c,strokeWidth:f,isOutline:w,unscaledDistanceToPx:b,scaleSymbolsProportionally:S,isSDF:j,position:this._getScreenPosition({id:e,pos:i,offset:s,referenceSize:y,translation:_,rotation:V,scale:C,vvScale:F}),uv:r,evalParams:g,vvScale:F,scale:C}}vertex(t,e){const{position:i,animationPointer:s,evalParams:o,isOutline:r,unscaledDistanceToPx:l,vvScale:n,uv:d,strokeWidth:m,scaleSymbolsProportionally:u,scale:v,isSDF:f,baseSize:w}=this._vertexPreamble(t),b=this._toNdc(i);let S=N(s,M.fromColor,o);S=new p(S.rgb.multiply(S.a),S.a);let g=N(s,M.toColor,o);g=new p(g.rgb.multiply(g.a),g.a);let z=N(s,M.colorMix,o);z=new p(z.rgb.multiply(z.a),z.a);const P=N(s,M.toOpacity,o).a,_=N(s,M.opacityMix,o).a,V=I(this,t.id,S,h(q(t.bitset,k.bitset.colorLocked),new c(r))),C=x(V,g,z),D=O(this,t.id),j=x(D,P,_),F=C.multiply(j),R=this.clip(t.id,t.zoomRange),U=l.multiply(n);return{glPosition:new p(b,R,1),uv:d.divide(this.mosaicInfo.size),color:F.multiply(new a(1).subtract(r)),outlineColor:F.multiply(r),distanceToPx:U,strokeWidth:m.multiply(x(new a(1),v,u)),isOutline:r,isSDF:f,...this.maybeRunHittest(t,e,{pos:t.pos,size:w,sizeCorrection:new a(1),isMapAligned:new a(1),vvRotationMat3:new y(1,0,0,0,1,0,0,0,1),placementMat3:new y(1,0,0,0,1,0,0,0,1),outlineSize:new a(1),distanceToPx:U,isSDF:f})}}fragment(t){let e=this._getColor(t.uv,{color:t.color,distanceToPx:t.distanceToPx,isSDF:t.isSDF,outlineColor:t.outlineColor,outlineSize:t.strokeWidth});return i.spotlightAnimatedSymbols&&(e=e.add(new p(0,.3,0,.3))),this.getFragmentOutput(e,t)}hittest(t,e,i){return v(f(i.size,this.hittestRequest.smallSymbolSizeThreshold),this._hittestSmallMarker(t,e,i),this._hittestMarker(t,e,i))}_hittestSmallMarker(t,e,i){const{position:s,distance:o,smallSymbolDistance:r}=this.hittestRequest,l=o.subtract(r),{viewMat3:a,tileMat3:n}=this.view,d=a.multiply(n).multiply(new w(i.pos,1)).xy,m=i.size.multiply(.5);return b(d,s).subtract(m).add(l)}_hittestMarker(t,e,i){const s=this._vertexPreamble({...t}).position,o=this._vertexPreamble({...t,offset:e.offsetNextVertex1,uv:e.textureUVNextVertex1}).position,r=this._vertexPreamble({...t,offset:e.offsetNextVertex2,uv:e.textureUVNextVertex2}).position,l=this.hittestRequest.position,a=this.hittestRequest.distance,n=j(l,s,o,r);return v(S(n,a),n,this._hittestSamples(s,o,r,t,e,i))}_hittestSamples(t,e,i,s,o,r){const{outlineSize:l,isSDF:n,distanceToPx:d}=r,m=this.hittestRequest.position,u=this.hittestRequest.distance,h=F(m.add(new g(z(u),z(u))),t,e,i),c=F(m.add(new g(0,z(u))),t,e,i),x=F(m.add(new g(u,z(u))),t,e,i),y=F(m.add(new g(z(u),0)),t,e,i),v=F(m,t,e,i),f=F(m.add(new g(u,0)),t,e,i),w=F(m.add(new g(z(u),u)),t,e,i),b=F(m.add(new g(0,u)),t,e,i),S=F(m.add(new g(u,u)),t,e,i),_=s.uv.divide(this.mosaicInfo.size),V=o.textureUVNextVertex1.divide(this.mosaicInfo.size),C=o.textureUVNextVertex2.divide(this.mosaicInfo.size),N={color:new p(1,1,1,1),outlineSize:l,outlineColor:new p(1,1,1,1),isSDF:n,distanceToPx:d};let M=new a(0);return M=M.add(R(h).multiply(this._getColor(G(h,_,V,C),N).a)),M=M.add(R(c).multiply(this._getColor(G(c,_,V,C),N).a)),M=M.add(R(x).multiply(this._getColor(G(x,_,V,C),N).a)),M=M.add(R(y).multiply(this._getColor(G(y,_,V,C),N).a)),M=M.add(R(v).multiply(this._getColor(G(v,_,V,C),N).a)),M=M.add(R(f).multiply(this._getColor(G(f,_,V,C),N).a)),M=M.add(R(w).multiply(this._getColor(G(w,_,V,C),N).a)),M=M.add(R(b).multiply(this._getColor(G(b,_,V,C),N).a)),M=M.add(R(S).multiply(this._getColor(G(S,_,V,C),N).a)),P(M,new a(.05)).multiply(U(this.hittestRequest))}}t([e(0,r(W)),e(1,r(B))],H.prototype,"vertex",null),t([e(0,r(E))],H.prototype,"fragment",null);export{E as AnimatedMarkerFragmentInput,H as AnimatedMarkerShader,W as AnimatedMarkerVertexInput};
