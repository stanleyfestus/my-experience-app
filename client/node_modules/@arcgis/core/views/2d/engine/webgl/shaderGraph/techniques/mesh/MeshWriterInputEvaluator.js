/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../../../../core/arrayUtils.js";import r from"../../../../../../../core/Error.js";import{clone as t}from"../../../../../../../core/lang.js";import s from"../../../../../../../core/Logger.js";import{getStartGroup as a}from"../../../grouping.js";import{hydrate as o}from"../../../animations/infos.js";import{createParamList as i,compileAnimationParam as n,fromJSON as c,resolveToAnimationInfo as m,encodeParamList as p}from"../../../animations/utils.js";import{applyComputedValue as f}from"./utils.js";import{DictionaryValue as l}from"../../../../../layers/features/support/DictionaryValue.js";const u=()=>s.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.mesh.MeshWriterInputEvaluator");async function d(e,r,t=!1){const{defaultValue:s,valueExpressionInfo:a,value:o}=r;if(a){const{expression:o}=a,i=await e.createComputedField({expression:o},t);return i?{...r,computed:i,defaultValue:s}:null}return{...r,computed:new l(o),defaultValue:s}}async function h(e,r){const{valueExpressionInfo:t}=r,{expression:s}=t,a=await e.createComputedField({expression:s});return a?{...r,computed:a}:null}function y(e){return"object"==typeof e&&null!=e&&(!(!("valueExpressionInfo"in e)||!e.valueExpressionInfo)||"type"in e&&"Process"===e.type&&"op"in e&&"Random"===e.op)}function v(e){if(Array.isArray(e))for(const r of e)if(v(r))return!0;if("object"==typeof e){if(y(e))return!0;for(const r in e){if(v(e[r]))return!0}}return!1}class P{static async create(r,t,s){const a={},o=new Map,m=new Map,p=new Map,f=new Map,l=new Map,u=new Map;for(const P in s){const I=s[P];if(null!=I&&"object"==typeof I)if(Array.isArray(I)){if("object"==typeof I[0])throw new Error(`InternalError: Cannot handle ${P}. Nested array params are not supported`);a[P]=I}else if("valueExpressionInfo"in I){if(I.value){a[P]=I.value;continue}const e=await h(r,I);if(!e){a[P]=I.defaultValue;continue}o.set(P,e),a[P]=null}else switch(I.type){case"cim-effect-infos":if(I.effectInfos.some((e=>e.overrides.length))){m.set(P,{effects:await Promise.all(I.effectInfos.map((async t=>{const s=t.overrides.map((e=>d(r,e)));return{effect:t.effect,compiledOverrides:(await Promise.all(s)).filter(e)}})))});break}a[P]=I.effectInfos.map((e=>e.effect));break;case"cim-marker-placement-param":I.overrides.length&&p.set(P,{placementInfo:I,compiledOverrides:(await Promise.all(I.overrides.map((e=>d(r,e))))).filter(e)}),a[P]=I.placement;break;case"text-rasterization-param":{if(I.overrides.length){const t=I.overrides.map((e=>d(r,e,I.useLegacyLabelEvaluationRules)));f.set(P,{compiledOverrides:(await Promise.all(t)).filter(e),rasterizationParam:I,objectIdToResourceId:new Map});continue}const s={type:"cim-rasterization-info",resource:I.resource};a[P]=await t.fetchResourceImmediate(s)??null;break}case"sprite-rasterization-param":{if(I.overrides.length){const t=I.overrides.map((e=>d(r,e)));f.set(P,{compiledOverrides:(await Promise.all(t)).filter(e),rasterizationParam:I,objectIdToResourceId:new Map});continue}if("animated"===I.resource.type){f.set(P,{compiledOverrides:[],rasterizationParam:I,objectIdToResourceId:new Map});continue}const s={type:"cim-rasterization-info",resource:I.resource};a[P]=await t.fetchResourceImmediate(s)??null;break}case"cim-marker-transform-param":{const{params:e}=I;if(v(e)){const t={compiledMarkerInfos:[]};await Promise.all(e.map((async e=>{const s={props:{}};for(const t in e)if(y(e[t])){const a=await h(r,e[t]);s.compiledExpressionMap||(s.compiledExpressionMap=new Map);const o=s.compiledExpressionMap;a&&o.set(t,a)}else s.props[t]=e[t];t.compiledMarkerInfos.push(s)}))),l.set(P,t)}else a[P]={type:"cim-marker-transform-info",infos:e};break}case"animation-params":{const{params:e}=I,s=i(e);if(v(s)){const e=await Promise.all(s.map((e=>n(e,r))));u.set(P,{params:e,propertyIdToResourceId:new Map,key:P})}else{const e=c(s),r=await t.fetchResourceImmediate({type:"animation-info",resource:e});null!=r&&"sprite"===r.type&&(a[P]={dataRow:r.rect.y,dataColumn:r.rect.x})}break}default:a[P]=I}else a[P]=I}return new P(s,a,o,m,p,f,l,u)}constructor(e,r,t,s,a,o,i,n){this.inputMeshParams=e,this._resolvedMeshParams=r,this._dynamicProperties=t,this._dynamicEffectProperties=s,this._dynamicPlacementProperties=a,this._dynamicAsyncProperties=o,this._dynamicTransformProperties=i,this._dynamicAsyncAnimations=n,this.evaluator=e=>e}get hasDynamicProperties(){return!!(this._dynamicProperties.size||this._dynamicAsyncProperties.size||this._dynamicEffectProperties.size||this._dynamicTransformProperties.size||this._dynamicPlacementProperties.size||this._dynamicAsyncAnimations.size)}get evaluatedMeshParams(){return this._evaluatedMeshParams||(this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams)),this._evaluatedMeshParams}enqueueRequest(e,s,i){for(const o of this._dynamicAsyncProperties.values()){const c=t(o.rasterizationParam.resource);"animated"===o.rasterizationParam.resource.type&&o.rasterizationParam.resource.randomizeStartTime&&(c.primitiveName="__RESERVED__PRIMITIVE__NAME__",c.startGroup=a(s.getObjectId()||0));for(const{primitiveName:e,propertyName:t,computed:a,defaultValue:p,valueExpressionInfo:l}of o.compiledOverrides)try{const r="animated"===o.rasterizationParam.resource.type?c.primitiveName:e;f(c,r,t,a,s,i,p)}catch(n){u().errorOnce(new r("invalid-arcade-expression",`Encountered an error when evaluating the arcade expression '${l?.expression}' (primitive: '${e}', property: '${t}')`,n))}const m=e.enqueueRequest({type:"cim-rasterization-info",resource:c});o.objectIdToResourceId.set(s.getObjectId(),m)}for(const r of this._dynamicAsyncAnimations.values()){const t=r.params.map((e=>m(e,s,i))).map(o).map((e=>e.simplify())),a=p(t),n=e.enqueueRequest({type:"animation-info",resource:a});r.propertyIdToResourceId.set(s.getObjectId()+"."+r.key,n)}}evaluateMeshParams(e,r,t){for(const[s,a]of this._dynamicProperties.entries())this._resolvedMeshParams[s]=a.computed.readWithDefault(r,t,a.defaultValue);for(const[s,a]of this._dynamicPlacementProperties.entries())for(const{computed:e,defaultValue:o,propertyName:i}of a.compiledOverrides){const n=e.readWithDefault(r,t,o);a.placementInfo.placement[i]=n,this._resolvedMeshParams[s]=a.placementInfo.placement}for(const[s,a]of this._dynamicEffectProperties.entries())for(const e of a.effects){for(const{computed:s,defaultValue:a,propertyName:o}of e.compiledOverrides){const i=s.readWithDefault(r,t,a);e.effect[o]=i}this._resolvedMeshParams[s]=a.effects.map((e=>e.effect))}for(const[s,a]of this._dynamicTransformProperties.entries()){const e={type:"cim-marker-transform-info",infos:[]};for(const s of a.compiledMarkerInfos){const a={...s.props};if(s.compiledExpressionMap)for(const[e,o]of s.compiledExpressionMap){const s=o.computed.readWithDefault(r,t,o.defaultValue);a[e]="number"==typeof s||"boolean"==typeof s?s:o.defaultValue}e.infos.push(a)}this._resolvedMeshParams[s]=e}for(const[s,a]of this._dynamicAsyncProperties.entries()){const t=a.objectIdToResourceId.get(r.getObjectId());if(null==t)continue;const o=e.getResource(t);this._resolvedMeshParams[s]=o}for(const[s,a]of this._dynamicAsyncAnimations.entries()){const t=a.propertyIdToResourceId.get(r.getObjectId()+"."+s);if(null==t)continue;const o=e.getResource(t);this._resolvedMeshParams[s]={dataRow:o.rect.y,dataColumn:o.rect.x}}return this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams),this.evaluatedMeshParams}}export{P as MeshWriterInputEvaluator,y as hasExpression};
