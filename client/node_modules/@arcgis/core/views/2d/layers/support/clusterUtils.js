/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../../../../renderers/ClassBreaksRenderer.js";import"../../../../renderers/DictionaryRenderer.js";import"../../../../renderers/DotDensityRenderer.js";import"../../../../renderers/HeatmapRenderer.js";import"../../../../renderers/PieChartRenderer.js";import"../../../../renderers/Renderer.js";import e from"../../../../renderers/SimpleRenderer.js";import"../../../../renderers/UniqueValueRenderer.js";import"../../../../renderers/support/jsonUtils.js";import r from"../../../../core/Logger.js";import"../../../../symbols.js";import s from"../../../../core/Error.js";import has from"../../../../core/has.js";import{createMD5Hash as i}from"../../../../core/MD5.js";import n from"../../../../layers/support/AggregateField.js";import t from"../../../../layers/support/ExpressionInfo.js";import o from"../../../../renderers/support/AuthoringInfo.js";import a from"../../../../symbols/SimpleMarkerSymbol.js";const l=()=>r.getLogger("esri.views.2d.layers.support.clusterUtils");has.add("esri-cluster-arcade-enabled",!0);const u=has("esri-cluster-arcade-enabled"),p=new Set(["simple-line","simple-fill","picture-fill"]);function d(r,s){let i=s.clone();if(!f(i))return i;if(s.getSymbols().some((e=>p.has(e.type)))&&(i=new e({symbol:new a})),i.authoringInfo||(i.authoringInfo=new o),i.authoringInfo.isAutoGenerated=!0,"visualVariables"in i){const e=(i.visualVariables||[]).filter((e=>"$view.scale"!==e.valueExpression));e.forEach((e=>{"rotation"===e.type?e.field?e.field=g(r,e.field,"avg_angle","number"):e.valueExpression&&(e.field=b(r,e.valueExpression,"avg_angle","number"),e.valueExpression=null):e.normalizationField?(e.field=g(r,e.field,"avg_norm","number",e.normalizationField),e.normalizationField=null):e.field?e.field=g(r,e.field,"avg","number"):e.valueExpression&&(e.field=b(r,e.valueExpression,"avg","number"),e.valueExpression=null)})),i.visualVariables=e}switch(i.type){case"simple":break;case"pie-chart":for(const e of i.attributes)e.field?e.field=g(r,e.field,"sum","number"):e.valueExpression&&(e.field=b(r,e.valueExpression,"sum","number"),e.valueExpression=null);break;case"unique-value":i.field?i.field=g(r,i.field,"mode","string"):i.valueExpression&&(i.field=b(r,i.valueExpression,"mode","string"),i.valueExpression=null);break;case"class-breaks":i.normalizationField?(i.field=g(r,i.field,"avg_norm","number",i.normalizationField),i.normalizationField=null):i.field?i.field=g(r,i.field,"avg","number"):i.valueExpression&&(i.field=b(r,i.valueExpression,"avg","number"),i.valueExpression=null)}return i}const m=e=>e?.find((({type:e})=>"size"===e))??null,c=e=>!!e?.some((({field:e})=>"cluster_count"===e)),f=e=>{const r=r=>l().error(new s("Unsupported-renderer",r,{renderer:e}));if(!e)return!1;switch(e.type){case"unique-value":if(e.field2||e.field3)return r("FeatureReductionCluster does not support multi-field UniqueValueRenderers"),!1;break;case"class-breaks":if(e.normalizationField){const s=e.normalizationType;if("field"!==s)return r(`FeatureReductionCluster does not support a normalizationType of ${s}`),!1}break;case"simple":case"pie-chart":break;default:return r(`FeatureReductionCluster does not support renderers of type ${e.type}`),!1}if(!u){if("valueExpression"in e&&e.valueExpression)return r("FeatureReductionCluster does not currently support renderer.valueExpression. Support will be added in a future release"),!1;if(("visualVariables"in e&&e.visualVariables||[]).some((e=>!(!("valueExpression"in e)||!e.valueExpression))))return r("FeatureReductionCluster does not currently support visualVariables with a valueExpression. Support will be added in a future release"),!1}return!0};function v(e,r,s){switch(e){case"sum":return`cluster_sum_${r}`;case"avg":case"avg_angle":return`cluster_avg_${r}`;case"mode":return`cluster_type_${r}`;case"avg_norm":{const e=s,n="field",t=r.toLowerCase()+",norm:"+n+","+e.toLowerCase();return"cluster_avg_"+i(t)}}}function b(e,r,s,o){const a=i(r),l="mode"===s?`cluster_type_${a}`:"sum"===s?`cluster_sum_${a}`:`cluster_avg_${a}`;return e.some((e=>e.name===l))||e.push(new n({name:l,isAutoGenerated:!0,onStatisticExpression:new t({expression:r,returnType:o}),statisticType:s})),l}function g(e,r,s,i,o){if("cluster_count"===r||e.some((e=>e.name===r)))return r;const a=v(s,r,o);return e.some((e=>e.name===a))||("avg_norm"===s?e.push(new n({name:a,isAutoGenerated:!0,onStatisticExpression:new t({expression:`$feature.${r} / $feature.${o}`,returnType:i}),statisticType:"avg"})):e.push(new n({name:a,isAutoGenerated:!0,onStatisticField:r,statisticType:s}))),a}export{d as createInferredClusterRenderer,m as findSizeVV,c as hasClusterCountVV,f as isClusterCompatibleRenderer};
