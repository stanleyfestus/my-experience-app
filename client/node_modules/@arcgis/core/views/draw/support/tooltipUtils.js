/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{zeroMeters as e,zeroSquareMeters as t,zeroDegreesGeographic as o,valueInUnit as n,createLength as i}from"../../../core/quantityUtils.js";import{getMetersPerVerticalUnitForSR as r}from"../../../core/unitUtils.js";import{getConvertedElevationFromXYZ as c,absoluteHeightElevationInfo as l}from"../../../support/elevationInfoUtils.js";import{getDrawHelpMessage as s}from"./helpMessageUtils.js";import{getDrawMeshHelpMessage as a}from"./helpMessageUtils3d.js";import{getConstraintContext as p}from"../../interactive/sketch/constraintUtils.js";import{updateTooltipInfoFromMeshTransform as u}from"../../interactive/tooltip/tooltipCommonUtils.js";import{DrawCircleTooltipInfo as m}from"../../interactive/tooltip/infos/DrawCircleTooltipInfo.js";import{DrawMeshTooltipInfo as d}from"../../interactive/tooltip/infos/DrawMeshTooltipInfo.js";import{DrawPointTooltipInfo as f}from"../../interactive/tooltip/infos/DrawPointTooltipInfo.js";import{DrawPolygonTooltipInfo as y}from"../../interactive/tooltip/infos/DrawPolygonTooltipInfo.js";import{DrawPolylineTooltipInfo as g}from"../../interactive/tooltip/infos/DrawPolylineTooltipInfo.js";import{DrawRectangleTooltipInfo as h}from"../../interactive/tooltip/infos/DrawRectangleTooltipInfo.js";import{directionForVertices as v}from"../../support/angularMeasurementUtils.js";import{autoArea2D as w}from"../../support/automaticAreaMeasurementUtils.js";import{autoLength2D as O,autoDistanceBetweenPoints2D as k}from"../../support/automaticLengthMeasurementUtils.js";import{elevationFromPoint as x,elevationFromZ as j}from"../../support/euclideanLengthMeasurementUtils.js";function M(e,t){return{point:new f({sketchOptions:t,viewType:e}),polyline:new g({sketchOptions:t,viewType:e}),polygon:new y({sketchOptions:t,viewType:e}),mesh:new d({sketchOptions:t,viewType:e}),rectangle:new h({sketchOptions:t}),circle:new m({sketchOptions:t})}}function T(e){const{directionOptions:t,geometryType:o,sketchOptions:n,tooltipInfos:i}=e,r=t=>{const o=J(e).mode,n=i[t].elevation;"relative-to-ground"===o||"relative-to-scene"===o||"on-the-ground"===o?n.lock(N(e)):n.unlock()},c=e=>{if(t){const o=i[e].direction;o.committed=t.angle,o.unlockOnVertexPlacement=!1,n.values.directionMode=t.mode}};switch(o){case"polygon":case"polyline":r(o),c(o);break;case"point":case"mesh":r(o)}}function b(e,t){const{drawOperation:o,view:n}=t,i=I(t),r=J(t);if("2d"===n.type||!e||"absolute-height"!==r.mode||1!==o?.numCommittedVertices||!i||"draw-polyline"!==i.type&&"draw-polygon"!==i.type||i.elevation.locked)return;const[c,l,s]=e,a=B(c,l,s,r,t);null!=a&&i.elevation.lock(a)}function U(e){I(e)?.allFields.forEach((e=>{e.unlockOnVertexPlacement&&e.unlock()}))}function I({geometryType:e,graphic:t,tooltipInfos:o}){return"multipoint"===e||t?.geometry?.type!==V[e]?null:o[e]}const V={point:"point",mesh:"mesh",polyline:"polyline",polygon:"polygon",circle:"polygon",rectangle:"polygon"};function D(e,t){switch(e?.type){case"draw-point":P(e,t);break;case"draw-polyline":z(e,t);break;case"draw-polygon":S(e,t);break;case"draw-rectangle":F(e,t);break;case"draw-circle":A(e,t);break;case"draw-mesh":G(e,t)}}function P(e,t){const o=t.graphic?.geometry;"point"===o?.type&&(L(e,o,t),e.helpMessage=s("point",o))}function G(e,t){const{graphic:o,view:n}=t,i=o?.geometry;"3d"!==n.type||i&&"mesh"!==i.type||(L(e,i?.origin,t),i&&u(e,i),e.helpMessage=a(o,n))}function L(e,t,o){const{drawOperation:n,view:i,sketchOptions:r}=o,{cursorVertex:c}=n;if(e.sketchOptions=r,e.viewType=i.type,e.setLocationFromPoint(t,K(o)),H(e.elevation,o),!c)return void(n.constraints=void 0);const l=c;n.constraints={context:Q(l,o),x:e.x.committed,y:e.y.committed,longitude:e.longitude.committed,latitude:e.latitude.committed,elevation:e.elevation.committed,distance:null,direction:null}}function z(t,o){const{createOperationGeometry:n,drawOperation:i}=o,r=null!=n?n.full:null;r&&"polyline"!==r.type||(Z(t,o),t.totalLength.actual=i.lastVertex?(r?O(r):null)??e:null,t.helpMessage=s("polyline",r))}function S(e,o){const{createOperationGeometry:n,drawOperation:i}=o,r=null!=n?n.full:null;r&&"polygon"!==r.type||(Z(e,o),e.area.actual=i.lastVertex?(r?w(r):null)??t:null,e.helpMessage=s("polygon",r))}function Z(t,n){const{drawOperation:i,sketchOptions:r,view:c}=n,{cursorVertex:l,lastVertex:s,secondToLastVertex:a}=i,p=r.values.effectiveDirectionMode;t.sketchOptions=r,t.viewType=c.type;const u=s&&l?k(s,l)??e:null;if(t.distance.actual=u,t.distance.readOnly=null==s,t.direction.actual=null,t.direction.readOnly=!0,s&&l&&("absolute"===p||a)){const e=v(a,s,l,p);t.direction.actual=e??o,t.direction.readOnly=!1}t.setLocationFromPoint(l,K(n)),H(t.elevation,n);const m=C(s,n);t.xyMode=m,t.direction.visible="direction-distance"===m,t.distance.visible="direction-distance"===m,t.effectiveX.visible="coordinates"===m,t.effectiveY.visible="coordinates"===m;const d=l??s;i.constraints=d?{context:Q(d,n),x:t.x.committed,y:t.y.committed,longitude:t.longitude.committed,latitude:t.latitude.committed,elevation:t.elevation.committed,distance:t.distance.committed,direction:t.direction.committed}:void 0}function C(e,{sketchOptions:t}){const o=t.tooltips.xyMode;return"auto"===o?e?"direction-distance":"coordinates":o}function F(e,t){e.sketchOptions=t.sketchOptions,e.xSize=q(t),e.ySize=E(t),e.area=R(t)}function A(e,t){const{forceUniformSize:o,sketchOptions:n}=t;e.sketchOptions=n,e.radius=o?X(t):null,e.xSize=o?null:q(t),e.ySize=o?null:E(t),e.area=R(t)}function H(e,t){const{drawOperation:o}=t,n=o?.cursorVertex??o?.lastVertex;e.actual=x(n)??N(t),e.visible=o.hasZ,e.readOnly=!1,e.showAsZ=!0}function R(e){const o=e.createOperationGeometry?.full;return"polygon"!==o?.type?t:w(o)??t}function q(t){const o=t.createOperationGeometry?.rectangle?.midpoints;return(null!=o?k(o.left,o.right):null)??e}function E(t){const o=t.createOperationGeometry?.rectangle?.midpoints;return(null!=o?k(o.top,o.bottom):null)??e}function X({createOperationGeometry:t}){return(null!=t?.circle?.center&&null!=t.circle.edge?k(t.circle.center,t.circle.edge):null)??e}function Y(e){const{geometryType:t,tooltipInfos:o}=e;switch(t){case"point":case"mesh":case"polyline":case"polygon":{const i=o[t].elevation.committed;if(!i)return;return n(i,"meters")/r(K(e))}default:return}}function B(e,t,o,n,i){const{view:r,drawOperation:l}=i;if("3d"!==r.type||!l)return;o??=0;const s=K(i),a=J(i),p=c(r,e,t,o,s,a,n);return j(p,s)??N(i)}function J(e){return e.drawOperation.elevationInfo??l}function K(e){return e.drawOperation.coordinateHelper.spatialReference}function N(e){const t=r(K(e));return i(e.defaultZ*t,"meters")}function Q(e,t){return p(e,t.view,K(t),J(t),t.drawOperation.coordinateHelper.hasZ(),t.sketchOptions.values.effectiveDirectionMode)}export{M as createTooltipInfos,I as getActiveTooltipInfo,Y as getConstraintZ,T as initializeConstraints,b as lockElevationOnVertexAdd,U as unlockConstraintsOnVertexAddOrRemove,D as updateTooltipInfo};
