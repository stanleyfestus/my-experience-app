/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{unitRGBAFromColor as r}from"../../../core/colorUtils.js";import{clamp as t,lerp as s}from"../../../core/mathUtils.js";import{disposeMaybe as i}from"../../../core/maybe.js";import{watch as o,syncAndInitial as a}from"../../../core/reactiveUtils.js";import"../../../core/Logger.js";import"../../../core/has.js";import"../../../core/RandomLCG.js";import"../../../core/Error.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{set as m}from"../../../core/libs/gl-matrix-2/math/vec2.js";import{i as h,l as c,k as p}from"../../../chunks/vec32.js";import{s as l}from"../../../chunks/vec42.js";import{ZEROS as u}from"../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{earth as d}from"../../../geometry/support/Ellipsoid.js";import{InternalRenderCategory as f}from"../webgl.js";import{innerAtmosphereDepth as g,computeInnerAltitudeFade as b}from"./atmosphereUtils.js";import{ChapmanAtmospherePassParameters as _,ChapmanAtmosphereTechnique as P}from"./ChapmanAtmosphereTechnique.js";import{ChapmanAtmosphereTechniqueConfiguration as j}from"./ChapmanAtmosphereTechniqueConfiguration.js";import{ColorFormat as w}from"../webgl/formats.js";import{OpaqueEnvironment as T}from"../webgl-engine/effects/OpaqueEnvironment.js";import{RenderRequestType as v}from"../webgl-engine/lib/basicInterfaces.js";import{createQuadVAO as A,Layout as q}from"../webgl-engine/lib/glUtil3D.js";import{applyTextureResizeModulo as E}from"../webgl-engine/lib/textureUtils.js";import{A as C}from"../../../chunks/AtmosphereCompositing.glsl.js";import{AtmosphereCompositingTechnique as x}from"../webgl-engine/shaders/AtmosphereCompositingTechnique.js";import{PrimitiveType as D}from"../../webgl/enums.js";import R from"../../../webscene/background/ColorBackground.js";let M=class extends T{constructor(e){super(e),this.requireGeometryDepth=!0,this._compositingPassParameters=new C,this._vao=null,this._passParameters=new _,this._configuration=new j;const{techniques:r}=e;r.precompile(P,this._configuration),r.precompile(x),this._configuration.reduced=!0,r.precompile(P,this._configuration),this._configuration.reduced=!1}initialize(){this.addHandles([o((()=>this.view.environment.background),(e=>{const t=e instanceof R?r(e.color):u;h(this._passParameters.backgroundColor,t[0]*t[3],t[1]*t[3],t[2]*t[3])}),a),o((()=>this.view._stage?.renderer?.fullResolutionAtmosphere),(e=>this._configuration.reduced=!e),a),o((()=>this.view.environment.atmosphereEnabled),(e=>e?this._enable():this._disable()),a)])}destroy(){this._vao=i(this._vao)}render(e){const r=e.find((({name:e})=>e===f.OPAQUE_ENVIRONMENT));if(!this.bindParameters.mainDepth)return r;const t=this.renderingContext;this._vao??=A(t,q.Pos2Tex);const i=r.getAttachment(t.gl.DEPTH_STENCIL_ATTACHMENT);this._update();const o=this.techniques.acquire(P,this._configuration);if(!o.compiled)return o.release(),this.requestRender(v.UPDATE),r;if(!this._configuration.reduced)return r.detachDepth(),t.bindFramebuffer(r.fbo),t.bindTechnique(o,this.bindParameters,this._passParameters),t.bindVAO(this._vao),t.drawArrays(D.TRIANGLE_STRIP,0,4),r.attachDepth(i),o.release(),r;const a=this.techniques.acquire(x);if(!a.compiled)return o.release(),a.release(),this.requestRender(v.UPDATE),r;const n=t.getViewport(),m=this.bindParameters.camera,h=c(m.eye)-d.radius;let p;const l=d.atmosphereHeight;if(h<l){const e=Math.min(1,Math.max(0,h/l));p=s(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(h-l)/(15*l)));p=s(.3,.6,e)}const u=E(Math.round(p*m.fullViewport[2])),g=E(Math.round(p*m.fullViewport[3]));t.setViewport(0,0,u,g);const b=this.fboCache.acquire(u,g,"chapman",w.RGBA);return t.bindFramebuffer(b.fbo),t.clearFramebuffer([0,0,0,1],!0,!0),t.bindTechnique(o,this.bindParameters,this._passParameters),t.bindVAO(this._vao),t.drawArrays(D.TRIANGLE_STRIP,0,4),t.setViewport(n.x,n.y,n.width,n.height),this._compositingPassParameters.color=b.getTexture(),r.detachDepth(),t.bindFramebuffer(r.fbo),t.bindTechnique(a,this.bindParameters,this._compositingPassParameters),t.screen.draw(),r.attachDepth(i),o.release(),a.release(),b.release(),r}_update(){const e=this.bindParameters.camera,r=p(e.eye),s=Math.sqrt(r),i=r-this._passParameters.radii[1]**2,o=t((s-this._passParameters.radii[0])/d.atmosphereHeight,0,1);l(this._passParameters.heightParameters,s,r,i,o);const a=this.view.basemapTerrain.getLowerBoundRadius();m(this._passParameters.radii,a,a+d.atmosphereHeight),this._passParameters.innerFadeDistance=2*Math.sqrt((2*a-g)*g),this._passParameters.altitudeFade=b(s-a)}};M=e([n("esri.views.3d.environment.ChapmanAtmosphere")],M);export{M as ChapmanAtmosphere};
