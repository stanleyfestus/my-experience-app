/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../symbols.js";import t from"../../../core/Accessor.js";import{filterInPlace as r}from"../../../core/arrayUtils.js";import"../../../core/has.js";import{equalsShallow as o}from"../../../core/lang.js";import{floatEqualUlp as s}from"../../../core/mathUtils.js";import{destroyMaybe as i}from"../../../core/maybe.js";import{watch as a}from"../../../core/reactiveUtils.js";import{generateUID as n}from"../../../core/uid.js";import{property as p}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/Logger.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{diff as h}from"../../../core/accessorSupport/diffUtils.js";import{projectBuffer as l}from"../../../geometry/projection/projectBuffer.js";import{create as d,fromBuffer as u}from"../../../geometry/support/aaBoundingBox.js";import{newDoubleArray as m}from"../../../geometry/support/DoubleArray.js";import{makeDehydratedPoint as f}from"../../../layers/graphics/dehydratedPoint.js";import{Graphics3DCore as g}from"./graphics/Graphics3DCore.js";import{Graphics3DScaleVisibility as y}from"./graphics/Graphics3DScaleVisibility.js";import{boundingBoxCornersPointsStride as b,boundingBoxCornerPoints as I}from"./i3s/I3SGeometryUtil.js";import{LimitGraphicsMap as _}from"../support/LimitGraphicsMap.js";import{UpdatePolicy as v}from"../webgl-engine/lib/UpdatePolicy.js";import M from"../../../symbols/PointSymbol3D.js";class E{constructor(e,t){this.meta=e,this.index=t}}class j{constructor(e,t){this.graphic=e,this.geometry=t,this.components=[],this.overridesDirty=!1}}let G=class extends t{get updating(){return this._graphicsCore?.updating??!1}constructor(e){super(e),this.loadedGraphics=new _(5e4),this.slicePlaneEnabled=!1,this._renderingInfo={symbol:new M},this._featuresMap=new Map}initialize(){const e=this.view.basemapTerrain;this._graphicsCore=new g({owner:this,layer:this.layer,preferredUpdatePolicy:v.ASYNC,elevationFeatureExpressionEnabled:!1,graphicSymbolSupported:!1,getRenderingInfoWithoutRenderer:!0,hasZ:!0,hasM:!1,componentFactories:{deconflictor:e=>this.view.deconflictor.addGraphicsOwner(e),labeler:(e,t)=>this.view.labeler.addGraphicsOwner(e,t,{emptySymbolLabelSupported:!0,elevationInfoOverride:{mode:"absolute-height",offset:0},disablePlacement:{logEntityDescription:"3D Object Scene Layer features"}}),scaleVisibility:(t,r)=>new y({graphicsCoreOwner:this,layer:this.layer,queryGraphicUIDsInExtent:r,graphicsCore:t,basemapTerrain:e,layerScaleEnabled:!1})}}),this._graphicsCore.initializePromise.then((()=>this._graphicsCore.startCreateGraphics())).catch((()=>{})),this.addHandles(a((()=>this.layer.labelingInfo),((e,t)=>{h(e,t)&&this._graphicsCore.updateLabelingInfo()})))}destroy(){this._graphicsCore=i(this._graphicsCore),this.loadedGraphics=i(this.loadedGraphics),this.view=null}addNodeMeta(e,t){let r=0;const o=e.filteredIds,s=this.view.spatialReference,i=[];for(let a=0;a<e.featureIds.length;a++){const p=e.featureIds[a];let c=null==o;if(o&&r<o.length&&p===o[r]&&(c=!0,r++),!this._enabledForFeatureInNode(e,a))continue;const h=this._featuresMap.get(p);if(h){h.components.push(new E(e,a)),this._updateLabelPosition(p);continue}const l=t(a,e),d=f(0,0,0,s),u={objectId:p,uid:n(),attributes:l,visible:c,geometry:d},m=new j(u,d);m.components.push(new E(e,a)),this._featuresMap.set(p,m),this._updateLabelGeometry(p),i.push(u)}this.loadedGraphics.addMany(i)}updateLabelPositions(e){const t=this.view.renderCoordsHelper;this._forEachGraphic(e,((r,o,s)=>{const i=this._graphicsCore.getGraphics3DGraphicById(o.uid);null!=i&&this._updateLabelGeometry(e.featureIds[r])&&i.alignWithAbsoluteElevation(s.z??0,t,!1)}))}setNodeMetaAttributes(e,t){const r=new Array;this._forEachGraphic(e,((s,i)=>{const a=t(s,e);o(i.attributes,a)||(i.attributes=a,r.push(i.uid))})),this._graphicsCore.updateLabelingInfo(r)}applyFilterChange(e){this._forEachFeature(e,((t,r,o)=>{if(!this._enabledForFeatureInNode(e,t)){const o=e.featureIds[t];switch(this._removeFeature(r,e,t)){case w.REMOVED:this.loadedGraphics.removeManyByObjectId([o]);break;case w.MODIFIED:this._updateLabelPosition(o)}return}const s=r.graphic,i=s.visible;i!==o&&(s.visible=o,D.graphic=s,D.property="visible",D.oldValue=i,D.newValue=o,this._graphicsCore.graphicUpdateHandler(D))}))}removeNodeMeta(e){const t=[];this._forEachGraphic(e,(r=>{const o=e.featureIds[r],s=this._featuresMap.get(o);if(!s)return;switch(this._removeFeature(s,e,r)){case w.MODIFIED:this._updateLabelPosition(o);break;case w.REMOVED:t.push(o)}})),this.loadedGraphics.removeManyByObjectId(t)}_removeFeature(e,t,o){const s=e.components.length;return r(e.components,(e=>!(e.meta===t&&e.index===o))),0===e.components.length?(this._featuresMap.delete(t.featureIds[o]),w.REMOVED):s!==e.components.length?w.MODIFIED:w.UNMODIFIED}getRenderingInfo(){return this._renderingInfo}notifyGraphicGeometryChanged(){}notifyGraphicVisibilityChanged(){}_updateLabelPosition(e){const t=this._featuresMap.get(e);t&&this._updateLabelGeometry(e)&&(this.loadedGraphics.removeManyByObjectId([e]),this.loadedGraphics.addMany([t.graphic]))}_updateLabelGeometry(e){const t=this._featuresMap.get(e);if(!t)return!1;const r=t.geometry,o=this.view.spatialReference,i=this.view.renderCoordsHelper,a=r.x,n=r.y,p=r.z??0,c=t.components.length,h=m(c*b);let d=0;for(const{meta:s,index:l}of t.components)I(l,this.collection,s.objectHandle,h,d),d+=b;return l(h,i.spatialReference,0,h,o,0),u(h,C),r.x=(C[0]+C[3])/2,r.y=(C[1]+C[4])/2,r.z=C[5],!s(r.x,a)||!s(r.y,n)||!s(r.z,p)}_forEachGraphic(e,t){this._forEachFeature(e,((r,{graphic:o,geometry:s},i)=>{this._enabledForFeatureInNode(e,r)&&t(r,o,s,i)}))}_forEachFeature(e,t){let r=0;for(let o=0;o<e.featureIds.length;o++){const s=this._featuresMap.get(e.featureIds[o]);let i=null==e.filteredIds;e.filteredIds&&e.filteredIds[r]===e.featureIds[o]&&(i=!0,r++),s&&t(o,s,i)}}_enabledForFeatureInNode(e,t){return e.node.index<0||!this.overrides?.featureHasGeometryChanges(e.featureIds[t])}get updatePolicy(){return this._graphicsCore.effectiveUpdatePolicy}get usedMemory(){return this._graphicsCore.usedMemory}get unloadedMemoryEstimate(){return this._graphicsCore.unprocessedMemoryEstimate}get test(){}};e([p()],G.prototype,"view",void 0),e([p()],G.prototype,"layer",void 0),e([p()],G.prototype,"collection",void 0),e([p()],G.prototype,"loadedGraphics",void 0),e([p()],G.prototype,"overrides",void 0),e([p()],G.prototype,"updating",null),e([p()],G.prototype,"slicePlaneEnabled",void 0),e([p()],G.prototype,"_graphicsCore",void 0),G=e([c("esri.views.3d.layers.I3SMeshViewLabeler")],G);const D={graphic:null,property:null,oldValue:null,newValue:null};var w;!function(e){e[e.UNMODIFIED=0]="UNMODIFIED",e[e.MODIFIED=1]="MODIFIED",e[e.REMOVED=2]="REMOVED"}(w||(w={}));const C=d(),F=G;export{F as default};
