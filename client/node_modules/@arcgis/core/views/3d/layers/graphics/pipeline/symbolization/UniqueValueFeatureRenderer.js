/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{FeatureData as t}from"../featureData/FeatureData.js";import{FeatureDataItem as i}from"../featureData/interfaces.js";import{TestObjectSymbol as o}from"./TestObjectSymbol.js";import{TestSymbol as a}from"./TestSymbol.js";class s{constructor(t){this._symbols=new Map,this._context=t}async load(){this._symbols.set(0,new a(this._context)),this._symbols.set(1,new o(this._context))}async add(t,i){await this._provisionFeatureData(t,this._context);const o=this._partition(t);await Promise.all(o.map((async t=>{const o=await this._provisionSymbol(t.partitionInfo?.index,i);o&&await o.add(t,i)})))}async remove(t,i){const o=t.partitions;if(!o)throw new Error("partitioned featureset expected");await Promise.all(o.map((async t=>{const o=await this._provisionSymbol(t.partitionInfo?.index,i);o&&await o.remove(t,i)})))}async _provisionFeatureData(t,o){await t.provision([i.PARTITION_ID,i.OBJECT_ID],o)}async _provisionSymbol(t,i){if(null==t)return null;const o=this._symbols.get(t);return o?(o.loaded||await o.load(i),o):null}_partition(i){const{numFeatures:o,objectIds:a,partitionIds:s}=i,e=[[],[]];for(let t=0;t<o;++t){const i=a[t]%2;e[i].push(t),s[t]=i}return i.partitions=e.filter((t=>t.length>0)).map(((o,a)=>{const s=o.length,e={index:a,tileIndices:new Uint32Array(o)};return new t(i.tile,s,e)})),i.partitions}}export{s as UniqueValueFeatureRenderer};
