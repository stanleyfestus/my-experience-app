/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import has from"../../../../core/has.js";import{releaseMaybe as t}from"../../../../core/maybe.js";import{isPromiseLike as r}from"../../../../core/promiseUtils.js";import{pt2px as n}from"../../../../core/screenUtils.js";import{fromValues as s,ZEROS as i,create as o}from"../../../../core/libs/gl-matrix-2/factories/vec2f64.js";import{freeze as l}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{fromValues as a}from"../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{hasCalloutSupport as c,textSymbolLayerSupportsVerticalOffset as m}from"../../../../symbols/callouts/calloutUtils.js";import{perObjectElevationAligner as f}from"./ElevationAligners.js";import{SymbolUpdateType as h,needsElevationUpdates2D as p}from"./elevationAlignmentUtils.js";import{ElevationContext as u}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as d}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DObjectMetadata as g}from"./Graphics3DObjectMetadata.js";import{Graphics3DSymbolLayer as y}from"./Graphics3DSymbolLayer.js";import{validateSymbolLayerSize as x}from"./graphicUtils.js";import{LabelParameters as v,LabelPlacement as b}from"./LabelParameters.js";import{verticalScreenOffsetFromAlignment as O,verticalPlacementFromAlignment as P,textRenderAlignmentFromHorizontalPlacement as j,horizontalPlacementToAnchorX as E,anchorFromPlacements as _,namedAnchorToHUDMaterialAnchorPos as w}from"./placementUtils.js";import{placePointOnGeometry as S,updateStageObjectGeometry as L,getLocalOriginForPoint as G,extendPointGraphicElevationContext as z,createStageObject as C}from"./pointUtils.js";import{getFontMetrics as U}from"../../webgl-engine/lib/FontMetrics.js";import{createPointGeometry as D}from"../../webgl-engine/lib/GeometryUtil.js";import{TextRenderParameters as R}from"../../webgl-engine/lib/TextRenderParameters.js";import A from"../../webgl-engine/lib/TextTextureFactory.js";import{HUDMaterial as T}from"../../webgl-engine/materials/HUDMaterial.js";const H=l(0,0,1);class W extends y{constructor(e,t,r,n){super(e,t,r,n),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const t=x(this.symbolLayer.size);if(t)throw new e("graphics3dtextsymbollayer:invalid-size",t)}await this._createTextRenderParameters()}async _createTextRenderParameters(){const e=this._context.graphicsCoreOwner.view.state.rasterPixelRatio;this._textRenderParameters=await R.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const t=e.graphic,r=S(t.geometry);if(null==r)return this.logger.warn(`unsupported geometry type for text symbol: ${t.geometry.type}`),null;const n=this.symbolLayer.text;if(null==n||""===n)return null;const s=c(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(null!=s&&!m(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const{verticalAlignment:i}=this.symbolLayer,o=new b(s);O(i,o.screenOffset);const l=new v(o,this.symbolLayer.horizontalAlignment,P(i));return this._createAs3DShape(t,r,n,l)}createLabel(e,t,r,n,s){const i=e.graphic,o=S(i.geometry);if(null==o)return this.logger.warn(`unsupported geometry type for label: ${i.geometry.type}`),null;const l=t.text;return!l||/^\s+$/.test(l)?null:this._createAs3DShape(i,o,l,t,r,n,s)}setGraphicElevationContext(e,t,r=0){return super.setGraphicElevationContext(e,t),t.addOffsetRenderUnits(r),t}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return F(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),h.UPDATE}slicePlaneEnabledChanged(e,t){return F(e,t,(e=>{for(const t of e.stageObject.geometries)t.material.setParameters({hasSlicePlane:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}get pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){const r=t.elevationContext;this.setGraphicElevationContext(e,r,null!=t.metadata?t.metadata.elevationOffset:0),t.needsElevationUpdates=p(r.mode)||"absolute-height"===r.mode}updateGeometry(e,t){if(this.draped||!this._validateGeometry(t))return!1;const{elevationContext:r,stageObject:n}=e;if(r.mode!==this.getGeometryElevationMode(t))return!1;const s=S(t);if(!s)return!1;const i=L(n,this._context,s,r);if(null==i)return!1;const o=G(this._context,s);return n.geometries[0].localOrigin===o&&(e.alignedSampledElevation=i,z(e,s,this._context.elevationProvider),!0)}_defaultElevationInfoNoZ(){return M}_createAs3DShape(e,l,c,m,h=null,y=null,x=()=>m.placement.elevationOffset){const v=this.setGraphicElevationContext(e,new u,m.placement.elevationOffset),b="polyline"===e.geometry?.type,O=e.uid;let P=null,E=null;if(null==y){const e=j(m.horizontalPlacement);P=new A(c,e,this._textRenderParameters);let n=null;if(null!=this._context.sharedResources.textures){E=this._context.sharedResources.textures.fromData(P.key,(()=>P.create())),E.texture.events.on("unloaded",(()=>n=t(n)));const e=this._context.stage.renderView.textures.acquire(E.texture.id);if(null==e||r(e))return E.release(),null;n=e}}const _=!!has("enable-feature:non-occluded-hud"),w=I(P,m),S={occlusionTest:!_,occludedFragmentFade:_,horizonCullingEnabled:_,screenOffset:m.placement.screenOffset,anchorPosition:w,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:m.placement.centerOffsetUnits,depthEnabled:!1,drawInSecondSlot:!0,isLabel:!0};if(b&&(S.shaderPolygonOffset=1e-4),y?S.textureId=y.id:E&&(S.textureId=E.texture.id),null!=m.placement.verticalOffset){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=m.placement.verticalOffset;S.verticalOffset={screenLength:n(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}const L={screenOffset:S.screenOffset,anchorPosition:w,centerOffsetUnits:S.centerOffsetUnits,verticalOffset:S.verticalOffset,shaderPolygonOffset:S.shaderPolygonOffset,occlusionTest:S.occlusionTest};if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources,r=U(this._textRenderParameters);S.screenSizePerspective=t.overrideFontHeight(r.maxHeight),S.screenSizePerspectiveAlignment=e,L.fontHeight=r.maxHeight}S.hasSlicePlane=this._context.slicePlaneEnabled;const G=this._context.spherical,R=h?JSON.stringify(L):"";let W=h?.get(R);null==W&&(W=new T(S,G),h?.add(R,W));const F=m.placement.translation,M=P?s(P.displayWidth,P.displayHeight):i,V=m.placement.centerOffset,$=H,k=y?a(0,0,0,0):null,N=D(W,$,F,null,null,M,V,k,null),q=C(this._context,l,N,v,O);if(null==q)return null;const B=(t,r,n,s,i,o)=>{const l=x()||m.placement.elevationOffset,a=this.setGraphicElevationContext(e,r,l);return f(t,a,n,s,i,o)},J=new d(this,q.object,[N],null==h?[W]:null,E,B,v);J.alignedSampledElevation=q.sampledElevation,J.needsElevationUpdates=p(v.mode)||"absolute-height"===v.mode,J.getScreenSize=(e=o())=>(e[0]=P?P.displayWidth:m.displaySize[0],e[1]=P?P.displayHeight:m.displaySize[1],e);const Y=new g(m.placement.elevationOffset,c);return J.metadata=Y,z(J,l,this._context.elevationProvider),J}}function F(e,t,r){e&&e.forEach((e=>{const n=t(e);null!=n&&r(n,e.graphic)}))}function I(e,t){if("baseline"===t.verticalPlacement){const r=E[t.horizontalPlacement],n=null!=e?e.baselineAnchorY:0;return s(r,n)}const r=_(t.horizontalPlacement,t.verticalPlacement);return w[r]}const M={mode:"relative-to-ground",offset:0};export{W as Graphics3DTextSymbolLayer};
