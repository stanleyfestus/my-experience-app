/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/Evented.js";import{throwIfAborted as r}from"../../../../../core/promiseUtils.js";import{watch as i,initial as s}from"../../../../../core/reactiveUtils.js";import{property as n}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/RandomLCG.js";import{subclass as o}from"../../../../../core/accessorSupport/decorators/subclass.js";import a from"../../../../../geometry/SpatialReference.js";import{QueryEngine as u}from"../../../../../layers/graphics/data/QueryEngine.js";import l from"../../../../../rest/support/Query.js";import{Tile3DManager as c}from"./Tile3DManager.js";import{TiledFeatureStore as d}from"./featureSet/TiledFeatureStore.js";import{Tile3DFetcher as m}from"./fetching/Tile3DFetcher.js";import{RenderCommandContext as h}from"./rendering/RenderCommandContext.js";import{Symbolizer as y}from"./symbolization/Symbolizer.js";let p=class extends t.EventedAccessor{constructor(){super(...arguments),this.remoteClient=null,this._featureStore=new d,this._tileManager=new c({addTile:(e,t)=>this._addTile(e,t),removeTiles:e=>this._removeTiles(e)}),this._renderCommandContext=null,this._fetcher=null,this._symbolizer=null,this._queryEngine=null,this._defaultQueryJSON=null}get updating(){return this._tileManager.updating}destroy(){this._featureStore.clear(),this._tileManager.destroy()}async setup({viewSpatialReference:e,renderSpatialReference:t,viewingMode:r,baseQuery:n,url:o,objectIdField:c,capabilities:d,fieldsIndex:p,timeInfo:f}){this._renderCommandContext=new h({viewingMode:r,dispatchRenderCommandsCallback:(e,t)=>this.remoteClient.invoke("dispatchRenderCommands",e,{transferList:t})});const g=a.fromJSON(e),S=a.fromJSON(t);return this._fetcher=new m(g,l.fromJSON(n),o,c,d),this._symbolizer=new y({viewSpatialReference:g,renderSpatialReference:S,viewingMode:r}),this._queryEngine=new u({hasZ:!0,hasM:!1,geometryType:"esriGeometryPoint",objectIdField:c,fieldsIndex:p,availableFields:[c],spatialReference:e,featureStore:this._featureStore,timeInfo:f}),this._defaultQueryJSON=new l({outSpatialReference:g}).toJSON(),this.addHandles(i((()=>this.updating),(async e=>{this.emit("notify-updating",{updating:e})})),s),_}async executeQuery(e,t){return{result:await this._queryEngine.executeQuery(this._ensureQuery(e),t)}}async executeQueryForIds(e,t){const r=await this._queryEngine.executeQueryForIdSet(this._ensureQuery(e),t);return{result:Array.from(r)}}async executeQueryForCount(e,t){return{result:await this._queryEngine.executeQueryForCount(this._ensureQuery(e),t)}}async executeQueryForExtent(e,t){return{result:await this._queryEngine.executeQueryForExtent(this._ensureQuery(e),t)}}async executeQueryForLatestObservations(e,t){return{result:await this._queryEngine.executeQueryForLatestObservations(this._ensureQuery(e),t)}}async onTileTreeChange(e){return await this._tileManager.onTileTreeChange(e),_}async _addTile(e,t){const i=await this._fetcher.fetch(e,t);r(t),this._featureStore.addTile(i);const s=this._renderCommandContext.createEncoder();return await this._symbolizer.add(i,s),await s.dispatch(),i}async _removeTiles(e){const t=this._renderCommandContext.createEncoder(),r=this._featureStore,i=this._symbolizer;for(const s of e)r.removeTile(s.tileId),await i.remove(s.tileId,t);await t.dispatch()}_ensureQuery(e){return e??this._defaultQueryJSON}};e([n()],p.prototype,"updating",null),p=e([o("esri.views.3d.layers.graphics.pipeline.Feature3DPipelineWorker")],p);const f=p,_={result:void 0};export{f as default};
