/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import o from"../../../../../core/Accessor.js";import{createTask as r}from"../../../../../core/asyncUtils.js";import{throwIfAborted as s}from"../../../../../core/promiseUtils.js";import t from"../../../../../core/ReactiveMap.js";import{property as i}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/RandomLCG.js";import{subclass as c}from"../../../../../core/accessorSupport/decorators/subclass.js";let a=class extends o{constructor(e){super(e),this._removing=0,this._tiles=new t}destroy(){for(const e of this._tiles.values())e.remove();this._tiles.clear()}get updating(){if(this._removing>0)return!0;for(const e of this._tiles.values())if(!e.finished)return!0;return!1}async onTileTreeChange(e){const{added:o,removed:s}=e,t=this._tiles,i=[];for(const r of s){const e=t.get(r);null!=e&&(e.abort(),t.delete(r),i.push({tileId:r}))}for(const c of o)t.has(c.id)||t.set(c.id,r((e=>this._addTile(c,e))));await this._removeTiles(i)}async _addTile(e,o){const r=await this.addTile(e,o);return s(o),r}async _removeTiles(e){this._removing++,await this.removeTiles(e),this._removing--}};e([i()],a.prototype,"updating",null),e([i({constructOnly:!0})],a.prototype,"addTile",void 0),e([i({constructOnly:!0})],a.prototype,"removeTiles",void 0),e([i()],a.prototype,"_removing",void 0),a=e([c("esri.views.3d.layers.graphics.pipeline.Tile3DManager")],a);export{a as Tile3DManager};
