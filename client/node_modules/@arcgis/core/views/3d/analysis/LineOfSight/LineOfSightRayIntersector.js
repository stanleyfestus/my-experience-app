/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../geometry.js";import r from"../../../../core/Accessor.js";import{screenPointObjectToArray as t}from"../../../../core/screenUtils.js";import{property as o}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as s}from"../../../../core/accessorSupport/decorators/subclass.js";import{s as i,c as n,n as c,h as a,g as l}from"../../../../chunks/vec32.js";import{clone as m,create as p}from"../../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{create as u,copy as d,fromPoints as f}from"../../../../geometry/support/ray.js";import{sv2d as g}from"../../../../geometry/support/vectorStacks.js";import{getObjectId as y}from"../../../../layers/graphics/dehydratedFeatures.js";import{LineOfSightIntersectionResult as h}from"./LineOfSightIntersectionResult.js";import{fromScreen as j}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as I}from"../../terrain/Intersector.js";import{newIntersector as v}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as w,IntersectorType as b}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as R}from"../../webgl-engine/lib/intersectorUtilsConversions.js";import P from"../../../../geometry/Point.js";let L=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=v(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=w.MIN}getScreenPointIntersection(e){const r=t(e,g.get()),o=j(this.view.state.camera,r,U);return this._getRayIntersection(o)}_getRayIntersection(e,r){const{view:t,intersector:o}=this;if(null==e||null==t.sceneIntersectionHelper)return null;o.options.store=w.MIN,t.sceneIntersectionHelper.intersectToolIntersectorRay(e,o,r);const s=o.results.min;if(null==s.target)return null;const n=p();if(!s.getIntersectionPoint(n))return null;if(null!=r?.maxDistance&&i(n,e.origin)>r.maxDistance**2)return null;const c=t.renderCoordsHelper.fromRenderCoords(n,new P({spatialReference:t.spatialReference})),a=m(s.normal);if(I(s))return new h({type:b.TERRAIN,id:s.target.lij.slice(),mapPoint:c,renderPoint:n,normal:a,ray:d(e),graphic:null});const l=R(s,t);if(null==l)return null;const{layer:u,sourceLayer:f}=l,g="scene"===f?.type?y(l,f.objectIdField):l.uid;return new h({type:b.OBJECT,id:`${u?.uid}/${g}`,mapPoint:c,renderPoint:n,normal:a,ray:d(e),graphic:l})}updateFromGroundIntersection(e,r,t){const o=S,s=x,i=C,p=O;n(s,e),this.view.renderCoordsHelper.worldUpAtPosition(s,i),c(i,i);const u=this.view.basemapTerrain.visibleElevationBounds,d=(r>=0?1:-1)*((u?Math.abs(u.max-u.min):100)+Math.abs(r));a(p,i,d),l(o,s,p),f(o,s,U);const g=this._getRayIntersection(U,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:d});if(null!=g){const e=O;return a(e,i,r),l(t,g.renderPoint,e),m(g.normal)}return n(t,e),null}};e([o()],L.prototype,"view",void 0),e([o()],L.prototype,"intersector",void 0),L=e([s("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],L);const S=p(),x=p(),C=p(),O=p(),U=u();export{L as LineOfSightRayIntersector};
