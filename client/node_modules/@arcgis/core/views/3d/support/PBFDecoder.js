/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{nativeArrayMaxSize as e}from"../../../core/typedArrayUtil.js";import{generateUID as r}from"../../../core/uid.js";import{WorkerHandle as s}from"../../../core/workers/WorkerHandle.js";import t from"../../../geometry/SpatialReference.js";import o from"../../../layers/support/Field.js";class n{constructor(e){this._controller=e,this._handle=new c((r=>e.schedule(r)))}destroy(){this._handle.destroy()}invoke(e,s){return e.buffer&&0!==e.buffer.byteLength?(e.options.sourceSpatialReference&&e.options.sourceSpatialReference instanceof t&&(e.options={...e.options,sourceSpatialReference:e.options.sourceSpatialReference.toJSON()}),this._handle.invoke(e,s).then((e=>{let s=0,n=0;const c=t.fromJSON(e.spatialReference);e.spatialReference=c;const i=async t=>{const l=e.fields;if(l)for(;s<l.length;)if(l[s]=o.fromJSON(l[s]),s++,t.madeProgress())return this._controller.reschedule((e=>i(e)));const p=e.features;for(;n<p.length;){const e=p[n];++n,e.uid=r();const s=e.geometry;if(null!=s&&(s.spatialReference=c,a(s),t.madeProgress()))return this._controller.reschedule((e=>i(e)))}return e};return this._controller.schedule((e=>i(e)))}))):Promise.resolve(null)}}function a(r){switch(r.type){case"polyline":r.paths.reduce(((e,r)=>e+r.length),0)<e&&(r.paths=r.hasZ||r.hasM?r.paths.map((e=>e.map((e=>[e[0],e[1],e[2]])))):r.paths.map((e=>e.map((e=>[e[0],e[1]])))));break;case"polygon":r.rings.reduce(((e,r)=>e+r.length),0)<e&&(r.rings=r.hasZ||r.hasM?r.rings.map((e=>e.map((e=>[e[0],e[1],e[2]])))):r.rings.map((e=>e.map((e=>[e[0],e[1]])))))}}class c extends s{constructor(e){super("PBFDecoderWorker","_parseFeatureQuery",{_parseFeatureQuery:e=>[e.buffer]},e)}}export{n as PBFDecoder};
