/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Accessor.js";import"../../../core/has.js";import t from"../../../core/PooledArray.js";import{isPromiseLike as s}from"../../../core/promiseUtils.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import{isIntersectionHandler as o}from"../state/helpers/SceneIntersectionHelper.js";import{ChangeSet as d}from"./lib/ChangeSet.js";import{UpdatePolicy as h}from"./lib/UpdatePolicy.js";import{isWebGLLayer as a}from"./lib/WebGLLayer.js";import{Model as y}from"./parts/Model.js";import{RenderView as c}from"./parts/RenderView.js";import{TaskPriority as l,noBudget as m}from"../../support/Scheduler.js";import{Yield as p}from"../../support/Yield.js";let _=class extends r{constructor(e){super(e),this._model=new y,this._layers=new t,this._asyncChangeSet=new d,this._syncChangeSet=new d,this._layerSyncSet=new Set}initialize(){this._set("renderView",new c(this)),this._frameTask=this.view.resourceController.scheduler.registerTask(l.STAGE,this),this.addHandles(this._frameTask)}destroy(){this.renderView.destroy()}get viewingMode(){return this.view.state.viewingMode}get updating(){return this.running||this.renderView.updating||this._frameTask.updating}get renderer(){return this.renderView?.renderer}add(e){this._model.add(e),a(e)&&this._addLayer(e),this.renderView.requestRender()}remove(e){null!=e&&!this.destroyed&&this._model.remove(e)&&(a(e)&&this._removeLayer(e),this.renderView.requestRender())}addMany(e){null!=e&&(this._model.addMany(e),this.renderView.requestRender())}removeMany(e){null!=e&&(this._model?.removeMany(e),this.renderView?.requestRender())}forEachOfType(e,r){this._model.forEachOfType(e,r)}handleEvent(e,r){this.destroyed||(this._model.dirtySet[e](r),this.renderView.requestRender())}get running(){return this._model.dirtySet.dirty||!this._asyncChangeSet.empty}runTask(e){if(this._frameTask.processQueue(e),this._commit(e),!e.hasProgressed)return p}_commit(e){const r=this._model.dirtySet;this._asyncChangeSet.empty||e.done||(this.renderer.modify(this._asyncChangeSet,e),this.renderView.requestRender(),e.madeProgress()),this._layers.forAll((t=>{if(e.done)return;const s=this._layerSyncSet.has(t.id)||t.updatePolicy===h.SYNC,i=s?this._syncChangeSet:this._asyncChangeSet;r.commitLayer(t.id,i),this._layerSyncSet.delete(t.id),i.empty||(this.renderer.modify(i,s?m:e),this.renderView.requestRender(),e.madeProgress())})),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,m),this.renderView.requestRender(),e.madeProgress()),this._layers.forAll((t=>{e.done||this._layerSyncSet.has(t.id)||t.updatePolicy!==h.ASYNC||(r.commitLayer(t.id,this._asyncChangeSet),this._asyncChangeSet.empty||(this.renderer.modify(this._asyncChangeSet,e),this.renderView.requestRender(),e.madeProgress()))})),this._layerSyncSet.clear(),this.notifyChange("running")}commitSyncLayers(){const e=this._model.dirtySet;this._layers.forAll((r=>{this._layerSyncSet.has(r.id)||r.updatePolicy===h.SYNC?(e.commitLayer(r.id,this._syncChangeSet),this._layerSyncSet.delete(r.id)):e.commitSyncUpdates(r.id,this._syncChangeSet)}));for(const r of this._layerSyncSet)e.commitLayer(r,this._syncChangeSet);this._layerSyncSet.clear(),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,m),this.renderView.requestRender())}_commitLayer(e){this._model.dirtySet.commitLayer(e.id,this._syncChangeSet),this._layerSyncSet.delete(e.id),this._syncChangeSet.empty||(this.renderer.modify(this._syncChangeSet,m),this.renderView.requestRender())}schedule(e,r){return this._frameTask.schedule(e,r)}reschedule(e,r){return this._frameTask.reschedule(e,r)}syncLayer(e){this._layerSyncSet.add(e),this.renderView.requestRender()}getObject(e){return this._model.getObject(e)}get layers(){return this._layers}_addLayer(e){this._layers.includes(e)||this._layers.push(e)}_removeLayer(e){this._commitLayer(e),null!=this._layers.removeUnordered(e)&&(this._model.dirtySet.getResidentRenderGeometries(e.id,this._syncChangeSet.removes),this.renderer.modify(this._syncChangeSet,m))}addRenderPlugin(e,r){const t=this.renderer.plugins.add(e,r),i=()=>{o(e)&&this.view.sceneIntersectionHelper.addIntersectionHandler(e)};if(s(t))return t.then(i);i()}removeRenderPlugin(e){this.destroyed||(o(e)&&this.view.sceneIntersectionHelper.removeIntersectionHandler(e),this.renderer.plugins.remove(e))}get performanceInfo(){return this._model.getStats()}get test(){}};e([i({constructOnly:!0})],_.prototype,"view",void 0),e([i({constructOnly:!0})],_.prototype,"options",void 0),e([i({readOnly:!0})],_.prototype,"viewingMode",null),e([i({constructOnly:!0})],_.prototype,"container",void 0),e([i({readOnly:!0})],_.prototype,"updating",null),e([i({constructOnly:!0})],_.prototype,"_model",void 0),e([i()],_.prototype,"renderView",void 0),e([i({readOnly:!0})],_.prototype,"renderer",null),e([i({readOnly:!0})],_.prototype,"running",null),_=e([n("esri.views.3d.webgl-engine.Stage")],_);export{_ as Stage};
