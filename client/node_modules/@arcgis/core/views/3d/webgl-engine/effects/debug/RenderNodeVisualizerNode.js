/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/has.js";import"../../../../../core/Logger.js";import"../../../../../core/RandomLCG.js";import{subclass as o}from"../../../../../core/accessorSupport/decorators/subclass.js";import{ZEROS as t}from"../../../../../core/libs/gl-matrix-2/factories/vec4f64.js";import{ColorFormat as n}from"../../../webgl/formats.js";import i from"../../../webgl/RenderNode.js";import{alphaCutoff as s}from"../../core/shaderLibrary/util/AlphaCutoff.js";import{If as a,glsl as c}from"../../core/shaderModules/interfaces.js";import{Default3D as l}from"../../lib/DefaultVertexAttributeLocations.js";import{FramebufferBit as u,ColorAttachment as p,BlendFactor as d,SizedPixelFormat as f,PixelFormat as h,DataType as m}from"../../../../webgl/enums.js";let T=class extends i{constructor(e){super(e),this.destroyedCB=null,this.produces="final-color",this.consumes={required:["final-color"]},this.clearColor=t,this._focusedFBOType=0,this._program=new Map}destroy(){this._program.forEach((e=>e.dispose())),this._program.clear(),this.destroyedCB()}render(e){const r=e.find((({name:e})=>"final-color"===e));if(!this._focusedFBO)return r;const o=this.renderingContext;o.bindFramebuffer(r.fbo),o.setClearColor(0,0,0,0),o.clear(u.COLOR);const t=this._ensureShader(o,!1,0);return o.useProgram(t),o.bindTexture(this._focusedFBO.getTexture(),0),t.setUniform1i("colorTex",0),t.setUniform1i("inputType",this._focusedFBOType),3===this._focusedFBOType&&t.setUniform2fv("nearFar",this.camera.nearFar),o.screen.draw(),r}getDownscaledFBO(e,r,o,t,i,s){o===v.ON&&(i=e.width,s=e.height);const a=this.renderingContext,c=e.depthStencilTexture,l=this._ensureShader(a,null!=c,r),h=this.fboCache.acquire(i,s,"fbo visualizer"),m=!e.colorTexture?.descriptor.hasMipmap;m&&e.colorTexture?.generateMipmap(),a.useProgram(l),a.bindFramebuffer(h.fbo);let T=0;const g=[p.COLOR_ATTACHMENT0],x=null!=c;if(a.bindTexture(e.colorTexture,T),l.setUniform1i("colorTex",T),c){T++,a.bindTexture(c,T),l.setUniform1i("depthTex",T);const e=p.COLOR_ATTACHMENT0+T;h.acquireColor(e,n.RGBA,"depth to color"),g.push(e)}for(let u=0;u<r;u++){T++;const r=p.COLOR_ATTACHMENT0+T,o=x?1:0;a.bindTexture(e.getColorTexture(r-o),T),l.setUniform1i("colorTex"+(T-o-1),T),h.acquireColor(r,n.RGBA),g.push(r)}a.gl.drawBuffers(g);const F=a.getViewport();a.setViewport(0,0,i,s),a.setClearColor(0,0,0,0),a.clear(u.COLOR),a.setBlendingEnabled(!0),a.setBlendFunction(d.ONE,d.ONE_MINUS_SRC_ALPHA);const C="linear-depth"===t||t.includes("shadow"),b=e.colorTexture?.descriptor.internalFormat,O=C?3:b===f.R16F||b===f.R32F||b===f.R8?1:b===f.RG8?2:b===f.RGBA16F?4:0;return l.setUniform1i("inputType",O),C&&l.setUniform2fv("nearFar",this.camera.nearFar),a.screen.draw(),a.bindFramebuffer(null),a.setViewport(F.x,F.y,F.width,F.height),o===v.ON&&(this._focusedFBO=h,this._focusedFBOType=O),m&&e.colorTexture?.clearMipmap(),h}clearFocusedFBO(){this._focusedFBO=null}getPreviewContent(e,r,o,t){if(!o)return null;const n=this.renderingContext,i=this.fboCache.acquire(e,r,"fbo visualizer");n.bindFramebuffer(i?.fbo),n.setClearColor(this.clearColor[0],this.clearColor[1],this.clearColor[2],this.clearColor[3]),n.clear(u.COLOR),n.setBlendingEnabled(!0),n.setBlendFunction(d.ONE,d.ONE_MINUS_SRC_ALPHA),n.setViewport(0,0,e,r);const s=this._ensureShader(n,!1,0);n.useProgram(s),n.bindTexture(o.getColorTexture(t),0),s.setUniform1i("colorTex",0),s.setUniform1i("inputType",0),n.screen.draw();const a=new ImageData(new Uint8ClampedArray(e*r*4),e,r);return n.gl.readPixels(0,0,e,r,h.RGBA,m.UNSIGNED_BYTE,new Uint8Array(a.data.buffer)),n.bindFramebuffer(null),i?.release(),a}_ensureShader(e,r,o){const t={hasDepth:r,attachments:o},n=this._program.get(t);if(n)return n;const i="#version 300 es\n      in vec2 position;\n      out vec2 uv;\n\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n        uv = position * 0.5 + vec2(0.5);\n      }",u=(e,r)=>{let o="";const t=e?2:1;for(let n=0;n<r;n++)o+=`layout(location = ${c.int(t+n)}) out vec4 fragColor${c.int(n)};\n                uniform sampler2D colorTex${c.int(n)};`;return o},p=e=>{let r="";for(let o=0;o<e;o++)r+=`fragColor${c.int(o)} = texture(colorTex${c.int(o)}, uv);`;return r},d=`#version 300 es\n      precision highp float;\n\n      in vec2 uv;\n      uniform sampler2D colorTex;\n      layout(location = 0) out vec4 fragColor;\n      ${a(r,"layout(location = 1) out vec4 fragDepth;\n         uniform sampler2D depthTex;")}\n      ${u(r,o)}\n      uniform int inputType;\n      uniform vec2 nearFar;\n\n      // Factors to convert rgba back to float\n      const vec4 RGBA_2_FLOAT_FACTORS = vec4(\n        255.0 / (256.0),\n        255.0 / (256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0),\n        255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n      );\n\n\n      float rgba2float(vec4 rgba) {\n        // Convert components from 0->1 back to 0->255 and then add the components together with their corresponding\n        // fixed point factors, i.e. (256^1, 256^2, 256^3, 256^4)\n        return dot(rgba, RGBA_2_FLOAT_FACTORS);\n      }\n\n      float linearDepthFromFloat(float depth) {\n        depth = pow(depth, 0.2);\n        return -(depth * (nearFar[1] - nearFar[0]) + nearFar[0]);\n      }\n\n      float linearDepthFromRGBA(vec4 depth) {\n        return linearDepthFromFloat(rgba2float(depth));\n      }\n\n      float linearDepthFromTexture(sampler2D depthTex, vec2 uv) {\n        ivec2 iuv = ivec2(uv * vec2(textureSize(depthTex, 0)));\n        return linearDepthFromRGBA(texelFetch(depthTex, iuv, 0));\n      }\n\n      void main() {\n        vec4 color;\n        if(inputType == 1) {\n          color = vec4(vec3(texture(colorTex, uv).r), 1.0);\n        } else if(inputType == 2) {\n          color = vec4(texture(colorTex, uv).rg, 0.0, 1.0);\n        } else if(inputType == 3) {\n          float depth = 1.0 - (-linearDepthFromTexture(colorTex, uv) / (nearFar[1] - nearFar[0]));\n          color = vec4(vec3(depth), depth >= 0.999 ? 0.0 : 1.0);\n        } else if(inputType == 4) {\n          color = texture(colorTex, uv);\n          color = vec4(color.rgb / color.a, color.a);\n        } else {\n          color = texture(colorTex, uv);\n        }\n\n\n        if(color.a < ${c.float(s)})\n          discard;\n        else {\n          fragColor = color;\n          ${a(r,"float depth = 1.0 - pow(texture(depthTex, uv).r, 10.0);\n             fragDepth = vec4(vec3(depth), depth < 0.000001 ? 0.0 : 1.0);")}\n          ${a(o>0,p(o))}\n        }\n      }`;return this._program.set(t,e.programCache.acquire(i,d,l)),this._program.get(t)}};var v;e([r()],T.prototype,"destroyedCB",void 0),e([r()],T.prototype,"produces",void 0),e([r()],T.prototype,"consumes",void 0),e([r()],T.prototype,"clearColor",void 0),T=e([o("esri.views.3d.webgl-engine.effects.debug.RenderNodeVisualizerNode")],T),function(e){e[e.ON=0]="ON",e[e.OFF=1]="OFF"}(v||(v={}));export{v as FocusState,T as RenderNodeVisualizerNode};
