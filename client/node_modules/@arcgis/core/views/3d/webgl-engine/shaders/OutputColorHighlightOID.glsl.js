/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{ShaderOutput as o,isColorEmission as r,isColorOrColorEmission as t}from"../core/shaderLibrary/ShaderOutput.js";import{Emissions as i}from"../core/shaderLibrary/output/Emissions.glsl.js";import{OutputHighlight as l}from"../core/shaderLibrary/output/OutputHighlight.glsl.js";import{alphaCutoff as a}from"../core/shaderLibrary/util/AlphaCutoff.js";import{ColorConversion as s}from"../core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as e,If as u}from"../core/shaderModules/interfaces.js";import{OITPass as n}from"../lib/OITPass.js";function d(d,f){d.include(l,f),d.include(i,f),d.fragment.include(s);const p=f.output===o.ObjectAndLayerIdColor,c=r(f.output),g=t(f.output)&&f.oitPass===n.ColorAlpha,h=t(f.output)&&f.oitPass!==n.ColorAlpha,m=f.discardInvisibleFragments;let C=0;(h||c||g)&&d.outputs.add("fragColor","vec4",C++),c&&d.outputs.add("fragEmission","vec4",C++),g&&d.outputs.add("fragAlpha","float",C++),d.fragment.code.add(e`
    void outputColorHighlightOID(vec4 finalColor, const in vec3 vWorldPosition) {
      ${u(p,e`finalColor.a = 1.0;`)}

      ${u(m,e`if (finalColor.a < ${e.float(a)}){
              discard;
              return;
            }`)}

      finalColor = highlightSlice(finalColor, vWorldPosition);
      ${u(g,e`fragColor = premultiplyAlpha(finalColor);
             fragAlpha = finalColor.a;`)}
      ${u(h,"fragColor = finalColor;")}
      ${u(c,"fragEmission = getEmissions();")}
      calculateOcclusionAndOutputHighlight();
      ${u(p,"outputObjectAndLayerIdColor();")}
    }
  `)}export{d as outputColorHighlightOID};
