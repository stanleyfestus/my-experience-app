/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{Integer2PassUniform as e}from"../shaderModules/Integer2PassUniform.js";import{glsl as l}from"../shaderModules/interfaces.js";import{Texture2DPassUniform as i}from"../shaderModules/Texture2DPassUniform.js";import{g as t}from"../../../../../chunks/HighlightDownsample.glsl.js";function o(o){const{vertex:c}=o;c.uniforms.add(new i("coverageTexture",(e=>e.coverageTexture)),new e("highlightRenderCellCount",(e=>[e.horizontalCellCount,e.verticalCellCount])),new e("highlightTextureResolution",(e=>[e.highlightTexture.descriptor.width,e.highlightTexture.descriptor.height]))),c.constants.add("cellSize","int",t),o.varyings.add("sUV","vec2"),o.varyings.add("vOutlinePossible","float"),c.code.add(l`const ivec2 cellVertices[4] = ivec2[4](ivec2(0,0), ivec2(1,0), ivec2(0,1), ivec2(1,1));`),c.main.add(l`int cellIndex = gl_InstanceID;
int cellX = cellIndex % highlightRenderCellCount[0];
int cellY = (cellIndex - cellX) / highlightRenderCellCount[0];
ivec2 cellPos = ivec2(cellX, cellY);
vec4 cov = texelFetch(coverageTexture, cellPos, 0);
if (cov.r == 0.0) {
gl_Position = vec4(0.0);
return;
}
vOutlinePossible = cov.g;
ivec2 iPosInCell = cellVertices[gl_VertexID];
vec2 sPos = vec2(cellPos * cellSize + iPosInCell * (cellSize));
vec2 vPos = sPos / vec2(highlightTextureResolution);
sUV = vPos;
gl_Position = vec4(2.0 * vPos - vec2(1.0), 0.0, 1.0);`)}export{o as HighlightCellGridScreenSpacePass};
