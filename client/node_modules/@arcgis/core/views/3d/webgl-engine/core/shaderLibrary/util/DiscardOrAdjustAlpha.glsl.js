/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{alphaCutoff as o}from"./AlphaCutoff.js";import{FloatDrawUniform as a}from"../../shaderModules/FloatDrawUniform.js";import{FloatPassUniform as r}from"../../shaderModules/FloatPassUniform.js";import{glsl as e}from"../../shaderModules/interfaces.js";import{AlphaDiscardMode as d}from"../../../lib/basicInterfaces.js";function t(o,a){f(o,a,new r("textureAlphaCutoff",(o=>o.textureAlphaCutoff)))}function s(o,r){f(o,r,new a("textureAlphaCutoff",(o=>o.textureAlphaCutoff)))}function f(a,r,t){const s=a.fragment;switch(r.alphaDiscardMode){case d.Blend:a.fragment.code.add(e`
        #define discardOrAdjustAlpha(color) { if (color.a < ${e.float(o)}) { discard; } }
      `);break;case d.Opaque:s.code.add(e`void discardOrAdjustAlpha(inout vec4 color) {
color.a = 1.0;
}`);break;case d.Mask:s.uniforms.add(t).code.add(e`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } else { color.a = 1.0; } }`);break;case d.MaskBlend:s.uniforms.add(t).code.add(e`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } }`)}}export{s as DiscardOrAdjustAlphaDraw,t as DiscardOrAdjustAlphaPass};
