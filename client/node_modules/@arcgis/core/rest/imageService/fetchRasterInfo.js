/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import e from"../../request.js";import t from"../../geometry/Extent.js";import a from"../../geometry/Point.js";import l from"../../geometry/SpatialReference.js";import i from"../../layers/support/RasterInfo.js";import n from"../../layers/support/RasterStorageInfo.js";import{parseUrl as s,encode as r,asValidOptions as o}from"../utils.js";import u from"../support/FeatureSet.js";async function m(m,f,p){const c=s(m),{rasterFunction:d,sourceJSON:h}=f||{},g=d?JSON.stringify(d.rasterFunctionDefinition||d):null,y=r({...c.query,renderingRule:g,f:"json"}),x=o(y,p);m=c.path;const b=h||await e(m,x).then((e=>e.data)),v=b.hasRasterAttributeTable?e(`${m}/rasterAttributeTable`,x):null,S=b.hasColormap?e(`${m}/colormap`,x):null,V=b.hasHistograms?e(`${m}/histograms`,x):null,D=b.currentVersion>=10.3?e(`${m}/keyProperties`,x):null,I=b.hasMultidimensions?e(`${m}/multidimensionalInfo`,x):null,T=await Promise.allSettled([v,S,V,D,I]);let R=null;if(b.minValues&&b.minValues.length===b.bandCount){R=[];for(let e=0;e<b.minValues.length;e++)R.push({min:b.minValues[e],max:b.maxValues[e],avg:b.meanValues[e],stddev:b.stdvValues[e]})}const j=t.fromJSON(b.extent),w=Math.ceil(j.width/b.pixelSizeX-.1),M=Math.ceil(j.height/b.pixelSizeY-.1),N=l.fromJSON(b.spatialReference||b.extent.spatialReference),J="fulfilled"===T[0].status?T[0].value?.data:null,O=J?.features?.length?u.fromJSON(J):null,k="fulfilled"===T[1].status?T[1].value?.data.colormap:null,C=k?.length?k:null,P="fulfilled"===T[2].status?T[2].value?.data.histograms:null,z=P?.[0]?.counts?.length?P:null,F="fulfilled"===T[3].status?T[3].value?.data??{}:{},$="fulfilled"===T[4].status?T[4].value?.data.multidimensionalInfo:null,H=$?.variables?.length?$:null;H&&H.variables.forEach((e=>{e.statistics?.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))}));const{defaultVariable:L,serviceDataType:A}=b;L&&L!==F.DefaultVariable&&(F.DefaultVariable=L),A?.includes("esriImageServiceDataTypeVector")&&!A.includes(F.DataType)&&(F.DataType=A.replace("esriImageServiceDataType",""));let E=b.noDataValue;b.noDataValues?.length&&b.noDataValues.some((e=>e!==E))&&(E=b.noDataValues);const q=b.transposeInfo?new n({blockWidth:256,blockHeight:256,pyramidBlockWidth:256,pyramidBlockHeight:256,pyramidScalingFactor:2,compression:"lerc",origin:new a({x:b.extent.xmin,y:b.extent.ymax,spatialReference:N}),firstPyramidLevel:1,maximumPyramidLevel:Math.max(0,Math.round(Math.log(Math.max(w,M))/Math.LN2-8)),transposeInfo:b.transposeInfo}):void 0;return new i({width:w,height:M,bandCount:b.bandCount,extent:t.fromJSON(b.extent),spatialReference:N,pixelSize:new a({x:b.pixelSizeX,y:b.pixelSizeY,spatialReference:N}),pixelType:b.pixelType.toLowerCase(),statistics:R,attributeTable:O,colormap:C,histograms:z,keyProperties:F,noDataValue:E,multidimensionalInfo:H,storageInfo:q})}function f(e,t,a){return m(e,{sourceJSON:t},a)}function p(e,t,a){return m(e,{rasterFunction:t},a)}function c(e,t){e.attributeTable||(t.hasRasterAttributeTable=!1),e.histograms||(t.hasHistograms=!1),e.colormap||(t.hasColormap=!1),e.multidimensionalInfo||(t.hasMultidimensions=!1)}export{f as fetchServiceRasterInfo,p as generateRasterInfo,c as patchServiceInfo};
