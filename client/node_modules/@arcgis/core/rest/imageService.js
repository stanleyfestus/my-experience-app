/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../geometry.js";import t from"../request.js";import{ensureClass as e}from"../core/accessorSupport/ensureType.js";import{normalizeCentralMeridian as r}from"../geometry/support/normalizeUtils.js";import{srToRESTValue as o}from"../geometry/support/spatialReferenceUtils.js";import{parseUrl as a,encode as s,asValidOptions as n}from"./utils.js";import m from"./support/FindImagesParameters.js";import i from"./support/FindImagesResult.js";import p from"./support/ImageAngleParameters.js";import u from"./support/ImageAngleResult.js";import c from"./support/ImageAreaParameters.js";import f from"./support/ImageAreaResult.js";import l from"./support/ImageBoundaryParameters.js";import g from"./support/ImageBoundaryResult.js";import y from"./support/ImageDistanceParameters.js";import j from"./support/ImageDistanceResult.js";import d from"./support/ImageGPSInfoParameters.js";import S from"./support/ImageGPSInfoResult.js";import I from"./support/ImageHeightParameters.js";import R from"./support/ImageHeightResult.js";import N from"./support/ImageHistogramParameters.js";import h from"./support/ImageIdentifyParameters.js";import O from"./support/ImageIdentifyResult.js";import w from"./support/ImagePixelLocationParameters.js";import J from"./support/ImagePixelLocationResult.js";import P from"./support/ImagePointParameters.js";import q from"./support/ImagePointResult.js";import G from"./support/ImageSampleParameters.js";import $ from"./support/ImageSampleResult.js";import C from"./support/ImageToMapMultirayParameters.js";import M from"./support/ImageToMapParameters.js";import b from"./support/ImageUrlParameters.js";import F from"./support/ImageUrlResult.js";import v from"./support/MapToImageParameters.js";import T from"./support/MeasureAreaFromImageResult.js";import A from"./support/MeasureFromImageParameters.js";import L from"./support/MeasureLengthFromImageResult.js";import U from"../geometry/SpatialReference.js";import{fromJSON as x}from"../geometry/support/jsonUtils.js";function H(t){const e=t?.time;if(e&&(null!=e.start||null!=e.end)){const r=[];null!=e.start&&r.push(e.start),null==e.end||r.includes(e.end)||r.push(e.end),t.time=r.join(",")}}async function B(t,o,m){o=e(N,o);const i=a(t),p=o.geometry?[o.geometry]:[],u=await r(p),c=o.toJSON();H(c);const f=u?.[0];null!=f&&(c.geometry=rt(f));const l=s({...i.query,f:"json",...c});return n(l,m)}async function D(r,o,m){const i=(o=e(p,o)).toJSON();null!=i.angleName&&(i.angleName=i.angleName.join(",")),o?.point?.spatialReference?.imageCoordinateSystem&&(i.point.spatialReference=ot(o.point.spatialReference)),o?.spatialReference?.imageCoordinateSystem&&(i.spatialReference=at(o.spatialReference));const c=a(r),f=s({...c.query,f:"json",...i}),l=n(f,m),{data:g}=await t(`${c.path}/computeAngles`,l);return g.spatialReference=g.spatialReference?null!=g.spatialReference.geodataXform?new U({wkid:0,imageCoordinateSystem:g.spatialReference}):U.fromJSON(g.spatialReference):null,"NaN"===g.north&&(g.north=null),"NaN"===g.up&&(g.up=null),new u(g)}async function k(r,o,m){const i=(o=e(w,o)).toJSON(),{geometries:p}=o;if(p)for(let t=0;t<p.length;t++)p[t].spatialReference?.imageCoordinateSystem&&(i.geometries.geometries[t].spatialReference=ot(p[t].spatialReference));const u=a(r),c=s({...u.query,f:"json",...i}),f=n(c,m),{data:l}=await t(`${u.path}/computePixelLocation`,f);return J.fromJSON(l)}async function z(e,r,o){const s=await B(e,r,o),n=a(e),{data:m}=await t(`${n.path}/computeStatisticsHistograms`,s),{statistics:i}=m;return i?.length&&i.forEach((t=>{t.avg=t.mean,t.stddev=t.standardDeviation})),{statistics:i,histograms:m.histograms}}async function E(e,r,o){const s=await B(e,r,o),n=a(e),{data:m}=await t(`${n.path}/computeHistograms`,s);return{histograms:m.histograms}}async function V(o,m,i){const p=(m=e(G,m)).toJSON();H(p),p.outFields?.length&&(p.outFields=p.outFields.join(","));const u=await r(m.geometry),c=u?.[0];null!=c&&(p.geometry=rt(c));const f=a(o),l=s({...f.query,f:"json",...p}),g=n(l,i),{data:y}=await t(`${f.path}/getSamples`,g),j=y?.samples?.map((t=>{const e="NaN"===t.value||""===t.value?null:t.value.split(" ").map((t=>Number(t)));return{...t,pixelValue:e}}));return $.fromJSON({samples:j})}async function X(o,m,i){m=e(h,m);const p=a(o),u=m.geometry?[m.geometry]:[];return r(u).then((e=>{const r=m.toJSON(),o=e?.[0];null!=o&&(r.geometry=JSON.stringify(rt(o)));const a=s({...p.query,f:"json",...r}),u=n(a,i);return t(p.path+"/identify",u)})).then((t=>O.fromJSON(t.data)))}async function K(t,r,o){r=e(I,r);const a=await Z(t,r,[r.fromGeometry,r.toGeometry],o);return R.fromJSON(a)}async function Q(t,r,o){r=e(c,r);const a=await Z(t,r,[r.geometry],o);return f.fromJSON(a)}async function W(t,r,o){r=e(P,r);const a=await Z(t,r,[r.geometry],o);return q.fromJSON(a)}async function Y(t,r,o){r=e(y,r);const a=await Z(t,r,[r.fromGeometry,r.toGeometry],o);return j.fromJSON(a)}async function Z(e,o,m,i){const p=a(e),u=await r(m),c=o.toJSON();null!=u[0]&&(c.fromGeometry=JSON.stringify(rt(u[0]))),null!=u[1]&&(c.toGeometry=JSON.stringify(rt(u[1])));const f=s({...p.query,f:"json",...c}),l=n(f,i),{data:g}=await t(p.path+"/measure",l);return g}async function _(t,e,r){const o=await et(t,e,r);return L.fromJSON(o)}async function tt(t,e,r){const o=await et(t,e,r);return T.fromJSON(o)}async function et(r,o,m){o=e(A,o);const i=a(r),p=o.toJSON(),u=s({...i.query,f:"json",...p}),c=n(u,m),{data:f}=await t(i.path+"/measureFromImage",c);return f}function rt(t){const e=t.toJSON();return t.spatialReference?.imageCoordinateSystem&&(e.spatialReference=ot(t.spatialReference)),e}function ot(t){const{imageCoordinateSystem:e}=t;if(e){const{id:t,referenceServiceName:r}=e;return null!=t?r?{icsid:t,icsns:r}:{icsid:t}:{ics:e}}return t.toJSON()}function at(t,e){if(!t.imageCoordinateSystem)return o(t);const r=ot(t),{icsid:a,icsns:s}=r;return null==a||null!=s&&!e?.toLowerCase().includes("/"+s.toLowerCase()+"/")?JSON.stringify(r):`0:${a}`}async function st(r,o,m){o=e(l,o);const i=a(r),p=o.toJSON();o.outSpatialReference&&(p.outSR=at(o.outSpatialReference));const u=s({...i.query,f:"json",...p}),c=n(u,m),{data:f}=await t(i.path+"/queryBoundary",c);return g.fromJSON(f)}async function nt(o,m,i){const p=(m=e(d,m)).toJSON();H(p),p.objectIds?.length&&(p.objectIds=p.objectIds.join(",")),p.geometry||p.objectIds||p.time||p.where||(p.where="1=1");const u=await r(m.geometry),c=u?.[0];null!=c&&(p.geometry=rt(c));const f=c?.spatialReference??m.geometry?.spatialReference;f&&(p.inSR=at(f));const l=a(o),g=s({...l.query,f:"json",...p}),y=n(g,i),{data:j}=await t(`${l.path}/queryGPSInfo`,y);return S.fromJSON(j)}async function mt(r,o,m){const i=(o=e(M,o)).toJSON();o.geometry.spatialReference.imageCoordinateSystem&&(i.geometry=rt(o.geometry)),o.depthOffset&&o.adjust||delete i.options;const p=a(r),u=s({...p.query,f:"json",...i}),c=n(u,m),{data:f}=await t(`${p.path}/imageToMap`,c);return x(f)}async function it(r,o,m){const i=(o=e(C,o)).toJSON();o.rasterIds?.length&&(i.rasterIds=o.rasterIds.join(","));const p=a(r),u=s({...p.query,f:"json",...i}),c=n(u,m),{data:f}=await t(`${p.path}/imageToMapMultiray`,c);return x(f)}async function pt(o,m,i){const p=(m=e(v,m)).toJSON(),u=await r(m.geometry),c=u?.[0];null!=c&&(p.geometry=rt(c)),m.visibleOnly||delete p.options;const f=c?.spatialReference??m.geometry?.spatialReference;f&&(p.inSR=at(f));const l=a(o),g=s({...l.query,f:"json",...p}),y=n(g,i),{data:j}=await t(`${l.path}/mapToImage`,y);return x(j)}async function ut(r,o,m){const i=(o=e(b,o)).toJSON(),p=a(r),u=s({...p.query,f:"json",...i}),c=n(u,m),{data:f}=await t(`${p.path}/getImageUrl`,c);return F.fromJSON(f)}async function ct(o,p,u){const c=(p=e(m,p)).toJSON(),f=await r([p.fromGeometry,p.toGeometry]);null!=f[0]&&(c.fromGeometry=rt(f[0]),f[0].spatialReference&&(c.inSR=at(f[0].spatialReference))),null!=f[1]&&(c.toGeometry=rt(f[1])),p.objectIds?.length&&(c.objectIds=c.objectIds.join(","));const l=a(o),g=s({...l.query,f:"json",...c}),y=n(g,u),{data:j}=await t(`${l.path}/find`,y);return i.fromJSON(j)}export{D as computeAngles,E as computeHistograms,k as computePixelSpaceLocations,z as computeStatisticsHistograms,ct as findImages,ot as getImageSpatialReferenceJSON,at as getImageSpatialReferenceQueryParameter,ut as getImageUrl,V as getSamples,X as identify,mt as imageToMap,it as imageToMapMultiray,pt as mapToImage,Q as measureAreaAndPerimeter,tt as measureAreaFromImage,Y as measureDistanceAndAngle,K as measureHeight,_ as measureLengthFromImage,W as measurePointOrCentroid,st as queryBoundary,nt as queryGPSInfo};
