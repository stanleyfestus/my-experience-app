/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../../../geometry.js";import{isArrayLike as e}from"../../../core/arrayUtils.js";import{clone as r,zeros as a}from"../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{a as t}from"../../../chunks/vec32.js";import{fromPoints as i,fromValues as o}from"../../../geometry/support/ray.js";import{l as n,i as s}from"../../../chunks/sphere.js";import{isElevationSource as c}from"../core/ElevationSourceDefinitions.js";import{rectifyMapPoint as f,rectifyMapPointPanoramic as m}from"./rectifyMapPoint.js";import{or as l,isUpdateElevationWithElevationSource as p,isElevationSampler as y,scaleWithFactor as u,scaleAndAddWithFactor as h,computeNewReferenceCoordinates as g,projectiveTransform as d,validatePixelsToTransform as w,validateRotationMatrix as v,getWebMercatorScalingFactor as x,computeFarplaneVertices as j,computeHFOVAndVFOV as A,vecToPoint as P,hasAngles as R,convertPixelToHeadingPitch as V,convertHeadingPitchToSphereVertex as F,reducerFn as M}from"./utils.js";import{worldToImage as T}from"./worldToImage.js";import{defaultImageSphereCenter as b}from"../../../widgets/PanoramicViewer/constants.js";import L from"../../../geometry/Point.js";async function O(e,r,a){const{verticalFieldOfView:t,imageBoundaries:i,scalingFactor:o,farPlaneVertices:n,cameraLocation:s,pixelsToTransform:c,vecToPoint:f}=z(e,r),m=new Array;return await E(c,n,i,f,r,m,s,o,t,a),Array.isArray(e)?m:m[0]}async function E(e,r,a,t,i,o,n,s,c,m){for(const u of e){let e=q(r,a,u,t,i);m&&l(y(m.elevationSample),p(m))&&(e=await f(t(e),{x:u[0],y:u[1]},{...i,...m,farPlaneVertices:r.map(t)})),o.push(t(k(e,n,s,i.averageElevation,i.cameraPitch,c)))}}function k(e,i,o,n,s,c){let f=r(e);const m=Math.sqrt((e[2]-i[2])**2+(Math.sqrt((e[0]-i[0])**2+(e[1]-i[1])**2)/o)**2)*o,l=u(t(a(),e,i),1/m,1/o);if(S(e[2],n,s,c)){const e=Math.abs((i[2]-n)/-l[2])*o;f=h(i,l,e,o)}else f[2]=n;return f}function S(e,r,a,t){return e<r||a+t/2<90}function q(e,r,a,t,i){let o=null;const n=9;let s,c=0,f=e,m=r;for(;c<=n;){const e=D(a,m,f,i);if(s=e.error,o=e.transformedPoint,l(s<=1,c===n))break;f=g(f,s,a,r),m=B(f,t,i),c++}return o}function B(e,r,a){return T(e.map(r),a).map((({x:e,y:r})=>[e,r,1]))}function D(e,r,a,t){const{cameraLocation:i}=t,o=d(e,r,a),{x:n,y:s}=T(new L(o,i.spatialReference),t);return{transformedPoint:o,error:H(e,[n,s,1])}}function H(e,r){return Math.abs(e[0]-r[0])+Math.abs(e[1]-r[1])}function z(r,a){const t=e(r)||"items"in r?r:[r],{cameraLocation:i,rotationMatrix:o}=a;if(w(t,i),v(o),9!==o?.length)throw new Error("Rotation matrix is not provided or is not a valid 3x3 matrix");const n=x(i.y,i.spatialReference),s=j({...a,scalingFactor:n}),c=T(s.map((e=>new L(e,i.spatialReference))),a),{vfov:f}=A(a.horizontalFieldOfView,a.verticalFieldOfView,a.cameraRoll);return{cameraLocation:i.toArray(),imageBoundaries:c.map((({x:e,y:r})=>[e,r,1])),verticalFieldOfView:f,farPlaneVertices:s,scalingFactor:n,pixelsToTransform:t.map((e=>[e.x,e.y,1])),vecToPoint:P(i.spatialReference)}}async function I(e,r,t){const{averageElevation:f,cameraHeading:l,cameraLocation:p,farDistance:u,imageHeight:h,imageWidth:g,verticalFieldOfView:d}=r,w=x(p.y,p.spatialReference),v=new Array,[j,A,P]=p.toArray(),T=n([j,A,P??0],u*w),O=b.toArray(),E=Array.isArray(e)?e:[e];for(const n of E){let e,x;if(R(n))e=n.heading,x=n.pitch;else{const r=V({x:n.x,y:n.y},g,h);e=r.heading,x=r.pitch}e=(e+l)%360;const b=i([O[0],O[1],O[2]],F(e,x)),E=o([j,A,P??0],b.direction);let S=a();s(T,E,S),t&&(c(t)||y(t.elevationSample))&&x+d/2<90&&(S=await m(new L(S,p.spatialReference),{heading:e,pitch:x},{...r,...t,farPlaneVertices:M(u,u).map((([e,r])=>new L([p.x+e,p.y+r],p.spatialReference)))})),S=k(S,p.toArray(),w,f,x,d),v.push(new L(S,p.spatialReference))}return Array.isArray(e)?v:v[0]}export{O as imageToWorld,I as imageToWorldPanoramic};
