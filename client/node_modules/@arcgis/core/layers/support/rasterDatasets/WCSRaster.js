/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Error.js";import i from"../../../core/Logger.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/RandomLCG.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import{isAxesOrderReversedForWkid as o}from"../../ogc/crsUtils.js";import{getCapabilities as r,describeCoverage as a}from"../../ogc/wcsUtils.js";import l from"../DimensionalDefinition.js";import c from"./BaseRaster.js";import{parse as d}from"./multipartParser.js";import{standardizeInterpolations as p}from"./wcsCoverageParser.js";import{getFormat as f}from"../rasterFormats/RasterCodec.js";import{clip as u}from"../rasterFunctions/pixelUtils.js";import h from"../../../geometry/Extent.js";const g=["nearest neighbor","bilinear","bicubic"],m=["nearest","linear","cubic"],w="response is not a supported multipart/related mediaType with inline tiff,  switching to compatibility mode",v="response is not a supported multipart mediaType with inline tiff",y="response is base64 encoded which may impact layer display performance",x="server returns an exception",I=new Set(["1.0.0","1.1.0","1.1.1","1.1.2","2.0.1"]);let C=class extends c{constructor(){super(...arguments),this.datasetFormat="WCSServer",this.tileType="Raster"}async fetchRawTile(e,i,n,s={}){if(this.isBlockOutside(e,i,n))return null;const{nativePixelSize:o,spatialReference:r}=this.rasterInfo,a=2**e,l=o.x*a,c=o.y*a,{blockWidth:d,blockHeight:p}=this.getBlockWidthHeight(e),{origin:f}=this.rasterInfo.storageInfo.tileInfo,h=this.getTileExtent({x:l,y:c},i,n,f,r,[d,p]),g=this.rasterInfo.extent,m=h.xmax>g.xmax,w=h.ymin<g.ymin,v=m||w;let y=h,x=d,I=p;if(v&&(y=h.clone().intersection(g),null!=y&&(m&&(x=Math.floor((y.xmax-y.xmin)/l),y.xmax=y.xmin+l*x),w&&(I=Math.floor((y.ymax-y.ymin)/c),y.ymin=y.ymax-c*I))),null==y||x<=1||I<=1)return null;const C=await this._getCoverage(y,x,I,a,s);if(!C)return null;const{coverageDescription:b}=this.coverageInfo;let{noDataValue:$,multidimensionalInfo:S}=this.rasterInfo;const{multidimensionalDefinition:j}=s;if(null!=S&&null!=j&&j.length){const e=j[0].variableName;if("2.0"===b.version){const t=b.rangeType[0].find((t=>t.name===e));$=t?.nilValue}else if("1.1"===b.version){const t=b.range.find((t=>t.identifier===e));$=t?.nullValues}}const T=await this.decodePixelBlock(C,{width:x,height:I,planes:null,pixelType:null,noDataValue:Array.isArray($)?$[0]:$});if(null==T)return null;if(T&&(T.width!==x||T.height!==I))throw new t("wcsraster-fetch",`the response has unexpected dimension width: ${T.width}, height: {pixelBlock.height}`);return v?u(T,{x:0,y:0},{width:p,height:p}):T}async _open(e){const{customFetchParameters:i}=this.ioConfig,n=e?.signal,s=await r(this.url,{version:this.version,customParameters:i,signal:n});if(this.capabilities=s,!this.version){let e=s.version.slice(0,3);"2.0"===e||"1.1"===e||"1.0"===e?this.version=s.version:(e=s.supportedVersions.find((e=>"2.0.1"===e))||s.supportedVersions.find((e=>"2.0"===e.slice(0,3)))||s.supportedVersions.find((e=>"1.1"===e.slice(0,3)))||s.supportedVersions.find((e=>"1.0"===e.slice(0,3)))||"1.0.0",this.version=e)}if(!I.has(this.version))throw new t("wcsraster-open",`unsupported WCS version ${this.version}`);const{gridCoverages:o}=s;if(!o.length)throw new t("wcsraster-open","cannot find rectified grid coverages");null==this.coverageId&&(this.coverageId=o[0].id);const l=o.find((e=>e.id===this.coverageId));if(null==l)throw new t("wcsraster-open",`the coverageId ${this.coverageId} does not exist in capabilities`);const c=await a(this.url,{coverageIds:[this.coverageId],version:this.version,customParameters:i,signal:n});this.coverageInfo=c[0],"2.0"===this.version.slice(0,3)&&(this.coverageInfo.lonLatEnvelope=l.lonLatEnvelope,this.coverageInfo.supportedInterpolations=p(s.supportedInterpolations)),this.datasetName=this.coverageInfo.title;const{rasterInfo:d}=this.coverageInfo;if(this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),null==d.spatialReference)throw new t("wcsraster-open",`coverage without spatial reference is not supported: ${this.coverageId}`);const{pixelType:f,bandCount:u}=await this._getPixelTypeAndBandCount(n);d.pixelType=f,1===d.bandCount&&u>1&&(d.bandCount=u),this.updateTileInfo()}async _getPixelTypeAndBandCount(e){const{pixelSize:n,extent:s,multidimensionalInfo:o}=this.rasterInfo,r=s.center,a=new h({xmin:r.x-n.x,xmax:r.x+n.x,ymin:r.y-n.y,ymax:r.y+n.y,spatialReference:s.spatialReference});let c=[];if(null!=o){const e=o.variables[0];c=[],e.dimensions.forEach((t=>{c.push(new l({variableName:e.name,dimensionName:t.name,values:t.hasRegularIntervals?t.extent?.[0]:t.values?.[0],isSlice:!0}))}))}const{coverageDescription:d}=this.coverageInfo,p={interpolation:"nearest",multidimensionalDefinition:c,signal:e},{version:f}=d,{ioConfig:u}=this,g="2.0"===f&&null==u.allowAnyMediaType||"1.1"===f&&null==u.use2GridOffsets;let m;try{m=await this._getCoverage(a,2,2,1,p,!0)}catch(y){if(!g)throw y;if("1.1"===f){if(!y.details?.isResolutionMismatch)throw y;u.use2GridOffsets=!0}}if(!m&&g&&("2.0"===f&&(u.allowAnyMediaType=!0),m=await this._getCoverage(a,2,2,1,p),m&&i.getLogger(this).warn("wcsraster:getcoverage",w)),!m)throw new t("wcsraster-open","unable to determine pixel type");const v=await this.decodePixelBlock(m,{width:2,height:2,planes:null,pixelType:null});if(null==v)throw new t("wcsraster-open","unable to determine pixel type");return{pixelType:v.pixelType,bandCount:v.getPlaneCount()??0}}async _getCoverage(e,n,s,o,r,a=!1){const{coverageDescription:l}=this.coverageInfo,{version:c}=l,p="2.0"===c?this._getCoverage201Parameters(e,n,s,o,r,l):"1.1"===c?this._getCoverage110Parameters(e,n,s,r,l):this._getCoverage100Parameters(e,n,s,r),u="2.0"===c?await this.request(this._constructWCS201Url(p),{signal:r.signal,responseType:"array-buffer"}):await this.request(this.url,{query:p,signal:r.signal,responseType:"array-buffer"});if("1.0"===c)return u.data;if("2.0"===c&&!1!==this.ioConfig.allowAnyMediaType){if("tiff"===f(u.data))return a&&(this.ioConfig.allowAnyMediaType=!0,i.getLogger(this).warn("wcsraster:getcoverage",w)),u.data}const h=d(u);if(h.isMultipart&&h.data){const e=h.data.find((e=>e.contentType?.toLowerCase().includes("image")&&null!=e.contentData));return a&&"base64"===e?.contentTransferEncoding&&i.getLogger(this).warn("wcsraster:getcoverage",y),e?.contentData}const g=new Uint8Array(u.data,0,Math.min(u.data.byteLength,2e3)),m=String.fromCharCode.apply(null,g).toLowerCase().includes("exception"),I=m&&String.fromCharCode.apply(null,g).includes("A non-zero RESX/RESY or WIDTH/HEIGHT is required but neither was provided");if(m)throw new t("wcsraster:getcoverage",x,{isResolutionMismatch:I});throw new t("wcsraster:getcoverage",v)}_getInterpolationIndex(e){return e&&this.coverageInfo.supportedInterpolations?.includes(e)?"nearest"===e?0:"bilinear"===e?1:"cubic"===e?2:0:0}_getCoverage100Parameters(e,t,i,n){const s=`${e.xmin},${e.ymin},${e.xmax},${e.ymax}`,o=e.spatialReference.wkid,r=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"GEOTIFF",{bandIds:a,interpolation:l}=n,c=this._getInterpolationIndex(l),d=a?a.map((e=>this.coverageInfo.bandNames[e])):null,p=g[c],{multidimensionalDefinition:f}=n;let u;if(null!=f&&null!=this.rasterInfo.multidimensionalInfo){const e=f.find((e=>"StdTime"===e.dimensionName));let t=e?.values;t&&t.length>0&&(Array.isArray(t[0])&&(t=t[0]),u=t.map((e=>b(e))).join(","))}return{service:"WCS",request:"GetCoverage",version:this.version,coverage:this.coverageId,format:r,crs:`EPSG:${o}`,bbox:s,width:t,height:i,time:u,interpolation:p,band:d?.join(",")}}_getCoverage110Parameters(e,t,i,n,s){const{multidimensionalDefinition:r,bandIds:a,interpolation:l}=n,c=e.spatialReference.wkid,d=`urn:ogc:def:crs:EPSG::${c}`,p=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"image/tiff",f=this._getInterpolationIndex(l),u=m[f],h=null==l||0===this.coverageInfo.supportedInterpolations?.indexOf(l),g=s.domain.spatialDomain,w=g.origin.x<=g.envelope.xmin&&g.origin.y<=g.envelope.ymin,v=e.width/t,y=e.height/i*(w?1:-1),x=w?[e.xmin,e.ymin]:[e.xmin,e.ymax],I=g.useEPSGAxis&&o(c),C=I?`${x[1]},${x[0]}`:`${x[0]},${x[1]}`,$=this.ioConfig.use2GridOffsets,S=I?$?`${y},${v}`:`${y},0,0,${v}`:$?`${v},${y}`:`${v},0,0,${y}`,j=v/2,T=e.xmin+j,L=e.xmax-j,P=Math.abs(y)/2,R=e.ymin+P,E=e.ymax-P,_=I?`${R},${T},${E},${L},${d}`:`${T},${R},${L},${E},${d}`,A=s.range.find((e=>e.axis.some((e=>e.identifier.toLowerCase().includes("band")))));let D,G=A&&u&&a?h?`${A.identifier}[${A.axis[0].identifier}[${a.join(",")}]]`:`${A.identifier}:${u}[${A.axis[0].identifier}[${a.join(",")}]]`:null;if(null!=r&&r.length)for(let o=0;o<r.length;o++){let e=r[o].values;const t=r[o].dimensionName?.toLowerCase(),i=r[o].variableName?.toLowerCase();if(e.length>0)if(Array.isArray(e[0])&&(e=e[0]),"stdtime"===t)D=e.map((e=>b(e))).join(",");else{const n=s.range.find((e=>e.identifier.toLowerCase()===i));if(n){const i=n.axis.find((e=>e.identifier.toLowerCase()===t));i&&(G=h?n.identifier+"["+i.identifier+"["+e.join(",")+"]]":n.identifier+":"+u+"["+i.identifier+"["+e.join(",")+"]]")}}}return{service:"WCS",request:"GetCoverage",version:this.version,identifier:this.coverageId,format:p,crs:`EPSG:${c}`,boundingbox:_,gridCS:"urn:ogc:def:cs:OGC:0.0:Grid2dSquareCS",gridType:"urn:ogc:def:method:WCS:1.1:2dGridIn2dCrs",gridOrigin:C,gridOffsets:S,gridBaseCRS:d,timeSequence:D,rangeSubset:G}}_getCoverage201Parameters(e,t,i,n,s,o){const{multidimensionalDefinition:r,interpolation:a}=s,l=this._getInterpolationIndex(a);let c=null;const{supportedInterpolations:d}=this.capabilities;if(d?.length)switch(l){case 0:c=d.find((e=>e.toLowerCase().includes("nearest")));break;case 1:c=d.find((e=>e.toLowerCase().includes("linear")));break;case 2:c=d.find((e=>e.toLowerCase().includes("cubic")||e.toLowerCase().includes("quadratic")))}const p=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"image/tiff",{bandNames:f}=this.coverageInfo,{boundedBy:u,domainSet:h,rangeType:g}=o,m=u.isEastFirst?0:1,w=1-m,{axisLabels:v}=u,y=v[m],x=v[w],I=`http://www.opengis.net/def/crs/EPSG/0/${e.spatialReference.wkid}`,C=I,$=[];$.push(`${y}(${e.xmin},${e.xmax})`),$.push(`${x}(${e.ymin},${e.ymax})`);const S=[];if(v.length>2)for(let E=2;E<v.length;E++){const e=h.origin[E];if(v[E].toLowerCase().includes("time")){let t=e.toString();u.uomLabels?.[E].toLowerCase().includes("ole")&&(S.push(v[E]),t=b(e,!0)),$.push(v[E]+",http://www.opengis.net("+t+")")}else $.push(v[E]+",http://www.opengis.net("+e+")")}let j=null;if(null!=r&&r.length){const e=[];g.forEach((t=>t.forEach((t=>e.push(t.name)))));const t=[];for(let i=0;i<r.length;i++){const n=v.find((e=>e===r[i].dimensionName)),s=e.find((e=>e===r[i].variableName));if(t.includes(s)||t.push(s),n){let e=r[i].values;if(e.length>0){Array.isArray(e[0])&&(e=e[0]);let t="";t=n.toLowerCase().includes("time")?e.map((e=>b(e))).join(","):e.join(",");const i=$.findIndex((e=>0===e.indexOf(n+",http://www.opengis.net")));-1===i&&$.push(n+",http://www.opengis.net("+t+")"),-1===i||$[i].includes("("+t+")")||$.splice(i,1,n+",http://www.opengis.net("+t+")")}}}t.length&&(j=t.join(","))}else if(f?.length>=2){j=(s.bandIds?s.bandIds.map((e=>f[e])):f).join(",")}const T=$.join("&subset="),L=!o.domainSet.hasSameAxisLabelsAsBoundedBy&&!1!==this.ioConfig.allowScaleFactor,P=L?null:`${y}(${t}),${x}(${i})`,R=L?1/n:null;return{service:"WCS",request:"GetCoverage",version:this.version,coverageId:this.coverageId,rangesubset:j,interpolation:c,scaleSize:P,scaleFactor:R,subset:T,format:p,mediaType:this.ioConfig.allowAnyMediaType?null:"multipart/related",outputcrs:I,subsettingcrs:C}}_constructWCS201Url(e){const t={...this.ioConfig.customFetchParameters,...e},i=[];Object.keys(t).forEach((e=>{const n=t[e];null!=n&&("subset"===e?"string"==typeof n&&n.split("&subset=").forEach((e=>{e&&i.push(`subset=${encodeURIComponent(e)}`)})):i.push(`${e}=${encodeURIComponent(n)}`))}));return`${encodeURI(this.url)}?${i.join("&")}`}};function b(e,t=!1){return(t?new Date(24*(e-25569)*60*60*1e3):new Date(e)).toISOString()}e([n({type:String,json:{write:!0}})],C.prototype,"datasetFormat",void 0),e([n({readOnly:!0})],C.prototype,"tileType",void 0),e([n({type:String,json:{write:!0}})],C.prototype,"version",void 0),e([n({type:String,json:{write:!0}})],C.prototype,"coverageId",void 0),C=e([s("esri.layers.support.rasterDatasets.WCSRaster")],C);const $=C;export{$ as default};
