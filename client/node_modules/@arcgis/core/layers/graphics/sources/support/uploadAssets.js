/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../../../../geometry.js";import e from"../../../../request.js";import has from"../../../../core/has.js";import s from"../../../../core/Logger.js";import{throwIfAborted as t,after as r,throwIfAbortError as o}from"../../../../core/promiseUtils.js";import{Milliseconds as n}from"../../../../core/time.js";import{join as a,parseData as i}from"../../../../core/urlUtils.js";import{generateBracedUUID as c}from"../../../../core/uuid.js";import{externalIsOnService as u,assetFormatId as l,ServiceAsset as p,ServiceAssetPart as m,externalSourceToMultiPart as f}from"../../../../geometry/support/meshUtils/External.js";import{UnsupportedError as g,NoSupportedSourceError as d,BadResponseError as y,UploadFailedError as w,UnsupportedFormatUploadedError as h,Convert3DFailedError as P,NoGlbSupportError as b,NotBase64Error as j,UnableToPrepareOptionsError as T}from"./uploadAssetErrors.js";import{uploadProgressWeights as A}from"./uploadProgressWeights.js";import{uploadItem as S}from"./uploads.js";import{getPrjFormatId as F,getWorldFileFormatId as v,getFormatIdMimeType as R,getMimeTypeFormatId as U,getGlbFormatId as x}from"../../../support/infoFor3D.js";import{getMeshTransformForMetersToSpatialReference as D}from"../../../support/meshSpatialReferenceScaleUtils.js";import{extractMeshFeatureTransform as N,extractMeshFeatureOrigin as E}from"../../../../rest/support/meshFeatureAttributes.js";import{makeProgressManager as C,estimatedConversionTime as O,simulateProgress as k}from"../../../../support/progressUtils.js";import I from"../../../../geometry/SpatialReference.js";async function B(e,s,t){const r=e.length;if(!r)return t?.onProgress?.(1),[];const o=C(r,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,r)=>q(e,s,{...t,onProgress:o.makeOnProgress(r)}))))}async function q(e,{layer:s,ongoingUploads:t},r){const o=t.get(e);if(o)return o;if(!ne(s))throw new g;if(L(e,s))return r?.onProgress?.(1),e;const n=H(e,s,r);t.set(e,n);try{await n}finally{t.delete(e)}return e}function L(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>u(e,t)))}async function H(e,s,r){const{metadata:o}=e,{displaySource:n}=o,a=W(n?.source,s,{checkForConversionRequired:has("enable-feature:georeferenced-uploads")}),i=null!=a?$(a,s,r):o.externalSources.length>0?J(e,s,r):z(e,s,r),c=await i;return t(r),e.addExternalSources([c]),e}async function $(e,s,t){return{source:await Q(e,s,t),original:!0,unitConversionDisabled:!0}}async function J(e,s,t){const r=ae(s),{externalSources:o}=e.metadata,n=M(o,s);if(!n)throw new d;const a=C(A.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await Q(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const c=n.reduce(((e,{asset:s})=>s instanceof File?e+s.size:e),0),u=a.simulate("serviceAssetsToGlb",O(c));try{const{source:o,transform:n,origin:a}=await se(i,s,r);return e.transform=n,a&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[a.x,a.y,a.z??0],e.spatialReference=a.spatialReference)),{source:o,unitConversionDisabled:!0}}finally{u.remove()}}async function z(e,s,t){const r=C(A.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),o=G(e,s,{...t,onProgress:r.makeOnProgress("meshToAssetBlob")});return{source:await V([o],s,{...t,onProgress:r.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function G(e,s,r){const o=ae(s),n=await e.load(r),a=await n.toBinaryGLTF({origin:n.origin,signal:r?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return t(r),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${c()}.glb`,assetType:o}}function M(e,s){for(const t of e){const e=W(t.source,s);if(e)return e}return null}function W(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:r,editFormats:o}=s,n=f(e),a=new Array,i=F(s),c=v(s);let u=!1;for(const l of n){const e=K(l,r);if(!e)return null;const{assetType:s}=e;if(t.checkForConversionRequired&&(s===i||s===c))return null;o.includes(s)&&(u=!0),a.push(e)}return u?a:null}function K(e,s){const t=l(e,s);return t?{asset:e,assetType:t}:null}async function Q(e,s,t){return V(e.map((e=>X(e,t))),s,t)}async function V(e,s,r){const o=C(A.uploadAssetBlobs,r?.onProgress,"uploadAssetBlobs"),n=await Z(e,s,{...r,onProgress:o.makeOnProgress("prepareAssetItems")});t(r);const a=n.map((({item:e})=>e)),{uploadResults:i}=await _(a,s,{...r,onProgress:o.makeOnProgress("uploadAssetItems")});return t(r),e.map(((e,t)=>ee(n[t],i[t],s)))}async function X(e,s){const{asset:r,assetType:o}=e;if(r instanceof File)return{blob:r,assetName:r.name,assetType:o};const n=await r.toBlob(s);return t(s),{blob:n,assetName:r.assetName,assetType:o}}async function Y(e,s,r){const{blob:n,assetType:a,assetName:c}=e;let u=null;try{const e=await S({data:n,name:c},s.url,r);t(r),u={assetType:a,assetUploadId:e.itemID}}catch(l){o(l),ie().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!u){const e=await i(n);if(t(r),!e.isBase64)throw new j;u={assetType:a,assetData:e.data}}if(!u)throw new T;return{item:u,assetName:c}}function Z(e,s,r){const o=C(e.length,r?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,n)=>{const a=Y(await e,s,{...r,onProgress:o.makeOnProgress(n)});return t(r),a})))}async function _(s,r,o){const n=k(o?.onProgress);try{const n=await e(a(r.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(t(o),n.data.uploadResults.length!==s.length)throw new y(s.length,n.data.uploadResults.length);return n.data}finally{n.remove()}}function ee(e,s,t){const{success:r}=s;if(!r){const{error:t}=s;throw new w(e.assetName,t)}const{assetHash:o}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,c=R(a,i);if(!c)throw new h(a);return new p(n,c,[new m(`${t.parsedUrl.path}/assets/${o}`,o)])}async function se(e,s,t){const r=e.map((({assetName:e,parts:s})=>({assetName:e,assetHash:s[0].partHash})));let o;try{const e=a(s.parsedUrl.path,"convert3D"),n=s.capabilities?.operations.supportsAsyncConvert3D;o=(await(n?oe:re)(e,{query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:t,async:n},responseType:"json",timeout:0})).data}catch(n){throw new P}return te(s,o)}function te(e,s){const t={source:s.assets.map((s=>{const t=U(s.contentType,e.infoFor3D.supportedFormats);if(!t)throw new h(t);return new p(s.assetName,s.contentType,[new m(s.assetURL,s.assetHash)])})),origin:void 0,transform:void 0};if(has("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=N(s.transform),s.spatialReference){const e=I.fromJSON(s.spatialReference);t.origin=E(s.transform,e)}}else t.transform=D(e.spatialReference);return t}function re(s,t){return e(s,t)}async function oe(s,t){const o=(await e(s,t)).data.statusUrl;for(;;){const s=(await e(o,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return e(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(s.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await r(ce)}}function ne(e){return!!e.infoFor3D&&!!e.url}function ae({infoFor3D:e}){const s=x(e);if(!s)throw new b;return s}function ie(){return s.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ce=n(1e3);export{B as uploadAssets};
