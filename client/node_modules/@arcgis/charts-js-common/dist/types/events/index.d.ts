import type { WebChartDataTypes, CalculatedMinMaxBoundsPayload, LegendItemVisibility, WebChartSeriesType, WebChartDataItem, WebChart } from "@arcgis/charts-spec";
import type { ValidationStatus, DataWarningObject, SelectionData, SeriesSymbolsMap, PieSlicesSymbols } from "@arcgis/charts-shared-utils";
/**
 * Sending an event carrying the chart processed data at any data update.
 * Contains the statistics for Histogram and Scatter Plot
 * @param props.data The data payload
 * @param props.seriesConfig The array of series config
 * @param props.htmlContainer The chart's HTML container
 */
export declare function notifyDataProcessed(props: {
    data?: WebChartDataTypes;
    seriesConfig: WebChartSeriesType[];
    htmlContainer?: HTMLElement;
}): void;
/**
 * Sending an event carrying the fetched data.
 * Only used by pie chart for now to make a distinction between the processed data containing information
 * regarding the rendering like the group of slices, and the raw fetched data.
 * @param props.data The chart's data
 * @param props.chartConfig The chart's config
 * @param props.htmlContainer The chart's HTML container
 */
export declare function notifyDataFetched(props: {
    data: WebChartDataItem[];
    chartConfig: WebChart;
    htmlContainer?: HTMLElement;
}): void;
/**
 * Sending an event indicating a legend item visibility has changed
 * @param data
 * @param htmlContainer
 */
export declare function notifyLegendItemVisibilityChanged(data: LegendItemVisibility, htmlContainer?: HTMLElement): void;
/**
 * Sending an event indicating that the chart is updated with the new config
 * @param data
 * @param htmlContainer
 */
export declare function notifyChartUpdated(data: ValidationStatus, htmlContainer?: HTMLElement): void;
/**
 * Sending an event indicating all the chart's series (non-overlays) are [`ready`](https://www.amcharts.com/docs/v4/reference/series/#ready_event)
 * @param htmlContainer
 */
export declare function notifyRenderingCompleted(htmlContainer?: HTMLElement): void;
/**
 * Sending selectionEvent on range select
 * @param props.data The selection data
 * @param props.seriesConfig The array of series config
 * @param props.htmlContainer The chart's HTML container
 */
export declare function notifySelectionCompleted(props: {
    data: SelectionData;
    seriesConfig?: WebChartSeriesType[];
    htmlContainer?: HTMLElement;
}): void;
/**
 * Sending an event to notify too many elements have been selected on the chart
 * @param htmlContainer
 */
export declare function notifyTooManySelectedElements(htmlContainer?: HTMLElement): void;
/**
 * Sending an event containing the either the symbols assigned to a chart's series, or information regarding
 * a pie chart slices.
 * @param data an item representing the symbols applied to the chart's series
 * @param htmlContainer The chart's html container, used to propagate the event
 */
export declare function notifySeriesColorsChange(props: {
    data?: PieSlicesSymbols | SeriesSymbolsMap;
    htmlContainer?: HTMLElement;
    chartId?: string;
}): void;
/**
 * Sending an event containing the chart' axes min and max
 * @param data
 * @param htmlContainer
 */
export declare function notifyAxesMinMaxChange(data?: CalculatedMinMaxBoundsPayload[], htmlContainer?: HTMLElement): void;
/**
 * Sending an event containing info on how the data is bad
 * @param data
 * @param htmlContainer
 */
export declare function notifyBadDataRaise(data?: DataWarningObject, htmlContainer?: HTMLElement): void;
/**
 * Sending an event carrying the series order on the chart.
 * @param props.data The list of series id
 * @param props.htmlContainer The chart's HTML container
 */
export declare function notifySeriesOrder(props: {
    data?: string[];
    htmlContainer?: HTMLElement;
}): void;
