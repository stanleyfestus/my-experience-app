import type { WebChart, WebChartBarChartSeries, WebChartLineChartSeries, WebMapWebChart, WebBoxPlot } from "@arcgis/charts-spec";
import { WebChartSortOrderKinds } from "@arcgis/charts-spec";
import type { EsriColor } from "../types";
/**
 * Returns true when the dual axis feature was enabled or disabled (number of axes changed)
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasDualAxisChanged(oldConfig: WebMapWebChart, newConfig: WebMapWebChart): boolean;
/**
 * Returns true when the series are not associated to the same axis anymore
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasSeriesAxisChanged(oldConfig: WebMapWebChart, newConfig: WebMapWebChart): boolean;
/**
 * Returns true if the rotated property changed since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasRotationChanged(oldConfig: WebMapWebChart, newConfig: WebMapWebChart): boolean;
/**
 * Returns the field to be used by the x-axis.
 * @param chartConfig The chart's config
 */
export declare function getXAxisField(chartConfig: WebChart): string;
/**
 * Check if chart is stacked
 * @param config The chart config
 */
export declare function isChartStacked(config: WebChart): boolean;
/**
 * Returns true if the rotated property changed since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasOutliersVisibilityChanged(oldConfig: WebMapWebChart, newConfig: WebMapWebChart): boolean;
/**
 * Returns true if the 'standardizeValues' property changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasStandardizeValuesVisibilityChanged(oldConfig: WebMapWebChart, newConfig: WebMapWebChart): boolean;
/**
 * Returns true if the 'chartRenderer' property changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasChartRendererChanged(oldConfig: WebChart, newConfig: WebChart): boolean;
/**
 * Returns true if the 'timeZone' property from the axis value format changed in the chart config since the previous update.
 * @param oldConfig the old chart config
 * @param newConfig the new chart config
 */
export declare function hasIntlTimeZoneChanged(oldConfig: WebChart, newConfig: WebChart): boolean;
/**
 * Determines whether a sort by series is needed.
 * A sort by series is needed when either the series order has changed or any of the series names have changed.
 *
 * @param oldConfig The previous chart config.
 * @param newConfig The new chart config.
 * @returns
 */
export declare function isSortBySeriesNeeded(oldConfig: WebChart, newConfig: WebChart): boolean;
/**
 * Constructs the `sortingField`, `orderBy`, and/or `preferLabel` for sorting the chart data.
 * @param chartConfig The chart configuration
 * @returns An object with info about sortingField, orderBy, and optionally preferLabel
 */
export declare function getDataOrderParameters(chartConfig: WebChart): {
    sortingField: string;
    orderBy?: string[] | WebChartSortOrderKinds;
    preferLabel?: boolean;
} | undefined;
/**
 * Returns true if the data order instructions (orderType or sortingField, orderBy, and/or preferLabel) have changed, or
 * the data update is needed.
 *
 * @param props.oldConfig The previous chart config
 * @param props.newConfig The new chart config
 * @param props.dataUpdateNeeded Indicates if data update is needed; this is used by and important for box-plot charts. It's ignored for non-boxplot charts.
 */
export declare function isNewSortNeeded(props: {
    oldConfig: WebChart;
    newConfig: WebChart;
    dataUpdateNeeded: boolean;
}): boolean;
/**
 * After comparing two arrays containing the same number of series, returns the potential changes
 * in the series order among their array.
 * Ex: if oldSeries contains [0, 1 ,2] and newSeries [1, 0, 2], the function returns [[0,1]]
 * @param oldSeries
 * @param newSeries
 */
export declare function getPositionChanges<T extends WebChartBarChartSeries[] | WebChartLineChartSeries[]>(oldSeries: T, newSeries: T): number[][];
/**
 * Compares two colors (array of 4 numbers) and indicates if they are equal
 * @param color1
 * @param color2
 */
export declare function areColorsEqual(color1?: EsriColor, color2?: EsriColor): boolean;
/**
 * Sorts the series in the config based on the series sort options.
 * When no sort option is provide, no sorting is performed.
 *
 * @param chartConfig The optional chart config to sort the series
 * @param chartContainer The HTML chart container
 * @returns The updated chart config with the series sorted, or undefined if the input config is undefined
 */
export declare function sortConfigSeries<T extends WebChart | undefined>(chartConfig: T, chartContainer?: HTMLElement): T;
/**
 * In "Mean lines" mode, the boxes are not matching their config anymore:
 * - C5 becomes C1
 * - C6 becomes C2
 * - C7 becomes C3
 * To fetch the proper data we alter the config to remove the `where` clause, which is the same as removing
 * the split-by field and apply the right combination
 */
export declare function getMeanLinesBoxPlotConfig(chartConfig: WebBoxPlot): WebBoxPlot;
