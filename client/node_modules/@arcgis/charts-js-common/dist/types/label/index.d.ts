import type { WebChartTextSymbol } from "@arcgis/charts-spec";
import { WebChartLabelBehavior } from "@arcgis/charts-spec";
import type { LabelProperties } from "../defaults/interfaces";
/**
 * Truncates a string to a given character limit and adds an ellipsis at the end.
 * @param props.stringToTruncate The string to truncate
 * @param props.characterLimit The character limit to truncate the string to
 * @param props.ellipsis The ellipsis to add at the end of the truncated string
 */
export declare function truncateWithEllipsis(props: {
    stringToTruncate: string;
    characterLimit?: number | null;
    ellipsis?: string;
}): string;
/**
 * Returns a character string with "strong direction" based on the locale's `rtl` value. This is useful
 * for breaking an RTL string at the character predictably.
 * The input character is defaulted to a colon (":") if none is provided.
 * See https://www.w3.org/International/articles/inline-bidi-markup/uba-basics for details.
 * More details on \u200E: https://codepoints.net/U+200E
 * More details on \u200F: https://codepoints.net/U+200F
 * @param props.isRTL The RTL value
 * @param props.character The character to add the strong direction to
 */
export declare function getDirectionallyStrongCharacter(isRTL: boolean, character?: string): string;
/**
 * Generates a function truncating a label according to the limit passed as input. If the limit is undefined,
 * null or invalid, the original label is returned.
 * Additionally an ellipsis is added to the end of the truncated label.
 * @param characterLimit The number of characters to truncate the label to
 */
export declare function generateTruncationCallback(characterLimit?: number | null): (value: string) => string;
/**
 * Escape the brackets (i.e. [, ], {, } ) contained in a string by doubling them,
 * as per amCharts documentation: https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Escaping
 * @param value The value containing the brackets to escape
 */
export declare function escapeBrackets(value: string): string;
/**
 * Attaches inline css styling to a string.
 * The output format depends on the props.type:
 *   - if "html": <p style="...">text</p>"
 *   - if "amCharts" (default type): [...]text[/]"
 * @param props.textSymbol The symbol containing the font, kerning and text
 * @param props.placeholderString A string used over the textSymbol.text if provided
 * @param props.format Describes the expected output format
 * @param props.axisLabelsBehavior The behavior of the axis labels
 * @param props.defaults The default label properties to fetch the wrap and maxWidth values
 */
export declare function attachInlineCSS(props: {
    textSymbol?: WebChartTextSymbol;
    placeholderString?: string;
    format?: "amChartsV4" | "amChartsV5" | "html";
    axisLabelsBehavior?: WebChartLabelBehavior;
    defaults?: LabelProperties;
}): string;
/**
 * Transform a string to kebab case.
 * Example:
 * - input: "camelCase" -> output: "camel-case"
 * - input: "uniqueValues" -> output: "unique-values"
 * @param input The input string to transform
 */
export declare function kebabize(input?: string): string | undefined;
