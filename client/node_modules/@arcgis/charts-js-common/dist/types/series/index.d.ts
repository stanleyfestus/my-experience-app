import type { QueryObject } from "@arcgis/charts-shared-utils";
import { ChartSubType } from "@arcgis/charts-shared-utils";
import type { WebChartHistogramSeries, WebChart, WebChartTimeIntervalUnits, WebChartDataItem, WebBoxPlot } from "@arcgis/charts-spec";
import type { EsriColor } from "../types";
/**
 * Returns true if dataTransformationType changed
 * @param oldSeries
 * @param newSeries
 */
export declare function hasTransformationTypeChanged(oldSeries: WebChartHistogramSeries[], newSeries: WebChartHistogramSeries[]): boolean;
/**
 * Returns true if a specific prop for Histogram requiring a data update has been changed
 * @param oldSeries
 * @param newSeries
 */
export declare function hasBinCountChanged(oldSeries: WebChartHistogramSeries[], newSeries: WebChartHistogramSeries[]): boolean;
/**
 * When a chart is updated an existing series type can be changed (bar series => line series,
 * histogram series => pie series...). Some changes are allowed, others not.
 * This function defines which changes are allowed.
 * @param oldConfig The previous config
 * @param newConfig The new config
 */
export declare function isSeriesTypeChangeAllowed(oldConfig?: WebChart, newConfig?: WebChart): boolean;
export declare function isTimeIntervalInfoComplete(timeIntervalUnits?: WebChartTimeIntervalUnits, timeIntervalSize?: number): boolean;
/**
 * Fetches the series color list.
 * The function support only bar and line chart at the moment.
 * It the series have each a unique color, it will make a list of them, whether they come from the renderer
 * or the series config or the color ramp.
 * @param props.chartConfig The chart's config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartData The chart's data containing the renderer colors
 */
export declare function getSeriesColorList(props: {
    chartConfig: WebChart;
    queryObject: QueryObject;
    chartData: WebChartDataItem[];
}): EsriColor[];
/**
 * Indicates whether the chart is aggregated or not.
 * @param chartSubType The chart sub type
 */
export declare function isAggregatedChart(chartSubType: ChartSubType): boolean;
/**
 * Returns the `showMean` property from the chart config and `false` if not found
 * @param chartConfig The chart config
 */
export declare function getShowMean(chartConfig?: WebBoxPlot | WebChart): boolean;
