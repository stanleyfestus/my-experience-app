import type { WebChartDataItem, WebChartQuery, WebBoxPlot } from "@arcgis/charts-spec";
import type { QueryObject, AbortControllerKeyType, ChartElementLimit } from "@arcgis/charts-shared-utils";
/**
 * Processes the fetched data for a box plot chart and transforms it into the appropriate format for the amCharts library.
 * Depending on the query type, the data may need to be grouped and/or flattened before being returned.
 * If the query type is BoxPlotMonoFieldAndCategory, the data is already in the correct format and no further transformation is needed.
 * @param {WebBoxPlot} props.chartConfig The configuration object for the chart.
 * @param {WebChartDataItem[]} props.data The fetched data to be processed.
 * @param {boolean} props.calculateZScore determines whether to calculate z-score or not for the box plots.
 * @param {WebChartDataItem} props.meanAndStdDevPerField Object containing the mean and stddev for all the numeric fields used by the chart
 * @returns The processed data in the appropriate format for the amCharts library.
 */
export declare function processDataForBoxPlot(props: {
    chartConfig: WebBoxPlot;
    data: WebChartDataItem[];
    calculateZScore: boolean;
    meanAndStdDevPerField?: WebChartDataItem;
}): WebChartDataItem[];
/**
 * Main function completing and processing the box plot data:
 * - outliers
 * - alternative data (shown when outliers are enabled)
 * - mean and standard deviation per numeric field
 * @param props.data The main data set
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.uniqueQuery The query config
 * @param props.fetchFullBoxPlotData Whether to fetch all the box plot data
 * @param props.chartConfig The chart config
 * @param props.elementCount The number of features to fetch
 * @param props.chartLimits The chart limits
 * @param props.abortKey The key to abort the queries
 */
export declare function completeBoxPlotResults(props: {
    data: WebChartDataItem[];
    queryObject: QueryObject;
    uniqueQuery: WebChartQuery;
    fetchFullBoxPlotData?: boolean;
    chartConfig: WebBoxPlot;
    elementCount?: number;
    chartLimits?: ChartElementLimit;
    abortKey?: AbortControllerKeyType;
}): Promise<{
    dataItems: WebChartDataItem[];
    outliers: WebChartDataItem[];
}>;
