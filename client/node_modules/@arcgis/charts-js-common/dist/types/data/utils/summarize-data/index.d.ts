import type { WebChartDataItem, WebChart, WebChartQuery, IField } from "@arcgis/charts-spec";
import type { QueryObject, DataInfo } from "@arcgis/charts-shared-utils";
import { LimitBehavior } from "@arcgis/charts-shared-utils";
import { type ProcessUniqueQueryProps } from "./interfaces";
import type { FetchDataProps } from "../../../interfaces";
/**
 * Group a dataset over a x field
 *
 * Notes: we regroup the data for:
 * - processed data on split-by bar and line charts
 * - selection data on multi-series bar and line charts
 *
 * @param props.data the input data to be grouped
 * @param props.x the category field used to group the data
 * @param props.splitByField the split-by field from the config
 */
export declare function groupDataByCategory(props: {
    data: WebChartDataItem[];
    x: string;
    splitByField?: string;
}): WebChartDataItem[];
/**
 * Assigns the specified property to a best-guessed value from the query results.
 * If its upper-cased or lowercased corresponding properties (that are not coming from the config) exist, remove them as well.
 *
 * @param attributes The attributes associated with a feature returned from the query result
 * @param propertyNames The properties referencing the proper case
 */
export declare function restoreAttributesCase(attributes: WebChartDataItem, propertyNames: (string | undefined)[] | string): void;
/**
 * Function executing a unique query and processing its results.
 * @param props
 */
export declare function processUniqueQueryResults(props: ProcessUniqueQueryProps): Promise<WebChartDataItem[]>;
/**
 * Returns the number total of elements (bar | markers | slices) to be displayed on a chart.
 * It considers the chart will display all the categories/dates (filter on).
 * TODO: that is only necessary because the REST API doesn't return (yet?) the features for which the result (sum, count...) is 0.
 * @param props
 */
export declare function getTotalElementCount(props: {
    chartConfig: WebChart;
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    behaviorAfterLimit?: LimitBehavior;
    numberMaxOfFeaturesToFetch?: number;
    isGaugeByFeature?: boolean;
}): Promise<{
    categoryOrDateCount?: number;
    elementCount?: number;
}>;
/**
 * Sort bar/line/pie chart data. No sorting will be performed if no sorting instruction is provided via the chart config's `orderOptions.data` property.
 * @param props.arrayToSort The data array to sort
 * @param props.chartConfig The chart's config
 * @param props.fieldList The layer field list
 */
export declare function sortFetchedData(props: {
    arrayToSort: WebChartDataItem[];
    chartConfig: WebChart;
    fieldList?: IField[];
}): void;
/**
 * Fetching the data for multiple types of chart.
 * @param props
 */
export declare function fetchFinishedGenericChartData(props: FetchDataProps): Promise<DataInfo>;
/**
 * Fetching the data for specifically a line chart using time binning options.
 * @param props
 */
export declare function fetchFinishedLineChartTimeBinningData(props: FetchDataProps): Promise<DataInfo>;
/**
 * Fetching selection data for multiple types of chart.
 * This function is a subset of `fetchFinishedGenericChartData` and was created to avoid bringing too much
 * complexity to it. They need to evolve together if the data fetching pattern changes.
 * @param props
 */
export declare function fetchFinishedGenericChartSelectionData(props: FetchDataProps): Promise<DataInfo>;
/**
 * Fetching selection data for box plot.
 * @param props.chartConfig The chart config
 * @param props.queryConfig The query config
 * @param props.queryObject The query object
 * @param props.options The runtime chart options
 * @param props.errorStrings The t9n error strings
 * @param props.abortKey The abort key to cancel queries
 */
export declare function fetchFinishedBoxPlotSelectionData(props: FetchDataProps): Promise<DataInfo>;
