import type { WebChart, WebChartDataItem, WebMapWebChart, IRendererSymbol, WebChartSeriesType, ISimpleFillSymbol, ISimpleLineSymbol, ISimpleMarkerSymbol } from "@arcgis/charts-spec";
import { RESTRendererType } from "@arcgis/charts-spec";
import type { QueryObject } from "@arcgis/charts-shared-utils";
import { ChartSubType } from "@arcgis/charts-shared-utils";
import type symbolUtils from "@arcgis/core/symbols/support/symbolUtils";
import type Graphic from "@arcgis/core/Graphic";
import type Renderer from "@arcgis/core/renderers/Renderer";
import { RendererOrigin } from "./interfaces";
/**
 * Centralizes all the rules indicating whether a chart can use the color match mode.
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object
 */
export declare function isColorMatchAllowed(props: {
    chartConfig: WebChart;
    queryObject: QueryObject;
}): boolean;
/**
 * Returns the renderer type, from either the chart renderer or the layer's.
 * It normalizes the chart renderer type to a RESTRendererType.
 * @param chartRenderer The chart renderer
 * @param renderer The layer's renderer
 */
export declare function getRendererType(chartRenderer?: WebChart["chartRenderer"], renderer?: Renderer): RESTRendererType | undefined;
/**
 * Returns the renderer label from the data context if it founds one.
 * @param dataContext The data context to look into
 */
export declare function getDataItemRendererLabel(dataContext: WebChartDataItem): string | undefined;
/**
 * Gets a graphic template to use to compute the renderer color.
 * @param props.chartRenderer The chart renderer
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.rendererJsonUtils The arcgis/core renderer json utils module
 */
export declare function getGraphicTemplate(props: {
    chartRenderer: WebChart["chartRenderer"];
    queryObject?: QueryObject;
    rendererJsonUtils: __esri.supportJsonUtils;
}): Promise<Graphic>;
/**
 * Computes the renderer symbol of a data item from a layer or chart renderer.
 * @param props.seriesConfig The series config
 * @param props.dataItem The data related to the the feature we want to compute a color for
 * @param props.renderer The renderer definition, from the chartRenderer or the JSON version of the layer's
 * @param props.rendererType The renderer type
 * @param props.chartSubType The chart sub type
 * @param props.splitByField The split by field
 * @param props.supportSymbolUtils The symbol utils module to use to compute the color
 * @param props.graphicTemplate The graphic template to use to compute the color
 */
export declare function computeRendererSymbol(props: {
    seriesConfig: WebChart["series"];
    dataItem: WebChartDataItem;
    renderer?: Renderer | WebMapWebChart["chartRenderer"];
    rendererType?: RESTRendererType;
    rendererOrigin: RendererOrigin;
    chartSubType: ChartSubType;
    splitByField?: string;
    supportSymbolUtils: symbolUtils;
    graphicTemplate: Graphic;
}): Promise<IRendererSymbol | undefined>;
/**
 * Completes a data set with renderer colors.
 * @param props.data The data set to complete
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.allowColorMatch Whether the color match is allowed
 */
export declare function completeDataWithRendererSymbol(props: {
    data: WebChartDataItem[];
    chartConfig: WebChart;
    queryObject?: QueryObject;
    allowColorMatch: boolean;
}): Promise<WebChartDataItem[]>;
/**
 * Gets the renderer color stored in the data item, when in color match mode.
 * @param props.dataItem The dataItem to retrieve the renderer color
 * @param props.seriesConfig The series config
 * @param props.chartSubType The ChartSubType
 * @param props.colorMatch Whether the color match mode is enabled
 * @param props.rendererType The type of renderer
 * @returns
 */
export declare function getRendererElementSymbol(props: {
    dataItem: WebChartDataItem;
    seriesConfig: WebChartSeriesType;
    chartSubType: ChartSubType;
    colorMatch: boolean;
    rendererType?: RESTRendererType;
}): IRendererSymbol | undefined;
/**
 * Merges the styling information coming from a renderer symbol with a series symbol.
 * @param props.seriesSymbol The series symbol
 * @param props.rendererSymbol The renderer symbol
 * @param props.colorIndex A color index used when using the color ramp
 */
export declare function mergeRendererSymbolWithSeriesSymbol<T extends ISimpleFillSymbol | ISimpleLineSymbol | ISimpleMarkerSymbol>(props: {
    seriesSymbol: T;
    rendererSymbol?: IRendererSymbol;
    colorIndex?: number;
}): T;
