import type { WebChartCursorCrosshair, WebChartPieChartGroupSlice, WebChartDataItem, ISimpleFillSymbol } from "@arcgis/charts-spec";
import { WebChartSortOrderKinds, RESTHorizontalAlignment, RESTVerticalAlignment, WebChartLineSmoothedKinds, WebChartStackedKinds, RESTSimpleMarkerSymbolStyle, WebChartLegendPositions } from "@arcgis/charts-spec";
import type { SelectionTheme } from "@arcgis/charts-shared-utils";
import { ActionModes } from "@arcgis/charts-shared-utils";
import type { EsriColor } from "../types";
export interface GaugeNeedleDefaults {
    startWidth: number;
    endWidth: number;
    displayPin: boolean;
    innerRadius: number;
}
export interface HistogramSeriesDefaults {
    normalDistribNumberOfPoints: number;
}
export interface ScatterPlotSeriesDefaults {
    strokeOpacity: number;
    regressionPrecision: number;
    r2: number;
    trendLinePoints: [WebChartDataItem, WebChartDataItem];
}
export interface PieChartDefaults {
    innerRadius: number;
    chartRadius: number;
    chartOptimizedRadius: number;
    min: number;
    max: number;
    displayNumericValueOnLegend?: boolean;
    displayNumericValueOnDataLabel?: boolean;
    displayNumericValueOnTooltip?: boolean;
    displayPercentageOnLegend?: boolean;
    displayPercentageOnDataLabel?: boolean;
    displayPercentageOnTooltip?: boolean;
    sliceGrouping: WebChartPieChartGroupSlice;
    defaultPadding: number;
    dataLabels: Readonly<LabelProperties>;
    alignDataLabels: boolean;
    dataLabelsOffset: number;
    technicalFieldSliceId: string;
    technicalFieldSlicePercent: string;
    technicalFieldGroupedSlices: string;
    ticksOpacity: number;
    minimumSize: number;
}
export interface GaugeDefaults {
    innerRadius: number;
    radius: number;
    startAngle: number;
    endAngle: number;
    innerLabelToInnerChartRatio: number;
    axisLabelToInnerChartRatio: number;
    innerLabelAutoMinFontSize: number;
    innerLabelAutoMaxFontSize: number;
    axisLabelAutoMinFontSize: number;
    axisLabelAutoMaxFontSize: number;
    gaugeMinGridDistance: number;
    axisMinimum: number;
    axisMaximum: number;
    numberOfLabelIntervals: number;
    numberOfTicksBetweenTwoLabels: number;
    maximumNumberOfLabelIntervals: number;
    paddingTop: number;
    paddingBottom: number;
    paddingLeft: number;
    paddingRight: number;
}
interface LineSeriesDefaults {
    strokeWidth: number;
    lineSmoothed: boolean;
    lineSmoothedKind: WebChartLineSmoothedKinds;
    showArea: boolean;
    areaOpacity: number;
    markerVisible: boolean;
    rotated: boolean;
    stackedType: WebChartStackedKinds;
    stackNegativeValuesToBaseline: boolean;
    marker: {
        markerSize: number;
        markerStrokeWidth: number;
    };
}
interface LineMarkerDefaults {
    markerSize: number;
    markerStyle: RESTSimpleMarkerSymbolStyle;
}
export interface LabelProperties {
    wrap?: boolean;
    paddingLeft?: number;
    paddingRight?: number;
    paddingTop?: number;
    paddingBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    marginTop?: number;
    marginBottom?: number;
    truncate?: boolean;
    maxWidth?: number;
    rotation?: number;
    horizontalCenter?: RESTHorizontalAlignment;
    verticalCenter?: RESTVerticalAlignment;
    align?: RESTHorizontalAlignment;
    valign?: RESTVerticalAlignment;
    dx?: number;
    dy?: number;
    fontSize?: number;
    strokeWidth?: number;
    applyOnClones?: boolean;
}
type Layout = "absolute" | "grid" | "horizontal" | "none" | "vertical";
export interface ContainerProperties {
    layout?: Layout;
    paddingTop?: number;
    paddingBottom?: number;
    width?: number | string;
    height?: number | string;
}
type TooltipPosition = "fixed" | "pointer";
/**
 * ac-js-common version of amcharts aria roles.
 */
type AmChartsRoles = "alert" | "alertdialog" | "application" | "article" | "banner" | "button" | "checkbox" | "columnheader" | "combobox" | "command" | "complementary" | "composite" | "contentinfo" | "definition" | "dialog" | "directory" | "document" | "figure" | "form" | "grid" | "gridcell" | "group" | "heading" | "img" | "input" | "landmark" | "link" | "list" | "listbox" | "listitem" | "log" | "main" | "marquee" | "math" | "menu" | "menubar" | "menuitem" | "menuitemcheckbox" | "menuitemradio" | "navigation" | "none" | "note" | "option" | "presentation" | "progressbar" | "radio" | "radiogroup" | "range" | "region" | "roletype" | "row" | "rowgroup" | "rowheader" | "scrollbar" | "search" | "section" | "sectionhead" | "select" | "separator" | "slider" | "spinbutton" | "status" | "structure" | "switch" | "tab" | "tablist" | "tabpanel" | "textbox" | "timer" | "toolbar" | "tooltip" | "tree" | "treegrid" | "treeitem" | "widget" | "window";
export interface ChartDefaults {
    aria: Readonly<{
        /**
         * default aria role that will be applied to all chart items
         */
        defaultChartItemRole: AmChartsRoles;
    }>;
    title: Readonly<LabelProperties>;
    subtitle: Readonly<LabelProperties>;
    rotated: boolean;
    footer: Readonly<LabelProperties>;
    axisLabel: Readonly<LabelProperties>;
    axisTickLength: number;
    rotatedAxisLabel: Readonly<LabelProperties>;
    histogramAxisLabel: Readonly<LabelProperties>;
    xAxisTitleLabel: Readonly<LabelProperties>;
    yAxisTitleLabel: Readonly<LabelProperties>;
    titleLabel: Readonly<LabelProperties>;
    subTitleLabel: Readonly<LabelProperties>;
    horizontalSurfaceGuideLabels: Readonly<LabelProperties>;
    horizontalLineGuideLabels: Readonly<LabelProperties>;
    verticalSurfaceGuideLabels: Readonly<LabelProperties>;
    verticalLineGuideLabels: Readonly<LabelProperties>;
    guideAbove: boolean;
    dataLabelInitialize: Readonly<LabelProperties>;
    dataLabel: Readonly<LabelProperties>;
    dataLabelRotated: Readonly<LabelProperties>;
    dataLabelStackedNonRotated: Readonly<LabelProperties>;
    dataLabelStackedRotated: Readonly<LabelProperties>;
    dataLabelNegative: Readonly<LabelProperties>;
    pieChart: Readonly<PieChartDefaults>;
    pieSliceCustomLabelName: string;
    scatterPlotSeries: Readonly<ScatterPlotSeriesDefaults>;
    histogramSeries: Readonly<HistogramSeriesDefaults>;
    lineSeries: Readonly<LineSeriesDefaults>;
    lineMarker: Readonly<LineMarkerDefaults>;
    xAxisLabelMaxWidth: number;
    yAxisLabelMaxWidth: number;
    axisLabelPadding: number;
    categoryAxisLabelPadding: number;
    seriesSort: Readonly<WebChartSortOrderKinds>;
    technicalSortingFieldBySum: string;
    technicalSortingFieldByPercent: string;
    color: Readonly<EsriColor>;
    dataTooltipVisible?: boolean;
    dataTooltipStyle?: Readonly<Partial<ISimpleFillSymbol>>;
    dataTooltipStyleReversed?: Readonly<Partial<ISimpleFillSymbol>>;
    cursorCrosshair: Readonly<Required<Omit<WebChartCursorCrosshair, "type">>>;
    buffer: boolean;
    elementLimitForSmoothRendering: number;
    headerContainer: Readonly<ContainerProperties>;
    footerContainer: Readonly<ContainerProperties>;
    chartAndLegendContainer: Readonly<ContainerProperties>;
    chartContainer: Readonly<ContainerProperties>;
    chartContainerPaddingTopWhenRotated: number;
    paddingMinSize: number;
    marginMinSize: number;
    chartPaddingMinSize: number;
    chartPaddingRightWhenLegendNotOnRight: number;
    defaultStatParameterValue: number;
    /**
     * Legend
     */
    legendProperties: {
        legendLabels: Readonly<LabelProperties>;
        valueLabels: Readonly<LabelProperties>;
        legendLabelReducedOpacity: number;
        legendMarkersSize: number;
        rectangleMarkerRadius: number;
        roundedMarkerRadius: number;
        legendPaddingRightWithScrollbarVisible: number;
        legendTitle: Readonly<LabelProperties>;
        maxHeight: Readonly<number>;
        marginTop: Readonly<number>;
        marginBottom: Readonly<number>;
        marginLeft: Readonly<number>;
        marginRight: Readonly<number>;
        paddingTop: Readonly<number>;
        paddingBottom: Readonly<number>;
        paddingLeft: Readonly<number>;
        paddingRight: Readonly<number>;
        position: Readonly<WebChartLegendPositions>;
    };
    /**
     * Gauge
     */
    gaugeTicksLength: number;
    gaugeInnerLabel: Readonly<LabelProperties>;
    gaugeNeedle: Readonly<Partial<GaugeNeedleDefaults>>;
    gauge: Readonly<GaugeDefaults>;
    gaugeFirstLabelId: string;
    gaugeLastLabelId: string;
    tooltipWidth: number;
    axisLabelOveredOpacity: number;
    generalFontSize: number;
    chartEllipsis: string;
    backgroundColor: Readonly<EsriColor>;
    /**
     * Note: Gauge has its own default value. See `gaugeMinGridDistance`
     */
    xAxisMinGridDistance: number;
    xCategoryAxisMinGridDistance: number;
    yAxisMinGridDistance: number;
    yCategoryAxisMinGridDistance: number;
    secondRotatedValueAxisMinGridDistance: number;
    staggerMinGridDistance: number;
    shortestMinGridDistance: number;
    maxNumberOfXAxisLabelsInWrapModeForDateAxis: number;
    maxNumberOfXAxisLabelsInWrapMode: number;
    /**
     * number between 0 - 1.
     */
    lineWidth: number;
    /**
     * Time taken by the loader (in ms) spinner to make a 360 deg rotation
     */
    loaderRotationSpeed: number;
    /**
     * Time interval (in ms) between each loader animation call
     */
    loaderIntervalTimeout: number;
    loaderBackground: Readonly<EsriColor>;
    loaderLabelFontSize: number;
    selectionTheme: SelectionTheme;
    columnTooltipPosition: TooltipPosition;
    markerTooltipPosition: TooltipPosition;
    patternLineProperties: Readonly<{
        width: number;
        height: number;
        strokeWidth: number;
    }>;
    patternRectProperties: Readonly<{
        rectWidth: number;
        rectHeight: number;
        width: number;
        height: number;
        strokeWidth: number;
        fillOpacity: number;
    }>;
    dateBinningRange: string;
    dateBinModel: string;
    /**
     * Query defaults
     */
    originalCategoryValue: string;
    originalDateValue: string;
    /**
     * Subtype related; used in tooltips, data labels, color match for bar/line/pie
     */
    typeOrDomainFieldName: string;
    typeOrDomainIdValue: string;
    dateFormatUTC: Intl.DateTimeFormatOptions;
    dayDefaultFormat: Intl.DateTimeFormatOptions;
    weekDefaultFormat: Intl.DateTimeFormatOptions;
    queryMaxFloatPrecision: number;
    /**
     * Internal property name used to store the style for the "Other" values for a
     * unique value renderer. Will removed after implementing #1659.
     */
    rendererOtherValue: string;
    rendererSymbolField: string;
    scatterPlotAggregationFields: Record<string, string>;
    actionMode: ActionModes;
    debounceTime: number;
    chartDefaultPaddingRight: number;
    htmlEmptyContent: string;
    xAxisField: string;
    nullValue: string;
    /**
     * box plot defaults
     */
    boxPlot: Readonly<{
        boxPlotCategory: string;
        boxPlotOutliersSuffix: string;
        boxPlotOutliersVisibility: boolean;
        boxPlotStandardizeValuesVisibility: boolean;
        boxPlotOutliersSize: number;
        boxPlotLineWidth: number;
        boxPlotOutlierId: string;
        boxPlotMeanLineMarkerId: string;
        boxPlotTooltipLabelWidth: number;
        /**
         * represents default color for the box plot whiskers
         */
        boxPlotWhiskersColor: string;
    }>;
    binTemporalData: boolean;
    overlayId: {
        scatterPlotTrendLine: string;
    };
    options: {
        /**
         * represents default value to use for when `hideEmptySeries` is not defined in the `options` object.
         */
        hideEmptySeries: boolean;
    };
}
/**
 * A nested dictionary which contains default values for cases when a property is undefined.
 * `as const` is not used because we loose intellisense while assigning properties and values.
 * Instead, `ReadOnly<>` is used to prevent property reassignment.
 */
export declare const ChartDefaults: Readonly<ChartDefaults>;
export {};
