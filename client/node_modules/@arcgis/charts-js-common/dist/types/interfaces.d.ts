import type { WebChart, WebChartDataItem, WebMapWebChart, WebGaugeChart, WebChartDataTypes, WebChartDataFilters, WebMapWebGaugeChart, WebChartPieChartSlice, WebChartQuery, WebBoxPlot, WebMapWebBoxPlot, WebChartDataItemValue, IField, SupportedLayer } from "@arcgis/charts-spec";
import type { ChartElementLimit, SelectionData, ActionModes, SelectionTheme, QueryObject, AbortControllerKeyType, BinnedServerData, CursorRange, ErrorStrings, CommonStrings } from "@arcgis/charts-shared-utils";
import type MapView from "@arcgis/core/views/MapView";
import type SceneView from "@arcgis/core/views/SceneView";
import type FeatureLayerView from "@arcgis/core/views/layers/FeatureLayerView";
export interface NotifyOptions {
    closable?: boolean;
}
export type AnyConfigType = WebBoxPlot | WebChart | WebGaugeChart | WebMapWebBoxPlot | WebMapWebChart | WebMapWebGaugeChart;
export type ConfigWithILayer = WebBoxPlot | WebChart | WebGaugeChart;
export type XYConfigWithILayer = WebBoxPlot | WebChart;
export interface T9NStrings {
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
}
export interface CreateChartProps<ConfigType extends AnyConfigType> {
    chartContainer?: HTMLElement;
    chartConfig?: ConfigType;
    queryObject?: QueryObject;
    options?: ChartOptions;
    globalOptions?: GlobalOptions;
    inputData?: WebChartDataItem[];
    t9nStrings: T9NStrings;
}
export interface UpdateChartProps {
    newChartConfig?: WebChart | WebGaugeChart | WebMapWebChart | WebMapWebGaugeChart;
    updateOptions?: ChartOptions;
    updateGlobalOptions?: GlobalOptions;
    t9nStrings: T9NStrings;
}
export interface FetchDataProps {
    queryObject?: QueryObject;
    chartConfig: WebChart;
    queryConfig: WebChartQuery;
    filterBySelectionChanged?: boolean;
    options?: ChartOptions;
    binnedServerData?: BinnedServerData;
    abortKey?: AbortControllerKeyType;
    errorStrings: ErrorStrings;
    /**
     * indicates whether to calculate z-score or not for the box plots.
     */
    calculateZScore?: boolean;
    /**
     * indicates whether to fetch all the data for box plot. If false we don't fetch the outliers and
     * only fetch the average (mean) statistic.
     */
    fetchFullBoxPlotData?: boolean;
    fieldList?: IField[];
}
export interface UpdateChartElementsProps {
    newConfig?: WebChart | WebGaugeChart;
    forceDataUpdate?: boolean;
    updateOptions?: ChartOptions;
    updateGlobalOptions?: GlobalOptions;
    commonStrings: CommonStrings;
}
export interface ChartInstance {
    update: (updateProps: UpdateChartProps) => Promise<void>;
    dispose: () => void;
    notify: (message?: string, heading?: string, options?: NotifyOptions) => void;
    resetZoom: () => void;
    clearSelection: () => void;
    switchSelection: () => Promise<void>;
    setActionMode: (actionMode?: ActionModes, cursorRange?: CursorRange) => void;
}
/**
 * Describes the signature of the callback function used to customize the pie chart data labels and tooltips
 */
export type PieChartLabelFormatCallback = (category: string, value?: number, percent?: number, originalCategory?: WebChartDataItemValue) => string;
/**
 * Describes the signature of the callback function used to customize the pie chart legend value labels.
 */
export type PieChartLegendValueLabelFormatCallback = (value?: number, percent?: number) => string;
/**
 * Describes the signature of the callback function used to customize the histogram tooltips
 */
export type HistogramLabelFormatCallback = (count: number, binMinValue: number, binMaxValue: number) => string;
/**
 * Describes the signature of the callback function used to customize the scatter plot tooltips
 */
export type ScatterPlotLabelFormatCallback = (x: number, y: number, sizePolicyValue?: number) => string;
export interface BarAndLineTooltipFormatCallbackProps {
    seriesName: string;
    statValue?: number;
    percentValue?: number;
    xValue?: Date | number | string;
    originalXValue?: WebChartDataItemValue;
    dateBinningRange?: [number, number];
}
/**
 * Describes the signature of the callback function used to customize the bar and line chart plot tooltips
 */
export type BarAndLineTooltipFormatCallback = (props: BarAndLineTooltipFormatCallbackProps) => string;
export interface BoxPlotTooltipFormatCallbackProps {
    seriesName: string;
    dataContext: WebChartDataItem;
    xValue?: Date | number | string;
    originalXValue?: WebChartDataItemValue;
}
/**
 * Describes the signature of the callback function used to customize the box plot tooltips
 */
export type BoxPlotTooltipFormatCallback = (props: BoxPlotTooltipFormatCallbackProps) => string;
/**
 * Describes the signature of the callback function used to customize the bar and line chart plot data labels
 */
export type BarAndLineDataLabelFormatCallback = (statValue: number, percent?: number) => string;
export interface GuideTooltipFormatCallbackProps {
    guideName: string;
    start: Date | number | string;
    end?: Date | number | string;
    guideIndex: number;
}
/**
 * Describes the signature of the callback function used to customize a guide's tooltip
 */
export type GuideTooltipFormatCallback = (props: GuideTooltipFormatCallbackProps) => string;
/**
 * Describes the signature of the callback function used to customize an axis labels.
 * The `value` is the displayed label.
 * The `originalValue` is provided when the `value` is an alias or coded domain description.
 */
export type AxisLabelFormatCallback = (value: Date | number | string | null, originalValue?: WebChartDataItemValue) => string;
/**
 * Describes the signature of the callback function used to customize a gauge inner label
 */
export type GaugeInnerLabelFormatCallback = (value?: number) => string;
/**
 * Describes the signature of the callback function executed before rendering the chart.
 * The `slices` property will be  only provided for the pie charts.
 */
export type PreRenderCallback = (props: {
    chartConfig: WebChart | WebGaugeChart | WebMapWebChart | WebMapWebGaugeChart;
    data?: WebChartDataTypes;
    slices?: WebChartPieChartSlice[];
}) => Promise<WebChart | WebGaugeChart>;
/**
 * Represents the options available to handle specific messages displayed by the chart.
 */
export interface MessageOptions {
    /**
     * Whether to display a warning message over the chart when the chart's data set is empty.
     * @default true
     */
    displayMessageWhenNoData?: boolean;
    /**
     * Whether to consider a `null` statistic as valid. If set to `false` and the data has only
     * null values, the chart's dataset will be considered empty:
     * - the corresponding warning event will be sent
     * - the "no data" message will be displayed (unless `displayMessageWhenNoData` is set to `false`)
     * @default false
     */
    nullAsValid?: boolean;
    /**
     * Whether to display a warning message over the chart when the logarithmic scale can't be applied to an
     * axis when the data contains values <= 0.
     * @default true
     */
    displayMessageWhenLogAxisNotPossible?: boolean;
}
/**
 * JSON representation of the runtime chart options for the update or initialization.
 */
export interface ChartOptions {
    /**
     * A property representing the selection to apply on the chart.
     * The properties are considered in the following order:
     * - selectionData.selectionOIDs: an array of Object Ids (for Feature Layer) representing a selection to apply to the chart.
     * - selectionData.selectionItems: an array of data items representing a selection to apply to the chart.
     */
    selectionData?: SelectionData;
    /**
     * Indicates if the object ids need to be computed whenever a selection is made on or passed to the chart.
     * Only considered for a data source using a feature layer.
     * @default true
     */
    returnSelectionOIDs?: boolean;
    /**
     * Indicates if the selection indexes need to be computed whenever a selection is made on or passed to the chart.
     * @default false
     */
    returnSelectionIndexes?: boolean;
    /**
     * Allows the features extent to be returned, through the `arcgisChartsJSDataProcessComplete` and `arcgisChartsJSSelectionComplete` events payload.
     * Applies only to:
     *   - charts using an aggregation
     *   - data source using a feature layer compatible with envelope aggregation
     * The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
     * @default false
     */
    returnFeaturesExtent?: boolean;
    /**
     * Used to provide a customized theme for the selected and non selected elements.
     * If no style is provided for the selected elements, a default selection is applied.
     * If no style is provided for the non selected elements, the chart's style is applied.
     */
    selectionTheme?: SelectionTheme;
    /**
     * used to perform client-side queries
     */
    view?: MapView | SceneView;
    /**
     * used to perform queries
     */
    layer?: FeatureLayerView | SupportedLayer;
    /**
     * enable filter by selection
     */
    filterBySelection?: boolean;
    /**
     * Re initialize chart object if the chart object is disposed.
     * Honoured only during the update call.
     * default is true;
     */
    autoRecreateChart?: boolean;
    /**
     * optional create message to be displayed in the chart container.
     */
    createMessage?: string;
    /**
     * Used to hide the loader animation (curtain and spinner), showed by default at every update.
     * @default false
     */
    hideLoaderAnimation?: boolean;
    /**
     * Hide the series from the chart if it doesn't have data (i.e. empty)
     * For example, after apply data filters, filter by attribute or geometry (as when using the filter by extent)
     * @default true
     */
    hideEmptySeries?: boolean;
    /**
     * Used to customize the chart's limits, especially the maximum number of elements (bars, markers...) to be displayed.
     * The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation
     * or update of the chart, or render the elements up to the given limits. Available on all charts but scatter plot and histogram.
     */
    chartLimits?: ChartElementLimit;
    /**
     * Set the chart's mode (zoom, selection, none)
     * - zoom: allows to zoom on the chart. All selection is disabled
     * - mono-selection: the selection is enabled but only one element can be selected. Zoom is disabled
     * - multi-selection: the selection is enabled and allows selecting multiple elements. Zoom is disabled
     * - multi-selection-with-ctrl-key: the selection is enabled and allows selecting multiple elements when the ctrl/cmd key is pressed. Zoom is disabled
     * - none: the zoom and selection features are disabled
     */
    actionMode?: ActionModes;
    /**
     * Sets the cursor range:
     * - CursorRange.MultiAxes: allows to draw a free rectangle
     * - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis
     * - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis
     * - undefined: defaults to a preset behavior according to the chart type and action mode
     * Applies only when the action mode is set to zoom or multi-selection.
     */
    cursorRange?: CursorRange;
    /**
     * If the option is set to true, the chart gets a full refresh.
     */
    dataUpdated?: boolean;
    /**
     * Helps identifying an update triggered after a view extent change.
     * This is used to support a selection workflow while the filter by extent mode is enabled.
     */
    viewExtentUpdated?: boolean;
    /**
     * Used to apply runtime filters to the chart's data while in Feature Layer mode.
     */
    runtimeDataFilters?: WebChartDataFilters;
    /**
     * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView.
     * By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any
     * geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters).
     * Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
     * @default false
     */
    ignoreViewExtent?: boolean;
    /**
     * Can be used when creating or updating a chart compatible with time binning. If this option is `true`, the series properties
     * `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set.
     * @default false
     */
    setTimeBinningInfoWhenNotProvided?: boolean;
    /**
     * Can be used to disable the default setting that uses debounce functions to handle the visibility of markers
     * (for scatter-plot and line charts) that are outside of plotting area when min/max bound changes and/or
     * when zoom action is performed (via chart cursor or scrollbar), to increase performance.
     *
     * This property will be set when the chart is created and cannot be updated after that.
     *
     * It's recommended that this property should only be set to true for small datasets.
     * @default false
     */
    ignoreSmoothRenderingLimit?: boolean;
    /**
     * Used to customize the way the tooltips are rendered. The callback function can return an HTML string and the tags will
     * be interpreted properly.
     */
    tooltipFormatter?: BarAndLineTooltipFormatCallback | BoxPlotTooltipFormatCallback | HistogramLabelFormatCallback | PieChartLabelFormatCallback | ScatterPlotLabelFormatCallback;
    dataLabelFormatter?: BarAndLineDataLabelFormatCallback | HistogramLabelFormatCallback | PieChartLabelFormatCallback | ScatterPlotLabelFormatCallback;
    /**
     * Used to customize the way the guides' tooltip are rendered. The callback function can return an HTML string and the tags will
     * be interpreted properly.
     */
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    /**
     * Used to customize the way the x-axis labels are rendered. The callback function can return an HTML string and the tags will
     * be interpreted properly.
     */
    xAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * Used to customize the way the y-axis labels are rendered. The callback function can return an HTML string and the tags will
     * be interpreted properly.
     * Not available on gauge for now.
     */
    yAxisLabelFormatter?: AxisLabelFormatCallback;
    pieChartLegendValueLabelFormatter?: PieChartLegendValueLabelFormatCallback;
    /**
     * Used to customize the gauge inner label. The callback function can return an HTML string and the tags will
     * be interpreted properly.
     */
    gaugeInnerLabelFormatter?: GaugeInnerLabelFormatCallback;
    /**
     * Used to set the chart's behavior when its data set is empty
     */
    messageOptions?: MessageOptions;
    /**
     * Used to disable the toggling of legend items for XYChart series, Pie slices,
     * Histogram overlays, and Scatter-plot trend line.
     * This option is not applied for Gauge.
     * @default false
     */
    disableTogglingLegendItems?: boolean;
    /**
     * Callback function executed after the data has been processed and before the chart renders.
     * Can be used to alter the config from information extracted from the data for instance.
     * Only available for the pie chart and gauge at the moment.
     */
    chartWillRender?: PreRenderCallback;
    /**
     * Can be set to true to read the fields from layer.popupTemplate and use their alias when rendering tooltips
     */
    usePopupTemplateFieldsInfo?: boolean;
}
/**
 * Detailed options to customize chart experience
 */
export interface GlobalOptions {
    queueChartCreation?: boolean;
    useAnimatedCharts?: boolean;
    hideLicenceWatermark?: boolean;
    enableResponsiveFeatures?: boolean;
    autoDisposeChart?: boolean;
}
export declare const LabelType: {
    readonly XAxisTitle: "XAxisTitle";
    readonly YAxisTitle: "YAxisTitle";
    readonly ChartTitle: "ChartTitle";
    readonly ChartSubTitle: "ChartSubTitle";
    readonly ChartFooter: "ChartFooter";
    readonly GuideLabel: "GuideLabel";
};
export type LabelType = (typeof LabelType)[keyof typeof LabelType];
