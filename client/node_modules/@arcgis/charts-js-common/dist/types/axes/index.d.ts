import type { WebChart, NumberFormatOptions, DateTimeFormatOptions, WebChartAxis, WebMapWebChart } from "@arcgis/charts-spec";
import { WebChartTypes } from "@arcgis/charts-spec";
import type { ErrorStrings } from "@arcgis/charts-shared-utils";
/**
 * Return the x-axis value format
 * @param chartConfig The chart's config
 */
export declare function getXAxisValueFormat(chartConfig: WebChart | WebMapWebChart): WebChartTypes | undefined;
/**
 * Return dateFormat or numberFormat for the `WebChartAxis`
 * @param valueFormat NumberFormatOptions | DateTimeFormatOptions
 */
export declare function mapValueFormat<T extends DateTimeFormatOptions | NumberFormatOptions>(valueFormat: T): T["intlOptions"];
/**
 * Return true if the input `WebChartAxis` is a **Value axis** (represents only **numerical** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
export declare function isNumberValueFormat(valueFormat?: WebChartAxis["valueFormat"]): valueFormat is NumberFormatOptions;
/**
 * Return true if the input `WebChartAxis` is a **Value axis** (represents only **numerical** data)
 * and the format uses a `percent` style.
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
export declare function isPercentNumberValueFormat(valueFormat: WebChartAxis["valueFormat"]): boolean;
/**
 * Return true if the input `WebChartAxis` is a **Category axis** (represents only string or **categorical** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
export declare function isCategoryValueFormat(valueFormat?: WebChartAxis["valueFormat"]): boolean;
/**
 * Return true if the input `WebChartAxis` is a **Date axis** (represents only temporal or **date-time** data)
 * @param valueFormat Esri's REST representation of Web Chart Axis Value Format property
 */
export declare function isDateValueFormat(valueFormat?: WebChartAxis["valueFormat"]): boolean;
/**
 * Returns for each axis a boolean indicating if the labels behavior property changed since the previous update.
 * The first index contains the result for the horizontal axis (whether it's the x or y axis) and the second index
 * the result for the vertical axis.
 * @param props.oldConfig The config from the previous update
 * @param props.newConfig The config from the current update
 * @param props.dataUpdateNeeded Indicates whether an update is needed
 * @param props.rotationChanged Indicates whether a change of rotation is needed
 */
export declare function hasAxisLabelsBehaviorChanged(props: {
    oldConfig: WebChart | WebMapWebChart;
    newConfig: WebChart | WebMapWebChart;
    dataUpdateNeeded: boolean;
    rotationChanged: boolean;
}): [boolean, boolean];
/**
 * Validates the provided value format properties are compatible with the type of chart
 * @param props.axesConfig The array of axes config
 * @param props.chartType The chart type
 * @param props.errorStrings The t9n error strings
 */
export declare function validateAxesValueFormat(props: {
    axesConfig: WebMapWebChart["axes"];
    chartType?: WebChartTypes;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Function deciding whether we should create a category axis
 * @param props.isXAxis Whether the axis is the x-axis
 * @param props.chartType The chart type
 * @param props.valueFormat The axis value format
 */
export declare function useCategoryAxis(props: {
    isXAxis: boolean;
    chartType?: WebChartTypes;
    valueFormat?: WebChartAxis["valueFormat"];
}): boolean;
/**
 * Get the series id related to the given axis (useful in dual axis mode).
 * @param props.chartConfig The chart configuration
 * @param props.isSecondValueAxis Whether the axis is the second value axis (in dual axis mode)
 * @param props.seriesId The series id
 */
export declare function getAxisSeriesIds(props: {
    chartConfig: WebChart;
    isSecondValueAxis?: boolean;
    seriesIds?: string[];
}): string[] | undefined;
