import type { PieChart } from "@amcharts/amcharts4/charts";
import { PieSeries } from "@amcharts/amcharts4/charts";
import type { WebChartDataItem, WebChartPieChartSeries, WebChart } from "@arcgis/charts-spec";
import type { QueryObject, SelectionTheme, PieSlicesSymbols, CommonStrings } from "@arcgis/charts-shared-utils";
import type { LoaderHandle } from "../../loading-indicator/interfaces";
import type { UpdatePieChartSeriesProps } from "./interfaces";
/**
 * Generates an id for a slice from a non aggregated slice.
 * it will generate `arcgis-charts-slice-id-<object id>` or `arcgis-charts-slice-id-<slice index>`
 * @param props.dataContext The slice's data context to access the x value
 * @param props.dataIndex The slice's position on the chart
 * @param props.objectIdField The field used as an object Id by the layer (when applicable)
 */
export declare function generateNonAggregatedSliceId(props: {
    dataContext: WebChartDataItem;
    dataIndex: number;
    objectIdField?: string;
}): string;
export declare function initializePieChartSeries(props: {
    seriesConfig: WebChartPieChartSeries;
    hideLoaderHandle: LoaderHandle["hideLoader"];
    selectionTheme?: SelectionTheme;
}): PieSeries;
/**
 * Util function used to update the chart's data with the new slices labels.
 * It will perform the update only if the labels changed (through a comparison between the old and the new config),
 * and will also reapply the sort.
 * @param props.chart The pie chart
 * @param props.newChartConfig The most recent chart config
 * @param props.pieSlicesSymbols The computed slices config
 */
export declare function savePieChartLabels(props: {
    chart: PieChart;
    newChartConfig: WebChart;
    pieSlicesSymbols?: PieSlicesSymbols;
}): void;
/**
 * Generates a slices array containing the slices id, label and style.
 * @param props.chart The pie chart
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object (layer or layer view)
 * @param props.usePopupTemplateFieldsInfo Whether to use the popup template info for the aliases
 * @param props.labelUpdateNeeded Whether the labels were updated
 */
export declare function computePieChartSlices(props: {
    chart: PieChart;
    chartConfig: WebChart;
    queryObject: QueryObject;
    usePopupTemplateFieldsInfo?: boolean;
    labelUpdateNeeded: boolean;
    commonStrings: CommonStrings;
}): Promise<PieSlicesSymbols>;
/**
 * Function updating chart series and assign its data
 * @param props
 */
export declare function updatePieChartSeries(props: UpdatePieChartSeriesProps): void;
