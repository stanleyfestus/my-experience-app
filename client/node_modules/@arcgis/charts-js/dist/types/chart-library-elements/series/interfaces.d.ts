import type { CandlestickSeries, ColumnSeries, GaugeChart, LineSeries, PieChart, PieSeries, XYChart } from "@amcharts/amcharts4/charts";
import type { IField, RESTRendererType, WebChartAxis, WebChartBarChartSeries, WebChartLineChartSeries, WebChartSeriesType } from "@arcgis/charts-spec";
import type { CommonStrings, QueryObject, SelectionTheme, SeriesSymbolsMap, SubtypeInfo } from "@arcgis/charts-shared-utils";
import type { ChartOptions } from "@arcgis/charts-js-common";
import type { AxisList } from "../axes/utils/axis-renderer/interfaces";
import type { LoaderHandle } from "../loading-indicator/interfaces";
import type { ApplySelectionOnSeriesProps } from "../../selection/apply/interfaces";
import type { UpdateBarSeriesProps } from "./bar-chart/interfaces";
import type { UpdateBoxPlotSeriesStyleProps } from "./box-plot/interfaces";
import type { UpdateHistogramSeriesProps } from "./histogram/interfaces";
import type { UpdateLineSeriesProps } from "./line-chart/interfaces";
import type { UpdatePieChartSeriesProps } from "./pie-chart/interfaces";
import type { UpdateScatterPlotSeriesProps, UpdateTrendLineProps } from "./scatter-plot/interfaces";
export interface InitializeSeriesProps<ChartType extends GaugeChart | PieChart | XYChart> {
    chart: ChartType;
    axisList?: AxisList;
    hideLoaderHandle: LoaderHandle["hideLoader"];
    selectionTheme?: SelectionTheme;
}
/**
 * Interface containing the common properties for updating any chart's series.
 * It is extended by each chart type (e.g. UpdateScatterPlotSeriesProps) to add specific properties.
 */
export interface UpdateSeriesProps<SeriesType extends CandlestickSeries | ColumnSeries | LineSeries | PieSeries, SeriesConfigType extends WebChartSeriesType> {
    numberOfSeries: number;
    series: SeriesType;
    seriesConfig: SeriesConfigType;
    seriesIndex: number;
    options?: ChartOptions;
    colorMatch: boolean;
    queryObject?: QueryObject;
    rendererType?: RESTRendererType;
    sortChanged?: boolean;
    dataWasUpdated?: boolean;
    subtypeInfo?: SubtypeInfo;
    fieldList?: IField[];
    commonStrings: CommonStrings;
}
export interface UpdateXYSeriesProps<SeriesType extends CandlestickSeries | ColumnSeries | LineSeries | PieSeries, SeriesConfigType extends WebChartSeriesType> extends UpdateSeriesProps<SeriesType, SeriesConfigType> {
    axes: [WebChartAxis, WebChartAxis];
    seriesIndexMapper: Map<string, number>;
}
export interface UpdateSeriesStyleProps<SeriesType extends ColumnSeries | LineSeries, SeriesConfigType extends WebChartBarChartSeries | WebChartLineChartSeries> {
    series: SeriesType;
    seriesConfig: SeriesConfigType;
    seriesIndex: number;
    colorMatch: boolean;
    seriesIndexMapper: Map<string, number>;
    seriesSymbolMapForEvent: SeriesSymbolsMap;
    rendererType?: RESTRendererType;
}
export type StyleCallbackProps = UpdateBarSeriesProps | UpdateBoxPlotSeriesStyleProps | UpdateHistogramSeriesProps | UpdateLineSeriesProps | UpdatePieChartSeriesProps | UpdateScatterPlotSeriesProps | UpdateTrendLineProps;
export type StyleOrSelectionCallback = {
    type: "style";
    styleCallback: (props: StyleCallbackProps) => Promise<void> | void;
    callbackProps: StyleCallbackProps;
} | {
    type: "selection";
    callbackProps: ApplySelectionOnSeriesProps;
};
