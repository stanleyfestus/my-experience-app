import type { IXYSeriesDataFields, Axis, Series, ILineSeriesDataFields, SerialChart, PieChart, XYChart } from "@amcharts/amcharts4/charts";
import { ColumnSeries, LineSeries } from "@amcharts/amcharts4/charts";
import { Sprite } from "@amcharts/amcharts4/core";
import type { ChartTypes } from "@arcgis/charts-shared-utils";
import type { WebChartAxis, WebChartBarChartSeries, WebChartLineChartSeries, WebChartPieChartSlice, NumberFormatOptions, WebChartSeriesType, WebChartDataItem, WebChart, WebChartSeries } from "@arcgis/charts-spec";
import { WebChartStackedKinds } from "@arcgis/charts-spec";
import type { StorageType } from "../../../utils/memory-storage/interfaces";
import type { ApplySelectionOnSeriesProps } from "../../../selection/apply/interfaces";
import type { StyleCallbackProps } from "../interfaces";
type DataFieldName = Extract<ILineSeriesDataFields | keyof IXYSeriesDataFields, "categoryX" | "categoryY" | "dateX" | "dateY" | "valueX" | "valueY">;
/**
 * Returns the datafield name to be used by the series to assign
 * the x value
 * @param axis
 * @param isRotated
 */
export declare function getXAxisDataFieldName(axis: Axis, isRotated?: boolean): DataFieldName;
/**
 * Updates a series name and stores it in its memory storage
 * @param series
 * @param seriesName
 */
export declare function updateSeriesName(series: Series, seriesName: string): void;
/**
 * Updates the number formatter stored in series memory storage used by the adapter for X-axis and Y-axis
 * @param props.axes The axes config
 * @param props.currentSeries The series instance
 * @param props.tooltipValueFormat The tooltip value format from the config
 */
export declare function updateScatterPlotAndHistogramTooltipFormatter(props: {
    axes: [WebChartAxis, WebChartAxis];
    currentSeries: Series;
    tooltipValueFormat?: NumberFormatOptions;
}): void;
/**
 * Function initializing the chart markers
 * @param props.chart An instance of XYChart
 * @param props.lineSeries The LineSeries to be initialized
 * @param props.applyPropertiesToClones Indicates whether changes to the marker of the line series will be automatically applied to its clones.
 */
export declare function initializeMarker(props: {
    chart: XYChart;
    lineSeries: LineSeries;
    applyPropertiesToClones?: boolean;
}): Sprite;
/**
 * Updates the series properties according to the stacked type in the series config.
 * @param props
 */
export declare function updateSeriesStackedType(props: {
    series: ColumnSeries | LineSeries;
    seriesConfig: WebChartBarChartSeries | WebChartLineChartSeries;
    rotationChanged?: boolean;
    stackedType?: WebChartStackedKinds;
    isRotated: boolean;
}): void;
/**
 * Handles markers outside of chart's plotting area for line and scatter-plot.
 * @param props.chart The chart containing the series.
 * @param props.numberOfChartSeries The total number of series in the chart. If not provide, default one series is used.
 * @param props.series The series containing the marker.
 * @param props.seriesType The type of series (such as line or scatter-plot).
 * @param props.marker The marker template of which its clones are to hide or show.
 * @param props.ignoreSmoothRenderingLimit Indicate whether to disable the default setting that utilizes debounce function for performance reason.
 */
export declare function handlePointsOutOfPlottingArea(props: {
    chart: XYChart;
    numberOfChartSeries?: number;
    series: LineSeries;
    seriesType: ChartTypes;
    marker: Sprite;
    ignoreSmoothRenderingLimit?: boolean;
}): void;
/**
 * Return the slice information from the series config based on sliceId from the slice's data context.
 * @param slices The slices config
 * @param sliceId The slice id to match the
 */
export declare function retrievePieSliceInfoFromConfig(slices?: WebChartPieChartSlice[], sliceId?: string): WebChartPieChartSlice | undefined;
/**
 * Disposes the style or selection callback set on the chart's series
 * @param chart
 */
export declare function disposeStyleOrSelectionCallback(chart: SerialChart, styleOrSelection: Extract<keyof StorageType["series"], "updateSelectionCallbackDisposer" | "updateStyleCallbackDisposer">): void;
/**
 * Returns a list containing the visible series id, or `undefined` when the chart doesn't have series.
 * The latter can happen during the initialization step, in which case we want to make a distinction between
 * a chart with no visible series (=> []) and one that's not initialized yet (=> undefined).
 * @param chart The chart containing the series
 */
export declare function getVisibleSeriesIDs(chart?: PieChart | XYChart): string[] | undefined;
/**
 * Indicates whether a data item for a box-plot mean line series is valid.
 * @param dataItem The data item
 * @param splitBy The split-by field
 * @returns true if the data item contains a valid average value for the series from the split-by, false otherwise
 */
export declare function isValidBoxPlotMeanLineDataItem(dataItem: WebChartDataItem, splitBy?: string): boolean;
/**
 * Function applying a specific pattern to style a series. See `addSeriesStyleOrSelectionCallback()` for
 * more details.
 * @param props.styleCallback The function to execute to style the series
 * @param props.callbackProps The input properties for props.styleCallback
 * @param props.series The series instance
 * @param props.seriesConfig The series config
 * @param props.onReadyEvent Whether to also add a listener on the 'ready' event
 */
export declare function addSeriesStylingCallback(props: {
    styleCallback: (props: StyleCallbackProps) => Promise<void> | void;
    callbackProps: StyleCallbackProps;
    series: Series;
    seriesConfig: WebChartSeriesType;
    onReadyEvent?: boolean;
}): void;
/**
 * Function applying a specific pattern to apply a selection to a series. See `addSeriesStyleOrSelectionCallback()` for
 * more details.
 * @param props.callbackProps The input properties for `applySelectionOnSeries()``
 * @param props.series The series instance
 * @param props.seriesConfig The series config
 * @param props.onReadyEvent Whether to also add a listener on the 'ready' event
 */
export declare function addSelectionCallback(props: {
    callbackProps: ApplySelectionOnSeriesProps;
    series: Series;
    seriesConfig: WebChartSeriesType;
    onReadyEvent?: boolean;
}): void;
/**
 * set the accessibility features for the amCharts series elements
 * @param series - the series to set the accessibility features
 */
export declare function setAccessibilityFeatures(series: Series): void;
/**
 * Goes through the chart series and enforces their visibility according to the config.
 * @param chart The chart
 */
export declare function enforceSeriesVisibility(chart: SerialChart): void;
/**
 * Finds the series config associated to the series instance, based on their id.
 * @param seriesInstance The series instance
 * @param chartConfig The chart config
 * @returns The matching series config when found
 */
export declare function findSeriesConfig(seriesInstance: Series, chartConfig?: WebChart): WebChartSeries | undefined;
export {};
