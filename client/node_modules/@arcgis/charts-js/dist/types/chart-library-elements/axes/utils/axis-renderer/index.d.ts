import type { Axis, AxisRenderer, GaugeChart, XYSeries } from "@amcharts/amcharts4/charts";
import { XYChart } from "@amcharts/amcharts4/charts";
import type { List } from "@amcharts/amcharts4/core";
import type { WebChartAxis, TimeIntervalInfo, WebChartLabelBehavior, WebMapWebChart } from "@arcgis/charts-spec";
import { WebChartTypes, WebChartStackedKinds } from "@arcgis/charts-spec";
import type { CommonStrings, ErrorStrings } from "@arcgis/charts-shared-utils";
import type { AxisLabelFormatCallback, GuideTooltipFormatCallback } from "@arcgis/charts-js-common";
/**
 * Resets the chart's axes zoom level to display the chart in full extent.
 * @param chart
 */
export declare function resetZoomToFullExtent(chart: GaugeChart | XYChart): void;
/**
 * Check if the axis associated with the axisRenderer is an X-Axis.
 * @param axisRenderer The renderer associated with the axis to check for.
 * @param isRotated Whether the chart is rotated.
 */
export declare function isXAxis(axisRenderer: AxisRenderer, isRotated?: boolean): boolean;
/**
 * Initialize the correct type of axes.
 * - Need to initialize a new instance of NumberFormatter because otherwise all axes inherits the format from the chart object instead.
 * - Also assigns vanilla formatting (#) so that the NumberFormatter of the axis.
 * - This way, in `htmlOutput` adapter, we will get unformatted which is easier to manipulate.
 * @param props.axes The list storing the chart axes
 * @param props.isXAxis Whether the axis to create is the x-axis
 * @param props.isSecondValueAxis Whether the axis to create is the second value axis (in dual axis mode)
 * @param props.valueFormat The value format for the axis to initialize
 * @param props.chartType The chart type
 */
export declare function initializeAxis(props: {
    axes: List<Axis>;
    isXAxis: boolean;
    isSecondValueAxis?: boolean;
    valueFormat: WebChartAxis["valueFormat"];
    chartType?: WebChartTypes;
}): void;
/**
 * Initializes the axes for an XYChart
 * @param props.chart The XYChart
 * @param props.axesConfig The axes configuration
 * @param props.isRotated Whether the chart is rotated
 * @param props.chartType The chart type
 */
export declare function initializeXYChartAxes(props: {
    chart: XYChart;
    axesConfig: WebMapWebChart["axes"];
    isRotated?: boolean;
    chartType?: WebChartTypes;
}): void;
/**
 * Indicates whether the log scale is compatible with the data.
 * @param axis The axis to check
 * @param isSecondValueAxis Whether the axis is the second value axis (in dual axis mode)
 */
export declare function whetherLogScaleIsDataCompatible(axis: Axis, isSecondValueAxis?: boolean): boolean;
/**
 * Updates an axis min max properties.
 * @param props.axis The axis to update
 * @param props.isSecondValueAxis Whether the axis is the second value axis (in dual axis mode)
 * @param props.minimumFromConfig The minimum defined in the axis config
 * @param props.maximumFromConfig The maximum defined in the axis config
 * @param props.chartType The chart type
 * @param props.isLogarithmic Whether to enable the logarithmic scale on the axis
 * @param props.bufferFromConfig The buffer for the axis
 */
export declare function updateAxisMinMax(props: {
    axis: Axis;
    axisConfig?: WebChartAxis;
    chartType?: WebChartTypes;
    isSecondValueAxis?: boolean;
}): void;
/**
 * When a series is shown or hidden (from the legend for instance), or when its data is updated, we want the value
 * axis bounds to be updated accordingly to the visible series only. When `strictMinMax` is set to `true`, amCharts
 * will by default force the bounds to the highest value from the data set, whether the corresponding series are
 * shown or hidden (keeping a consistent extent no matter the hidden series).
 * This function forces the axis to set its bounds based on the visible series only and their stack type.
 * See issue https://devtopia.esri.com/WebGIS/arcgis-charts/issues/3308
 * See AmCharts ticket: https://amcharts.zendesk.com/hc/en-us/requests/61143
 * @param series The amCharts series on which to add listeners
 */
export declare function adjustValueAxisBoundsOnSeriesEvents(series: XYSeries): void;
export declare function updateAxis(props: {
    axis: Axis;
    axisConfig: WebChartAxis;
    timeIntervalInfo?: TimeIntervalInfo;
    chartType?: WebChartTypes;
    stackedType?: WebChartStackedKinds;
    horizontalAxisLabelsBehavior?: WebChartLabelBehavior;
    verticalAxisLabelsBehavior?: WebChartLabelBehavior;
    axisLabelsBehaviorChanged?: [boolean, boolean];
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    axisValueFormatter?: AxisLabelFormatCallback;
    isSecondValueAxis?: boolean;
    isRotated?: boolean;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Updates the axes of an XYChart
 * @param props.chart The XYChart
 * @param props.axesConfig The axes configuration
 * @param props.rotationChanged Whether the rotation changed
 * @param props.axisLabelsBehaviorChanged Whether the axis labels behavior changed
 * @param props.isRotated Whether the chart is rotated
 * @param props.dualAxisChanged Whether the dual axis changed (a 3rd axis was added or removed)
 * @param props.timeIntervalInfo The time interval information
 * @param props.guideTooltipFormatter The guide tooltip HTML formatter
 * @param props.xAxisLabelFormatter The x-axis label HTML formatter
 * @param props.yAxisLabelFormatter The y-axis label HTML formatter
 * @param props.commonStrings The common t9n strings
 * @param props.errorStrings The t9n error strings
 *
 */
export declare function updateXYChartAxes(props: {
    chart: XYChart;
    axesConfig: WebMapWebChart["axes"];
    rotationChanged?: boolean;
    axisLabelsBehaviorChanged?: [boolean, boolean];
    isRotated?: boolean;
    dualAxisChanged?: boolean;
    timeIntervalInfo?: TimeIntervalInfo;
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    xAxisLabelFormatter?: AxisLabelFormatCallback;
    yAxisLabelFormatter?: AxisLabelFormatCallback;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
}): Promise<void>;
