import { ISimpleLineSymbol, ISimpleMarkerSymbol, SimpleFillSymbolStyle, RESTHorizontalAlignment, RESTVerticalAlignment, WebChartTextSymbol } from "@arcgis/charts-spec";
import { Align, Container, HorizontalCenter, Pattern, VerticalAlign, VerticalCenter } from "@amcharts/amcharts4/core";
import { AxisItemLocation } from "@amcharts/amcharts4/.internal/charts/axes/Axis";
import { LineSeries } from "@amcharts/amcharts4/charts";
import type SimpleLineSymbol from "@arcgis/core/symbols/SimpleLineSymbol";
import { AmChartsColor, EsriColor } from "../../../../types";
/**
 * Maps a width defined as a number or a string following the pattern 'xxx%' into
 * an amCharts 4 width or height property
 * @param width The width to convert
 */
export declare function mapDimension(width: number | string): Container["width"];
/**
 * Sets pattern color for fillSymbol, guides, axis needle based on a specific pattern type
 * @param fill
 * @param style
 * @param chartBackgroundColor
 * TODO: esriSFSCross, esriSFSDiagonalCross patterns not handled
 */
export declare function mapFillSymbolStyle(props: {
    fill: AmChartsColor;
    style?: SimpleFillSymbolStyle;
    chartBackgroundColor?: EsriColor;
}): Pattern | undefined;
/**
 * Getting visualization library compliant color object
 * In REST API, `a` or `alpha` belongs to [0, 255] so
 * scaling it down to [0, 1.0] for the charting library's
 * color constructor.
 * @param color
 */
export declare function mapColor(color?: Readonly<EsriColor> | null, defaultColor?: Readonly<EsriColor>): AmChartsColor;
/**
 * Converts the input angle to -359 to 359 range
 * @param angle
 * @param defaultAngle
 */
export declare function mapAngle(angle?: number, defaultAngle?: number): number;
/**
 * Map Esri's SimpleLineSymbolStyle to a string value representing the stroke-line-cap property.
 * This function maps both jsapi line symbol and rest api line symbols.
 * @param lineStyle The line symbol style to map
 * @param forceSquareLineCap Indicate whether to use 'square' for stroke-line-cap property. Default value is false; meaning 'round' will be used.
 */
export declare function mapLineSymbolStyle(lineStyle?: ISimpleLineSymbol["style"] | SimpleLineSymbol["style"], forceSquareLineCap?: boolean): LineSeries["strokeLinecap"];
/**
 * Generates SVG path for marker style and size
 * The SVG paths are adopted from [JSAPI 3.x](https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/master/esri/symbols/SimpleMarkerSymbol.js#L133)
 * @param style
 * @param size
 */
export declare function mapPath(style: ISimpleMarkerSymbol["style"], size?: number): string;
export declare function mapHAlignmentToLocation(horizontalAlignment: WebChartTextSymbol["horizontalAlignment"]): AxisItemLocation;
export declare function mapHAlignmentToAlign(alignment: WebChartTextSymbol["horizontalAlignment"], defaults?: RESTHorizontalAlignment): Align;
export declare function mapHAlignmentToHCenter(alignment: WebChartTextSymbol["horizontalAlignment"], defaults?: RESTHorizontalAlignment): HorizontalCenter;
export declare function mapVAlignmentToVAlign(alignment: WebChartTextSymbol["verticalAlignment"], defaults?: RESTVerticalAlignment): VerticalAlign;
export declare function mapVAlignmentToVCenter(alignment: WebChartTextSymbol["verticalAlignment"], defaults?: RESTVerticalAlignment): VerticalCenter;
/**
 * Converts line style to stoke dash array. The function can convert the rest or jsapi line style symbols to amCharts line symbols.
 * @param inputLineStyle input style that can define the line styles
 * @param inputWidth width of the line.
 */
export declare function mapLineStyleToDashArray(inputLineStyle: ISimpleLineSymbol["style"] | SimpleLineSymbol["style"], inputWidth: SimpleLineSymbol["width"]): LineSeries["strokeDasharray"];
