import type { SelectionThemeProperties } from "@arcgis/charts-shared-utils";
import type { Sprite, ISpriteAdapters, ISpriteProperties, SpriteState } from "@amcharts/amcharts4/core";
import type { ISimpleFillSymbol, ISimpleLineSymbol, ISimpleMarkerSymbol } from "@arcgis/charts-spec";
import type { IColumnProperties, IColumnAdapters } from "@amcharts/amcharts4/charts";
import type { MarkerElementsProps, LineElementsProps, FillElementsProps, UpdateSymbolProps } from "./interfaces";
import type { MappedFillSymbol, MappedLineSymbol, MappedMarkerSymbol } from "../symbols/interfaces";
/**
 * Assigns outline properties to a Sprite
 * @param element
 * @param outline
 */
export declare function setOutlineProperties(element: Sprite, outline: MappedLineSymbol): void;
/**
 * Updates the [styling](https://esri.github.io/arcgis-rest-js/api/types/ISimpleMarkerSymbol/) of marker elements.
 * @param {MarkerElementsProps} props
 * @param {Sprite} props.element
 * @param {boolean} props.visible
 * @param {WebChartConfigFields} props.propertyFields
 * @param {boolean} props.defaultToColorFromRamp
 * @param {number} props.colorRampIndex
 * @param {ISimpleMarkerSymbol} props.markerSymbol
 */
export declare function updateMarkerElements(props: MarkerElementsProps): MappedMarkerSymbol | undefined;
/**
 * Updates the [styling](https://esri.github.io/arcgis-rest-js/api/types/ISimpleLineSymbol/) of line elements.
 * @param props.element The element to update
 * @param props.lineSymbol The line symbol to use
 * @param props.visible Whether the element should be visible
 * @param props.defaultToColorFromRamp Whether the color should be taken from the color ramp
 * @param props.colorRampIndex The index of the color ramp to use
 */
export declare function updateLineElements(props: LineElementsProps): MappedLineSymbol | undefined;
/**
 * Updates the [styling](https://esri.github.io/arcgis-rest-js/api/types/ISimpleFillSymbol/) of fill elements.
 * @param {FillElementsProps} props
 * @param {Sprite} props.element
 * @param {boolean} props.visible
 * @param {WebChartConfigFields} props.propertyFields
 * @param {boolean} props.defaultToColorFromRamp
 * @param {number} props.colorRampIndex
 * @param {ISimpleFillSymbol} props.fillSymbol
 * @param {boolean} props.isChartFillSymbol
 */
export declare function updateFillElements(props: FillElementsProps): MappedFillSymbol | undefined;
/**
 * Computes a symbol based on the information from the config and updated with either the renderer color or
 * the config fields information when color match is on.
 * Then applies that symbol to provided element (bar, marker, segment...)
 * @param props
 * @returns the symbol applied to the element
 */
export declare function updateSymbolElementStyle<T extends ISimpleFillSymbol | ISimpleLineSymbol | ISimpleMarkerSymbol, U extends MappedFillSymbol | MappedLineSymbol | MappedMarkerSymbol>(props: UpdateSymbolProps<T>): {
    symbolWithColorInfo: T;
    stylingInfo: U | undefined;
};
/**
 * Applies styling properties related to the selection state of a chart.
 * @param state The state to apply the styling to
 * @param theme The object containing the styling information
 */
export declare function setStateProperties(state: SpriteState<IColumnProperties, IColumnAdapters> | SpriteState<ISpriteProperties, ISpriteAdapters>, theme?: SelectionThemeProperties): void;
