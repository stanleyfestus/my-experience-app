import type { QueryObject, ErrorStrings, CommonStrings } from "@arcgis/charts-shared-utils";
import type { WebChart, WebGaugeChart, LegendItemVisibility } from "@arcgis/charts-spec";
import type { AxisLabelFormatCallback, BarAndLineDataLabelFormatCallback, BarAndLineTooltipFormatCallback, BoxPlotTooltipFormatCallback, ChartInstance, ChartOptions, CreateChartProps, GaugeInnerLabelFormatCallback, GlobalOptions, GuideTooltipFormatCallback, HistogramLabelFormatCallback, MessageOptions, NotifyOptions, PieChartLabelFormatCallback, PieChartLegendValueLabelFormatCallback, PreRenderCallback, ScatterPlotLabelFormatCallback, XYConfigWithILayer, AnyConfigType } from "@arcgis/charts-js-common";
import { ChartEvents } from "@arcgis/charts-js-common";
import type { ChartResult } from "./interfaces";
/**
 * Creates a chart
 * @param props.chartContainer The container where the chart will be rendered
 * @param props.chartConfig The chart configuration
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.options The chart runtime options
 * @param props.globalOptions The global options
 * @param props.t9nStrings The t9n strings
 * @returns
 */
export declare function createXYChart(props: CreateChartProps<XYConfigWithILayer>): Promise<ChartResult>;
/**
 * Creates and returns an instance of PieChart
 * @param props
 */
export declare function createPieChart(props: {
    chartContainer?: HTMLElement;
    chartConfig?: WebChart;
    queryObject?: QueryObject;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
    options?: ChartOptions;
    globalOptions?: GlobalOptions;
}): Promise<ChartResult>;
/**
 * Creates and returns n instance of GaugeChart
 * @param props
 */
export declare function createGaugeChart(props: {
    chartContainer?: HTMLElement;
    chartConfig?: WebGaugeChart;
    queryObject?: QueryObject;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
    options?: ChartOptions;
    globalOptions?: GlobalOptions;
}): Promise<ChartResult>;
/**
 * Creates a chart and returns an object of type `ChartInstance` containing a set of functions
 * in relation with the created chart.
 * @param props.chartContainer The HTML element where the chart will be rendered
 * @param props.chartConfig The chart configuration
 * @param props.options The chart runtime options
 * @param props.globalOptions The global options
 * @param props.t9nStrings The t9n strings
 */
export declare function createChart(createChartProps: CreateChartProps<AnyConfigType>): Promise<ChartInstance>;
export { ChartEvents };
export type { ChartInstance, LegendItemVisibility, NotifyOptions, ChartOptions, GlobalOptions, MessageOptions, PreRenderCallback, PieChartLabelFormatCallback, HistogramLabelFormatCallback, ScatterPlotLabelFormatCallback, BarAndLineTooltipFormatCallback, BarAndLineDataLabelFormatCallback, BoxPlotTooltipFormatCallback, GuideTooltipFormatCallback, AxisLabelFormatCallback, PieChartLegendValueLabelFormatCallback, GaugeInnerLabelFormatCallback, };
