import { StorageType } from "./interfaces";
/**
 * Disposes a specific storage. To be used when a chart is disposed for instance
 * @param memoryStorageId
 */
export declare function deleteStorage(storageKey?: string): void;
/**
 * Retrieves a cursor property from a specific storage
 * @param storageKey The cursor id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromCursorStorage<T>(storageKey: string, propertyName: keyof StorageType["cursor"]): T | undefined;
/**
 * Updates a cursor property from a specific storage
 * @param storageKey The cursor id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateCursorStorage(storageKey: string, informationToStore: StorageType["cursor"]): void;
/**
 * Retrieves a legend property from a specific storage.
 * @param storageKey The legend id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromLegendStorage<T>(storageKey: string, propertyName: keyof StorageType["legend"]): T | undefined;
/**
 * Updates a legend property from a specific storage
 * @param storageKey The legend id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateLegendStorage(storageKey: string, informationToStore: StorageType["legend"]): void;
/**
 * Retrieves a chart property from a specific storage.
 * @param storageKey The chart id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromChartStorage<T>(storageKey: string, propertyName: keyof StorageType["chart"]): T | undefined;
/**
 * Updates a chart property from a specific storage
 * @param storageKey The chart id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateChartStorage(storageKey: string, informationToStore: StorageType["chart"]): void;
/**
 * Retrieves a series property from a specific storage.
 * @param storageKey The series id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromSeriesStorage<T>(storageKey: string, propertyName: keyof StorageType["series"]): T | undefined;
/**
 * Updates a series property from a specific storage
 * @param storageKey The series id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateSeriesStorage(storageKey: string, informationToStore: StorageType["series"]): void;
/**
 * Retrieves an axis property from a specific storage.
 * @param storageKey The axis id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromAxisStorage<T>(storageKey: string, propertyName: keyof StorageType["axis"]): T | undefined;
/**
 * Updates an axis property from a specific storage
 * @param storageKey The axis id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateAxisStorage(storageKey: string, informationToStore: StorageType["axis"]): void;
/**
 * Retrieves a marker property from a specific storage.
 * @param storageKey The marker id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromMarkerStorage<T>(storageKey: string, propertyName: keyof StorageType["marker"]): T | undefined;
/**
 * Updates a marker property from a specific storage
 * @param storageKey The marker id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateMarkerStorage(storageKey: string, informationToStore: StorageType["marker"]): void;
/**
 * Retrieves a label property from a specific storage.
 * @param storageKey The label id
 * @param propertyName The property to retrieve
 */
export declare function getValueFromLabelStorage<T>(storageKey: string, propertyName: keyof StorageType["label"]): T | undefined;
/**
 * Updates a label property from a specific storage
 * @param storageKey The label id
 * @param informationToStore An object containing the properties to update. It will append and replace the existing ones for the given storage key and id.
 */
export declare function updateLabelStorage(storageKey: string, informationToStore: StorageType["label"]): void;
