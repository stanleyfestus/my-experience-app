import { XYSeries, LineSeries, XYChart, PieChart, GaugeChartDataItem, Chart } from "@amcharts/amcharts4/charts";
import { List, Sprite, Optional, Pattern, LinearGradient, RadialGradient } from "@amcharts/amcharts4/core";
import { AmChartsColor, EsriColor } from "../../types";
/**
 * Toggles the visibility of an element via `.show()`/`.hide()` and `visible` property.
 * The [reason](https://amcharts.zendesk.com/hc/en-us/requests/52191) for using `.show()`/`.hide()` approach.
 * Observing some misbehavior if just `.show()`/`.hide()` is used, so using `visible` along with.
 * @param element
 * @param visible
 */
export declare function showElement(element: Sprite, visible?: boolean): void;
/**
 * Function swapping the series following the position changes array.
 * Ignores individually the swap request if the indexes are invalid.
 * @param series
 * @param positionChanges
 */
export declare function swapSeries(series: List<XYSeries>, positionChanges: number[][]): void;
/**
 * Converts an amCharts color to a JSAPI color array.
 * The function will only consider a Color, not a Pattern | LinearGradient | RadialGradient
 * @param fill
 * @param fillOpacity
 */
export declare function amChartsColorToEsriColor(fill?: Optional<AmChartsColor | LinearGradient | Pattern | RadialGradient>, fillOpacity?: number): EsriColor | undefined;
/**
 * Converts esriColor to AmCharts color
 * The function will consider a Color as an input
 * @param input
 */
export declare function esriColorToAmChartsColor(input?: EsriColor | Readonly<EsriColor>): AmChartsColor;
/**
 * Converts a color represented by a string into a RGBa object
 * @param input The color to convert
 */
export declare function hexColorToRGB(input?: string): {
    r: number;
    g: number;
    b: number;
    a?: number;
} | undefined;
/**
 * Finds the scatter plot `Bullet` marker from a `LineSeries`
 * @param series
 */
export declare function findBulletMarker(series: LineSeries): Sprite | undefined;
/**
 * Returns a unique ID associated to a chart
 * @param chart
 */
export declare function getChartUniqueInternalID(chart: GaugeChartDataItem | PieChart | XYChart): string;
/**
 * Indicates whether an amCharts element is still available (non null, non undefined, non disposed)
 * @param element
 */
export declare function isElementValid(element: Sprite): boolean;
/**
 * Indicates whether an element is visible.
 * @param element
 */
export declare function isElementVisible(element: Sprite): boolean;
/**
 * Determines if a Sprite (data point) is outside of the chart container.
 * Following AmCharts tutorial: https://www.amcharts.com/docs/v4/concepts/bullets/#Hiding_unmasked_bullets
 * @param element The target element (data point) to check for.
 * @param chart The chart of which container is used to check against.
 */
export declare function isElementOutsideOfPlotContainer(element: Sprite, chart: XYChart): boolean;
/**
 * Finds chart from element and returns it if found
 * @param element element of chart
 * @returns
 */
export declare function findChart(element: Sprite): Chart | undefined;
/**
 * Retrieves the chart background color given a chart
 * @param chart
 * @returns
 */
export declare function getChartBackgroundColor(chart: Chart): EsriColor | undefined;
