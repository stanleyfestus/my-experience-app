import type { WebChart, WebGaugeChart, WebMapWebChart } from "@arcgis/charts-spec";
import type { ValidationStatus, QueryObject, ErrorStrings } from "@arcgis/charts-shared-utils";
import { DataWarningKeywords } from "@arcgis/charts-shared-utils";
import type { Chart } from "@amcharts/amcharts4/charts";
/**
 * Handles the critical errors that can be thrown by amCharts.
 * @param chart The chart
 * @param errorStrings The object containing all the t9n error messages
 */
export declare function handleCriticalErrors(chart: Chart, errorStrings: ErrorStrings): void;
/**
 * Initializes the chart modal.
 * @param chart The chart
 */
export declare function initializeModal(chart: Chart): void;
export declare function resetModal(chart: Chart): void;
/**
 * Validates the `WebChart` config and displays the `Errors` and `Warnings` them in the chart popup.
 * Both `Errors` and `Warnings` are non-dismissible.
 * @param props.chart The chart
 * @param props.chartConfig The optional chart config
 * @param props.queryObject The optional query object
 * @param props.createMessage The optional error and warning to be displayed
 * @param props.errorStrings The t9n error strings
 */
export declare function isValidConfig(props: {
    chart: Chart;
    chartConfig?: WebChart | WebGaugeChart;
    queryObject?: QueryObject;
    createMessage?: string;
    errorStrings: ErrorStrings;
}): Promise<ValidationStatus>;
/**
 * Setting a message for the chart to display when it fails to create the chart due to bad data.
 * @param chart The chart
 * @param invalidType The type of invalid data
 * @param elementCount The number of elements related to the error
 * @param seriesCount The number of series in the chart
 * @param openModal Whether to open the modal or not
 * @param errorStrings The t9n error strings
 */
export declare function raiseInvalidDataWarning(props: {
    chart: Chart;
    chartConfig?: WebChart | WebMapWebChart;
    invalidType?: DataWarningKeywords;
    elementCount?: number;
    seriesCount?: number;
    openModal?: boolean;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Checks whether the chart's data is empty and if so:
 * - sends an event
 * - opens the chart's modal (when the chart options don't say otherwise) with a default message
 * @param chart The chart
 * @param chartConfig The chart's config
 * @param errorStrings The t9n error strings
 */
export declare function raiseNoDataWarning(props: {
    chart: Chart;
    chartConfig?: WebChart | WebGaugeChart;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Checks whether the logarithmic scale can be applied to the chart's axes when the option is enabled.
 * If not:
 * - sends an event
 * - opens the chart's modal (when the chart options don't say otherwise) with a default message
 * @param chart The chart
 * @param errorStrings The t9n error strings
 */
export declare function raiseLogScaleNotCompatibleWarning(chart: Chart, errorStrings: ErrorStrings): Promise<void>;
