/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ArcgisReferenceElement } from "./utils/component-utils";
import { Nil } from "@arcgis/components-utils";
import { ArcGISGraphic, ArcGISMapView, ArcGISSceneView } from "./components/types";
import { UtilityNetworkAssociationsWidget } from "./components/utility-network-associations/utility-network-associations";
import { UtilityNetworkTraceWidget } from "./components/utility-network-trace/utility-network-trace";
import { UtilityNetworkValidateTopologyWidget } from "./components/utility-network-validate-topology/utility-network-validate-topology";
import { VersioningStateEvent } from "./components/version-management/version-management";
import { VersionListElementProps } from "./components/version-management/components/version-management-version-list/version-management-version-list";
export { ArcgisReferenceElement } from "./utils/component-utils";
export { Nil } from "@arcgis/components-utils";
export { ArcGISGraphic, ArcGISMapView, ArcGISSceneView } from "./components/types";
export { UtilityNetworkAssociationsWidget } from "./components/utility-network-associations/utility-network-associations";
export { UtilityNetworkTraceWidget } from "./components/utility-network-trace/utility-network-trace";
export { UtilityNetworkValidateTopologyWidget } from "./components/utility-network-validate-topology/utility-network-validate-topology";
export { VersioningStateEvent } from "./components/version-management/version-management";
export { VersionListElementProps } from "./components/version-management/components/version-management-version-list/version-management-version-list";
export namespace Components {
    interface ArcgisAreaMeasurement2d {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D.html#unit)
         */
        "unit": MeasurementSystem | AreaUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D.html#unitOptions)
         */
        "unitOptions": SystemOrAreaUnit[];
    }
    interface ArcgisAreaMeasurement3d {
        /**
          * The area measurement analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#analysis)
         */
        "analysis": AreaMeasurementAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "start": () => Promise<void>;
        "state": "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#unit)
         */
        "unit": MeasurementSystem | AreaUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#unitOptions)
         */
        "unitOptions": SystemOrAreaUnit[];
    }
    interface ArcgisAttachments {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Configures the attachment editing functionality that can be performed by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#capabilities)
         */
        "capabilities": AttachmentsCapabilities;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * A string value indicating how to display an attachment.
         */
        "displayType": "auto" | "list" | "preview";
        /**
          * The graphic for the attachments.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#graphic)
         */
        "graphic": Graphic;
        "hideAddButton": boolean | undefined;
        "hideAddSubmitButton": boolean | undefined;
        "hideCancelAddButton": boolean | undefined;
        "hideCancelUpdateButton": boolean | undefined;
        "hideDeleteButton": boolean | undefined;
        "hideErrorMessage": boolean | undefined;
        "hideProgressBar": boolean | undefined;
        "hideUpdateButton": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "loading";
        "submitting": boolean;
    }
    interface ArcgisBasemapGallery {
        /**
          * The map's [basemap](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html#activeBasemap)
         */
        "activeBasemap": Basemap;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled": boolean;
        /**
          * Indicates the heading level to use for the message "No basemaps available" when no basemaps are available in the BasemapGallery.
         */
        "headingLevel": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The source for basemaps that the widget will display.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html#source)
         */
        "source": LocalBasemapsSource | PortalBasemapsSource;
        "state": "ready" | "disabled";
    }
    interface ArcgisBasemapLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "baseFilterText": string;
        /**
          * A collection of ListItems representing the baseLayers.
         */
        "baseItems": Collection<ListItem>;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing a base layer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#baseListItemCreatedFunction)
         */
        "baseListItemCreatedFunction": (event: any) => void;
        /**
          * The current basemap's title.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#basemapTitle)
         */
        "basemapTitle": string;
        /**
          * The CatalogLayerList that displays a catalog layer's dynamic group layer.
         */
        "catalogLayerList": CatalogLayerList;
        /**
          * [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) specific properties.
         */
        "catalogOptions": BasemapLayerListCatalogOptions;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled": boolean;
        /**
          * Indicates whether the form to edit the basemap's title is currently visible.
         */
        "editingTitle": boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "filterPlaceholder": string;
        /**
          * Indicates the heading level to use for the widget title (i.e.
         */
        "headingLevel": number;
        "hideBaseLayers": boolean | undefined;
        "hideFlow": boolean | undefined;
        "hideHeading": boolean | undefined;
        "hideReferenceLayers": boolean | undefined;
        "hideStatusIndicators": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * [KnowledgeGraphLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html) specific properties.
         */
        "knowledgeGraphOptions": BasemapLayerListKnowledgeGraphOptions;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems": number;
        /**
          * This property manages the visibility of the [tableList](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#tableList).
         */
        "openTableListItem": ListItem;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "referenceFilterText": string;
        /**
          * A collection of ListItems representing the referenceLayers.
         */
        "referenceItems": Collection<ListItem>;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing a reference layer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#referenceListItemCreatedFunction)
         */
        "referenceListItemCreatedFunction": (event: any) => void;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html)s representing basemap layers selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#selectedItems)
         */
        "selectedItems": Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode": "none" | "single" | "multiple" | "single-persist";
        "showCloseButton": boolean | undefined;
        "showCollapseButton": boolean | undefined;
        "showEditTitleButton": boolean | undefined;
        "showErrors": boolean | undefined;
        "showFilter": boolean | undefined;
        "showTemporaryLayerIndicators": boolean | undefined;
        "state": "ready" | "disabled" | "loading";
        "tableList": TableList;
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance": "default" | "checkbox";
    }
    interface ArcgisBasemapToggle {
        "activeBasemap": Basemap;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget. It is typically used when the widget is controlled by another one (e.g. in the Expand widget).
         */
        "icon": Nil | string;
        /**
          * The widget's default label.
         */
        "label": string | undefined;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        /**
          * The next basemap for toggling.
         */
        "nextBasemap": Basemap;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The visible elements that are displayed within the widget.
         */
        "showTitle": boolean;
        "state": "ready" | "disabled" | "loading" | "incompatible-next-basemap";
        /**
          * Toggles to the [next basemap](#nextBasemap).
         */
        "toggle": () => Promise<any>;
    }
    interface ArcgisBookmarks {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * A collection of [Bookmark](https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html)s.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#bookmarks)
         */
        "bookmarks": Collection<Bookmark>;
        /**
          * Specifies how new bookmarks will be created if [visibleElements.addBookmarkButton](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements) is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultCreateOptions)
         */
        "defaultCreateOptions": BookmarkOptions;
        /**
          * Specifies how bookmarks will be edited, if [visibleElements.editBookmarkButton](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements) is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultEditOptions)
         */
        "defaultEditOptions": BookmarkOptions;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When true, the widget is visually withdrawn and cannot be interacted with.
         */
        "disabled": boolean;
        /**
          * Indicates if a Bookmark is able to be dragged in order to update its position in the list.
         */
        "dragEnabled": boolean;
        /**
          * Defines the text used as a placeholder when visibleElements.filter is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterPlaceholder)
         */
        "filterPlaceholder": string;
        /**
          * Defines the text used to filter the bookmarks when visibleElements.filter is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterText)
         */
        "filterText": string;
        "hideFlow": boolean | undefined;
        "hideThumbnail": boolean | undefined;
        "hideTime": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "showAddBookmarkButton": boolean | undefined;
        "showCloseButton": boolean | undefined;
        "showCollapseButton": boolean | undefined;
        "showEditBookmarkButton": boolean | undefined;
        "showFilter": boolean | undefined;
        "showHeading": boolean | undefined;
        "state": "ready" | "loading";
    }
    interface ArcgisBuildingExplorer {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates the heading level to use for the headings in the widget.
         */
        "headingLevel": number;
        "hideDisciplines": boolean | undefined;
        "hideLevels": boolean | undefined;
        "hidePhases": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A [collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) of layers of type [BuildingSceneLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-BuildingSceneLayer.html) that are added to the widget for exploration.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BuildingExplorer.html#layers)
         */
        "layers": Collection<BuildingSceneLayer>;
        "level": BuildingLevel;
        "phase": BuildingPhase;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "failed" | "loading";
    }
    interface ArcgisCatalogLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * A collection of ListItems representing the catalogLayers dynamicGroupLayer.
         */
        "catalogItems": Collection<ListItem>;
        /**
          * The [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) to display in the widget.
         */
        "catalogLayer": CatalogLayer;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#visibleElements) is true.
         */
        "filterPlaceholder": string;
        /**
          * The value of the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#visibleElements) is true.
         */
        "filterText": string;
        /**
          * Indicates the heading level to use for the heading of the widget.
         */
        "headingLevel": number;
        "hideFlow": boolean | undefined;
        "hideStatusIndicators": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A function that executes each time a [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) is created.
         */
        "listItemCreatedFunction": (event: any) => void;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItems](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing [catalogItems](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#catalogItems) selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#selectedItems)
         */
        "selectedItems": Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode": "none" | "single" | "multiple" | "single-persist";
        "showCloseButton": boolean | undefined;
        "showCollapseButton": boolean | undefined;
        "showErrors": boolean | undefined;
        "showFilter": boolean | undefined;
        "showHeading": boolean | undefined;
        "showTemporaryLayerIndicators": boolean | undefined;
        "state": "ready" | "disabled" | "loading";
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance": "default" | "checkbox";
    }
    interface ArcgisCompass {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "destroy": () => Promise<void>;
        "icon": string;
        "label": Nil | string;
        "orientation": Orientation;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "reset": () => Promise<void>;
        "state": "rotation" | "disabled" | "compass";
    }
    interface ArcgisCoordinateConversion {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * A [Collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) containing every [Conversion](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-support-Conversion.html) that the widget is currently displaying.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#conversions)
         */
        "conversions": Collection<Conversion>;
        "currentLocation": Point;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * A [Collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) containing every [Format](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-support-Format.html) that the widget is capable of displaying.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#formats)
         */
        "formats": Collection<Format>;
        /**
          * Indicates the heading level to use for the coordinate input and coordinate settings headings.
         */
        "headingLevel": number;
        "hideCaptureButton": boolean | undefined;
        "hideEditButton": boolean | undefined;
        "hideExpandButton": boolean | undefined;
        "hideSettingsButton": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * This symbol is used to visualize the location currently described by the widget when `capture` mode is active.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#locationSymbol)
         */
        "locationSymbol": SimpleMarkerSymbol | PictureMarkerSymbol;
        /**
          * Describes the current mode of the widget.
         */
        "mode": "live" | "capture";
        "multipleConversionsDisabled": boolean;
        /**
          * Determines whether the widget should expand up or down.
         */
        "orientation": "auto" | "expand-up" | "expand-down";
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "reverseConvert": (coordinate: string, format: __esri.Format) => Promise<__esri.Point>;
        "state": "ready" | "disabled" | "loading";
        "storageDisabled": boolean;
        /**
          * This property determines whether sessionStorage or localStorage will be used to store widget state.
         */
        "storageType": "local" | "session";
    }
    interface ArcgisDaylight {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "currentSeason": "spring" | "summer" | "fall" | "winter";
        /**
          * Controls whether the widget displays a date or a season picker.
         */
        "dateOrSeason": "date" | "season";
        "dayPlaying": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates the heading level to use for the widget title.
         */
        "headingLevel": number;
        "hideDatePicker": boolean | undefined;
        "hideHeader": boolean | undefined;
        "hidePlayButtons": boolean | undefined;
        "hideShadowsToggle": boolean | undefined;
        "hideSunLightingToggle": boolean | undefined;
        "hideTimezone": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Controls the speed of the daytime and date animation.
         */
        "playSpeedMultiplier": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * Sets steps, or intervals, on the time slider to restrict the times of the day that can be selected when dragging the thumb.
         */
        "timeSliderSteps": number | number[];
        "yearPlaying": boolean;
    }
    interface ArcgisDirectionalPad {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether interaction is allowed on the widget.
         */
        "disabled": boolean;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "moving";
        /**
          * Determines the size of directional pad buttons and the slider.
         */
        "visualScale": "s" | "m" | "l";
    }
    interface ArcgisDirections {
        /**
          * An authorization string used to access a resource or service.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#apiKey)
         */
        "apiKey": string;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "getDirections": () => Promise<__esri.RouteLayerSolveResult>;
        /**
          * Indicates the heading level to use for the origin and destination addresses (i.e.
         */
        "headingLevel": number;
        "hideLayerDetails": boolean | undefined;
        "hideSaveAsButton": boolean | undefined;
        "hideSaveButton": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "lastRoute": DirectionsLastRoute;
        /**
          * The [RouteLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-RouteLayer.html) associated with the Directions widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#layer)
         */
        "layer": RouteLayer;
        /**
          * The maximum number of stops allowed for routing.
         */
        "maxStops": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "routeLayerItemId": Nil | string;
        "save": () => Promise<__esri.PortalItem>;
        "saveAs": (portalItem: Promise<__esri.PortalItem>, options: { folder: __esri.PortalFolder; }) => Promise<__esri.PortalItem>;
        /**
          * Controls the default properties used when [searching](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html).
         */
        "searchProperties": DirectionsSearchProperties;
        "state": "ready" | "disabled";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#unit)
         */
        "unit": "imperial" | "metric" | "millimeters" | "centimeters" | "decimeters" | "meters" | "kilometers" | "inches" | "feet" | "yards" | "miles" | "nautical-miles";
        "useDefaultRouteLayer": boolean;
        "zoomToRoute": () => Promise<void>;
    }
    interface ArcgisDirectlineMeasurement3d {
        /**
          * The direct line measurement analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#analysis)
         */
        "analysis": DirectLineMeasurementAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "start": () => Promise<void>;
        "state": "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#unit)
         */
        "unit": MeasurementSystem | LengthUnit;
        /**
          * List of unit systems (imperial, metric) and specific units for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#unitOptions)
         */
        "unitOptions": SystemOrLengthUnit[];
    }
    interface ArcgisDistanceMeasurement2d {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D.html#unit)
         */
        "unit": MeasurementSystem | LengthUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D.html#unitOptions)
         */
        "unitOptions": SystemOrLengthUnit[];
    }
    interface ArcgisEditor {
        "activeWorkflow": CreateFeaturesWorkflow | UpdateWorkflow;
        /**
          * An array of string values which specifies what end users are allowed to edit.
         */
        "allowedWorkflows": "update" | "create-features";
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "cancelWorkflow": () => Promise<void>;
        "deleteFeatureFromWorkflow": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates the heading level to use for title of the widget.
         */
        "headingLevel": number;
        "hideCreateFeaturesSection": boolean | undefined;
        "hideEditFeaturesSection": boolean | undefined;
        "hideLabelsToggle": boolean | undefined;
        "hideSnappingControlsElementsEnabledToggle": boolean | undefined;
        "hideSnappingControlsElementsFeatureEnabledToggle": boolean | undefined;
        "hideSnappingControlsElementsLayerList": boolean | undefined;
        "hideSnappingControlsElementsSelfEnabledToggle": boolean | undefined;
        "hideTooltipsToggle": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Options to configure the sketch labels shown next to each segment of the geometry being created or updated.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#labelOptions)
         */
        "labelOptions": SketchLabelOptions;
        /**
          * An array of editing configurations for individual layers.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#layerInfos)
         */
        "layerInfos": EditorLayerInfo[];
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "showSnappingControlsElementsHeader": boolean | undefined;
        /**
          * The [SnappingOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html) for editing.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#snappingOptions)
         */
        "snappingOptions": SnappingOptions;
        "startCreateFeaturesWorkflowAtFeatureCreation": (info: __esri.CreationInfo) => Promise<void>;
        "startCreateFeaturesWorkflowAtFeatureTypeSelection": () => Promise<void>;
        "startUpdateWorkflowAtFeatureEdit": (feature: ArcGISGraphic) => Promise<void>;
        "startUpdateWorkflowAtFeatureSelection": () => Promise<void>;
        "startUpdateWorkflowAtMultipleFeatureSelection": (candidates: ArcGISGraphic[]) => Promise<void>;
        "state": "ready" | "disabled" | "adding-attachment" | "awaiting-feature-creation-info" | "awaiting-feature-to-create" | "awaiting-feature-to-update" | "awaiting-update-feature-candidate" | "creating-features" | "editing-attributes" | "editing-attachment" | "editing-existing-feature" | "editing-new-feature";
        /**
          * This property allows customization of supporting Editor widgets and their default behavior.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#supportingWidgetDefaults)
         */
        "supportingWidgetDefaults": SupportingWidgetDefaults;
        /**
          * Options to configure the tooltip shown next to the cursor when creating or updating graphics.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#tooltipOptions)
         */
        "tooltipOptions": SketchTooltipOptions;
    }
    interface ArcgisElevationProfile {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "effectiveUnits": EffectiveUnits;
        "hideChart": boolean | undefined;
        "hideClearButton": boolean | undefined;
        "hideLegend": boolean | undefined;
        "hideSelectButton": boolean | undefined;
        "hideSettingsButton": boolean | undefined;
        "hideSketchButton": boolean | undefined;
        "hideUniformChartScalingToggle": boolean | undefined;
        "hideUnitSelector": boolean | undefined;
        "highlightEnabled": boolean;
        "hoveredChartPosition": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The input line graphic along which elevation will be queried in order to generate an elevation profile.
         */
        "input": Graphic;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        /**
          * Collection of elevation profile lines which are to be generated and displayed in the widget's chart.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#profiles)
         */
        "profiles": Collection<ElevationProfileLineGround | ElevationProfileLineInput | ElevationProfileLineQuery | ElevationProfileLineView>;
        "progress": number;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "start": () => Promise<void>;
        "state": "ready" | "disabled" | "selected" | "creating" | "created" | "selecting";
        "stop": () => Promise<void>;
        "uniformChartScaling": boolean;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the elevation and distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#unit)
         */
        "unit": MeasurementSystem | LengthUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the elevation and distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#unitOptions)
         */
        "unitOptions": SystemOrLengthUnit[];
    }
    interface ArcgisExpand {
        /**
          * Automatically collapses the expand widget instance when the view's viewpoint updates.
         */
        "autoCollapse": boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * When true, the Expand widget will close after the Escape key is pressed when the keyboard focus is within its content.
         */
        "closeOnEsc": boolean | Function;
        "collapse": () => Promise<void>;
        /**
          * Calcite icon used to style the Expand button when the [content](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#content) can be collapsed.
         */
        "collapseIcon": string;
        /**
          * Tooltip to display to indicate Expand widget can be collapsed.
         */
        "collapseTooltip": string;
        /**
          * The content to display within the expanded Expand widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#content)
         */
        "content": string | Node | Widget;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "expand": () => Promise<void>;
        /**
          * Calcite icon used when the widget is collapsed.
         */
        "expandIcon": string;
        /**
          * Tooltip to display to indicate Expand widget can be expanded.
         */
        "expandTooltip": string;
        /**
          * Indicates whether the widget is currently expanded or not.
         */
        "expanded": boolean;
        /**
          * This value associates two or more Expand widget instances with each other, allowing one instance to auto collapse when another instance in the same group is expanded.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#group)
         */
        "group": string;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * A number to display at the corner of the widget to indicate the number of, for example, open issues or unread notices.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#iconNumber)
         */
        "iconNumber": number;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * The mode in which the widget displays.
         */
        "mode": "auto" | "floating" | "drawer";
        /**
          * The placement used by the [calcite popover](https://developers.arcgis.com/calcite-design-system/components/popover/) when the widget is expanded.
         */
        "placement": "left" | "right" | "top" | "bottom" | "auto" | "auto-start" | "auto-end" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "leading-start" | "leading" | "leading-end" | "trailing-end" | "trailing" | "trailing-start";
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "toggle": () => Promise<void>;
    }
    interface ArcgisFeature {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Enables automatic creation of a popup template for layers that have popups enabled but no popupTemplate defined.
         */
        "defaultPopupTemplateEnabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * The [Graphic](https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html) used to represent the feature.
         */
        "graphic": Graphic;
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#title) of the feature widget.
         */
        "headingLevel": number;
        "hideContentAttachments": boolean | undefined;
        "hideContentExpression": boolean | undefined;
        "hideContentFields": boolean | undefined;
        "hideContentMedia": boolean | undefined;
        "hideContentText": boolean | undefined;
        "hideLastEditInfo": boolean | undefined;
        "hideTitle": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "location": Point;
        /**
          * A map is required when the input [graphic](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#graphic) has a popupTemplate that contains [Arcade](https://developers.arcgis.com/arcade) expressions in [ExpressionInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html) or [ExpressionContent](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html) that may use the `$map` profile variable to access data from layers within a map.
         */
        "map": Map;
        "nextMedia": (contentElementIndex: number) => Promise<void>;
        "position": __esri.UIPosition;
        "previousMedia": (contentElementIndex: number) => Promise<void>;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "setActiveMedia": (contentElementIndex: number, mediaInfoIndex: number) => Promise<void>;
        /**
          * The spatial reference used for [Arcade](https://developers.arcgis.com/arcade) operations.
         */
        "spatialReference": SpatialReference;
        "state": "ready" | "error" | "disabled" | "loading";
    }
    interface ArcgisFeatureForm {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * The associated feature containing the editable attributes.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#feature)
         */
        "feature": Graphic;
        /**
          * The associated [template](https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html) used for the form.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#formTemplate)
         */
        "formTemplate": FormTemplate;
        "getValues": () => Promise<any>;
        /**
          * Defines how groups will be displayed to the user.
         */
        "groupDisplay": "all" | "sequential";
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#title) of the form.
         */
        "headingLevel": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Layer containing the editable feature attributes.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#layer)
         */
        "layer": FeatureLayer | SubtypeSublayer;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
        "submit": () => Promise<void>;
        /**
          * The timezone displayed within the form.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#timeZone)
         */
        "timeZone": string;
    }
    interface ArcgisFeatureTable {
        "activeFilters": Collection<GeometryFilter | SelectionFilter>;
        "activeSortOrders": ColumnSortOrder[];
        /**
          * Indicates whether to display the `Attachments` field in the table.
         */
        "attachmentsEnabled": boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Indicates whether the table should automatically refresh when the underlying data changes.
         */
        "autoRefreshEnabled": boolean;
        "clearSelectionFilter": () => Promise<void>;
        /**
          * Indicates whether the table should allow reordering of columns.
         */
        "columnReorderingEnabled": boolean;
        "columns": Collection<Column | FieldColumn | GroupColumn | ActionColumn | AttachmentsColumn | RelationshipColumn>;
        "deleteSelection": (showWarningPrompt?: boolean) => Promise<void>;
        /**
          * Text displayed in the table header, under the title.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#description)
         */
        "description": string | Function;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether [editing](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#editing-in-featuretable) is enabled on the data within the feature table.
         */
        "editingEnabled": boolean;
        "filterBySelection": () => Promise<void>;
        /**
          * Indicates whether the table only displays rows that are considered selected.
         */
        "filterBySelectionEnabled": boolean;
        /**
          * Set this property to filter the features displayed in the table.
         */
        "filterGeometry": Geometry;
        "findColumn": (fieldName: string) => Promise<__esri.ActionColumn | __esri.AttachmentsColumn | __esri.Column | __esri.GroupColumn | __esri.RelationshipColumn>;
        "goToPage": (index: number) => Promise<void>;
        /**
          * A collection of string values which indicate [field.names](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html) that should be hidden within the table.
         */
        "hiddenFields": Collection<string>;
        "hideColumn": (fieldName: string) => Promise<void>;
        "hideColumnMenus": boolean | undefined;
        "hideHeader": boolean | undefined;
        "hideMenu": boolean | undefined;
        "hideMenuItemsClearSelection": boolean | undefined;
        "hideMenuItemsDeleteSelection": boolean | undefined;
        "hideMenuItemsRefreshData": boolean | undefined;
        "hideMenuItemsSelectedRecordsShowAllToggle": boolean | undefined;
        "hideMenuItemsToggleColumns": boolean | undefined;
        "hideMenuItemsZoomToSelection": boolean | undefined;
        "hideSelectionColumn": boolean | undefined;
        /**
          * Indicates whether to highlight the associated feature when a row is selected by checking the corresponding checkbox.
         */
        "highlightEnabled": boolean;
        /**
          * This property accepts and returns a collection of feature object IDs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#highlightIds)
         */
        "highlightIds": Collection<string | number>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        "itemId": Nil | string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * The associated [CatalogFootprintLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html), [CSVLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html), [FeatureLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html), [GeoJSONLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html), [ImageryLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html), [KnowledgeGraphSublayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-knowledgeGraph-KnowledgeGraphSublayer.html), [SceneLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html), or [WFSLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WFSLayer.html) containing the fields and attributes to display within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#layer)
         */
        "layer": FeatureLayer | SceneLayer | GeoJSONLayer | CatalogFootprintLayer | CSVLayer | ImageryLayer | KnowledgeGraphSublayer | WFSLayer;
        /**
          * Set this object to customize the feature table's menu content.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#menuConfig)
         */
        "menuConfig": TableMenuConfig;
        /**
          * Indicates whether sorting multiple columns is supported within the table.
         */
        "multiSortEnabled": boolean;
        "nextPage": () => Promise<void>;
        /**
          * This property accepts and returns a collection of feature object IDs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#objectIds)
         */
        "objectIds": Collection<string | number>;
        /**
          * Controls what field attribute data is requested by the table's store.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#outFields)
         */
        "outFields": string[];
        /**
          * Number of pages of features to be displayed in the table, based on the total number of features and configured page size.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#pageCount)
         */
        "pageCount": number;
        /**
          * Represents the index of the page of feature currently being displayed.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#pageIndex)
         */
        "pageIndex": number;
        /**
          * The default page size used when displaying features within the table.
         */
        "pageSize": number;
        /**
          * Controls whether the table should only display a single page of features at any time.
         */
        "paginationEnabled": boolean;
        "position": __esri.UIPosition;
        "previousPage": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "refresh": () => Promise<void>;
        /**
          * Indicates whether to display any related records associated with rows within the table.
         */
        "relatedRecordsEnabled": boolean;
        /**
          * Indicates whether to fetch geometries for the corresponding features displayed in the table.
         */
        "returnGeometryEnabled": boolean;
        /**
          * Indicates whether geometries fetched for the corresponding features contain M values, if supported.
         */
        "returnMEnabled": boolean;
        /**
          * Indicates whether geometries fetched for the corresponding features contain Z values, if supported.
         */
        "returnZEnabled": boolean;
        "scrollToBottom": () => Promise<void>;
        "scrollToIndex": (index: number) => Promise<void>;
        "scrollToLeft": () => Promise<void>;
        "scrollToRow": (objectId: number) => Promise<void>;
        "scrollToTop": () => Promise<void>;
        "showAllColumns": () => Promise<void>;
        "showColumn": (fieldName: string) => Promise<void>;
        "sortColumn": (path: string, direction: "asc" | "desc") => Promise<void>;
        "state": "ready" | "error" | "disabled" | "loaded" | "loading";
        /**
          * The associated [template](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-TableTemplate.html) used for the feature table.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#tableTemplate)
         */
        "tableTemplate": TableTemplate;
        /**
          * Dates and times displayed in the widget will be in terms of this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#timeZone)
         */
        "timeZone": string;
        "url": Nil | string;
        "zoomToSelection": () => Promise<void>;
    }
    interface ArcgisFeatureTemplates {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether the list of available feature [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html) should scroll within its containing element.
         */
        "enableListScroll": boolean;
        /**
          * [Function](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#FilterFunction) can be defined to help filter [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html) within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#filterFunction)
         */
        "filterFunction": (filterName: any) => boolean;
        /**
          * Text used to filter items.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#filterText)
         */
        "filterText": string;
        /**
          * It is possible to group [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html).
         */
        "groupBy": string | GroupByFunction;
        /**
          * Indicates the heading level to use for the labels of grouped feature templates.
         */
        "headingLevel": number;
        "hideFilter": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * An array of [FeatureLayers](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html) to display within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#layers)
         */
        "layers": (FeatureLayer | SceneLayer | SubtypeGroupLayer | GeoJSONLayer | SubtypeSublayer)[];
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * Specifies the selection behavior of list items.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#selectionMode)
         */
        "selectionMode": "none" | "single";
        "state": "ready" | "disabled" | "loading";
    }
    interface ArcgisFeatures {
        "actions": Collection<ActionButton | ActionToggle>;
        "active": boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        "close": () => Promise<void>;
        "collapsed": boolean;
        /**
          * The content of the Features widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#content)
         */
        "content": string | HTMLElement | Widget;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "featureViewModelAbilities": Abilities;
        /**
          * An array of features associated with the Features widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#features)
         */
        "features": Graphic[];
        "featuresPerPage": number;
        "featuresTitle": string;
        "fetchFeatures": (screenPoint: __esri.FeaturesFetchFeaturesScreenPoint, options?: __esri.FetchFeaturesOptions) => Promise<__esri.FetchPopupFeaturesResult>;
        /**
          * This function provides the ability to override either the [MapView goTo()](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo) or [SceneView goTo()](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo) methods.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride)
         */
        "goToOverride": (view: MapView | SceneView, goToParameters: any) => void;
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#title) of the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#headingLevel)
         */
        "headingLevel": number;
        "hideActionBar": boolean | undefined;
        "hideCloseButton": boolean | undefined;
        "hideFeatureNavigation": boolean | undefined;
        "hideFlow": boolean | undefined;
        "hideHeading": boolean | undefined;
        "hideSpinner": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        "includeDefaultActions": boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A map is required when the input [features](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#features) have a popupTemplate that contains [Arcade](https://developers.arcgis.com/arcade) expressions in [ExpressionInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html) or [ExpressionContent](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html) that may use the `$map` profile variable to access data from layers within a map.
         */
        "map": Map;
        "next": () => Promise<__esri.FeaturesViewModel>;
        "open": (options?: __esri.FeaturesOpenOptions) => Promise<void>;
        "position": __esri.UIPosition;
        "previous": () => Promise<__esri.FeaturesViewModel>;
        /**
          * An array of pending Promises that have not yet been fulfilled.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#promises)
         */
        "promises": Promise<any>[];
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "selectedFeature": Graphic;
        /**
          * Index of the feature that is [selected](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#selectedFeature).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#selectedFeatureIndex)
         */
        "selectedFeatureIndex": number;
        "showCollapseButton": boolean | undefined;
        /**
          * The spatial reference used for [Arcade](https://developers.arcgis.com/arcade) operations.
         */
        "spatialReference": SpatialReference;
        "state": "ready" | "disabled";
        /**
          * Dates and times displayed in the widget will be displayed in this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#timeZone)
         */
        "timeZone": string;
        "triggerAction": (actionIndex: number) => Promise<void>;
    }
    interface ArcgisFloorFilter {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * The currently selected facility.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#facility)
         */
        "facility": string;
        /**
          * Indicates the heading level to use for the headings separating floors in buildings.
         */
        "headingLevel": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * The currently selected floor level.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#level)
         */
        "level": string;
        /**
          * Determines if the widget is expanded or collapsed.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#longNames)
         */
        "longNames": boolean;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The currently selected site.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#site)
         */
        "site": string;
        "updateWebDocument": (webMap: __esri.WebMap) => Promise<void>;
    }
    interface ArcgisFullscreen {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "destroy": () => Promise<void>;
        /**
          * The {@link HTMLElement} to present in fullscreen mode.
         */
        "element": HTMLElement;
        /**
          * Icon displayed in the widget's button.
         */
        "icon": Nil | string;
        /**
          * The widget's default label.
         */
        "label": Nil | string;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "active" | "feature-unsupported";
    }
    interface ArcgisHistogram {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The statistical average of the data in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#average)
         */
        "average": number;
        /**
          * Function for styling bars representing histogram bins.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#barCreatedFunction)
         */
        "barCreatedFunction": (index: number, element: any) => void;
        /**
          * An array of objects representing each bin in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#bins)
         */
        "bins": Bin[];
        /**
          * Function that fires each time a data line is created.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#dataLineCreatedFunction)
         */
        "dataLineCreatedFunction": (lineElement: any, labelElement?: any, index?: number | undefined) => void;
        /**
          * When set, renders lines on the histogram that indicate important or meaningful values to the end user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#dataLines)
         */
        "dataLines": HistogramDataLines[];
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A function used to format labels on the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#labelFormatFunction)
         */
        "labelFormatFunction": (value: number, type?: string | undefined, index?: number | undefined) => string;
        /**
          * Determines the orientation of the Histogram widget.
         */
        "layout": "horizontal" | "vertical";
        /**
          * The maximum value or bound of the entire histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#max)
         */
        "max": number;
        /**
          * The minimum value or bound of the entire histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#min)
         */
        "min": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
    }
    interface ArcgisHistogramRangeSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The statistical average of the data in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#average)
         */
        "average": number;
        /**
          * Function for styling bars representing histogram bins.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#barCreatedFunction)
         */
        "barCreatedFunction": (index: number, element: any) => void;
        /**
          * An array of objects representing each bin in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#bins)
         */
        "bins": Bin[];
        /**
          * Function that fires each time a data line is created.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#dataLineCreatedFunction)
         */
        "dataLineCreatedFunction": (lineElement: any, labelElement?: any, index?: number | undefined) => void;
        /**
          * When set, renders lines on the histogram that indicate important or meaningful values to the end user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#dataLines)
         */
        "dataLines": HistogramRangeSliderDataLines[];
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Sets the color of the histogram bars that are excluded based on the specified [rangeType](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType).
         */
        "excludedBarColor": Color;
        /**
          * Generates a SQL where clause based on a given field and the slider's rangeType
         */
        "generateWhereClause": (field: string) => Promise<string>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * Sets the color of the histogram bars that are included in the specified [rangeType](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType).
         */
        "includedBarColor": Color;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A function used to format labels.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#labelFormatFunction)
         */
        "labelFormatFunction": (value: number, type?: "average" | "min" | "max" | "tick" | "value" | undefined, index?: number | undefined) => string;
        /**
          * The maximum value or upper bound of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#max)
         */
        "max": number;
        /**
          * The minimum value or lower bound of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#min)
         */
        "min": number;
        "position": __esri.UIPosition;
        /**
          * Defines how slider thumb values should be rounded.
         */
        "precision": number;
        /**
          * Indicates how the histogram bins should be rendered as the user slides the thumbs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType)
         */
        "rangeType": "equal" | "not-equal" | "less-than" | "greater-than" | "at-most" | "at-least" | "between" | "not-between";
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * Indicates the standard deviation of the dataset.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#standardDeviation)
         */
        "standardDeviation": number;
        /**
          * Indicates the number of standard deviation lines to render on the histogram from the [average].
         */
        "standardDeviationCount": number;
        "state": "ready" | "disabled";
        /**
          * An array of either one or two numbers representing thumb positions on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#values)
         */
        "values": number[];
    }
    /**
     * Provides a simple widget that switches the esri/views/View to its
     * initial esri/Viewpoint or a previously defined `viewpoint`.
     * @since 4.0
     */
    interface ArcgisHome {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * This function provides the ability to interrupt and cancel the process of navigating the view back to the view's initial extent.
          * @since 4.9
         */
        "cancelGo": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Animates the view to the initial Viewpoint of the view or the value of `viewpoint`
         */
        "go": () => Promise<void>;
        "goToOverride": (view: MapView | SceneView, goToParameters: any) => void;
        /**
          * Icon displayed in the widget's button.
          * @see [Calcite Icon Search](https://developers.arcgis.com/calcite-design-system/icons/)
          * @since 4.28
         */
        "icon": Nil | string;
        /**
          * The widget's default label.
          * @since 4.7
         */
        "label": Nil | string;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "going-home";
        /**
          * The esri/Viewpoint, or point of view, to zoom to when going home. The initial value is determined a few different ways:  If no esri/views/View is provided, the value is `null`. If the esri/views/View is ready, but the esri/Viewpoint is not defined, the initial value of the esri/Viewpoint is determined when the esri/views/View became ready. If the esri/views/View is ready and the esri/Viewpoint is defined by the user, the initial viewpoint value is the user-defined esri/Viewpoint.
          * @example // Creates a viewpoint centered on the extent of a polygon geometry let vp = new Viewpoint({   targetGeometry: geom.extent });  // Sets the model's viewpoint to the Viewpoint based on a polygon geometry home.viewpoint = vp;
         */
        "viewpoint": Viewpoint;
    }
    interface ArcgisLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The CatalogLayerList that displays a catalog layer's dynamic group layer.
         */
        "catalogLayerList": CatalogLayerList;
        /**
          * [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) specific properties.
         */
        "catalogOptions": LayerListCatalogOptions;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled": boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements) is true.
         */
        "filterPlaceholder": string;
        /**
          * The value of the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements) is true.
         */
        "filterText": string;
        /**
          * Indicates the heading level to use for the heading of the widget.
         */
        "headingLevel": number;
        "hideCatalogLayerList": boolean | undefined;
        "hideFlow": boolean | undefined;
        "hideStatusIndicators": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * [KnowledgeGraphLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html) specific properties.
         */
        "knowledgeGraphOptions": LayerListKnowledgeGraphOptions;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A function that executes each time a [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) is created.
         */
        "listItemCreatedFunction": (event: any) => void;
        /**
          * The minimum number of list items required to enable drag and drop reordering with [dragEnabled](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#dragEnabled).
         */
        "minDragEnabledItems": number;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems": number;
        /**
          * A collection of ListItems representing operational layers.
         */
        "operationalItems": Collection<ListItem>;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html)s representing operational layers selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#selectedItems)
         */
        "selectedItems": Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode": "none" | "single" | "multiple" | "single-persist";
        "showCloseButton": boolean | undefined;
        "showCollapseButton": boolean | undefined;
        "showErrors": boolean | undefined;
        "showFilter": boolean | undefined;
        "showHeading": boolean | undefined;
        "showTemporaryLayerIndicators": boolean | undefined;
        "state": "ready" | "disabled" | "loading";
        /**
          * The TableList that displays the tables associated with a KnowledgeGraphLayer.
         */
        "tableList": TableList;
        "triggerAction": (action: __esri.ActionButton | __esri.ActionToggle, item: __esri.ListItem) => Promise<void>;
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance": "default" | "checkbox";
    }
    interface ArcgisLegend {
        /**
          * Collection of [ActiveLayerInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html) objects used by the legend view to display data in the legend.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#activeLayerInfos)
         */
        "activeLayerInfos": Collection<ActiveLayerInfo>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Indicates whether to show the [Basemap](https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html) layers in the Legend.
         */
        "basemapLegendVisible": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates the heading level to use for the legend title.
         */
        "headingLevel": number;
        /**
          * When `true`, layers will only be shown in the legend if they are visible in the view's extent.
         */
        "hideLayersNotInCurrentView": boolean;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Specifies a subset of the layers to display in the legend.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#layerInfos)
         */
        "layerInfos": LegendLayerInfos[];
        "legendStyle": string | LegendStyle;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * If a layer uses a unique value render, only features that satisfy the layer's [definition expression](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression) will be displayed in the legend when set to true.
         */
        "respectLayerDefinitionExpression": boolean;
        "respectLayerVisibilityDisabled": boolean;
        "state": "ready" | "disabled";
    }
    interface ArcgisLineOfSight {
        /**
          * The line of sight analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LineOfSight.html#analysis)
         */
        "analysis": LineOfSightAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        "continue": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "start": () => Promise<void>;
        "state": "ready" | "disabled" | "creating" | "created";
        "stop": () => Promise<void>;
    }
    interface ArcgisLocate {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * This function provides the ability to interrupt and cancel the process of programmatically obtaining the location of the user's device.
         */
        "cancelLocate": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "geolocationOptions": any;
        "goToLocationDisabled": boolean;
        "graphic": Graphic;
        "icon": Nil | string;
        "label": Nil | string;
        "locate": () => Promise<GeolocationPosition | null>;
        "popupDisabled": boolean;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "scale": number;
        "state": "ready" | "error" | "disabled" | "feature-unsupported" | "locating";
    }
    interface ArcgisMap {
        /**
          * Adds a layer to the map layers collection.
         */
        "addLayer": (layer: __esri.Layer | Promise<any>, index?: number | undefined) => Promise<void>;
        /**
          * Adds a layer or array of layers to the map layers collection.
         */
        "addLayers": (layers: __esri.Layer[], index?: number | undefined) => Promise<void>;
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews": Collection<LayerView>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The background color of the MapView. If the view's map changes, the view's `background` is reset to the map's background, even if the user set it previously.
         */
        "background": ColorBackground;
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap": __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView": BasemapView;
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center": string | Nil | Point | number[];
        /**
          * Closes the popup.
         */
        "closePopup": () => Promise<void>;
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints": MapViewConstraints;
        /**
          * Destroys the view, and any associated resources, including its map, popup, and UI elements.
         */
        "destroy": () => Promise<void>;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent": Extent;
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError": Error;
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors": Collection<string>;
        /**
          * Gamepad input specific configuration settings..
         */
        "gamepad": GamepadSettings;
        /**
          * Sets the view to a given target.
         */
        "goTo": (target: __esri.GoToTarget2D, options?: __esri.GoToOptions2D) => Promise<any>;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics": Collection<Graphic>;
        /**
          * Specifies the surface properties for the map.
         */
        "ground": __esri.Ground | string;
        /**
          * Returns hit test results from each layer that intersects the specified screen coordinates.
         */
        "hitTest": (screenPoint: __esri.ScreenPoint, options?: __esri.MapViewHitTestOptions) => Promise<__esri.HitTestResult>;
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting": boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId": string | Nil;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews": Collection<LayerView>;
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier": Magnifier;
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map": Map;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating": boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation": Navigation;
        /**
          * Opens the popup at the given location with content defined either explicitly with content or driven from the PopupTemplate of input features.
         */
        "openPopup": (options?: __esri.PopupViewOpenPopupOptions) => Promise<any>;
        /**
          * Use the padding property to make the [center](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#center), and [extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#extent), etc.
         */
        "padding": ViewPadding;
        /**
          * A [Popup](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html) object that displays general content or attributes from [layers](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers) in the [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#map).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#popup)
         */
        "popup": Popup;
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupDisabled": boolean;
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready": boolean;
        /**
          * Defines which anchor stays still while resizing the browser window. The default, `center`, ensures the view's center point remains constantly visible as the window size changes. The other options allow  the respective portion of the view to remain visible when the window's size is changed.
         */
        "resizeAlign": "bottom-left" | "bottom-right" | "top-left" | "top-right" | "center" | "left" | "right" | "top" | "bottom";
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution": number;
        /**
          * The clockwise rotation of due north in relation to the top of the view in degrees. The view may be rotated by directly setting the rotation or by using the following mouse event: `Right-click + Drag`. Map rotation may be disabled by setting the `rotationEnabled` property in [constraints](#constraints) to `false`. See the code snippet below for an example of this.
         */
        "rotation": number;
        /**
          * Represents the map scale at the center of the view. Setting the scale immediately changes the view. For animating the view, see this component's goTo() method.
         */
        "scale": number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference": SpatialReference;
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary": boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended": boolean;
        /**
          * Create a screenshot of the current view.
         */
        "takeScreenshot": (options?: __esri.MapViewTakeScreenshotOptions) => Promise<__esri.Screenshot>;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme": Theme;
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent": TimeExtent;
        /**
          * Defines the time zone of the view. The time zone property determines how dates and times are represented to the user, but the underlying data is unchanged.
         */
        "timeZone": string;
        /**
          * toMap() function as a property.
         */
        "toMap": ArcGISMapView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen": ArcGISMapView["toScreen"];
        /**
          * Call this method to clear any fatal errors resulting from a lost WebGL context.
         */
        "tryFatalErrorRecovery": () => Promise<void>;
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating": boolean;
        /**
          * Internal view of the component.
         */
        "view": __esri.MapView;
        /**
          * Represents the current view as a Viewpoint or point of observation on the view. Setting the viewpoint immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "viewpoint": Viewpoint;
        /**
          * Gets the LayerView created on the view for the given layer.
         */
        "whenLayerView": (layer: __esri.Layer) => Promise<__esri.LayerView>;
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom": number;
    }
    interface ArcgisMeasurement {
        /**
          * Specifies the current measurement tool to display.
         */
        "activeTool": "area" | "distance" | "direct-line";
        "activeWidget": AreaMeasurement2D | AreaMeasurement3D | DirectLineMeasurement3D | DistanceMeasurement2D;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#areaUnit)
         */
        "areaUnit": MeasurementSystem | AreaUnit;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#linearUnit)
         */
        "linearUnit": MeasurementSystem | LengthUnit;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "startMeasurement": () => Promise<void>;
        "state": "ready" | "disabled" | "measuring" | "measured";
    }
    interface ArcgisNavigationToggle {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Sets the layout of the widget to either `horizontal` or `vertical`.
         */
        "layout": "horizontal" | "vertical";
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
        "toggle": () => Promise<void>;
    }
    interface ArcgisOrientedImageryViewer {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Toggles the visibility of the current footprint polygon associated with the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#currentCoverageVisible)
         */
        "currentCoverageVisible": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When `false`, the view click interaction is enabled for the oriented imagery viewer widget.
         */
        "disabled": boolean;
        /**
          * Indicates if the image gallery functionality is available in the widget.
         */
        "galleryOpened": boolean;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * Indicates if the image enhancement tool is active.
         */
        "imageEnhancementToolActive": boolean;
        "imageGalleryEnabled": boolean;
        /**
          * Indicates if the additional footprint polygons are visible for the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#isAdditionalCoverageVisible)
         */
        "isAdditionalCoverageVisible": boolean;
        /**
          * Indicates if the additional camera locations are visible for the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#isAdditionalPointSourcesVisible)
         */
        "isAdditionalPointSourcesVisible": boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Specifies the current [OrientedImageryLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OrientedImageryLayer.html) to use.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#layer)
         */
        "layer": OrientedImageryLayer;
        /**
          * Indicates if the map-image location tool is available in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#mapImageConversionToolState)
         */
        "mapImageConversionToolState": boolean;
        /**
          * When `true`, the navigation tool is available in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#navigationToolActive)
         */
        "navigationToolActive": boolean;
        "orientedImageryLayerItemId": Nil | string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "referencePoint": Point;
    }
    interface ArcgisPlacement {
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
    }
    interface ArcgisPrint {
        /**
          * Specify the print output file format(s) that the user can select based on the options available from the print service.
         */
        "allowedFormats": string | string[];
        /**
          * Specify the print output layout(s) that the user can select based on the options available from the print service.
         */
        "allowedLayouts": string | string[];
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "exportedLinks": Collection<FileLink>;
        /**
          * This option allows passing extra parameters (in addition to [templateOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateOptions)) to the print (export webmap) requests.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#extraParameters)
         */
        "extraParameters": any;
        /**
          * Indicates the heading level to use for the "Exported files" text where users can access the exported map printout.
         */
        "headingLevel": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        "includeDefaultTemplatesDisabled": boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * It is possible to search a specified portal instance's [locator services](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-portal-to-geocode-addresses.htm).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#portal)
         */
        "portal": Portal;
        "position": __esri.UIPosition;
        /**
          * The URL of the REST endpoint of the Export Web Map Task.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#printServiceUrl)
         */
        "printServiceUrl": string;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The initial state of the print area toggle in the Print widget UI.
         */
        "showPrintAreaEnabled": boolean;
        "state": "ready" | "error" | "disabled" | "initializing";
        /**
          * An object containing an array of `customTextElements` name-value pair objects for each print template in a custom print service.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateCustomTextElements)
         */
        "templateCustomTextElements": any[];
        /**
          * Defines the layout template options used by the [Print](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html) widget to generate the print page.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateOptions)
         */
        "templateOptions": TemplateOptions;
    }
    interface ArcgisScaleBar {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * The style for the scale bar. When `unit` is set to `dual`, the style will always be `line`.
         */
        "barStyle": ScaleBarStyle;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon displayed in the widget's button.
         */
        "icon": Nil | string;
        /**
          * The widget's default label.
         */
        "label": Nil | string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * Units to use for the scale bar. When using `dual`, the scale bar displays both metric and imperial units. When metric, distances will be shown in either kilometers, meters, centimeters, or millimeters depending on the scale. Similarly, imperial units will be shown in either miles, feet, or inches.
         */
        "unit": ScaleBarUnit | undefined;
    }
    interface ArcgisScaleRangeSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled": boolean;
        "hidePreview": boolean | undefined;
        "hideScaleMenusMaxScaleMenu": boolean | undefined;
        "hideScaleMenusMinScaleMenu": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * When provided, the initial [minScale](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScale) and [maxScale](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScale) values will match the layer's.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#layer)
         */
        "layer": Layer;
        /**
          * The maximum scale of the active scale range.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScale)
         */
        "maxScale": number;
        /**
          * The lowest possible maximum scale value on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScaleLimit)
         */
        "maxScaleLimit": number;
        /**
          * The minimum scale of the active scale range.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScale)
         */
        "minScale": number;
        /**
          * The highest possible minimum scale value on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScaleLimit)
         */
        "minScaleLimit": number;
        /**
          * The mode of the widget, indicating which slider thumbs can be adjusted.
         */
        "mode": "range" | "max-scale-only" | "min-scale-only";
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The region that the scale thumbnails will focus on.
         */
        "region": "AR" | "IN" | "AT" | "NO" | "ML" | "IE" | "SV" | "PT" | "DE" | "AE" | "AU" | "BE" | "BG" | "BO" | "BR" | "CA" | "CH" | "CI" | "CL" | "CN" | "CO" | "CR" | "CZ" | "DK" | "EE" | "EG" | "ES" | "FI" | "FR" | "GB" | "GL" | "GR" | "GT" | "HK" | "ID" | "IL" | "IQ" | "IS" | "IT" | "JP" | "KE" | "KR" | "KW" | "LI" | "LT" | "LU" | "LV" | "MA" | "MG" | "MO" | "MX" | "MY" | "NI" | "NL" | "NZ" | "PE" | "PL" | "PR" | "RO" | "RU" | "RW" | "SE" | "SG" | "SK" | "SR" | "TH" | "TN" | "TW" | "US" | "VE" | "VI" | "ZA";
        "state": "ready" | "disabled";
    }
    interface ArcgisScene {
        /**
          * Adds a layer to the map layers collection.
         */
        "addLayer": (layer: __esri.Layer | Promise<any>, index?: number | undefined) => Promise<void>;
        /**
          * Adds a layer or array of layers to the map layers collection.
         */
        "addLayers": (layers: __esri.Layer[], index?: number | undefined) => Promise<void>;
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews": Collection<LayerView>;
        /**
          * Allows the view to be partially or fully transparent when composited with the webpage elements behind it.
         */
        "alphaCompositingEnabled": boolean;
        /**
          * Allows for adding analyses directly to the default analyses in the View.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#analyses)
         */
        "analyses": Collection<DimensionAnalysis | DirectLineMeasurementAnalysis | AreaMeasurementAnalysis | SliceAnalysis | LineOfSightAnalysis | ViewshedAnalysis>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap": __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView": BasemapView;
        /**
          * The observation point from which the visible portion (or perspective) of the SceneView is determined.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#camera)
         */
        "camera": Camera;
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center": string | Nil | Point | number[];
        /**
          * *This property only applies to local scenes.* Represents an optional clipping area used to define the bounds or [Extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html) of a local scene.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html#clippingArea)
         */
        "clippingArea": Extent;
        /**
          * Closes the popup.
         */
        "closePopup": () => Promise<void>;
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints": SceneViewConstraints;
        /**
          * Destroys the view, and any associated resources, including its map, popup, and UI elements.
         */
        "destroy": () => Promise<void>;
        /**
          * Specifies various properties of the environment's visualization in the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#environment)
         */
        "environment": SceneViewEnvironment;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent": Extent;
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError": Error;
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors": Collection<string>;
        /**
          * Gamepad input specific configuration settings..
         */
        "gamepad": GamepadSettings;
        /**
          * Sets the view to a given target.
         */
        "goTo": (target: __esri.GoToTarget3D, options?: __esri.GoToOptions3D) => Promise<any>;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics": Collection<Graphic>;
        /**
          * Specifies the surface properties for the map.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#ground)
         */
        "ground": Ground;
        "groundView": GroundView;
        /**
          * Options for configuring the highlight. Use the highlight method on the appropriate esri/views/layers/LayerView to highlight a feature. The layerView's `highlightOptions` will take precedence over the MapView's `highlightOptions` if both properties are set.
         */
        "highlightOptions": HighlightOptions;
        /**
          * Returns hit test results from each layer that intersects the specified screen coordinates.
         */
        "hitTest": (screenPoint: __esri.ScreenPoint, options?: __esri.SceneViewHitTestOptions) => Promise<__esri.HitTestResult>;
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting": boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId": string | Nil;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews": Collection<LayerView>;
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier": Magnifier;
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map": Map;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating": boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation": Navigation;
        /**
          * Opens the popup at the given location with content defined either explicitly with content or driven from the PopupTemplate of input features.
         */
        "openPopup": (options?: __esri.PopupViewOpenPopupOptions) => Promise<any>;
        /**
          * Use the padding property to make the [center](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#center), and [extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#extent), etc.
         */
        "padding": ViewPadding;
        /**
          * This property contains performance information in a Scene like global memory usage and additional details for layers about memory consumption and number of features.
         */
        "performanceInfo": SceneViewPerformanceInfo;
        /**
          * A [Popup](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html) object that displays general content or attributes from [layers](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers) in the [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#map).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#popup)
         */
        "popup": Popup;
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupDisabled": boolean;
        /**
          * SceneView can draw scenes in three different quality modes: `high`, `medium` and `low`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#qualityProfile)
         */
        "qualityProfile": "low" | "medium" | "high";
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready": boolean;
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution": number;
        /**
          * Represents an approximation of the map scale at the center of the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#scale)
         */
        "scale": number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference": SpatialReference;
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary": boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended": boolean;
        /**
          * Create a screenshot of the current view.
         */
        "takeScreenshot": (options?: __esri.SceneViewTakeScreenshotOptions) => Promise<__esri.Screenshot>;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme": Theme;
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent": TimeExtent;
        /**
          * toMap() function as a property.
         */
        "toMap": ArcGISSceneView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen": ArcGISSceneView["toScreen"];
        /**
          * Call this method to clear any fatal errors resulting from a lost WebGL context.
         */
        "tryFatalErrorRecovery": () => Promise<void>;
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating": boolean;
        /**
          * Internal view of the component.
         */
        "view": __esri.SceneView;
        /**
          * The viewing mode (`local` or `global`).
         */
        "viewingMode": "global" | "local";
        /**
          * Represents the current view as a [Viewpoint](https://developers.arcgis.com/javascript/latest/api-reference/esri-Viewpoint.html) or point of observation on the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#viewpoint)
         */
        "viewpoint": Viewpoint;
        "whenAnalysisView": (analysis: __esri.AreaMeasurementAnalysis | __esri.DimensionAnalysis | __esri.DirectLineMeasurementAnalysis | __esri.LineOfSightAnalysis | __esri.SliceAnalysis | __esri.ViewshedAnalysis) => Promise<__esri.AreaMeasurementAnalysisView3D | __esri.DimensionAnalysisView | __esri.DirectLineMeasurementAnalysisView3D | __esri.LineOfSightAnalysisView3D | __esri.SliceAnalysisView3D | __esri.ViewshedAnalysisView3D>;
        /**
          * Gets the LayerView created on the view for the given layer.
         */
        "whenLayerView": (layer: __esri.Layer) => Promise<__esri.LayerView>;
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom": number;
    }
    interface ArcgisSearch {
        /**
          * The current active menu of the Search widget.
         */
        "activeMenu": "source" | "none" | "warning" | "suggestion";
        "activeSource": LayerSearchSource | LocatorSearchSource;
        /**
          * The selected source's index.
         */
        "activeSourceIndex": number;
        /**
          * String value used as a hint for input text when searching on multiple sources.
         */
        "allPlaceholder": string;
        "allSources": Collection<LayerSearchSource | LocatorSearchSource>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "autoSelectDisabled": boolean;
        "blurSearch": () => Promise<void>;
        "clearSearch": () => Promise<void>;
        "defaultSources": Collection<LayerSearchSource | LocatorSearchSource>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When true, the widget is visually withdrawn and cannot be interacted with.
         */
        "disabled": boolean;
        "focusSearch": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        "includeDefaultSourcesDisabled": boolean | Function;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "locationDisabled": boolean;
        /**
          * The maximum number of results returned by the widget if not specified by the source.
         */
        "maxResults": number;
        /**
          * The maximum number of suggestions returned by the widget if not specified by the source.
         */
        "maxSuggestions": number;
        /**
          * The minimum number of characters needed for the search if not specified by the source.
         */
        "minSuggestCharacters": number;
        "popupDisabled": boolean;
        /**
          * A customized [PopupTemplate](https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html) for the selected feature.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#popupTemplate)
         */
        "popupTemplate": PopupTemplate;
        /**
          * It is possible to search a specified portal instance's [locator services](http://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-portal-to-geocode-addresses.htm) Use this property to set this [ArcGIS Portal](https://enterprise.arcgis.com/en/portal/) instance to search.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#portal)
         */
        "portal": Portal;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "resultGraphic": Graphic;
        "resultGraphicDisabled": boolean;
        "results": any[];
        "search": (term: __esri.Geometry | __esri.SuggestResult | number[][] | string) => Promise<__esri.SearchResponse>;
        "searchAllDisabled": boolean;
        /**
          * The value of the search box input text string.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#searchTerm)
         */
        "searchTerm": string;
        "selectedResult": SearchResult;
        /**
          * The Search widget may be used to search features in a [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html)/[feature](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html) service feature layer(s), [SceneLayers](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html) with an associated feature layer, [BuildingComponentSublayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-buildingSublayers-BuildingComponentSublayer.html) with an associated feature layer, [GeoJSONLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html), [CSVLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html) or [OGCFeatureLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OGCFeatureLayer.html), or [table](https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-SearchTable.html), or geocode locations with a [locator](https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-locator.html).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources)
         */
        "sources": Collection<SearchSource>;
        "state": "ready" | "disabled" | "loading" | "searching";
        "suggest": (term: string) => Promise<__esri.SuggestResponse>;
        "suggestions": SuggestResult[];
        "suggestionsDisabled": boolean;
    }
    interface ArcgisShadowCast {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "discreteOptions": ShadowCastViewModelDiscreteOptions;
        "durationOptions": ShadowCastViewModelDurationOptions;
        "endTimeOfDay": number;
        "getDuration": (point: __esri.Point) => Promise<number>;
        /**
          * Indicates the heading level to use for the titles "Time range" and "Visualization".
         */
        "headingLevel": number;
        "hideColorPicker": boolean | undefined;
        "hideDatePicker": boolean | undefined;
        "hideTimeRangeSlider": boolean | undefined;
        "hideTimezone": boolean | undefined;
        "hideTooltip": boolean | undefined;
        "hideVisualizationOptions": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "start": () => Promise<void>;
        "startTimeOfDay": number;
        "state": "ready" | "disabled";
        "stop": () => Promise<void>;
        "thresholdOptions": ShadowCastViewModelThresholdOptions;
        "utcOffset": number;
        "visualizationType": "threshold" | "duration" | "discrete";
    }
    interface ArcgisSketch {
        "activeTool": "circle" | "polygon" | "polyline" | "point" | "rectangle" | "move" | "reshape" | "transform" | "rectangle-selection" | "lasso-selection";
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Property controlling the visibility and order of create tool buttons.
         */
        "availableCreateTools": string[];
        "cancel": () => Promise<void>;
        "complete": () => Promise<void>;
        "create": (tool: "circle" | "point" | "polygon" | "polyline" | "rectangle", createOptions?: __esri.SketchViewModelCreateCreateOptions) => Promise<void>;
        "createGraphic": Graphic;
        /**
          * Defines the default behavior once the [create](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#create) operation is completed.
         */
        "creationMode": "single" | "update" | "continuous";
        /**
          * Default create options set for the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#defaultCreateOptions)
         */
        "defaultCreateOptions": SketchDefaultCreateOptions;
        /**
          * By default, sketch will auto-create a new graphics layer if none was provided. Set this prop to true to disable this behavior.
         */
        "defaultGraphicsLayerDisabled": boolean;
        /**
          * Default update options set for the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#defaultUpdateOptions)
         */
        "defaultUpdateOptions": SketchDefaultUpdateOptions;
        "delete": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "duplicate": () => Promise<void>;
        "hideCreateToolsCircle": boolean | undefined;
        "hideCreateToolsPoint": boolean | undefined;
        "hideCreateToolsPolygon": boolean | undefined;
        "hideCreateToolsPolyline": boolean | undefined;
        "hideCreateToolsRectangle": boolean | undefined;
        "hideDuplicateButton": boolean | undefined;
        "hideLabelsToggle": boolean | undefined;
        "hideSelectionToolsLassoSelection": boolean | undefined;
        "hideSelectionToolsRectangleSelection": boolean | undefined;
        "hideSettingsMenu": boolean | undefined;
        "hideSnappingControls": boolean | undefined;
        "hideSnappingControlsElementsEnabledToggle": boolean | undefined;
        "hideSnappingControlsElementsFeatureEnabledToggle": boolean | undefined;
        "hideSnappingControlsElementsLayerList": boolean | undefined;
        "hideSnappingControlsElementsSelfEnabledToggle": boolean | undefined;
        "hideTooltipsToggle": boolean | undefined;
        "hideUndoRedoMenu": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Options to configure the sketch labels shown next to each segment of the geometry being created or updated.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#labelOptions)
         */
        "labelOptions": SketchLabelOptions;
        /**
          * The [GraphicsLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html) associated with the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#layer)
         */
        "layer": GraphicsLayer;
        /**
          * Determines the layout/orientation of the Sketch widget.
         */
        "layout": "horizontal" | "vertical";
        "pointSymbol": SimpleMarkerSymbol | PointSymbol3D | TextSymbol | CIMSymbol | WebStyleSymbol;
        "polygonSymbol": CIMSymbol | SimpleFillSymbol | PolygonSymbol3D;
        "polylineSymbol": SimpleLineSymbol | CIMSymbol | LineSymbol3D;
        "position": __esri.UIPosition;
        "redo": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "showSnappingControlsElementsHeader": boolean | undefined;
        /**
          * The [SnappingOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html) for sketching.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#snappingOptions)
         */
        "snappingOptions": SnappingOptions;
        "state": "ready" | "disabled" | "active";
        /**
          * Options to configure the tooltip shown next to the cursor when creating or updating graphics.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#tooltipOptions)
         */
        "tooltipOptions": SketchTooltipOptions;
        "undo": () => Promise<void>;
        "update": (graphic: __esri.Graphic | __esri.Graphic[], updateOptions?: __esri.SketchViewModelUpdateUpdateOptions) => Promise<void>;
        "updateGraphics": Collection<Graphic>;
    }
    interface ArcgisSlice {
        /**
          * The slice analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slice.html#analysis)
         */
        "analysis": SliceAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "clear": () => Promise<void>;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "excludeGroundSurface": boolean;
        "excludedLayers": Collection<Layer | BuildingComponentSublayer>;
        /**
          * Indicates the heading level to use for the "Excluded layers" heading.
         */
        "headingLevel": number;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "shape": SlicePlane;
        "start": () => Promise<void>;
        "state": "ready" | "disabled" | "slicing" | "sliced";
        "tiltEnabled": boolean;
    }
    interface ArcgisSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates if the user can drag the segment between thumbs to update thumb positions.
         */
        "draggableSegmentsEnabled": boolean;
        /**
          * When set, the user is restricted from moving slider thumbs to positions higher than this value.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#effectiveMax)
         */
        "effectiveMax": number;
        /**
          * When set, the user is restricted from moving slider thumbs to positions less than this value.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#effectiveMin)
         */
        "effectiveMin": number;
        "effectiveSegmentElements": Collection<HTMLElement>;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        "labelElements": Collection<HTMLElement>;
        /**
          * Indicates whether to enable editing input values via keyboard input when the user clicks a label.
         */
        "labelInputsEnabled": boolean;
        "labels": string[];
        /**
          * Determines the layout/orientation of the Slider widget.
         */
        "layout": "horizontal" | "vertical" | "horizontal-reversed" | "vertical-reversed";
        /**
          * The maximum possible data/thumb value of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#max)
         */
        "max": number;
        "maxLabelElement": HTMLElement;
        /**
          * The minimum possible data/thumb value of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#min)
         */
        "min": number;
        "minLabelElement": HTMLElement;
        "position": __esri.UIPosition;
        /**
          * Defines how slider thumb values should be rounded.
         */
        "precision": number;
        /**
          * Indicates whether to enable editing range values via keyboard input when the user clicks a [min](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#min) or [max](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#max) label.
         */
        "rangeLabelInputsEnabled": boolean;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "segmentElements": Collection<HTMLElement>;
        /**
          * Indicates if the closest thumb will snap to the clicked location on the track.
         */
        "snapOnClickEnabled": boolean;
        "state": "ready" | "disabled" | "editing" | "dragging";
        "steps": string | number[];
        /**
          * When `true`, all segments will sync together in updating thumb values when the user drags any segment.
         */
        "syncedSegmentsEnabled": boolean;
        "thumbElements": Collection<HTMLElement>;
        /**
          * When `false`, the user can freely move any slider thumb to any position along the track.
         */
        "thumbsConstrained": boolean;
        /**
          * When set, renders ticks along the slider track.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#tickConfigs)
         */
        "tickConfigs": TickConfig[];
        "tickElements": Collection<Collection<TickElementGroup>>;
        /**
          * The HTML Element node representing the slider track.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#trackElement)
         */
        "trackElement": HTMLElement;
        "values": string | number[];
    }
    interface ArcgisSwipe {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * The direction the Swipe widget moves across the view.
         */
        "direction": "horizontal" | "vertical";
        /**
          * The text that shows in a tooltip when hovering over the handle of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#dragLabel)
         */
        "dragLabel": string;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * A collection of [Layer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html)s that will show on the left or top side of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#leadingLayers)
         */
        "leadingLayers": Collection<Layer>;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
        "swipePosition": number;
        /**
          * A collection of [Layer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html)s that will show on the right or bottom side of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#trailingLayers)
         */
        "trailingLayers": Collection<Layer>;
    }
    interface ArcgisTableList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled": boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#visibleElements) is true.
         */
        "filterPlaceholder": string;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#visibleElements) is true.
         */
        "filterText": string;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#listItemCreatedFunction)
         */
        "listItemCreatedFunction": (event: any) => void;
        /**
          * The minimum number of list items required to enable drag and drop reordering with [dragEnabled](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#dragEnabled).
         */
        "minDragEnabledItems": number;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html)s representing table list items selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#selectedItems)
         */
        "selectedItems": Collection<TableListListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode": "none" | "single" | "multiple" | "single-persist";
        "state": "ready" | "disabled" | "loading";
        /**
          * The collection of table ListItems displayed within the component.
         */
        "tableItems": Collection<TableListListItem>;
        "visibleElementsCloseButton": boolean;
        "visibleElementsCollapseButton": boolean;
        "visibleElementsErrors": boolean;
        "visibleElementsFilter": boolean;
        "visibleElementsFlow": boolean;
        "visibleElementsHeading": boolean;
        "visibleElementsStatusIndicators": boolean;
        "visibleElementsTemporaryTableIndicators": boolean;
    }
    interface ArcgisTimeSlider {
        /**
          * Defines actions that will appear in a menu when the user clicks the ellipsis button ![timeSlider-actions-menu](https://developers.arcgis.com/javascript/latest/assets/img/apiref/widgets/timeslider/ellipsis.png) in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#actions)
         */
        "actions": Collection<Action>;
        "applyTimeSliderSettings": (settings: Pick<__esri.TimeSliderProperties, "fullTimeExtent" | "loop" | "stops">) => Promise<void>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled": boolean;
        "effectiveStops": Date[];
        /**
          * The temporal extent of the entire slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#fullTimeExtent)
         */
        "fullTimeExtent": TimeExtent;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Determines the layout used by the TimeSlider widget.
         */
        "layout": "auto" | "compact" | "wide";
        /**
          * When `true`, the time slider will play its animation in a loop.
         */
        "loop": boolean;
        /**
          * The time slider mode.
         */
        "mode": "instant" | "time-window" | "cumulative-from-start" | "cumulative-from-end";
        "next": () => Promise<void>;
        "play": () => Promise<void>;
        /**
          * The time (in milliseconds) between animation steps.
         */
        "playRate": number;
        "position": __esri.UIPosition;
        "previous": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "playing" | "disabled";
        "stop": () => Promise<void>;
        /**
          * Defines specific locations on the time slider where thumbs will snap to when manipulated.
         */
        "stops": StopsByDates | StopsByCount | StopsByInterval;
        /**
          * When set, overrides the default TimeSlider ticks labelling system.
         */
        "tickConfigs": TickConfig[];
        /**
          * The current time extent of the time slider.
         */
        "timeExtent": TimeExtent;
        /**
          * Shows/hides time in the display.
         */
        "timeVisible": boolean;
        /**
          * Dates and times displayed in the widget will be displayed in this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#timeZone)
         */
        "timeZone": string;
        "updateWebDocument": (webmap: __esri.WebMap) => Promise<void>;
    }
    interface ArcgisTrack {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "error": any;
        "geolocationOptions": any;
        "goToLocationDisabled": boolean;
        "graphic": Graphic;
        "icon": Nil | string;
        "label": Nil | string;
        "position": __esri.UIPosition;
        "positionFilterFunction": Function;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "scale": number;
        "start": () => Promise<void>;
        "state": "ready" | "error" | "waiting" | "disabled" | "feature-unsupported" | "tracking";
        "stop": () => Promise<void>;
        "tracking": boolean;
    }
    interface ArcgisUtilityNetworkAssociations {
        "autoRefreshAssociationsDisabled": boolean;
        "connectivityAssociationsLineSymbol": UtilityNetworkAssociationsWidget["connectivityAssociationsLineSymbol"];
        "includeConnectivityAssociationsDisabled": boolean;
        "includeStructuralAttachmentAssociationsDisabled": boolean;
        "maxAllowableAssociations": number;
        "maxAllowableAssociationsSliderMax": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMax"];
        "maxAllowableAssociationsSliderMin": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMin"];
        "maxAllowableAssociationsSliderStep": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderStep"];
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "showArrowsConnectivity": boolean;
        "showArrowsStructuralAttachment": boolean;
        "showAssociationsEnabled": boolean;
        "structuralAttachmentAssociationsLineSymbol": UtilityNetworkAssociationsWidget["structuralAttachmentAssociationsLineSymbol"];
        "utilityNetwork": UtilityNetworkAssociationsWidget["utilityNetwork"] | undefined;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        "visibleElementsConnectivityAssociationsSettingsArrowsToggle": boolean;
        "visibleElementsConnectivityAssociationsSettingsCapSelect": boolean;
        "visibleElementsConnectivityAssociationsSettingsColorPicker": boolean;
        "visibleElementsConnectivityAssociationsSettingsStylePicker": boolean;
        "visibleElementsConnectivityAssociationsSettingsWidthInput": boolean;
        "visibleElementsMaxAllowableAssociationsSlider": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsCapSelect": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsStylePicker": boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsWidthInput": boolean;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkAssociationsWidget;
    }
    interface ArcgisUtilityNetworkTrace {
        "checkCanTrace": () => Promise<void>;
        "confirmReset": () => Promise<void>;
        "defaultGraphicColor": UtilityNetworkTraceWidget["defaultGraphicColor"];
        "disabled": boolean;
        "enableResultArea": boolean;
        "flags": UtilityNetworkTraceWidget["flags"];
        "gdbVersion": string;
        "inputSettings": UtilityNetworkTraceWidget["inputSettings"];
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "resultAreaProperties": UtilityNetworkTraceWidget["resultAreaProperties"];
        "selectOnCompleteDisabled": boolean;
        "selectedTraces": UtilityNetworkTraceWidget["selectedTraces"];
        "showGraphicsOnCompleteDisabled": boolean;
        "showSelectionAttributesDisabled": boolean;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkTraceWidget;
    }
    interface ArcgisUtilityNetworkValidateTopology {
        "extentToValidate": UtilityNetworkValidateTopologyWidget["extentToValidate"];
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "utilityNetwork": UtilityNetworkValidateTopologyWidget["utilityNetwork"] | undefined;
        /**
          * Internal view of the component.
         */
        "view": ArcGISMapView;
        /**
          * Internal widget of the component.
         */
        "widget": UtilityNetworkValidateTopologyWidget;
    }
    interface ArcgisValuePicker {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Returns `true` if the ValuePicker can be advanced to the next position.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canNext)
         */
        "canNext": boolean;
        /**
          * Returns `true` if the ValuePicker can be played.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canPlay)
         */
        "canPlay": boolean;
        /**
          * Returns `true` if the ValuePicker can moved to the previous item.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canPrevious)
         */
        "canPrevious": boolean;
        /**
          * An optional caption that appears on the ValuePicker widget to give context for the user.
         */
        "caption": string;
        /**
          * An optional component for presenting and managing data.
         */
        "component": ValuePickerCollection | ValuePickerCombobox | ValuePickerLabel | ValuePickerSlider;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "hideNextButton": boolean | undefined;
        "hidePlayButton": boolean | undefined;
        "hidePreviousButton": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label": string;
        /**
          * Indicates if the widget should be orientated horizontally (default) or vertically.
         */
        "layout": "horizontal" | "vertical";
        /**
          * If true, playback will restart when it reaches the end.
         */
        "loop": boolean;
        "next": () => Promise<void>;
        "pause": () => Promise<void>;
        "play": () => Promise<void>;
        /**
          * The pause, in milliseconds between playback advancement.
         */
        "playRate": number;
        "position": __esri.UIPosition;
        "previous": () => Promise<void>;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        /**
          * The current value of the ValuePicker.
         */
        "values": any[] | string[] | number[];
    }
    interface ArcgisVersionManagement {
        "allowEditingDisabled": boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        "closable": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        "icon": Nil | string;
        "label": string | undefined;
        "mode": Nil | string;
        "pageSize": number;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled" | "executing" | "failed" | "loading";
        "versioningStates": Collection<VersioningState>;
        "view": MapView;
    }
    interface ArcgisVersionManagementServiceItem {
        "serviceItemElementProps": {
    allowEditing: boolean;
    closable: boolean;
    currentUser: string;
    currentVersionIdentifier: __esri.VersionIdentifier;
    executionError: string | undefined;
    flowElement: HTMLCalciteFlowElement;
    hasAdvEditingUte: boolean;
    heading: string;
    isVersioningApiAvailable: boolean;
    pageSize: number;
    serviceName: string;
    state: string;
    serviceUrl: string;
    strings: typeof T9nStrings;
    versionInfos: __esri.VersionInfo[];
  };
    }
    interface ArcgisVersionManagementVersionItem {
        "versionItemElementProps": {
    currentUser: string;
    currentVersionIdentifier: __esri.VersionIdentifier;
    hasAdvEditingUte: boolean;
    isVersioningApiAvailable: boolean;
    serviceUrl: string;
    strings: typeof T9nStrings;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface ArcgisVersionManagementVersionList {
        "currentPage": number;
        "versionListElementProps": VersionListElementProps;
    }
    interface ArcgisVersionManagementVersionProperties {
        "versionPropertiesElementProps": {
    closable: boolean;
    currentUser: string;
    hasAdvEditingUte: boolean;
    serviceUrl: string;
    state: string;
    strings: typeof T9nStrings;
    versionInfo: __esri.VersionInfo | undefined;
  };
    }
    interface ArcgisWeather {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Indicates the heading level to use for the title of the widget.
         */
        "headingLevel": number;
        "hideHeader": boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon": string;
        "label": string;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
    }
    interface ArcgisZoom {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled": boolean;
        /**
          * Permanently destroy the component
         */
        "destroy": () => Promise<void>;
        /**
          * Icon which represents the widget.
         */
        "icon": Nil | string;
        /**
          * The widget's default label.
         */
        "label": Nil | string;
        /**
          * Determines the layout/orientation of the Zoom widget.
         */
        "layout": Layout;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        "position": __esri.UIPosition;
        "referenceElement": ArcgisReferenceElement | Nil | string;
        "state": "ready" | "disabled";
        /**
          * Zooms the view in by an LOD factor of 0.5.
         */
        "zoomIn": () => Promise<void>;
        /**
          * Zooms the view out by an LOD factor of 2.
         */
        "zoomOut": () => Promise<void>;
    }
}
export interface ArcgisAreaMeasurement2dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAreaMeasurement2dElement;
}
export interface ArcgisAreaMeasurement3dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAreaMeasurement3dElement;
}
export interface ArcgisAttachmentsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisAttachmentsElement;
}
export interface ArcgisBasemapGalleryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapGalleryElement;
}
export interface ArcgisBasemapLayerListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapLayerListElement;
}
export interface ArcgisBasemapToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBasemapToggleElement;
}
export interface ArcgisBookmarksCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBookmarksElement;
}
export interface ArcgisBuildingExplorerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisBuildingExplorerElement;
}
export interface ArcgisCatalogLayerListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisCatalogLayerListElement;
}
export interface ArcgisCompassCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisCompassElement;
}
export interface ArcgisCoordinateConversionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisCoordinateConversionElement;
}
export interface ArcgisDaylightCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDaylightElement;
}
export interface ArcgisDirectionalPadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectionalPadElement;
}
export interface ArcgisDirectionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectionsElement;
}
export interface ArcgisDirectlineMeasurement3dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDirectlineMeasurement3dElement;
}
export interface ArcgisDistanceMeasurement2dCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisDistanceMeasurement2dElement;
}
export interface ArcgisEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisEditorElement;
}
export interface ArcgisElevationProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisElevationProfileElement;
}
export interface ArcgisExpandCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisExpandElement;
}
export interface ArcgisFeatureCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureElement;
}
export interface ArcgisFeatureFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureFormElement;
}
export interface ArcgisFeatureTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureTableElement;
}
export interface ArcgisFeatureTemplatesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeatureTemplatesElement;
}
export interface ArcgisFeaturesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFeaturesElement;
}
export interface ArcgisFloorFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFloorFilterElement;
}
export interface ArcgisFullscreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisFullscreenElement;
}
export interface ArcgisHistogramCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHistogramElement;
}
export interface ArcgisHistogramRangeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHistogramRangeSliderElement;
}
export interface ArcgisHomeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisHomeElement;
}
export interface ArcgisLayerListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLayerListElement;
}
export interface ArcgisLegendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLegendElement;
}
export interface ArcgisLineOfSightCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLineOfSightElement;
}
export interface ArcgisLocateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisLocateElement;
}
export interface ArcgisMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisMapElement;
}
export interface ArcgisMeasurementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisMeasurementElement;
}
export interface ArcgisNavigationToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisNavigationToggleElement;
}
export interface ArcgisOrientedImageryViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisOrientedImageryViewerElement;
}
export interface ArcgisPlacementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisPlacementElement;
}
export interface ArcgisPrintCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisPrintElement;
}
export interface ArcgisScaleBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisScaleBarElement;
}
export interface ArcgisScaleRangeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisScaleRangeSliderElement;
}
export interface ArcgisSceneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSceneElement;
}
export interface ArcgisSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSearchElement;
}
export interface ArcgisShadowCastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisShadowCastElement;
}
export interface ArcgisSketchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSketchElement;
}
export interface ArcgisSliceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSliceElement;
}
export interface ArcgisSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSliderElement;
}
export interface ArcgisSwipeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisSwipeElement;
}
export interface ArcgisTableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTableListElement;
}
export interface ArcgisTimeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTimeSliderElement;
}
export interface ArcgisTrackCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisTrackElement;
}
export interface ArcgisUtilityNetworkAssociationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkAssociationsElement;
}
export interface ArcgisUtilityNetworkTraceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkTraceElement;
}
export interface ArcgisUtilityNetworkValidateTopologyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisUtilityNetworkValidateTopologyElement;
}
export interface ArcgisValuePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisValuePickerElement;
}
export interface ArcgisVersionManagementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementElement;
}
export interface ArcgisVersionManagementServiceItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementServiceItemElement;
}
export interface ArcgisVersionManagementVersionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionItemElement;
}
export interface ArcgisVersionManagementVersionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionListElement;
}
export interface ArcgisVersionManagementVersionPropertiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisVersionManagementVersionPropertiesElement;
}
export interface ArcgisWeatherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisWeatherElement;
}
export interface ArcgisZoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisZoomElement;
}
declare global {
    interface HTMLArcgisAreaMeasurement2dElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisAreaMeasurement2dElement extends Components.ArcgisAreaMeasurement2d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAreaMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement2dElement, ev: ArcgisAreaMeasurement2dCustomEvent<HTMLArcgisAreaMeasurement2dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAreaMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement2dElement, ev: ArcgisAreaMeasurement2dCustomEvent<HTMLArcgisAreaMeasurement2dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAreaMeasurement2dElement: {
        prototype: HTMLArcgisAreaMeasurement2dElement;
        new (): HTMLArcgisAreaMeasurement2dElement;
    };
    interface HTMLArcgisAreaMeasurement3dElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisAreaMeasurement3dElement extends Components.ArcgisAreaMeasurement3d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAreaMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement3dElement, ev: ArcgisAreaMeasurement3dCustomEvent<HTMLArcgisAreaMeasurement3dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAreaMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisAreaMeasurement3dElement, ev: ArcgisAreaMeasurement3dCustomEvent<HTMLArcgisAreaMeasurement3dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAreaMeasurement3dElement: {
        prototype: HTMLArcgisAreaMeasurement3dElement;
        new (): HTMLArcgisAreaMeasurement3dElement;
    };
    interface HTMLArcgisAttachmentsElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisAttachmentsElement extends Components.ArcgisAttachments, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisAttachmentsElementEventMap>(type: K, listener: (this: HTMLArcgisAttachmentsElement, ev: ArcgisAttachmentsCustomEvent<HTMLArcgisAttachmentsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisAttachmentsElementEventMap>(type: K, listener: (this: HTMLArcgisAttachmentsElement, ev: ArcgisAttachmentsCustomEvent<HTMLArcgisAttachmentsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisAttachmentsElement: {
        prototype: HTMLArcgisAttachmentsElement;
        new (): HTMLArcgisAttachmentsElement;
    };
    interface HTMLArcgisBasemapGalleryElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisBasemapGalleryElement extends Components.ArcgisBasemapGallery, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapGalleryElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapGalleryElement, ev: ArcgisBasemapGalleryCustomEvent<HTMLArcgisBasemapGalleryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapGalleryElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapGalleryElement, ev: ArcgisBasemapGalleryCustomEvent<HTMLArcgisBasemapGalleryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapGalleryElement: {
        prototype: HTMLArcgisBasemapGalleryElement;
        new (): HTMLArcgisBasemapGalleryElement;
    };
    interface HTMLArcgisBasemapLayerListElementEventMap {
        "arcgisReady": never;
        "arcgisTriggerAction": __esri.BasemapLayerListTriggerActionEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisBasemapLayerListElement extends Components.ArcgisBasemapLayerList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapLayerListElement, ev: ArcgisBasemapLayerListCustomEvent<HTMLArcgisBasemapLayerListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapLayerListElement, ev: ArcgisBasemapLayerListCustomEvent<HTMLArcgisBasemapLayerListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapLayerListElement: {
        prototype: HTMLArcgisBasemapLayerListElement;
        new (): HTMLArcgisBasemapLayerListElement;
    };
    interface HTMLArcgisBasemapToggleElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
    }
    interface HTMLArcgisBasemapToggleElement extends Components.ArcgisBasemapToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBasemapToggleElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapToggleElement, ev: ArcgisBasemapToggleCustomEvent<HTMLArcgisBasemapToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBasemapToggleElementEventMap>(type: K, listener: (this: HTMLArcgisBasemapToggleElement, ev: ArcgisBasemapToggleCustomEvent<HTMLArcgisBasemapToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBasemapToggleElement: {
        prototype: HTMLArcgisBasemapToggleElement;
        new (): HTMLArcgisBasemapToggleElement;
    };
    interface HTMLArcgisBookmarksElementEventMap {
        "arcgisReady": never;
        "arcgisEdit": __esri.BookmarksBookmarkEditEvent;
        "arcgisSelect": __esri.BookmarksBookmarkSelectEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisBookmarksElement extends Components.ArcgisBookmarks, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBookmarksElementEventMap>(type: K, listener: (this: HTMLArcgisBookmarksElement, ev: ArcgisBookmarksCustomEvent<HTMLArcgisBookmarksElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBookmarksElementEventMap>(type: K, listener: (this: HTMLArcgisBookmarksElement, ev: ArcgisBookmarksCustomEvent<HTMLArcgisBookmarksElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBookmarksElement: {
        prototype: HTMLArcgisBookmarksElement;
        new (): HTMLArcgisBookmarksElement;
    };
    interface HTMLArcgisBuildingExplorerElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisBuildingExplorerElement extends Components.ArcgisBuildingExplorer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisBuildingExplorerElementEventMap>(type: K, listener: (this: HTMLArcgisBuildingExplorerElement, ev: ArcgisBuildingExplorerCustomEvent<HTMLArcgisBuildingExplorerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisBuildingExplorerElementEventMap>(type: K, listener: (this: HTMLArcgisBuildingExplorerElement, ev: ArcgisBuildingExplorerCustomEvent<HTMLArcgisBuildingExplorerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisBuildingExplorerElement: {
        prototype: HTMLArcgisBuildingExplorerElement;
        new (): HTMLArcgisBuildingExplorerElement;
    };
    interface HTMLArcgisCatalogLayerListElementEventMap {
        "arcgisReady": never;
        "arcgisTriggerAction": __esri.CatalogLayerListTriggerActionEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisCatalogLayerListElement extends Components.ArcgisCatalogLayerList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisCatalogLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisCatalogLayerListElement, ev: ArcgisCatalogLayerListCustomEvent<HTMLArcgisCatalogLayerListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisCatalogLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisCatalogLayerListElement, ev: ArcgisCatalogLayerListCustomEvent<HTMLArcgisCatalogLayerListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisCatalogLayerListElement: {
        prototype: HTMLArcgisCatalogLayerListElement;
        new (): HTMLArcgisCatalogLayerListElement;
    };
    interface HTMLArcgisCompassElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
    }
    interface HTMLArcgisCompassElement extends Components.ArcgisCompass, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisCompassElementEventMap>(type: K, listener: (this: HTMLArcgisCompassElement, ev: ArcgisCompassCustomEvent<HTMLArcgisCompassElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisCompassElementEventMap>(type: K, listener: (this: HTMLArcgisCompassElement, ev: ArcgisCompassCustomEvent<HTMLArcgisCompassElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisCompassElement: {
        prototype: HTMLArcgisCompassElement;
        new (): HTMLArcgisCompassElement;
    };
    interface HTMLArcgisCoordinateConversionElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisCoordinateConversionElement extends Components.ArcgisCoordinateConversion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisCoordinateConversionElementEventMap>(type: K, listener: (this: HTMLArcgisCoordinateConversionElement, ev: ArcgisCoordinateConversionCustomEvent<HTMLArcgisCoordinateConversionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisCoordinateConversionElementEventMap>(type: K, listener: (this: HTMLArcgisCoordinateConversionElement, ev: ArcgisCoordinateConversionCustomEvent<HTMLArcgisCoordinateConversionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisCoordinateConversionElement: {
        prototype: HTMLArcgisCoordinateConversionElement;
        new (): HTMLArcgisCoordinateConversionElement;
    };
    interface HTMLArcgisDaylightElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisDaylightElement extends Components.ArcgisDaylight, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDaylightElementEventMap>(type: K, listener: (this: HTMLArcgisDaylightElement, ev: ArcgisDaylightCustomEvent<HTMLArcgisDaylightElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDaylightElementEventMap>(type: K, listener: (this: HTMLArcgisDaylightElement, ev: ArcgisDaylightCustomEvent<HTMLArcgisDaylightElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDaylightElement: {
        prototype: HTMLArcgisDaylightElement;
        new (): HTMLArcgisDaylightElement;
    };
    interface HTMLArcgisDirectionalPadElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisDirectionalPadElement extends Components.ArcgisDirectionalPad, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectionalPadElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionalPadElement, ev: ArcgisDirectionalPadCustomEvent<HTMLArcgisDirectionalPadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectionalPadElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionalPadElement, ev: ArcgisDirectionalPadCustomEvent<HTMLArcgisDirectionalPadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectionalPadElement: {
        prototype: HTMLArcgisDirectionalPadElement;
        new (): HTMLArcgisDirectionalPadElement;
    };
    interface HTMLArcgisDirectionsElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisDirectionsElement extends Components.ArcgisDirections, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectionsElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionsElement, ev: ArcgisDirectionsCustomEvent<HTMLArcgisDirectionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectionsElementEventMap>(type: K, listener: (this: HTMLArcgisDirectionsElement, ev: ArcgisDirectionsCustomEvent<HTMLArcgisDirectionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectionsElement: {
        prototype: HTMLArcgisDirectionsElement;
        new (): HTMLArcgisDirectionsElement;
    };
    interface HTMLArcgisDirectlineMeasurement3dElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisDirectlineMeasurement3dElement extends Components.ArcgisDirectlineMeasurement3d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDirectlineMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisDirectlineMeasurement3dElement, ev: ArcgisDirectlineMeasurement3dCustomEvent<HTMLArcgisDirectlineMeasurement3dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDirectlineMeasurement3dElementEventMap>(type: K, listener: (this: HTMLArcgisDirectlineMeasurement3dElement, ev: ArcgisDirectlineMeasurement3dCustomEvent<HTMLArcgisDirectlineMeasurement3dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDirectlineMeasurement3dElement: {
        prototype: HTMLArcgisDirectlineMeasurement3dElement;
        new (): HTMLArcgisDirectlineMeasurement3dElement;
    };
    interface HTMLArcgisDistanceMeasurement2dElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisDistanceMeasurement2dElement extends Components.ArcgisDistanceMeasurement2d, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisDistanceMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisDistanceMeasurement2dElement, ev: ArcgisDistanceMeasurement2dCustomEvent<HTMLArcgisDistanceMeasurement2dElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisDistanceMeasurement2dElementEventMap>(type: K, listener: (this: HTMLArcgisDistanceMeasurement2dElement, ev: ArcgisDistanceMeasurement2dCustomEvent<HTMLArcgisDistanceMeasurement2dElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisDistanceMeasurement2dElement: {
        prototype: HTMLArcgisDistanceMeasurement2dElement;
        new (): HTMLArcgisDistanceMeasurement2dElement;
    };
    interface HTMLArcgisEditorElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisEditorElement extends Components.ArcgisEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisEditorElementEventMap>(type: K, listener: (this: HTMLArcgisEditorElement, ev: ArcgisEditorCustomEvent<HTMLArcgisEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisEditorElementEventMap>(type: K, listener: (this: HTMLArcgisEditorElement, ev: ArcgisEditorCustomEvent<HTMLArcgisEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisEditorElement: {
        prototype: HTMLArcgisEditorElement;
        new (): HTMLArcgisEditorElement;
    };
    interface HTMLArcgisElevationProfileElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisElevationProfileElement extends Components.ArcgisElevationProfile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisElevationProfileElementEventMap>(type: K, listener: (this: HTMLArcgisElevationProfileElement, ev: ArcgisElevationProfileCustomEvent<HTMLArcgisElevationProfileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisElevationProfileElementEventMap>(type: K, listener: (this: HTMLArcgisElevationProfileElement, ev: ArcgisElevationProfileCustomEvent<HTMLArcgisElevationProfileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisElevationProfileElement: {
        prototype: HTMLArcgisElevationProfileElement;
        new (): HTMLArcgisElevationProfileElement;
    };
    interface HTMLArcgisExpandElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisExpandElement extends Components.ArcgisExpand, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisExpandElementEventMap>(type: K, listener: (this: HTMLArcgisExpandElement, ev: ArcgisExpandCustomEvent<HTMLArcgisExpandElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisExpandElementEventMap>(type: K, listener: (this: HTMLArcgisExpandElement, ev: ArcgisExpandCustomEvent<HTMLArcgisExpandElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisExpandElement: {
        prototype: HTMLArcgisExpandElement;
        new (): HTMLArcgisExpandElement;
    };
    interface HTMLArcgisFeatureElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisFeatureElement extends Components.ArcgisFeature, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureElement, ev: ArcgisFeatureCustomEvent<HTMLArcgisFeatureElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureElement, ev: ArcgisFeatureCustomEvent<HTMLArcgisFeatureElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureElement: {
        prototype: HTMLArcgisFeatureElement;
        new (): HTMLArcgisFeatureElement;
    };
    interface HTMLArcgisFeatureFormElementEventMap {
        "arcgisReady": never;
        "arcgisSubmit": __esri.FeatureFormSubmitEvent;
        "arcgisValueChange": __esri.FeatureFormValueChangeEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisFeatureFormElement extends Components.ArcgisFeatureForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureFormElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureFormElement, ev: ArcgisFeatureFormCustomEvent<HTMLArcgisFeatureFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureFormElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureFormElement, ev: ArcgisFeatureFormCustomEvent<HTMLArcgisFeatureFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureFormElement: {
        prototype: HTMLArcgisFeatureFormElement;
        new (): HTMLArcgisFeatureFormElement;
    };
    interface HTMLArcgisFeatureTableElementEventMap {
        "arcgisReady": never;
        "arcgisSelectionChange": __esri.CollectionChangeEvent<number | string>;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisFeatureTableElement extends Components.ArcgisFeatureTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureTableElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTableElement, ev: ArcgisFeatureTableCustomEvent<HTMLArcgisFeatureTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureTableElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTableElement, ev: ArcgisFeatureTableCustomEvent<HTMLArcgisFeatureTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureTableElement: {
        prototype: HTMLArcgisFeatureTableElement;
        new (): HTMLArcgisFeatureTableElement;
    };
    interface HTMLArcgisFeatureTemplatesElementEventMap {
        "arcgisReady": never;
        "arcgisSelect": __esri.FeatureTemplatesSelectEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisFeatureTemplatesElement extends Components.ArcgisFeatureTemplates, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeatureTemplatesElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTemplatesElement, ev: ArcgisFeatureTemplatesCustomEvent<HTMLArcgisFeatureTemplatesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeatureTemplatesElementEventMap>(type: K, listener: (this: HTMLArcgisFeatureTemplatesElement, ev: ArcgisFeatureTemplatesCustomEvent<HTMLArcgisFeatureTemplatesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeatureTemplatesElement: {
        prototype: HTMLArcgisFeatureTemplatesElement;
        new (): HTMLArcgisFeatureTemplatesElement;
    };
    interface HTMLArcgisFeaturesElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisTriggerAction": __esri.FeaturesTriggerActionEvent;
    }
    interface HTMLArcgisFeaturesElement extends Components.ArcgisFeatures, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFeaturesElementEventMap>(type: K, listener: (this: HTMLArcgisFeaturesElement, ev: ArcgisFeaturesCustomEvent<HTMLArcgisFeaturesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFeaturesElementEventMap>(type: K, listener: (this: HTMLArcgisFeaturesElement, ev: ArcgisFeaturesCustomEvent<HTMLArcgisFeaturesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFeaturesElement: {
        prototype: HTMLArcgisFeaturesElement;
        new (): HTMLArcgisFeaturesElement;
    };
    interface HTMLArcgisFloorFilterElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisFloorFilterElement extends Components.ArcgisFloorFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFloorFilterElementEventMap>(type: K, listener: (this: HTMLArcgisFloorFilterElement, ev: ArcgisFloorFilterCustomEvent<HTMLArcgisFloorFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFloorFilterElementEventMap>(type: K, listener: (this: HTMLArcgisFloorFilterElement, ev: ArcgisFloorFilterCustomEvent<HTMLArcgisFloorFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFloorFilterElement: {
        prototype: HTMLArcgisFloorFilterElement;
        new (): HTMLArcgisFloorFilterElement;
    };
    interface HTMLArcgisFullscreenElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
    }
    interface HTMLArcgisFullscreenElement extends Components.ArcgisFullscreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisFullscreenElementEventMap>(type: K, listener: (this: HTMLArcgisFullscreenElement, ev: ArcgisFullscreenCustomEvent<HTMLArcgisFullscreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisFullscreenElementEventMap>(type: K, listener: (this: HTMLArcgisFullscreenElement, ev: ArcgisFullscreenCustomEvent<HTMLArcgisFullscreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisFullscreenElement: {
        prototype: HTMLArcgisFullscreenElement;
        new (): HTMLArcgisFullscreenElement;
    };
    interface HTMLArcgisHistogramElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisHistogramElement extends Components.ArcgisHistogram, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramElement, ev: ArcgisHistogramCustomEvent<HTMLArcgisHistogramElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramElement, ev: ArcgisHistogramCustomEvent<HTMLArcgisHistogramElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHistogramElement: {
        prototype: HTMLArcgisHistogramElement;
        new (): HTMLArcgisHistogramElement;
    };
    interface HTMLArcgisHistogramRangeSliderElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisHistogramRangeSliderElement extends Components.ArcgisHistogramRangeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHistogramRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramRangeSliderElement, ev: ArcgisHistogramRangeSliderCustomEvent<HTMLArcgisHistogramRangeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHistogramRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisHistogramRangeSliderElement, ev: ArcgisHistogramRangeSliderCustomEvent<HTMLArcgisHistogramRangeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHistogramRangeSliderElement: {
        prototype: HTMLArcgisHistogramRangeSliderElement;
        new (): HTMLArcgisHistogramRangeSliderElement;
    };
    interface HTMLArcgisHomeElementEventMap {
        "arcgisReady": never;
        "arcgisGo": __esri.HomeViewModelGoEvent;
        "arcgisPropertyChange": any;
    }
    /**
     * Provides a simple widget that switches the esri/views/View to its
     * initial esri/Viewpoint or a previously defined `viewpoint`.
     * @since 4.0
     */
    interface HTMLArcgisHomeElement extends Components.ArcgisHome, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisHomeElementEventMap>(type: K, listener: (this: HTMLArcgisHomeElement, ev: ArcgisHomeCustomEvent<HTMLArcgisHomeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisHomeElementEventMap>(type: K, listener: (this: HTMLArcgisHomeElement, ev: ArcgisHomeCustomEvent<HTMLArcgisHomeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisHomeElement: {
        prototype: HTMLArcgisHomeElement;
        new (): HTMLArcgisHomeElement;
    };
    interface HTMLArcgisLayerListElementEventMap {
        "arcgisReady": never;
        "arcgisTriggerAction": __esri.LayerListTriggerActionEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisLayerListElement extends Components.ArcgisLayerList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisLayerListElement, ev: ArcgisLayerListCustomEvent<HTMLArcgisLayerListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLayerListElementEventMap>(type: K, listener: (this: HTMLArcgisLayerListElement, ev: ArcgisLayerListCustomEvent<HTMLArcgisLayerListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLayerListElement: {
        prototype: HTMLArcgisLayerListElement;
        new (): HTMLArcgisLayerListElement;
    };
    interface HTMLArcgisLegendElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisLegendElement extends Components.ArcgisLegend, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLegendElementEventMap>(type: K, listener: (this: HTMLArcgisLegendElement, ev: ArcgisLegendCustomEvent<HTMLArcgisLegendElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLegendElementEventMap>(type: K, listener: (this: HTMLArcgisLegendElement, ev: ArcgisLegendCustomEvent<HTMLArcgisLegendElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLegendElement: {
        prototype: HTMLArcgisLegendElement;
        new (): HTMLArcgisLegendElement;
    };
    interface HTMLArcgisLineOfSightElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisLineOfSightElement extends Components.ArcgisLineOfSight, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLineOfSightElementEventMap>(type: K, listener: (this: HTMLArcgisLineOfSightElement, ev: ArcgisLineOfSightCustomEvent<HTMLArcgisLineOfSightElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLineOfSightElementEventMap>(type: K, listener: (this: HTMLArcgisLineOfSightElement, ev: ArcgisLineOfSightCustomEvent<HTMLArcgisLineOfSightElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLineOfSightElement: {
        prototype: HTMLArcgisLineOfSightElement;
        new (): HTMLArcgisLineOfSightElement;
    };
    interface HTMLArcgisLocateElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
        "arcgisSuccess": __esri.LocateLocateEvent;
        "arcgisError": __esri.LocateViewModelLocateErrorEvent;
    }
    interface HTMLArcgisLocateElement extends Components.ArcgisLocate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisLocateElementEventMap>(type: K, listener: (this: HTMLArcgisLocateElement, ev: ArcgisLocateCustomEvent<HTMLArcgisLocateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisLocateElementEventMap>(type: K, listener: (this: HTMLArcgisLocateElement, ev: ArcgisLocateCustomEvent<HTMLArcgisLocateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisLocateElement: {
        prototype: HTMLArcgisLocateElement;
        new (): HTMLArcgisLocateElement;
    };
    interface HTMLArcgisMapElementEventMap {
        "arcgisViewReadyChange": void;
        "arcgisViewChange": void;
        "arcgisViewClick": __esri.ViewClickEvent;
        "arcgisViewDoubleClick": __esri.ViewDoubleClickEvent;
        "arcgisViewDrag": __esri.ViewDragEvent;
        "arcgisViewHold": __esri.ViewHoldEvent;
        "arcgisViewImmediateClick": __esri.ViewImmediateClickEvent;
        "arcgisViewImmediateDoubleClick": __esri.ViewImmediateDoubleClickEvent;
        "arcgisViewKeyDown": __esri.ViewKeyDownEvent;
        "arcgisViewKeyUp": __esri.ViewKeyUpEvent;
        "arcgisViewLayerviewCreate": __esri.ViewLayerviewCreateEvent;
        "arcgisViewLayerviewCreateError": __esri.ViewLayerviewCreateErrorEvent;
        "arcgisViewLayerviewDestroy": __esri.ViewLayerviewDestroyEvent;
        "arcgisViewMouseWheel": __esri.ViewMouseWheelEvent;
        "arcgisViewPointerDown": __esri.ViewPointerDownEvent;
        "arcgisViewPointerEnter": __esri.ViewPointerEnterEvent;
        "arcgisViewPointerLeave": __esri.ViewPointerLeaveEvent;
        "arcgisViewPointerMove": __esri.ViewPointerMoveEvent;
        "arcgisViewPointerUp": __esri.ViewPointerUpEvent;
    }
    interface HTMLArcgisMapElement extends Components.ArcgisMap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisMapElementEventMap>(type: K, listener: (this: HTMLArcgisMapElement, ev: ArcgisMapCustomEvent<HTMLArcgisMapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisMapElementEventMap>(type: K, listener: (this: HTMLArcgisMapElement, ev: ArcgisMapCustomEvent<HTMLArcgisMapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisMapElement: {
        prototype: HTMLArcgisMapElement;
        new (): HTMLArcgisMapElement;
    };
    interface HTMLArcgisMeasurementElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisMeasurementElement extends Components.ArcgisMeasurement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisMeasurementElementEventMap>(type: K, listener: (this: HTMLArcgisMeasurementElement, ev: ArcgisMeasurementCustomEvent<HTMLArcgisMeasurementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisMeasurementElementEventMap>(type: K, listener: (this: HTMLArcgisMeasurementElement, ev: ArcgisMeasurementCustomEvent<HTMLArcgisMeasurementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisMeasurementElement: {
        prototype: HTMLArcgisMeasurementElement;
        new (): HTMLArcgisMeasurementElement;
    };
    interface HTMLArcgisNavigationToggleElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisNavigationToggleElement extends Components.ArcgisNavigationToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisNavigationToggleElementEventMap>(type: K, listener: (this: HTMLArcgisNavigationToggleElement, ev: ArcgisNavigationToggleCustomEvent<HTMLArcgisNavigationToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisNavigationToggleElementEventMap>(type: K, listener: (this: HTMLArcgisNavigationToggleElement, ev: ArcgisNavigationToggleCustomEvent<HTMLArcgisNavigationToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisNavigationToggleElement: {
        prototype: HTMLArcgisNavigationToggleElement;
        new (): HTMLArcgisNavigationToggleElement;
    };
    interface HTMLArcgisOrientedImageryViewerElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisOrientedImageryViewerElement extends Components.ArcgisOrientedImageryViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisOrientedImageryViewerElementEventMap>(type: K, listener: (this: HTMLArcgisOrientedImageryViewerElement, ev: ArcgisOrientedImageryViewerCustomEvent<HTMLArcgisOrientedImageryViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisOrientedImageryViewerElementEventMap>(type: K, listener: (this: HTMLArcgisOrientedImageryViewerElement, ev: ArcgisOrientedImageryViewerCustomEvent<HTMLArcgisOrientedImageryViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisOrientedImageryViewerElement: {
        prototype: HTMLArcgisOrientedImageryViewerElement;
        new (): HTMLArcgisOrientedImageryViewerElement;
    };
    interface HTMLArcgisPlacementElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisPlacementElement extends Components.ArcgisPlacement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisPlacementElementEventMap>(type: K, listener: (this: HTMLArcgisPlacementElement, ev: ArcgisPlacementCustomEvent<HTMLArcgisPlacementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisPlacementElementEventMap>(type: K, listener: (this: HTMLArcgisPlacementElement, ev: ArcgisPlacementCustomEvent<HTMLArcgisPlacementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisPlacementElement: {
        prototype: HTMLArcgisPlacementElement;
        new (): HTMLArcgisPlacementElement;
    };
    interface HTMLArcgisPrintElementEventMap {
        "arcgisReady": never;
        "arcgisComplete": __esri.PrintCompleteEvent;
        "arcgisSubmit": __esri.PrintSubmitEvent;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisPrintElement extends Components.ArcgisPrint, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisPrintElementEventMap>(type: K, listener: (this: HTMLArcgisPrintElement, ev: ArcgisPrintCustomEvent<HTMLArcgisPrintElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisPrintElementEventMap>(type: K, listener: (this: HTMLArcgisPrintElement, ev: ArcgisPrintCustomEvent<HTMLArcgisPrintElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisPrintElement: {
        prototype: HTMLArcgisPrintElement;
        new (): HTMLArcgisPrintElement;
    };
    interface HTMLArcgisScaleBarElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisScaleBarElement extends Components.ArcgisScaleBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisScaleBarElementEventMap>(type: K, listener: (this: HTMLArcgisScaleBarElement, ev: ArcgisScaleBarCustomEvent<HTMLArcgisScaleBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisScaleBarElementEventMap>(type: K, listener: (this: HTMLArcgisScaleBarElement, ev: ArcgisScaleBarCustomEvent<HTMLArcgisScaleBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisScaleBarElement: {
        prototype: HTMLArcgisScaleBarElement;
        new (): HTMLArcgisScaleBarElement;
    };
    interface HTMLArcgisScaleRangeSliderElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisScaleRangeSliderElement extends Components.ArcgisScaleRangeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisScaleRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisScaleRangeSliderElement, ev: ArcgisScaleRangeSliderCustomEvent<HTMLArcgisScaleRangeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisScaleRangeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisScaleRangeSliderElement, ev: ArcgisScaleRangeSliderCustomEvent<HTMLArcgisScaleRangeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisScaleRangeSliderElement: {
        prototype: HTMLArcgisScaleRangeSliderElement;
        new (): HTMLArcgisScaleRangeSliderElement;
    };
    interface HTMLArcgisSceneElementEventMap {
        "arcgisViewReadyChange": void;
        "arcgisViewChange": void;
        "arcgisViewClick": __esri.ViewClickEvent;
        "arcgisViewDoubleClick": __esri.ViewDoubleClickEvent;
        "arcgisViewDrag": __esri.ViewDragEvent;
        "arcgisViewHold": __esri.ViewHoldEvent;
        "arcgisViewImmediateClick": __esri.ViewImmediateClickEvent;
        "arcgisViewImmediateDoubleClick": __esri.ViewImmediateDoubleClickEvent;
        "arcgisViewKeyDown": __esri.ViewKeyDownEvent;
        "arcgisViewKeyUp": __esri.ViewKeyUpEvent;
        "arcgisViewLayerviewCreate": __esri.ViewLayerviewCreateEvent;
        "arcgisViewLayerviewCreateError": __esri.ViewLayerviewCreateErrorEvent;
        "arcgisViewLayerviewDestroy": __esri.ViewLayerviewDestroyEvent;
        "arcgisViewMouseWheel": __esri.ViewMouseWheelEvent;
        "arcgisViewPointerDown": __esri.ViewPointerDownEvent;
        "arcgisViewPointerEnter": __esri.ViewPointerEnterEvent;
        "arcgisViewPointerLeave": __esri.ViewPointerLeaveEvent;
        "arcgisViewPointerMove": __esri.ViewPointerMoveEvent;
        "arcgisViewPointerUp": __esri.ViewPointerUpEvent;
    }
    interface HTMLArcgisSceneElement extends Components.ArcgisScene, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSceneElementEventMap>(type: K, listener: (this: HTMLArcgisSceneElement, ev: ArcgisSceneCustomEvent<HTMLArcgisSceneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSceneElementEventMap>(type: K, listener: (this: HTMLArcgisSceneElement, ev: ArcgisSceneCustomEvent<HTMLArcgisSceneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSceneElement: {
        prototype: HTMLArcgisSceneElement;
        new (): HTMLArcgisSceneElement;
    };
    interface HTMLArcgisSearchElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisBlur": __esri.SearchSearchBlurEvent;
        "arcgisClear": __esri.SearchSearchClearEvent;
        "arcgisComplete": __esri.SearchSearchCompleteEvent;
        "arcgisFocus": __esri.SearchSearchFocusEvent;
        "arcgisStart": __esri.SearchSearchStartEvent;
        "arcgisSelectResult": __esri.SearchSelectResultEvent;
        "arcgisSuggestComplete": __esri.SearchSuggestCompleteEvent;
        "arcgisSuggestStart": __esri.SearchSuggestStartEvent;
    }
    interface HTMLArcgisSearchElement extends Components.ArcgisSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSearchElementEventMap>(type: K, listener: (this: HTMLArcgisSearchElement, ev: ArcgisSearchCustomEvent<HTMLArcgisSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSearchElementEventMap>(type: K, listener: (this: HTMLArcgisSearchElement, ev: ArcgisSearchCustomEvent<HTMLArcgisSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSearchElement: {
        prototype: HTMLArcgisSearchElement;
        new (): HTMLArcgisSearchElement;
    };
    interface HTMLArcgisShadowCastElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisShadowCastElement extends Components.ArcgisShadowCast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisShadowCastElementEventMap>(type: K, listener: (this: HTMLArcgisShadowCastElement, ev: ArcgisShadowCastCustomEvent<HTMLArcgisShadowCastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisShadowCastElementEventMap>(type: K, listener: (this: HTMLArcgisShadowCastElement, ev: ArcgisShadowCastCustomEvent<HTMLArcgisShadowCastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisShadowCastElement: {
        prototype: HTMLArcgisShadowCastElement;
        new (): HTMLArcgisShadowCastElement;
    };
    interface HTMLArcgisSketchElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisCreate": __esri.SketchCreateEvent;
        "arcgisDelete": __esri.SketchDeleteEvent;
        "arcgisRedo": __esri.SketchRedoEvent;
        "arcgisUndo": __esri.SketchUndoEvent;
        "arcgisUpdate": __esri.SketchUpdateEvent;
    }
    interface HTMLArcgisSketchElement extends Components.ArcgisSketch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSketchElementEventMap>(type: K, listener: (this: HTMLArcgisSketchElement, ev: ArcgisSketchCustomEvent<HTMLArcgisSketchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSketchElementEventMap>(type: K, listener: (this: HTMLArcgisSketchElement, ev: ArcgisSketchCustomEvent<HTMLArcgisSketchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSketchElement: {
        prototype: HTMLArcgisSketchElement;
        new (): HTMLArcgisSketchElement;
    };
    interface HTMLArcgisSliceElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisSliceElement extends Components.ArcgisSlice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSliceElementEventMap>(type: K, listener: (this: HTMLArcgisSliceElement, ev: ArcgisSliceCustomEvent<HTMLArcgisSliceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSliceElementEventMap>(type: K, listener: (this: HTMLArcgisSliceElement, ev: ArcgisSliceCustomEvent<HTMLArcgisSliceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSliceElement: {
        prototype: HTMLArcgisSliceElement;
        new (): HTMLArcgisSliceElement;
    };
    interface HTMLArcgisSliderElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisMaxChange": __esri.SliderMaxChangeEvent;
        "arcgisMaxClick": __esri.SliderMaxClickEvent;
        "arcgisMinChange": __esri.SliderMinChangeEvent;
        "arcgisMinClick": __esri.SliderMinClickEvent;
        "arcgisSegmentClick": __esri.SliderSegmentClickEvent;
        "arcgisSegmentDrag": __esri.SliderSegmentDragEvent;
        "arcgisThumbChange": __esri.SliderThumbChangeEvent;
        "arcgisThumbClick": __esri.SliderThumbClickEvent;
        "arcgisThumbDrag": __esri.SliderThumbDragEvent;
        "arcgisTickClick": __esri.SliderTickClickEvent;
        "arcgisTrackClick": __esri.SliderTrackClickEvent;
    }
    interface HTMLArcgisSliderElement extends Components.ArcgisSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSliderElementEventMap>(type: K, listener: (this: HTMLArcgisSliderElement, ev: ArcgisSliderCustomEvent<HTMLArcgisSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSliderElementEventMap>(type: K, listener: (this: HTMLArcgisSliderElement, ev: ArcgisSliderCustomEvent<HTMLArcgisSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSliderElement: {
        prototype: HTMLArcgisSliderElement;
        new (): HTMLArcgisSliderElement;
    };
    interface HTMLArcgisSwipeElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisSwipeElement extends Components.ArcgisSwipe, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisSwipeElementEventMap>(type: K, listener: (this: HTMLArcgisSwipeElement, ev: ArcgisSwipeCustomEvent<HTMLArcgisSwipeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisSwipeElementEventMap>(type: K, listener: (this: HTMLArcgisSwipeElement, ev: ArcgisSwipeCustomEvent<HTMLArcgisSwipeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisSwipeElement: {
        prototype: HTMLArcgisSwipeElement;
        new (): HTMLArcgisSwipeElement;
    };
    interface HTMLArcgisTableListElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisTriggerAction": __esri.TableListTriggerActionEvent;
    }
    interface HTMLArcgisTableListElement extends Components.ArcgisTableList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTableListElementEventMap>(type: K, listener: (this: HTMLArcgisTableListElement, ev: ArcgisTableListCustomEvent<HTMLArcgisTableListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTableListElementEventMap>(type: K, listener: (this: HTMLArcgisTableListElement, ev: ArcgisTableListCustomEvent<HTMLArcgisTableListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTableListElement: {
        prototype: HTMLArcgisTableListElement;
        new (): HTMLArcgisTableListElement;
    };
    interface HTMLArcgisTimeSliderElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisTriggerAction": __esri.TimeSliderTriggerActionEvent;
    }
    interface HTMLArcgisTimeSliderElement extends Components.ArcgisTimeSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTimeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisTimeSliderElement, ev: ArcgisTimeSliderCustomEvent<HTMLArcgisTimeSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTimeSliderElementEventMap>(type: K, listener: (this: HTMLArcgisTimeSliderElement, ev: ArcgisTimeSliderCustomEvent<HTMLArcgisTimeSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTimeSliderElement: {
        prototype: HTMLArcgisTimeSliderElement;
        new (): HTMLArcgisTimeSliderElement;
    };
    interface HTMLArcgisTrackElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
        "arcgisComplete": __esri.TrackViewModelTrackEvent;
        "arcgisError": __esri.TrackViewModelTrackErrorEvent;
    }
    interface HTMLArcgisTrackElement extends Components.ArcgisTrack, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisTrackElementEventMap>(type: K, listener: (this: HTMLArcgisTrackElement, ev: ArcgisTrackCustomEvent<HTMLArcgisTrackElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisTrackElementEventMap>(type: K, listener: (this: HTMLArcgisTrackElement, ev: ArcgisTrackCustomEvent<HTMLArcgisTrackElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisTrackElement: {
        prototype: HTMLArcgisTrackElement;
        new (): HTMLArcgisTrackElement;
    };
    interface HTMLArcgisUtilityNetworkAssociationsElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisUtilityNetworkAssociationsElement extends Components.ArcgisUtilityNetworkAssociations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkAssociationsElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkAssociationsElement, ev: ArcgisUtilityNetworkAssociationsCustomEvent<HTMLArcgisUtilityNetworkAssociationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkAssociationsElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkAssociationsElement, ev: ArcgisUtilityNetworkAssociationsCustomEvent<HTMLArcgisUtilityNetworkAssociationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkAssociationsElement: {
        prototype: HTMLArcgisUtilityNetworkAssociationsElement;
        new (): HTMLArcgisUtilityNetworkAssociationsElement;
    };
    interface HTMLArcgisUtilityNetworkTraceElementEventMap {
        "arcgisReady": never;
        "arcgisAddFlag": __esri.UtilityNetworkTraceAddFlagEvent;
        "arcgisAddFlagComplete": __esri.UtilityNetworkTraceAddFlagCompleteEvent;
        "arcgisAddFlagError": __esri.UtilityNetworkTraceAddFlagErrorEvent;
        "arcgisAddResultArea": __esri.UtilityNetworkTraceAddResultAreaEvent;
        "arcgisRemoveResultArea": __esri.UtilityNetworkTraceRemoveResultAreaEvent;
    }
    interface HTMLArcgisUtilityNetworkTraceElement extends Components.ArcgisUtilityNetworkTrace, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkTraceElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkTraceElement, ev: ArcgisUtilityNetworkTraceCustomEvent<HTMLArcgisUtilityNetworkTraceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkTraceElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkTraceElement, ev: ArcgisUtilityNetworkTraceCustomEvent<HTMLArcgisUtilityNetworkTraceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkTraceElement: {
        prototype: HTMLArcgisUtilityNetworkTraceElement;
        new (): HTMLArcgisUtilityNetworkTraceElement;
    };
    interface HTMLArcgisUtilityNetworkValidateTopologyElementEventMap {
        "arcgisReady": never;
    }
    interface HTMLArcgisUtilityNetworkValidateTopologyElement extends Components.ArcgisUtilityNetworkValidateTopology, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisUtilityNetworkValidateTopologyElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkValidateTopologyElement, ev: ArcgisUtilityNetworkValidateTopologyCustomEvent<HTMLArcgisUtilityNetworkValidateTopologyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisUtilityNetworkValidateTopologyElementEventMap>(type: K, listener: (this: HTMLArcgisUtilityNetworkValidateTopologyElement, ev: ArcgisUtilityNetworkValidateTopologyCustomEvent<HTMLArcgisUtilityNetworkValidateTopologyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisUtilityNetworkValidateTopologyElement: {
        prototype: HTMLArcgisUtilityNetworkValidateTopologyElement;
        new (): HTMLArcgisUtilityNetworkValidateTopologyElement;
    };
    interface HTMLArcgisValuePickerElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
        "arcgisAnimate": __esri.ValuePickerAnimateEvent;
        "arcgisNext": __esri.ValuePickerNextEvent;
        "arcgisPause": __esri.ValuePickerPauseEvent;
        "arcgisPlay": __esri.ValuePickerPlayEvent;
        "arcgisPrevious": __esri.ValuePickerPreviousEvent;
    }
    interface HTMLArcgisValuePickerElement extends Components.ArcgisValuePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisValuePickerElementEventMap>(type: K, listener: (this: HTMLArcgisValuePickerElement, ev: ArcgisValuePickerCustomEvent<HTMLArcgisValuePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisValuePickerElementEventMap>(type: K, listener: (this: HTMLArcgisValuePickerElement, ev: ArcgisValuePickerCustomEvent<HTMLArcgisValuePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisValuePickerElement: {
        prototype: HTMLArcgisValuePickerElement;
        new (): HTMLArcgisValuePickerElement;
    };
    interface HTMLArcgisVersionManagementElementEventMap {
        "arcgisReady": never;
        "arcgisVersioningStateChanged": VersioningStateEvent;
    }
    interface HTMLArcgisVersionManagementElement extends Components.ArcgisVersionManagement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementElement, ev: ArcgisVersionManagementCustomEvent<HTMLArcgisVersionManagementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementElement, ev: ArcgisVersionManagementCustomEvent<HTMLArcgisVersionManagementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementElement: {
        prototype: HTMLArcgisVersionManagementElement;
        new (): HTMLArcgisVersionManagementElement;
    };
    interface HTMLArcgisVersionManagementServiceItemElementEventMap {
        "arcgisFlowItemBack": void;
        "arcgisFlowItemClose": void;
        "arcgisGetVersions": {
    serviceUrl: string;
  };
        "arcgisManageVersion": {
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
        "arcgisNewVersion": {
    serviceUrl: string;
  };
    }
    interface HTMLArcgisVersionManagementServiceItemElement extends Components.ArcgisVersionManagementServiceItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementServiceItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementServiceItemElement, ev: ArcgisVersionManagementServiceItemCustomEvent<HTMLArcgisVersionManagementServiceItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementServiceItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementServiceItemElement, ev: ArcgisVersionManagementServiceItemCustomEvent<HTMLArcgisVersionManagementServiceItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementServiceItemElement: {
        prototype: HTMLArcgisVersionManagementServiceItemElement;
        new (): HTMLArcgisVersionManagementServiceItemElement;
    };
    interface HTMLArcgisVersionManagementVersionItemElementEventMap {
        "arcgisManageVersion": {
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface HTMLArcgisVersionManagementVersionItemElement extends Components.ArcgisVersionManagementVersionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionItemElement, ev: ArcgisVersionManagementVersionItemCustomEvent<HTMLArcgisVersionManagementVersionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionItemElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionItemElement, ev: ArcgisVersionManagementVersionItemCustomEvent<HTMLArcgisVersionManagementVersionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionItemElement: {
        prototype: HTMLArcgisVersionManagementVersionItemElement;
        new (): HTMLArcgisVersionManagementVersionItemElement;
    };
    interface HTMLArcgisVersionManagementVersionListElementEventMap {
        "arcgisNewVersion": {
    serviceUrl: string;
  };
        "arcgisGetVersions": {
    serviceUrl: string;
  };
        "arcgisManageVersion": {
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface HTMLArcgisVersionManagementVersionListElement extends Components.ArcgisVersionManagementVersionList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionListElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionListElement, ev: ArcgisVersionManagementVersionListCustomEvent<HTMLArcgisVersionManagementVersionListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionListElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionListElement, ev: ArcgisVersionManagementVersionListCustomEvent<HTMLArcgisVersionManagementVersionListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionListElement: {
        prototype: HTMLArcgisVersionManagementVersionListElement;
        new (): HTMLArcgisVersionManagementVersionListElement;
    };
    interface HTMLArcgisVersionManagementVersionPropertiesElementEventMap {
        "arcgisAlterVersion": {
    alterVersionParameters: __esri.AlterVersionParameters;
  };
        "arcgisCreateVersion": {
    createVersionParameters: __esri.CreateVersionParameters;
    switchToVersion: boolean;
  };
        "arcgisFlowItemBack": void;
        "arcgisFlowItemClose": void;
    }
    interface HTMLArcgisVersionManagementVersionPropertiesElement extends Components.ArcgisVersionManagementVersionProperties, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisVersionManagementVersionPropertiesElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionPropertiesElement, ev: ArcgisVersionManagementVersionPropertiesCustomEvent<HTMLArcgisVersionManagementVersionPropertiesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisVersionManagementVersionPropertiesElementEventMap>(type: K, listener: (this: HTMLArcgisVersionManagementVersionPropertiesElement, ev: ArcgisVersionManagementVersionPropertiesCustomEvent<HTMLArcgisVersionManagementVersionPropertiesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisVersionManagementVersionPropertiesElement: {
        prototype: HTMLArcgisVersionManagementVersionPropertiesElement;
        new (): HTMLArcgisVersionManagementVersionPropertiesElement;
    };
    interface HTMLArcgisWeatherElementEventMap {
        "arcgisReady": never;
        "arcgisPropertyChange": any;
    }
    interface HTMLArcgisWeatherElement extends Components.ArcgisWeather, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisWeatherElementEventMap>(type: K, listener: (this: HTMLArcgisWeatherElement, ev: ArcgisWeatherCustomEvent<HTMLArcgisWeatherElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisWeatherElementEventMap>(type: K, listener: (this: HTMLArcgisWeatherElement, ev: ArcgisWeatherCustomEvent<HTMLArcgisWeatherElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisWeatherElement: {
        prototype: HTMLArcgisWeatherElement;
        new (): HTMLArcgisWeatherElement;
    };
    interface HTMLArcgisZoomElementEventMap {
        "arcgisPropertyChange": any;
        "arcgisReady": never;
    }
    interface HTMLArcgisZoomElement extends Components.ArcgisZoom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisZoomElementEventMap>(type: K, listener: (this: HTMLArcgisZoomElement, ev: ArcgisZoomCustomEvent<HTMLArcgisZoomElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisZoomElementEventMap>(type: K, listener: (this: HTMLArcgisZoomElement, ev: ArcgisZoomCustomEvent<HTMLArcgisZoomElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisZoomElement: {
        prototype: HTMLArcgisZoomElement;
        new (): HTMLArcgisZoomElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-area-measurement-2d": HTMLArcgisAreaMeasurement2dElement;
        "arcgis-area-measurement-3d": HTMLArcgisAreaMeasurement3dElement;
        "arcgis-attachments": HTMLArcgisAttachmentsElement;
        "arcgis-basemap-gallery": HTMLArcgisBasemapGalleryElement;
        "arcgis-basemap-layer-list": HTMLArcgisBasemapLayerListElement;
        "arcgis-basemap-toggle": HTMLArcgisBasemapToggleElement;
        "arcgis-bookmarks": HTMLArcgisBookmarksElement;
        "arcgis-building-explorer": HTMLArcgisBuildingExplorerElement;
        "arcgis-catalog-layer-list": HTMLArcgisCatalogLayerListElement;
        "arcgis-compass": HTMLArcgisCompassElement;
        "arcgis-coordinate-conversion": HTMLArcgisCoordinateConversionElement;
        "arcgis-daylight": HTMLArcgisDaylightElement;
        "arcgis-directional-pad": HTMLArcgisDirectionalPadElement;
        "arcgis-directions": HTMLArcgisDirectionsElement;
        "arcgis-directline-measurement-3d": HTMLArcgisDirectlineMeasurement3dElement;
        "arcgis-distance-measurement-2d": HTMLArcgisDistanceMeasurement2dElement;
        "arcgis-editor": HTMLArcgisEditorElement;
        "arcgis-elevation-profile": HTMLArcgisElevationProfileElement;
        "arcgis-expand": HTMLArcgisExpandElement;
        "arcgis-feature": HTMLArcgisFeatureElement;
        "arcgis-feature-form": HTMLArcgisFeatureFormElement;
        "arcgis-feature-table": HTMLArcgisFeatureTableElement;
        "arcgis-feature-templates": HTMLArcgisFeatureTemplatesElement;
        "arcgis-features": HTMLArcgisFeaturesElement;
        "arcgis-floor-filter": HTMLArcgisFloorFilterElement;
        "arcgis-fullscreen": HTMLArcgisFullscreenElement;
        "arcgis-histogram": HTMLArcgisHistogramElement;
        "arcgis-histogram-range-slider": HTMLArcgisHistogramRangeSliderElement;
        "arcgis-home": HTMLArcgisHomeElement;
        "arcgis-layer-list": HTMLArcgisLayerListElement;
        "arcgis-legend": HTMLArcgisLegendElement;
        "arcgis-line-of-sight": HTMLArcgisLineOfSightElement;
        "arcgis-locate": HTMLArcgisLocateElement;
        "arcgis-map": HTMLArcgisMapElement;
        "arcgis-measurement": HTMLArcgisMeasurementElement;
        "arcgis-navigation-toggle": HTMLArcgisNavigationToggleElement;
        "arcgis-oriented-imagery-viewer": HTMLArcgisOrientedImageryViewerElement;
        "arcgis-placement": HTMLArcgisPlacementElement;
        "arcgis-print": HTMLArcgisPrintElement;
        "arcgis-scale-bar": HTMLArcgisScaleBarElement;
        "arcgis-scale-range-slider": HTMLArcgisScaleRangeSliderElement;
        "arcgis-scene": HTMLArcgisSceneElement;
        "arcgis-search": HTMLArcgisSearchElement;
        "arcgis-shadow-cast": HTMLArcgisShadowCastElement;
        "arcgis-sketch": HTMLArcgisSketchElement;
        "arcgis-slice": HTMLArcgisSliceElement;
        "arcgis-slider": HTMLArcgisSliderElement;
        "arcgis-swipe": HTMLArcgisSwipeElement;
        "arcgis-table-list": HTMLArcgisTableListElement;
        "arcgis-time-slider": HTMLArcgisTimeSliderElement;
        "arcgis-track": HTMLArcgisTrackElement;
        "arcgis-utility-network-associations": HTMLArcgisUtilityNetworkAssociationsElement;
        "arcgis-utility-network-trace": HTMLArcgisUtilityNetworkTraceElement;
        "arcgis-utility-network-validate-topology": HTMLArcgisUtilityNetworkValidateTopologyElement;
        "arcgis-value-picker": HTMLArcgisValuePickerElement;
        "arcgis-version-management": HTMLArcgisVersionManagementElement;
        "arcgis-version-management-service-item": HTMLArcgisVersionManagementServiceItemElement;
        "arcgis-version-management-version-item": HTMLArcgisVersionManagementVersionItemElement;
        "arcgis-version-management-version-list": HTMLArcgisVersionManagementVersionListElement;
        "arcgis-version-management-version-properties": HTMLArcgisVersionManagementVersionPropertiesElement;
        "arcgis-weather": HTMLArcgisWeatherElement;
        "arcgis-zoom": HTMLArcgisZoomElement;
    }
}
declare namespace LocalJSX {
    interface ArcgisAreaMeasurement2d {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisAreaMeasurement2dCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisAreaMeasurement2dCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D.html#unit)
         */
        "unit"?: MeasurementSystem | AreaUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D.html#unitOptions)
         */
        "unitOptions"?: SystemOrAreaUnit[];
    }
    interface ArcgisAreaMeasurement3d {
        /**
          * The area measurement analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#analysis)
         */
        "analysis"?: AreaMeasurementAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisAreaMeasurement3dCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisAreaMeasurement3dCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#unit)
         */
        "unit"?: MeasurementSystem | AreaUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement3D.html#unitOptions)
         */
        "unitOptions"?: SystemOrAreaUnit[];
    }
    interface ArcgisAttachments {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Configures the attachment editing functionality that can be performed by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#capabilities)
         */
        "capabilities"?: AttachmentsCapabilities;
        /**
          * A string value indicating how to display an attachment.
         */
        "displayType"?: "auto" | "list" | "preview";
        /**
          * The graphic for the attachments.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#graphic)
         */
        "graphic"?: Graphic;
        "hideAddButton"?: boolean | undefined;
        "hideAddSubmitButton"?: boolean | undefined;
        "hideCancelAddButton"?: boolean | undefined;
        "hideCancelUpdateButton"?: boolean | undefined;
        "hideDeleteButton"?: boolean | undefined;
        "hideErrorMessage"?: boolean | undefined;
        "hideProgressBar"?: boolean | undefined;
        "hideUpdateButton"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisAttachmentsCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisAttachmentsCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "loading";
        "submitting"?: boolean;
    }
    interface ArcgisBasemapGallery {
        /**
          * The map's [basemap](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html#activeBasemap)
         */
        "activeBasemap"?: Basemap;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled"?: boolean;
        /**
          * Indicates the heading level to use for the message "No basemaps available" when no basemaps are available in the BasemapGallery.
         */
        "headingLevel"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisBasemapGalleryCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisBasemapGalleryCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The source for basemaps that the widget will display.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html#source)
         */
        "source"?: LocalBasemapsSource | PortalBasemapsSource;
        "state"?: "ready" | "disabled";
    }
    interface ArcgisBasemapLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "baseFilterText"?: string;
        /**
          * A collection of ListItems representing the baseLayers.
         */
        "baseItems"?: Collection<ListItem>;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing a base layer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#baseListItemCreatedFunction)
         */
        "baseListItemCreatedFunction"?: (event: any) => void;
        /**
          * The current basemap's title.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#basemapTitle)
         */
        "basemapTitle"?: string;
        /**
          * The CatalogLayerList that displays a catalog layer's dynamic group layer.
         */
        "catalogLayerList"?: CatalogLayerList;
        /**
          * [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) specific properties.
         */
        "catalogOptions"?: BasemapLayerListCatalogOptions;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed"?: boolean;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled"?: boolean;
        /**
          * Indicates whether the form to edit the basemap's title is currently visible.
         */
        "editingTitle"?: boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "filterPlaceholder"?: string;
        /**
          * Indicates the heading level to use for the widget title (i.e.
         */
        "headingLevel"?: number;
        "hideBaseLayers"?: boolean | undefined;
        "hideFlow"?: boolean | undefined;
        "hideHeading"?: boolean | undefined;
        "hideReferenceLayers"?: boolean | undefined;
        "hideStatusIndicators"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * [KnowledgeGraphLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html) specific properties.
         */
        "knowledgeGraphOptions"?: BasemapLayerListKnowledgeGraphOptions;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisBasemapLayerListCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisBasemapLayerListCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisBasemapLayerListCustomEvent<__esri.BasemapLayerListTriggerActionEvent>) => void;
        /**
          * This property manages the visibility of the [tableList](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#tableList).
         */
        "openTableListItem"?: ListItem;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#visibleElements) is true.
         */
        "referenceFilterText"?: string;
        /**
          * A collection of ListItems representing the referenceLayers.
         */
        "referenceItems"?: Collection<ListItem>;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing a reference layer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#referenceListItemCreatedFunction)
         */
        "referenceListItemCreatedFunction"?: (event: any) => void;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html)s representing basemap layers selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html#selectedItems)
         */
        "selectedItems"?: Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode"?: "none" | "single" | "multiple" | "single-persist";
        "showCloseButton"?: boolean | undefined;
        "showCollapseButton"?: boolean | undefined;
        "showEditTitleButton"?: boolean | undefined;
        "showErrors"?: boolean | undefined;
        "showFilter"?: boolean | undefined;
        "showTemporaryLayerIndicators"?: boolean | undefined;
        "state"?: "ready" | "disabled" | "loading";
        "tableList"?: TableList;
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance"?: "default" | "checkbox";
    }
    interface ArcgisBasemapToggle {
        "activeBasemap"?: Basemap;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget. It is typically used when the widget is controlled by another one (e.g. in the Expand widget).
         */
        "icon"?: Nil | string;
        /**
          * The widget's default label.
         */
        "label"?: string | undefined;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        /**
          * The next basemap for toggling.
         */
        "nextBasemap"?: Basemap;
        "onArcgisPropertyChange"?: (event: ArcgisBasemapToggleCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisBasemapToggleCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The visible elements that are displayed within the widget.
         */
        "showTitle"?: boolean;
        "state"?: "ready" | "disabled" | "loading" | "incompatible-next-basemap";
    }
    interface ArcgisBookmarks {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * A collection of [Bookmark](https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html)s.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#bookmarks)
         */
        "bookmarks"?: Collection<Bookmark>;
        /**
          * Specifies how new bookmarks will be created if [visibleElements.addBookmarkButton](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements) is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultCreateOptions)
         */
        "defaultCreateOptions"?: BookmarkOptions;
        /**
          * Specifies how bookmarks will be edited, if [visibleElements.editBookmarkButton](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements) is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#defaultEditOptions)
         */
        "defaultEditOptions"?: BookmarkOptions;
        /**
          * When true, the widget is visually withdrawn and cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * Indicates if a Bookmark is able to be dragged in order to update its position in the list.
         */
        "dragEnabled"?: boolean;
        /**
          * Defines the text used as a placeholder when visibleElements.filter is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterPlaceholder)
         */
        "filterPlaceholder"?: string;
        /**
          * Defines the text used to filter the bookmarks when visibleElements.filter is set to `true`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#filterText)
         */
        "filterText"?: string;
        "hideFlow"?: boolean | undefined;
        "hideThumbnail"?: boolean | undefined;
        "hideTime"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisEdit"?: (event: ArcgisBookmarksCustomEvent<__esri.BookmarksBookmarkEditEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisBookmarksCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisBookmarksCustomEvent<never>) => void;
        "onArcgisSelect"?: (event: ArcgisBookmarksCustomEvent<__esri.BookmarksBookmarkSelectEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "showAddBookmarkButton"?: boolean | undefined;
        "showCloseButton"?: boolean | undefined;
        "showCollapseButton"?: boolean | undefined;
        "showEditBookmarkButton"?: boolean | undefined;
        "showFilter"?: boolean | undefined;
        "showHeading"?: boolean | undefined;
        "state"?: "ready" | "loading";
    }
    interface ArcgisBuildingExplorer {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates the heading level to use for the headings in the widget.
         */
        "headingLevel"?: number;
        "hideDisciplines"?: boolean | undefined;
        "hideLevels"?: boolean | undefined;
        "hidePhases"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A [collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) of layers of type [BuildingSceneLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-BuildingSceneLayer.html) that are added to the widget for exploration.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BuildingExplorer.html#layers)
         */
        "layers"?: Collection<BuildingSceneLayer>;
        "level"?: BuildingLevel;
        "onArcgisPropertyChange"?: (event: ArcgisBuildingExplorerCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisBuildingExplorerCustomEvent<never>) => void;
        "phase"?: BuildingPhase;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "failed" | "loading";
    }
    interface ArcgisCatalogLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * A collection of ListItems representing the catalogLayers dynamicGroupLayer.
         */
        "catalogItems"?: Collection<ListItem>;
        /**
          * The [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) to display in the widget.
         */
        "catalogLayer"?: CatalogLayer;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed"?: boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#visibleElements) is true.
         */
        "filterPlaceholder"?: string;
        /**
          * The value of the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#visibleElements) is true.
         */
        "filterText"?: string;
        /**
          * Indicates the heading level to use for the heading of the widget.
         */
        "headingLevel"?: number;
        "hideFlow"?: boolean | undefined;
        "hideStatusIndicators"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A function that executes each time a [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) is created.
         */
        "listItemCreatedFunction"?: (event: any) => void;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisCatalogLayerListCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisCatalogLayerListCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisCatalogLayerListCustomEvent<__esri.CatalogLayerListTriggerActionEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItems](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) representing [catalogItems](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#catalogItems) selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CatalogLayerList.html#selectedItems)
         */
        "selectedItems"?: Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode"?: "none" | "single" | "multiple" | "single-persist";
        "showCloseButton"?: boolean | undefined;
        "showCollapseButton"?: boolean | undefined;
        "showErrors"?: boolean | undefined;
        "showFilter"?: boolean | undefined;
        "showHeading"?: boolean | undefined;
        "showTemporaryLayerIndicators"?: boolean | undefined;
        "state"?: "ready" | "disabled" | "loading";
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance"?: "default" | "checkbox";
    }
    interface ArcgisCompass {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "icon"?: string;
        "label"?: Nil | string;
        "onArcgisPropertyChange"?: (event: ArcgisCompassCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisCompassCustomEvent<never>) => void;
        "orientation"?: Orientation;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "rotation" | "disabled" | "compass";
    }
    interface ArcgisCoordinateConversion {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * A [Collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) containing every [Conversion](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-support-Conversion.html) that the widget is currently displaying.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#conversions)
         */
        "conversions"?: Collection<Conversion>;
        "currentLocation"?: Point;
        /**
          * A [Collection](https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html) containing every [Format](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion-support-Format.html) that the widget is capable of displaying.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#formats)
         */
        "formats"?: Collection<Format>;
        /**
          * Indicates the heading level to use for the coordinate input and coordinate settings headings.
         */
        "headingLevel"?: number;
        "hideCaptureButton"?: boolean | undefined;
        "hideEditButton"?: boolean | undefined;
        "hideExpandButton"?: boolean | undefined;
        "hideSettingsButton"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * This symbol is used to visualize the location currently described by the widget when `capture` mode is active.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#locationSymbol)
         */
        "locationSymbol"?: SimpleMarkerSymbol | PictureMarkerSymbol;
        /**
          * Describes the current mode of the widget.
         */
        "mode"?: "live" | "capture";
        "multipleConversionsDisabled"?: boolean;
        "onArcgisPropertyChange"?: (event: ArcgisCoordinateConversionCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisCoordinateConversionCustomEvent<never>) => void;
        /**
          * Determines whether the widget should expand up or down.
         */
        "orientation"?: "auto" | "expand-up" | "expand-down";
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "loading";
        "storageDisabled"?: boolean;
        /**
          * This property determines whether sessionStorage or localStorage will be used to store widget state.
         */
        "storageType"?: "local" | "session";
    }
    interface ArcgisDaylight {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "currentSeason"?: "spring" | "summer" | "fall" | "winter";
        /**
          * Controls whether the widget displays a date or a season picker.
         */
        "dateOrSeason"?: "date" | "season";
        "dayPlaying"?: boolean;
        /**
          * Indicates the heading level to use for the widget title.
         */
        "headingLevel"?: number;
        "hideDatePicker"?: boolean | undefined;
        "hideHeader"?: boolean | undefined;
        "hidePlayButtons"?: boolean | undefined;
        "hideShadowsToggle"?: boolean | undefined;
        "hideSunLightingToggle"?: boolean | undefined;
        "hideTimezone"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisReady"?: (event: ArcgisDaylightCustomEvent<never>) => void;
        /**
          * Controls the speed of the daytime and date animation.
         */
        "playSpeedMultiplier"?: number;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * Sets steps, or intervals, on the time slider to restrict the times of the day that can be selected when dragging the thumb.
         */
        "timeSliderSteps"?: number | number[];
        "yearPlaying"?: boolean;
    }
    interface ArcgisDirectionalPad {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates whether interaction is allowed on the widget.
         */
        "disabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisDirectionalPadCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisDirectionalPadCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "moving";
        /**
          * Determines the size of directional pad buttons and the slider.
         */
        "visualScale"?: "s" | "m" | "l";
    }
    interface ArcgisDirections {
        /**
          * An authorization string used to access a resource or service.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#apiKey)
         */
        "apiKey"?: string;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates the heading level to use for the origin and destination addresses (i.e.
         */
        "headingLevel"?: number;
        "hideLayerDetails"?: boolean | undefined;
        "hideSaveAsButton"?: boolean | undefined;
        "hideSaveButton"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "lastRoute"?: DirectionsLastRoute;
        /**
          * The [RouteLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-RouteLayer.html) associated with the Directions widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#layer)
         */
        "layer"?: RouteLayer;
        /**
          * The maximum number of stops allowed for routing.
         */
        "maxStops"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisDirectionsCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisDirectionsCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "routeLayerItemId"?: Nil | string;
        /**
          * Controls the default properties used when [searching](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html).
         */
        "searchProperties"?: DirectionsSearchProperties;
        "state"?: "ready" | "disabled";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Directions.html#unit)
         */
        "unit"?: "imperial" | "metric" | "millimeters" | "centimeters" | "decimeters" | "meters" | "kilometers" | "inches" | "feet" | "yards" | "miles" | "nautical-miles";
        "useDefaultRouteLayer"?: boolean;
    }
    interface ArcgisDirectlineMeasurement3d {
        /**
          * The direct line measurement analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#analysis)
         */
        "analysis"?: DirectLineMeasurementAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisDirectlineMeasurement3dCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisDirectlineMeasurement3dCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#unit)
         */
        "unit"?: MeasurementSystem | LengthUnit;
        /**
          * List of unit systems (imperial, metric) and specific units for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DirectLineMeasurement3D.html#unitOptions)
         */
        "unitOptions"?: SystemOrLengthUnit[];
    }
    interface ArcgisDistanceMeasurement2d {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisDistanceMeasurement2dCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisDistanceMeasurement2dCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "measuring" | "measured";
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D.html#unit)
         */
        "unit"?: MeasurementSystem | LengthUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-DistanceMeasurement2D.html#unitOptions)
         */
        "unitOptions"?: SystemOrLengthUnit[];
    }
    interface ArcgisEditor {
        "activeWorkflow"?: CreateFeaturesWorkflow | UpdateWorkflow;
        /**
          * An array of string values which specifies what end users are allowed to edit.
         */
        "allowedWorkflows"?: "update" | "create-features";
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates the heading level to use for title of the widget.
         */
        "headingLevel"?: number;
        "hideCreateFeaturesSection"?: boolean | undefined;
        "hideEditFeaturesSection"?: boolean | undefined;
        "hideLabelsToggle"?: boolean | undefined;
        "hideSnappingControlsElementsEnabledToggle"?: boolean | undefined;
        "hideSnappingControlsElementsFeatureEnabledToggle"?: boolean | undefined;
        "hideSnappingControlsElementsLayerList"?: boolean | undefined;
        "hideSnappingControlsElementsSelfEnabledToggle"?: boolean | undefined;
        "hideTooltipsToggle"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Options to configure the sketch labels shown next to each segment of the geometry being created or updated.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#labelOptions)
         */
        "labelOptions"?: SketchLabelOptions;
        /**
          * An array of editing configurations for individual layers.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#layerInfos)
         */
        "layerInfos"?: EditorLayerInfo[];
        "onArcgisPropertyChange"?: (event: ArcgisEditorCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisEditorCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "showSnappingControlsElementsHeader"?: boolean | undefined;
        /**
          * The [SnappingOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html) for editing.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#snappingOptions)
         */
        "snappingOptions"?: SnappingOptions;
        "state"?: "ready" | "disabled" | "adding-attachment" | "awaiting-feature-creation-info" | "awaiting-feature-to-create" | "awaiting-feature-to-update" | "awaiting-update-feature-candidate" | "creating-features" | "editing-attributes" | "editing-attachment" | "editing-existing-feature" | "editing-new-feature";
        /**
          * This property allows customization of supporting Editor widgets and their default behavior.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#supportingWidgetDefaults)
         */
        "supportingWidgetDefaults"?: SupportingWidgetDefaults;
        /**
          * Options to configure the tooltip shown next to the cursor when creating or updating graphics.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html#tooltipOptions)
         */
        "tooltipOptions"?: SketchTooltipOptions;
    }
    interface ArcgisElevationProfile {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "effectiveUnits"?: EffectiveUnits;
        "hideChart"?: boolean | undefined;
        "hideClearButton"?: boolean | undefined;
        "hideLegend"?: boolean | undefined;
        "hideSelectButton"?: boolean | undefined;
        "hideSettingsButton"?: boolean | undefined;
        "hideSketchButton"?: boolean | undefined;
        "hideUniformChartScalingToggle"?: boolean | undefined;
        "hideUnitSelector"?: boolean | undefined;
        "highlightEnabled"?: boolean;
        "hoveredChartPosition"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The input line graphic along which elevation will be queried in order to generate an elevation profile.
         */
        "input"?: Graphic;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisElevationProfileCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisElevationProfileCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        /**
          * Collection of elevation profile lines which are to be generated and displayed in the widget's chart.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#profiles)
         */
        "profiles"?: Collection<ElevationProfileLineGround | ElevationProfileLineInput | ElevationProfileLineQuery | ElevationProfileLineView>;
        "progress"?: number;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "selected" | "creating" | "created" | "selecting";
        "uniformChartScaling"?: boolean;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the elevation and distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#unit)
         */
        "unit"?: MeasurementSystem | LengthUnit;
        /**
          * List of available units and unit systems (imperial, metric) for displaying the elevation and distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ElevationProfile.html#unitOptions)
         */
        "unitOptions"?: SystemOrLengthUnit[];
    }
    interface ArcgisExpand {
        /**
          * Automatically collapses the expand widget instance when the view's viewpoint updates.
         */
        "autoCollapse"?: boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * When true, the Expand widget will close after the Escape key is pressed when the keyboard focus is within its content.
         */
        "closeOnEsc"?: boolean | Function;
        /**
          * Calcite icon used to style the Expand button when the [content](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#content) can be collapsed.
         */
        "collapseIcon"?: string;
        /**
          * Tooltip to display to indicate Expand widget can be collapsed.
         */
        "collapseTooltip"?: string;
        /**
          * Calcite icon used when the widget is collapsed.
         */
        "expandIcon"?: string;
        /**
          * Tooltip to display to indicate Expand widget can be expanded.
         */
        "expandTooltip"?: string;
        /**
          * Indicates whether the widget is currently expanded or not.
         */
        "expanded"?: boolean;
        /**
          * This value associates two or more Expand widget instances with each other, allowing one instance to auto collapse when another instance in the same group is expanded.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#group)
         */
        "group"?: string;
        /**
          * A number to display at the corner of the widget to indicate the number of, for example, open issues or unread notices.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html#iconNumber)
         */
        "iconNumber"?: number;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * The mode in which the widget displays.
         */
        "mode"?: "auto" | "floating" | "drawer";
        "onArcgisReady"?: (event: ArcgisExpandCustomEvent<never>) => void;
        /**
          * The placement used by the [calcite popover](https://developers.arcgis.com/calcite-design-system/components/popover/) when the widget is expanded.
         */
        "placement"?: "left" | "right" | "top" | "bottom" | "auto" | "auto-start" | "auto-end" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "leading-start" | "leading" | "leading-end" | "trailing-end" | "trailing" | "trailing-start";
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
    }
    interface ArcgisFeature {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Enables automatic creation of a popup template for layers that have popups enabled but no popupTemplate defined.
         */
        "defaultPopupTemplateEnabled"?: boolean;
        /**
          * The [Graphic](https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html) used to represent the feature.
         */
        "graphic"?: Graphic;
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#title) of the feature widget.
         */
        "headingLevel"?: number;
        "hideContentAttachments"?: boolean | undefined;
        "hideContentExpression"?: boolean | undefined;
        "hideContentFields"?: boolean | undefined;
        "hideContentMedia"?: boolean | undefined;
        "hideContentText"?: boolean | undefined;
        "hideLastEditInfo"?: boolean | undefined;
        "hideTitle"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "location"?: Point;
        /**
          * A map is required when the input [graphic](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html#graphic) has a popupTemplate that contains [Arcade](https://developers.arcgis.com/arcade) expressions in [ExpressionInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html) or [ExpressionContent](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html) that may use the `$map` profile variable to access data from layers within a map.
         */
        "map"?: Map;
        "onArcgisPropertyChange"?: (event: ArcgisFeatureCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFeatureCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The spatial reference used for [Arcade](https://developers.arcgis.com/arcade) operations.
         */
        "spatialReference"?: SpatialReference;
        "state"?: "ready" | "error" | "disabled" | "loading";
    }
    interface ArcgisFeatureForm {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The associated feature containing the editable attributes.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#feature)
         */
        "feature"?: Graphic;
        /**
          * The associated [template](https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html) used for the form.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#formTemplate)
         */
        "formTemplate"?: FormTemplate;
        /**
          * Defines how groups will be displayed to the user.
         */
        "groupDisplay"?: "all" | "sequential";
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#title) of the form.
         */
        "headingLevel"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Layer containing the editable feature attributes.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#layer)
         */
        "layer"?: FeatureLayer | SubtypeSublayer;
        "onArcgisPropertyChange"?: (event: ArcgisFeatureFormCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFeatureFormCustomEvent<never>) => void;
        "onArcgisSubmit"?: (event: ArcgisFeatureFormCustomEvent<__esri.FeatureFormSubmitEvent>) => void;
        "onArcgisValueChange"?: (event: ArcgisFeatureFormCustomEvent<__esri.FeatureFormValueChangeEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled";
        /**
          * The timezone displayed within the form.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html#timeZone)
         */
        "timeZone"?: string;
    }
    interface ArcgisFeatureTable {
        "activeFilters"?: Collection<GeometryFilter | SelectionFilter>;
        "activeSortOrders"?: ColumnSortOrder[];
        /**
          * Indicates whether to display the `Attachments` field in the table.
         */
        "attachmentsEnabled"?: boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates whether the table should automatically refresh when the underlying data changes.
         */
        "autoRefreshEnabled"?: boolean;
        /**
          * Indicates whether the table should allow reordering of columns.
         */
        "columnReorderingEnabled"?: boolean;
        "columns"?: Collection<Column | FieldColumn | GroupColumn | ActionColumn | AttachmentsColumn | RelationshipColumn>;
        /**
          * Text displayed in the table header, under the title.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#description)
         */
        "description"?: string | Function;
        /**
          * Indicates whether [editing](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#editing-in-featuretable) is enabled on the data within the feature table.
         */
        "editingEnabled"?: boolean;
        /**
          * Indicates whether the table only displays rows that are considered selected.
         */
        "filterBySelectionEnabled"?: boolean;
        /**
          * Set this property to filter the features displayed in the table.
         */
        "filterGeometry"?: Geometry;
        /**
          * A collection of string values which indicate [field.names](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html) that should be hidden within the table.
         */
        "hiddenFields"?: Collection<string>;
        "hideColumnMenus"?: boolean | undefined;
        "hideHeader"?: boolean | undefined;
        "hideMenu"?: boolean | undefined;
        "hideMenuItemsClearSelection"?: boolean | undefined;
        "hideMenuItemsDeleteSelection"?: boolean | undefined;
        "hideMenuItemsRefreshData"?: boolean | undefined;
        "hideMenuItemsSelectedRecordsShowAllToggle"?: boolean | undefined;
        "hideMenuItemsToggleColumns"?: boolean | undefined;
        "hideMenuItemsZoomToSelection"?: boolean | undefined;
        "hideSelectionColumn"?: boolean | undefined;
        /**
          * Indicates whether to highlight the associated feature when a row is selected by checking the corresponding checkbox.
         */
        "highlightEnabled"?: boolean;
        /**
          * This property accepts and returns a collection of feature object IDs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#highlightIds)
         */
        "highlightIds"?: Collection<string | number>;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        "itemId"?: Nil | string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * The associated [CatalogFootprintLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-catalog-CatalogFootprintLayer.html), [CSVLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html), [FeatureLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html), [GeoJSONLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html), [ImageryLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html), [KnowledgeGraphSublayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-knowledgeGraph-KnowledgeGraphSublayer.html), [SceneLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html), or [WFSLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WFSLayer.html) containing the fields and attributes to display within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#layer)
         */
        "layer"?: FeatureLayer | SceneLayer | GeoJSONLayer | CatalogFootprintLayer | CSVLayer | ImageryLayer | KnowledgeGraphSublayer | WFSLayer;
        /**
          * Set this object to customize the feature table's menu content.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#menuConfig)
         */
        "menuConfig"?: TableMenuConfig;
        /**
          * Indicates whether sorting multiple columns is supported within the table.
         */
        "multiSortEnabled"?: boolean;
        /**
          * This property accepts and returns a collection of feature object IDs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#objectIds)
         */
        "objectIds"?: Collection<string | number>;
        "onArcgisPropertyChange"?: (event: ArcgisFeatureTableCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFeatureTableCustomEvent<never>) => void;
        "onArcgisSelectionChange"?: (event: ArcgisFeatureTableCustomEvent<__esri.CollectionChangeEvent<number | string>>) => void;
        /**
          * Controls what field attribute data is requested by the table's store.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#outFields)
         */
        "outFields"?: string[];
        /**
          * Number of pages of features to be displayed in the table, based on the total number of features and configured page size.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#pageCount)
         */
        "pageCount"?: number;
        /**
          * Represents the index of the page of feature currently being displayed.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#pageIndex)
         */
        "pageIndex"?: number;
        /**
          * The default page size used when displaying features within the table.
         */
        "pageSize"?: number;
        /**
          * Controls whether the table should only display a single page of features at any time.
         */
        "paginationEnabled"?: boolean;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * Indicates whether to display any related records associated with rows within the table.
         */
        "relatedRecordsEnabled"?: boolean;
        /**
          * Indicates whether to fetch geometries for the corresponding features displayed in the table.
         */
        "returnGeometryEnabled"?: boolean;
        /**
          * Indicates whether geometries fetched for the corresponding features contain M values, if supported.
         */
        "returnMEnabled"?: boolean;
        /**
          * Indicates whether geometries fetched for the corresponding features contain Z values, if supported.
         */
        "returnZEnabled"?: boolean;
        "state"?: "ready" | "error" | "disabled" | "loaded" | "loading";
        /**
          * The associated [template](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-TableTemplate.html) used for the feature table.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#tableTemplate)
         */
        "tableTemplate"?: TableTemplate;
        /**
          * Dates and times displayed in the widget will be in terms of this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#timeZone)
         */
        "timeZone"?: string;
        "url"?: Nil | string;
    }
    interface ArcgisFeatureTemplates {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates whether the list of available feature [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html) should scroll within its containing element.
         */
        "enableListScroll"?: boolean;
        /**
          * [Function](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#FilterFunction) can be defined to help filter [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html) within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#filterFunction)
         */
        "filterFunction"?: (filterName: any) => boolean;
        /**
          * Text used to filter items.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#filterText)
         */
        "filterText"?: string;
        /**
          * It is possible to group [template items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates-TemplateItem.html).
         */
        "groupBy"?: string | GroupByFunction;
        /**
          * Indicates the heading level to use for the labels of grouped feature templates.
         */
        "headingLevel"?: number;
        "hideFilter"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * An array of [FeatureLayers](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html) to display within the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#layers)
         */
        "layers"?: (FeatureLayer | SceneLayer | SubtypeGroupLayer | GeoJSONLayer | SubtypeSublayer)[];
        "onArcgisPropertyChange"?: (event: ArcgisFeatureTemplatesCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFeatureTemplatesCustomEvent<never>) => void;
        "onArcgisSelect"?: (event: ArcgisFeatureTemplatesCustomEvent<__esri.FeatureTemplatesSelectEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * Specifies the selection behavior of list items.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTemplates.html#selectionMode)
         */
        "selectionMode"?: "none" | "single";
        "state"?: "ready" | "disabled" | "loading";
    }
    interface ArcgisFeatures {
        "actions"?: Collection<ActionButton | ActionToggle>;
        "active"?: boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "collapsed"?: boolean;
        /**
          * The content of the Features widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#content)
         */
        "content"?: string | HTMLElement | Widget;
        "featureViewModelAbilities"?: Abilities;
        /**
          * An array of features associated with the Features widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#features)
         */
        "features"?: Graphic[];
        "featuresPerPage"?: number;
        "featuresTitle"?: string;
        /**
          * This function provides the ability to override either the [MapView goTo()](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo) or [SceneView goTo()](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo) methods.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride)
         */
        "goToOverride"?: (view: MapView | SceneView, goToParameters: any) => void;
        /**
          * Indicates the heading level to use for the [title](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#title) of the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#headingLevel)
         */
        "headingLevel"?: number;
        "hideActionBar"?: boolean | undefined;
        "hideCloseButton"?: boolean | undefined;
        "hideFeatureNavigation"?: boolean | undefined;
        "hideFlow"?: boolean | undefined;
        "hideHeading"?: boolean | undefined;
        "hideSpinner"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        "includeDefaultActions"?: boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A map is required when the input [features](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#features) have a popupTemplate that contains [Arcade](https://developers.arcgis.com/arcade) expressions in [ExpressionInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html) or [ExpressionContent](https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html) that may use the `$map` profile variable to access data from layers within a map.
         */
        "map"?: Map;
        "onArcgisPropertyChange"?: (event: ArcgisFeaturesCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFeaturesCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisFeaturesCustomEvent<__esri.FeaturesTriggerActionEvent>) => void;
        "position"?: __esri.UIPosition;
        /**
          * An array of pending Promises that have not yet been fulfilled.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#promises)
         */
        "promises"?: Promise<any>[];
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "selectedFeature"?: Graphic;
        /**
          * Index of the feature that is [selected](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#selectedFeature).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#selectedFeatureIndex)
         */
        "selectedFeatureIndex"?: number;
        "showCollapseButton"?: boolean | undefined;
        /**
          * The spatial reference used for [Arcade](https://developers.arcgis.com/arcade) operations.
         */
        "spatialReference"?: SpatialReference;
        "state"?: "ready" | "disabled";
        /**
          * Dates and times displayed in the widget will be displayed in this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html#timeZone)
         */
        "timeZone"?: string;
    }
    interface ArcgisFloorFilter {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The currently selected facility.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#facility)
         */
        "facility"?: string;
        /**
          * Indicates the heading level to use for the headings separating floors in buildings.
         */
        "headingLevel"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * The currently selected floor level.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#level)
         */
        "level"?: string;
        /**
          * Determines if the widget is expanded or collapsed.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#longNames)
         */
        "longNames"?: boolean;
        "onArcgisReady"?: (event: ArcgisFloorFilterCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The currently selected site.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FloorFilter.html#site)
         */
        "site"?: string;
    }
    interface ArcgisFullscreen {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The {@link HTMLElement} to present in fullscreen mode.
         */
        "element"?: HTMLElement;
        /**
          * Icon displayed in the widget's button.
         */
        "icon"?: Nil | string;
        /**
          * The widget's default label.
         */
        "label"?: Nil | string;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        "onArcgisPropertyChange"?: (event: ArcgisFullscreenCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisFullscreenCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "active" | "feature-unsupported";
    }
    interface ArcgisHistogram {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The statistical average of the data in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#average)
         */
        "average"?: number;
        /**
          * Function for styling bars representing histogram bins.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#barCreatedFunction)
         */
        "barCreatedFunction"?: (index: number, element: any) => void;
        /**
          * An array of objects representing each bin in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#bins)
         */
        "bins"?: Bin[];
        /**
          * Function that fires each time a data line is created.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#dataLineCreatedFunction)
         */
        "dataLineCreatedFunction"?: (lineElement: any, labelElement?: any, index?: number | undefined) => void;
        /**
          * When set, renders lines on the histogram that indicate important or meaningful values to the end user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#dataLines)
         */
        "dataLines"?: HistogramDataLines[];
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A function used to format labels on the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#labelFormatFunction)
         */
        "labelFormatFunction"?: (value: number, type?: string | undefined, index?: number | undefined) => string;
        /**
          * Determines the orientation of the Histogram widget.
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * The maximum value or bound of the entire histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#max)
         */
        "max"?: number;
        /**
          * The minimum value or bound of the entire histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Histogram.html#min)
         */
        "min"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisHistogramCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisHistogramCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled";
    }
    interface ArcgisHistogramRangeSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The statistical average of the data in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#average)
         */
        "average"?: number;
        /**
          * Function for styling bars representing histogram bins.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#barCreatedFunction)
         */
        "barCreatedFunction"?: (index: number, element: any) => void;
        /**
          * An array of objects representing each bin in the histogram.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#bins)
         */
        "bins"?: Bin[];
        /**
          * Function that fires each time a data line is created.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#dataLineCreatedFunction)
         */
        "dataLineCreatedFunction"?: (lineElement: any, labelElement?: any, index?: number | undefined) => void;
        /**
          * When set, renders lines on the histogram that indicate important or meaningful values to the end user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#dataLines)
         */
        "dataLines"?: HistogramRangeSliderDataLines[];
        /**
          * Sets the color of the histogram bars that are excluded based on the specified [rangeType](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType).
         */
        "excludedBarColor"?: Color;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * Sets the color of the histogram bars that are included in the specified [rangeType](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType).
         */
        "includedBarColor"?: Color;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A function used to format labels.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#labelFormatFunction)
         */
        "labelFormatFunction"?: (value: number, type?: "average" | "min" | "max" | "tick" | "value" | undefined, index?: number | undefined) => string;
        /**
          * The maximum value or upper bound of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#max)
         */
        "max"?: number;
        /**
          * The minimum value or lower bound of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#min)
         */
        "min"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisHistogramRangeSliderCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisHistogramRangeSliderCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        /**
          * Defines how slider thumb values should be rounded.
         */
        "precision"?: number;
        /**
          * Indicates how the histogram bins should be rendered as the user slides the thumbs.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#rangeType)
         */
        "rangeType"?: "equal" | "not-equal" | "less-than" | "greater-than" | "at-most" | "at-least" | "between" | "not-between";
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * Indicates the standard deviation of the dataset.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#standardDeviation)
         */
        "standardDeviation"?: number;
        /**
          * Indicates the number of standard deviation lines to render on the histogram from the [average].
         */
        "standardDeviationCount"?: number;
        "state"?: "ready" | "disabled";
        /**
          * An array of either one or two numbers representing thumb positions on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-HistogramRangeSlider.html#values)
         */
        "values"?: number[];
    }
    /**
     * Provides a simple widget that switches the esri/views/View to its
     * initial esri/Viewpoint or a previously defined `viewpoint`.
     * @since 4.0
     */
    interface ArcgisHome {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "goToOverride"?: (view: MapView | SceneView, goToParameters: any) => void;
        /**
          * Icon displayed in the widget's button.
          * @see [Calcite Icon Search](https://developers.arcgis.com/calcite-design-system/icons/)
          * @since 4.28
         */
        "icon"?: Nil | string;
        /**
          * The widget's default label.
          * @since 4.7
         */
        "label"?: Nil | string;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        /**
          * Fires when the go() method is called.
          * @example home.addEventListener("go", (event) => {   console.log("updating viewpoint"); });
         */
        "onArcgisGo"?: (event: ArcgisHomeCustomEvent<__esri.HomeViewModelGoEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisHomeCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisHomeCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "going-home";
        /**
          * The esri/Viewpoint, or point of view, to zoom to when going home. The initial value is determined a few different ways:  If no esri/views/View is provided, the value is `null`. If the esri/views/View is ready, but the esri/Viewpoint is not defined, the initial value of the esri/Viewpoint is determined when the esri/views/View became ready. If the esri/views/View is ready and the esri/Viewpoint is defined by the user, the initial viewpoint value is the user-defined esri/Viewpoint.
          * @example // Creates a viewpoint centered on the extent of a polygon geometry let vp = new Viewpoint({   targetGeometry: geom.extent });  // Sets the model's viewpoint to the Viewpoint based on a polygon geometry home.viewpoint = vp;
         */
        "viewpoint"?: Viewpoint;
    }
    interface ArcgisLayerList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The CatalogLayerList that displays a catalog layer's dynamic group layer.
         */
        "catalogLayerList"?: CatalogLayerList;
        /**
          * [CatalogLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CatalogLayer.html) specific properties.
         */
        "catalogOptions"?: LayerListCatalogOptions;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed"?: boolean;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled"?: boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements) is true.
         */
        "filterPlaceholder"?: string;
        /**
          * The value of the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#visibleElements) is true.
         */
        "filterText"?: string;
        /**
          * Indicates the heading level to use for the heading of the widget.
         */
        "headingLevel"?: number;
        "hideCatalogLayerList"?: boolean | undefined;
        "hideFlow"?: boolean | undefined;
        "hideStatusIndicators"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * [KnowledgeGraphLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KnowledgeGraphLayer.html) specific properties.
         */
        "knowledgeGraphOptions"?: LayerListKnowledgeGraphOptions;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * A function that executes each time a [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html) is created.
         */
        "listItemCreatedFunction"?: (event: any) => void;
        /**
          * The minimum number of list items required to enable drag and drop reordering with [dragEnabled](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#dragEnabled).
         */
        "minDragEnabledItems"?: number;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisLayerListCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisLayerListCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisLayerListCustomEvent<__esri.LayerListTriggerActionEvent>) => void;
        /**
          * A collection of ListItems representing operational layers.
         */
        "operationalItems"?: Collection<ListItem>;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html)s representing operational layers selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#selectedItems)
         */
        "selectedItems"?: Collection<ListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode"?: "none" | "single" | "multiple" | "single-persist";
        "showCloseButton"?: boolean | undefined;
        "showCollapseButton"?: boolean | undefined;
        "showErrors"?: boolean | undefined;
        "showFilter"?: boolean | undefined;
        "showHeading"?: boolean | undefined;
        "showTemporaryLayerIndicators"?: boolean | undefined;
        "state"?: "ready" | "disabled" | "loading";
        /**
          * The TableList that displays the tables associated with a KnowledgeGraphLayer.
         */
        "tableList"?: TableList;
        /**
          * Determines the icons used to indicate visibility.
         */
        "visibilityAppearance"?: "default" | "checkbox";
    }
    interface ArcgisLegend {
        /**
          * Collection of [ActiveLayerInfo](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html) objects used by the legend view to display data in the legend.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#activeLayerInfos)
         */
        "activeLayerInfos"?: Collection<ActiveLayerInfo>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates whether to show the [Basemap](https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html) layers in the Legend.
         */
        "basemapLegendVisible"?: boolean;
        /**
          * Indicates the heading level to use for the legend title.
         */
        "headingLevel"?: number;
        /**
          * When `true`, layers will only be shown in the legend if they are visible in the view's extent.
         */
        "hideLayersNotInCurrentView"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Specifies a subset of the layers to display in the legend.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html#layerInfos)
         */
        "layerInfos"?: LegendLayerInfos[];
        "legendStyle"?: string | LegendStyle;
        "onArcgisPropertyChange"?: (event: ArcgisLegendCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisLegendCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * If a layer uses a unique value render, only features that satisfy the layer's [definition expression](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#definitionExpression) will be displayed in the legend when set to true.
         */
        "respectLayerDefinitionExpression"?: boolean;
        "respectLayerVisibilityDisabled"?: boolean;
        "state"?: "ready" | "disabled";
    }
    interface ArcgisLineOfSight {
        /**
          * The line of sight analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LineOfSight.html#analysis)
         */
        "analysis"?: LineOfSightAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisLineOfSightCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisLineOfSightCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "creating" | "created";
    }
    interface ArcgisLocate {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "geolocationOptions"?: any;
        "goToLocationDisabled"?: boolean;
        "graphic"?: Graphic;
        "icon"?: Nil | string;
        "label"?: Nil | string;
        "onArcgisError"?: (event: ArcgisLocateCustomEvent<__esri.LocateViewModelLocateErrorEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisLocateCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisLocateCustomEvent<never>) => void;
        "onArcgisSuccess"?: (event: ArcgisLocateCustomEvent<__esri.LocateLocateEvent>) => void;
        "popupDisabled"?: boolean;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "scale"?: number;
        "state"?: "ready" | "error" | "disabled" | "feature-unsupported" | "locating";
    }
    interface ArcgisMap {
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews"?: Collection<LayerView>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The background color of the MapView. If the view's map changes, the view's `background` is reset to the map's background, even if the user set it previously.
         */
        "background"?: ColorBackground;
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap"?: __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView"?: BasemapView;
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center"?: string | Nil | Point | number[];
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints"?: MapViewConstraints;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent"?: Extent;
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError"?: Error;
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors"?: Collection<string>;
        /**
          * Gamepad input specific configuration settings..
         */
        "gamepad"?: GamepadSettings;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics"?: Collection<Graphic>;
        /**
          * Specifies the surface properties for the map.
         */
        "ground"?: __esri.Ground | string;
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting"?: boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId"?: string | Nil;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews"?: Collection<LayerView>;
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier"?: Magnifier;
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map"?: Map;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating"?: boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation"?: Navigation;
        /**
          * This event is for view related property changes: zoom, scale, center, rotation, extent, camera, viewpoint. This event will also emit if stationary toggles from true to false.
         */
        "onArcgisViewChange"?: (event: ArcgisMapCustomEvent<void>) => void;
        /**
          * Fires after a user clicks on the view.
         */
        "onArcgisViewClick"?: (event: ArcgisMapCustomEvent<__esri.ViewClickEvent>) => void;
        /**
          * Fires after double-clicking on the view.
         */
        "onArcgisViewDoubleClick"?: (event: ArcgisMapCustomEvent<__esri.ViewDoubleClickEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewDrag"?: (event: ArcgisMapCustomEvent<__esri.ViewDragEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewHold"?: (event: ArcgisMapCustomEvent<__esri.ViewHoldEvent>) => void;
        /**
          * Fires right after a user clicks on the view.
         */
        "onArcgisViewImmediateClick"?: (event: ArcgisMapCustomEvent<__esri.ViewImmediateClickEvent>) => void;
        /**
          * Is emitted after two consecutive immediate-click events.
         */
        "onArcgisViewImmediateDoubleClick"?: (event: ArcgisMapCustomEvent<__esri.ViewImmediateDoubleClickEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyDown"?: (event: ArcgisMapCustomEvent<__esri.ViewKeyDownEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyUp"?: (event: ArcgisMapCustomEvent<__esri.ViewKeyUpEvent>) => void;
        /**
          * Fires after each layer in the map has a corresponding LayerView created and rendered in the view.
         */
        "onArcgisViewLayerviewCreate"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewCreateEvent>) => void;
        /**
          * Fires when an error emits during the creation of a LayerView after a layer has been added to the map.
         */
        "onArcgisViewLayerviewCreateError"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewCreateErrorEvent>) => void;
        /**
          * Fires after a LayerView is destroyed and is no longer rendered in the view.
         */
        "onArcgisViewLayerviewDestroy"?: (event: ArcgisMapCustomEvent<__esri.ViewLayerviewDestroyEvent>) => void;
        /**
          * Fires when a wheel button of a pointing device (typically a mouse) is scrolled on the view.
         */
        "onArcgisViewMouseWheel"?: (event: ArcgisMapCustomEvent<__esri.ViewMouseWheelEvent>) => void;
        /**
          * Fires after a mouse button is pressed, or a finger touches the display.
         */
        "onArcgisViewPointerDown"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerDownEvent>) => void;
        /**
          * Fires after a mouse cursor enters the view, or a display touch begins.
         */
        "onArcgisViewPointerEnter"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerEnterEvent>) => void;
        /**
          * Fires after a mouse cursor leaves the view, or a display touch ends.
         */
        "onArcgisViewPointerLeave"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerLeaveEvent>) => void;
        /**
          * Fires after the mouse or a finger on the display moves.
         */
        "onArcgisViewPointerMove"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerMoveEvent>) => void;
        /**
          * Fires after a mouse button is released, or a display touch ends.
         */
        "onArcgisViewPointerUp"?: (event: ArcgisMapCustomEvent<__esri.ViewPointerUpEvent>) => void;
        /**
          * This event is for the `ready` property and will be emitted when the view is ready. This event will also emit if the `map` property is changed.
         */
        "onArcgisViewReadyChange"?: (event: ArcgisMapCustomEvent<void>) => void;
        /**
          * Use the padding property to make the [center](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#center), and [extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#extent), etc.
         */
        "padding"?: ViewPadding;
        /**
          * A [Popup](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html) object that displays general content or attributes from [layers](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers) in the [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#map).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#popup)
         */
        "popup"?: Popup;
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupDisabled"?: boolean;
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready"?: boolean;
        /**
          * Defines which anchor stays still while resizing the browser window. The default, `center`, ensures the view's center point remains constantly visible as the window size changes. The other options allow  the respective portion of the view to remain visible when the window's size is changed.
         */
        "resizeAlign"?: "bottom-left" | "bottom-right" | "top-left" | "top-right" | "center" | "left" | "right" | "top" | "bottom";
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution"?: number;
        /**
          * The clockwise rotation of due north in relation to the top of the view in degrees. The view may be rotated by directly setting the rotation or by using the following mouse event: `Right-click + Drag`. Map rotation may be disabled by setting the `rotationEnabled` property in [constraints](#constraints) to `false`. See the code snippet below for an example of this.
         */
        "rotation"?: number;
        /**
          * Represents the map scale at the center of the view. Setting the scale immediately changes the view. For animating the view, see this component's goTo() method.
         */
        "scale"?: number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference"?: SpatialReference;
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary"?: boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended"?: boolean;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme"?: Theme;
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent"?: TimeExtent;
        /**
          * Defines the time zone of the view. The time zone property determines how dates and times are represented to the user, but the underlying data is unchanged.
         */
        "timeZone"?: string;
        /**
          * toMap() function as a property.
         */
        "toMap"?: ArcGISMapView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen"?: ArcGISMapView["toScreen"];
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating"?: boolean;
        /**
          * Internal view of the component.
         */
        "view"?: __esri.MapView;
        /**
          * Represents the current view as a Viewpoint or point of observation on the view. Setting the viewpoint immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "viewpoint"?: Viewpoint;
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom"?: number;
    }
    interface ArcgisMeasurement {
        /**
          * Specifies the current measurement tool to display.
         */
        "activeTool"?: "area" | "distance" | "direct-line";
        "activeWidget"?: AreaMeasurement2D | AreaMeasurement3D | DirectLineMeasurement3D | DistanceMeasurement2D;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the area values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#areaUnit)
         */
        "areaUnit"?: MeasurementSystem | AreaUnit;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Unit system (imperial, metric) or specific unit used for displaying the distance values.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html#linearUnit)
         */
        "linearUnit"?: MeasurementSystem | LengthUnit;
        "onArcgisPropertyChange"?: (event: ArcgisMeasurementCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisMeasurementCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "measuring" | "measured";
    }
    interface ArcgisNavigationToggle {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Sets the layout of the widget to either `horizontal` or `vertical`.
         */
        "layout"?: "horizontal" | "vertical";
        "onArcgisPropertyChange"?: (event: ArcgisNavigationToggleCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisNavigationToggleCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled";
    }
    interface ArcgisOrientedImageryViewer {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Toggles the visibility of the current footprint polygon associated with the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#currentCoverageVisible)
         */
        "currentCoverageVisible"?: boolean;
        /**
          * When `false`, the view click interaction is enabled for the oriented imagery viewer widget.
         */
        "disabled"?: boolean;
        /**
          * Indicates if the image gallery functionality is available in the widget.
         */
        "galleryOpened"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * Indicates if the image enhancement tool is active.
         */
        "imageEnhancementToolActive"?: boolean;
        "imageGalleryEnabled"?: boolean;
        /**
          * Indicates if the additional footprint polygons are visible for the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#isAdditionalCoverageVisible)
         */
        "isAdditionalCoverageVisible"?: boolean;
        /**
          * Indicates if the additional camera locations are visible for the selected image loaded in the viewer.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#isAdditionalPointSourcesVisible)
         */
        "isAdditionalPointSourcesVisible"?: boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Specifies the current [OrientedImageryLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OrientedImageryLayer.html) to use.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#layer)
         */
        "layer"?: OrientedImageryLayer;
        /**
          * Indicates if the map-image location tool is available in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#mapImageConversionToolState)
         */
        "mapImageConversionToolState"?: boolean;
        /**
          * When `true`, the navigation tool is available in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-OrientedImageryViewer.html#navigationToolActive)
         */
        "navigationToolActive"?: boolean;
        "onArcgisPropertyChange"?: (event: ArcgisOrientedImageryViewerCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisOrientedImageryViewerCustomEvent<never>) => void;
        "orientedImageryLayerItemId"?: Nil | string;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "referencePoint"?: Point;
    }
    interface ArcgisPlacement {
        "onArcgisReady"?: (event: ArcgisPlacementCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
    }
    interface ArcgisPrint {
        /**
          * Specify the print output file format(s) that the user can select based on the options available from the print service.
         */
        "allowedFormats"?: string | string[];
        /**
          * Specify the print output layout(s) that the user can select based on the options available from the print service.
         */
        "allowedLayouts"?: string | string[];
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "exportedLinks"?: Collection<FileLink>;
        /**
          * This option allows passing extra parameters (in addition to [templateOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateOptions)) to the print (export webmap) requests.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#extraParameters)
         */
        "extraParameters"?: any;
        /**
          * Indicates the heading level to use for the "Exported files" text where users can access the exported map printout.
         */
        "headingLevel"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        "includeDefaultTemplatesDisabled"?: boolean;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisComplete"?: (event: ArcgisPrintCustomEvent<__esri.PrintCompleteEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisPrintCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisPrintCustomEvent<never>) => void;
        "onArcgisSubmit"?: (event: ArcgisPrintCustomEvent<__esri.PrintSubmitEvent>) => void;
        /**
          * It is possible to search a specified portal instance's [locator services](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-portal-to-geocode-addresses.htm).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#portal)
         */
        "portal"?: Portal;
        "position"?: __esri.UIPosition;
        /**
          * The URL of the REST endpoint of the Export Web Map Task.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#printServiceUrl)
         */
        "printServiceUrl"?: string;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The initial state of the print area toggle in the Print widget UI.
         */
        "showPrintAreaEnabled"?: boolean;
        "state"?: "ready" | "error" | "disabled" | "initializing";
        /**
          * An object containing an array of `customTextElements` name-value pair objects for each print template in a custom print service.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateCustomTextElements)
         */
        "templateCustomTextElements"?: any[];
        /**
          * Defines the layout template options used by the [Print](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html) widget to generate the print page.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html#templateOptions)
         */
        "templateOptions"?: TemplateOptions;
    }
    interface ArcgisScaleBar {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The style for the scale bar. When `unit` is set to `dual`, the style will always be `line`.
         */
        "barStyle"?: ScaleBarStyle;
        /**
          * Icon displayed in the widget's button.
         */
        "icon"?: Nil | string;
        /**
          * The widget's default label.
         */
        "label"?: Nil | string;
        "onArcgisReady"?: (event: ArcgisScaleBarCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * Units to use for the scale bar. When using `dual`, the scale bar displays both metric and imperial units. When metric, distances will be shown in either kilometers, meters, centimeters, or millimeters depending on the scale. Similarly, imperial units will be shown in either miles, feet, or inches.
         */
        "unit"?: ScaleBarUnit | undefined;
    }
    interface ArcgisScaleRangeSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled"?: boolean;
        "hidePreview"?: boolean | undefined;
        "hideScaleMenusMaxScaleMenu"?: boolean | undefined;
        "hideScaleMenusMinScaleMenu"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * When provided, the initial [minScale](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScale) and [maxScale](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScale) values will match the layer's.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#layer)
         */
        "layer"?: Layer;
        /**
          * The maximum scale of the active scale range.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScale)
         */
        "maxScale"?: number;
        /**
          * The lowest possible maximum scale value on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#maxScaleLimit)
         */
        "maxScaleLimit"?: number;
        /**
          * The minimum scale of the active scale range.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScale)
         */
        "minScale"?: number;
        /**
          * The highest possible minimum scale value on the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleRangeSlider.html#minScaleLimit)
         */
        "minScaleLimit"?: number;
        /**
          * The mode of the widget, indicating which slider thumbs can be adjusted.
         */
        "mode"?: "range" | "max-scale-only" | "min-scale-only";
        "onArcgisPropertyChange"?: (event: ArcgisScaleRangeSliderCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisScaleRangeSliderCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The region that the scale thumbnails will focus on.
         */
        "region"?: "AR" | "IN" | "AT" | "NO" | "ML" | "IE" | "SV" | "PT" | "DE" | "AE" | "AU" | "BE" | "BG" | "BO" | "BR" | "CA" | "CH" | "CI" | "CL" | "CN" | "CO" | "CR" | "CZ" | "DK" | "EE" | "EG" | "ES" | "FI" | "FR" | "GB" | "GL" | "GR" | "GT" | "HK" | "ID" | "IL" | "IQ" | "IS" | "IT" | "JP" | "KE" | "KR" | "KW" | "LI" | "LT" | "LU" | "LV" | "MA" | "MG" | "MO" | "MX" | "MY" | "NI" | "NL" | "NZ" | "PE" | "PL" | "PR" | "RO" | "RU" | "RW" | "SE" | "SG" | "SK" | "SR" | "TH" | "TN" | "TW" | "US" | "VE" | "VI" | "ZA";
        "state"?: "ready" | "disabled";
    }
    interface ArcgisScene {
        /**
          * Collection containing a flat list of all the created LayerViews related to the basemap, operational layers, and group layers in this view.
         */
        "allLayerViews"?: Collection<LayerView>;
        /**
          * Allows the view to be partially or fully transparent when composited with the webpage elements behind it.
         */
        "alphaCompositingEnabled"?: boolean;
        /**
          * Allows for adding analyses directly to the default analyses in the View.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#analyses)
         */
        "analyses"?: Collection<DimensionAnalysis | DirectLineMeasurementAnalysis | AreaMeasurementAnalysis | SliceAnalysis | LineOfSightAnalysis | ViewshedAnalysis>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Specifies a basemap for the map. The basemap is a set of layers that give geographic context to the MapView or SceneView and the other operational layers in the map.
         */
        "basemap"?: __esri.Basemap | string;
        /**
          * Represents the view for a single basemap after it has been added to the map.
         */
        "basemapView"?: BasemapView;
        /**
          * The observation point from which the visible portion (or perspective) of the SceneView is determined.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#camera)
         */
        "camera"?: Camera;
        /**
          * Represents the view's center point; when setting the center, you may pass a esri/geometry/Point instance or a string representing a longitude/latitude pair (`"-100.4593, 36.9014"`). Setting the center immediately changes the current view. For animating the view, see this component's goTo() method.
         */
        "center"?: string | Nil | Point | number[];
        /**
          * *This property only applies to local scenes.* Represents an optional clipping area used to define the bounds or [Extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html) of a local scene.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html#clippingArea)
         */
        "clippingArea"?: Extent;
        /**
          * Specifies constraints to scale, zoom, and rotation that may be applied to the MapView.
         */
        "constraints"?: SceneViewConstraints;
        /**
          * Specifies various properties of the environment's visualization in the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#environment)
         */
        "environment"?: SceneViewEnvironment;
        /**
          * The extent represents the visible portion of a map within the view as an instance of esri/geometry/Extent. Setting the extent immediately changes the view without animation. To animate the view, see this component's goTo() method. When the view is rotated, the extent does not update to include the newly visible portions of the map.
         */
        "extent"?: Extent;
        /**
          * A rejected view indicates a fatal error making it unable to display.
         */
        "fatalError"?: Error;
        /**
          * Applies a display filter on the view for a specific set of floor levels. It can filter the map display on floor-aware layers by zero or more level IDs.
         */
        "floors"?: Collection<string>;
        /**
          * Gamepad input specific configuration settings..
         */
        "gamepad"?: GamepadSettings;
        /**
          * Allows for adding graphics directly to the default graphics in the View. Example: ``` // Adds a graphic to the View graphics.add(pointGraphic); ``` Example: ``` // Removes a graphic from the View graphics.remove(pointGraphic); ```
         */
        "graphics"?: Collection<Graphic>;
        /**
          * Specifies the surface properties for the map.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#ground)
         */
        "ground"?: Ground;
        "groundView"?: GroundView;
        /**
          * Options for configuring the highlight. Use the highlight method on the appropriate esri/views/layers/LayerView to highlight a feature. The layerView's `highlightOptions` will take precedence over the MapView's `highlightOptions` if both properties are set.
         */
        "highlightOptions"?: HighlightOptions;
        /**
          * Indication whether the view is being interacted with (for example when panning or by an interactive tool).
         */
        "interacting"?: boolean;
        /**
          * The ID of a WebMap from ArcGIS Online or ArcGIS Enterprise portal.
         */
        "itemId"?: string | Nil;
        /**
          * A collection containing a hierarchical list of all the created esri/views/layers/LayerView LayerViews of the esri/Map#layers operational layers in the map.
         */
        "layerViews"?: Collection<LayerView>;
        /**
          * The magnifier allows for showing a portion of the view as a magnifier image on top of the view.
         */
        "magnifier"?: Magnifier;
        /**
          * An instance of a esri/Map object to display in the view.
         */
        "map"?: Map;
        /**
          * Indication whether the view is being navigated (for example when panning).
         */
        "navigating"?: boolean;
        /**
          * Options to configure the navigation behavior of the View.
         */
        "navigation"?: Navigation;
        /**
          * This event is for view related property changes: zoom, scale, center, rotation, extent, camera, viewpoint. This event will also emit if stationary toggles from true to false.
         */
        "onArcgisViewChange"?: (event: ArcgisSceneCustomEvent<void>) => void;
        /**
          * Fires after a user clicks on the view.
         */
        "onArcgisViewClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewClickEvent>) => void;
        /**
          * Fires after double-clicking on the view.
         */
        "onArcgisViewDoubleClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewDoubleClickEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewDrag"?: (event: ArcgisSceneCustomEvent<__esri.ViewDragEvent>) => void;
        /**
          * Fires during a pointer drag on the view.
         */
        "onArcgisViewHold"?: (event: ArcgisSceneCustomEvent<__esri.ViewHoldEvent>) => void;
        /**
          * Fires right after a user clicks on the view.
         */
        "onArcgisViewImmediateClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewImmediateClickEvent>) => void;
        /**
          * Is emitted after two consecutive immediate-click events.
         */
        "onArcgisViewImmediateDoubleClick"?: (event: ArcgisSceneCustomEvent<__esri.ViewImmediateDoubleClickEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyDown"?: (event: ArcgisSceneCustomEvent<__esri.ViewKeyDownEvent>) => void;
        /**
          * Fires after a keyboard key is pressed.
         */
        "onArcgisViewKeyUp"?: (event: ArcgisSceneCustomEvent<__esri.ViewKeyUpEvent>) => void;
        /**
          * Fires after each layer in the map has a corresponding LayerView created and rendered in the view.
         */
        "onArcgisViewLayerviewCreate"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewCreateEvent>) => void;
        /**
          * Fires when an error emits during the creation of a LayerView after a layer has been added to the map.
         */
        "onArcgisViewLayerviewCreateError"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewCreateErrorEvent>) => void;
        /**
          * Fires after a LayerView is destroyed and is no longer rendered in the view.
         */
        "onArcgisViewLayerviewDestroy"?: (event: ArcgisSceneCustomEvent<__esri.ViewLayerviewDestroyEvent>) => void;
        /**
          * Fires when a wheel button of a pointing device (typically a mouse) is scrolled on the view.
         */
        "onArcgisViewMouseWheel"?: (event: ArcgisSceneCustomEvent<__esri.ViewMouseWheelEvent>) => void;
        /**
          * Fires after a mouse button is pressed, or a finger touches the display.
         */
        "onArcgisViewPointerDown"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerDownEvent>) => void;
        /**
          * Fires after a mouse cursor enters the view, or a display touch begins.
         */
        "onArcgisViewPointerEnter"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerEnterEvent>) => void;
        /**
          * Fires after a mouse cursor leaves the view, or a display touch ends.
         */
        "onArcgisViewPointerLeave"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerLeaveEvent>) => void;
        /**
          * Fires after the mouse or a finger on the display moves.
         */
        "onArcgisViewPointerMove"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerMoveEvent>) => void;
        /**
          * Fires after a mouse button is released, or a display touch ends.
         */
        "onArcgisViewPointerUp"?: (event: ArcgisSceneCustomEvent<__esri.ViewPointerUpEvent>) => void;
        /**
          * This event is for the `ready` property and will be emitted when the view is ready. This event will also emit if the `map` property is changed.
         */
        "onArcgisViewReadyChange"?: (event: ArcgisSceneCustomEvent<void>) => void;
        /**
          * Use the padding property to make the [center](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#center), and [extent](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#extent), etc.
         */
        "padding"?: ViewPadding;
        /**
          * This property contains performance information in a Scene like global memory usage and additional details for layers about memory consumption and number of features.
         */
        "performanceInfo"?: SceneViewPerformanceInfo;
        /**
          * A [Popup](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html) object that displays general content or attributes from [layers](https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#layers) in the [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#map).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-PopupView.html#popup)
         */
        "popup"?: Popup;
        /**
          * Controls whether the popup opens when users click on the view.
         */
        "popupDisabled"?: boolean;
        /**
          * SceneView can draw scenes in three different quality modes: `high`, `medium` and `low`.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#qualityProfile)
         */
        "qualityProfile"?: "low" | "medium" | "high";
        /**
          * When `true`, this property indicates whether the view successfully satisfied all dependencies, signaling that the following conditions are met.
         */
        "ready"?: boolean;
        /**
          * Represents the current value of one pixel in the unit of the view's spatialReference. The value of resolution is calculated by dividing the view's extent width by its width.
         */
        "resolution"?: number;
        /**
          * Represents an approximation of the map scale at the center of the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#scale)
         */
        "scale"?: number;
        /**
          * The spatial reference of the view. This indicates the projected or geographic coordinate system used to locate geographic features in the map.
         */
        "spatialReference"?: SpatialReference;
        /**
          * Indication whether the view is animating, being navigated with or resizing.
         */
        "stationary"?: boolean;
        /**
          * Indicates if the view is visible on the page.
         */
        "suspended"?: boolean;
        /**
          * This property specifies the base colors used by some widgets and components to render graphics and labels.
         */
        "theme"?: Theme;
        /**
          * The view's time extent. Time-aware layers display their temporal data that falls within the view's time extent. Setting the view's time extent is similar to setting the spatial extent because once the time extent is set, the view updates automatically to conform to the change.
         */
        "timeExtent"?: TimeExtent;
        /**
          * toMap() function as a property.
         */
        "toMap"?: ArcGISSceneView["toMap"];
        /**
          * toScreen() function as a property.
         */
        "toScreen"?: ArcGISSceneView["toScreen"];
        /**
          * Indicates whether the view is being updated by additional data requests to the network, or by processing received data.
         */
        "updating"?: boolean;
        /**
          * Internal view of the component.
         */
        "view"?: __esri.SceneView;
        /**
          * The viewing mode (`local` or `global`).
         */
        "viewingMode"?: "global" | "local";
        /**
          * Represents the current view as a [Viewpoint](https://developers.arcgis.com/javascript/latest/api-reference/esri-Viewpoint.html) or point of observation on the view.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#viewpoint)
         */
        "viewpoint"?: Viewpoint;
        /**
          * Represents the level of detail (LOD) at the center of the view. A zoom level (or scale) is a number that defines how large or small the contents of a map appear in a map view. Zoom level is a number usually between 0 (global view) and 23 (very detailed view) and is used as a shorthand for predetermined scale values. A value of -1 means the view has no LODs. When setting the zoom value, the MapView converts it to the corresponding scale, or interpolates it if the zoom is a fractional number. MapView can display maps with different projections at a full range of scales, and so use the scale property on this component rather than zoom level.  Setting the zoom immediately changes the current view. For animating the view, see this component's goTo() method. Setting this property in conjunction with `center` is a convenient way to set the initial extent of the view.
         */
        "zoom"?: number;
    }
    interface ArcgisSearch {
        /**
          * The current active menu of the Search widget.
         */
        "activeMenu"?: "source" | "none" | "warning" | "suggestion";
        "activeSource"?: LayerSearchSource | LocatorSearchSource;
        /**
          * The selected source's index.
         */
        "activeSourceIndex"?: number;
        /**
          * String value used as a hint for input text when searching on multiple sources.
         */
        "allPlaceholder"?: string;
        "allSources"?: Collection<LayerSearchSource | LocatorSearchSource>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "autoSelectDisabled"?: boolean;
        "defaultSources"?: Collection<LayerSearchSource | LocatorSearchSource>;
        /**
          * When true, the widget is visually withdrawn and cannot be interacted with.
         */
        "disabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        "includeDefaultSourcesDisabled"?: boolean | Function;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "locationDisabled"?: boolean;
        /**
          * The maximum number of results returned by the widget if not specified by the source.
         */
        "maxResults"?: number;
        /**
          * The maximum number of suggestions returned by the widget if not specified by the source.
         */
        "maxSuggestions"?: number;
        /**
          * The minimum number of characters needed for the search if not specified by the source.
         */
        "minSuggestCharacters"?: number;
        "onArcgisBlur"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchBlurEvent>) => void;
        "onArcgisClear"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchClearEvent>) => void;
        "onArcgisComplete"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchCompleteEvent>) => void;
        "onArcgisFocus"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchFocusEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisSearchCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisSearchCustomEvent<never>) => void;
        "onArcgisSelectResult"?: (event: ArcgisSearchCustomEvent<__esri.SearchSelectResultEvent>) => void;
        "onArcgisStart"?: (event: ArcgisSearchCustomEvent<__esri.SearchSearchStartEvent>) => void;
        "onArcgisSuggestComplete"?: (event: ArcgisSearchCustomEvent<__esri.SearchSuggestCompleteEvent>) => void;
        "onArcgisSuggestStart"?: (event: ArcgisSearchCustomEvent<__esri.SearchSuggestStartEvent>) => void;
        "popupDisabled"?: boolean;
        /**
          * A customized [PopupTemplate](https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html) for the selected feature.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#popupTemplate)
         */
        "popupTemplate"?: PopupTemplate;
        /**
          * It is possible to search a specified portal instance's [locator services](http://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-portal-to-geocode-addresses.htm) Use this property to set this [ArcGIS Portal](https://enterprise.arcgis.com/en/portal/) instance to search.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#portal)
         */
        "portal"?: Portal;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "resultGraphic"?: Graphic;
        "resultGraphicDisabled"?: boolean;
        "results"?: any[];
        "searchAllDisabled"?: boolean;
        /**
          * The value of the search box input text string.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#searchTerm)
         */
        "searchTerm"?: string;
        "selectedResult"?: SearchResult;
        /**
          * The Search widget may be used to search features in a [map](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html)/[feature](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html) service feature layer(s), [SceneLayers](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-SceneLayer.html) with an associated feature layer, [BuildingComponentSublayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-buildingSublayers-BuildingComponentSublayer.html) with an associated feature layer, [GeoJSONLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html), [CSVLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html) or [OGCFeatureLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OGCFeatureLayer.html), or [table](https://developers.arcgis.com/javascript/latest/api-reference/esri-webdoc-applicationProperties-SearchTable.html), or geocode locations with a [locator](https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-locator.html).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Search.html#sources)
         */
        "sources"?: Collection<SearchSource>;
        "state"?: "ready" | "disabled" | "loading" | "searching";
        "suggestions"?: SuggestResult[];
        "suggestionsDisabled"?: boolean;
    }
    interface ArcgisShadowCast {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "discreteOptions"?: ShadowCastViewModelDiscreteOptions;
        "durationOptions"?: ShadowCastViewModelDurationOptions;
        "endTimeOfDay"?: number;
        /**
          * Indicates the heading level to use for the titles "Time range" and "Visualization".
         */
        "headingLevel"?: number;
        "hideColorPicker"?: boolean | undefined;
        "hideDatePicker"?: boolean | undefined;
        "hideTimeRangeSlider"?: boolean | undefined;
        "hideTimezone"?: boolean | undefined;
        "hideTooltip"?: boolean | undefined;
        "hideVisualizationOptions"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisShadowCastCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisShadowCastCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "startTimeOfDay"?: number;
        "state"?: "ready" | "disabled";
        "thresholdOptions"?: ShadowCastViewModelThresholdOptions;
        "utcOffset"?: number;
        "visualizationType"?: "threshold" | "duration" | "discrete";
    }
    interface ArcgisSketch {
        "activeTool"?: "circle" | "polygon" | "polyline" | "point" | "rectangle" | "move" | "reshape" | "transform" | "rectangle-selection" | "lasso-selection";
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Property controlling the visibility and order of create tool buttons.
         */
        "availableCreateTools"?: string[];
        "createGraphic"?: Graphic;
        /**
          * Defines the default behavior once the [create](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#create) operation is completed.
         */
        "creationMode"?: "single" | "update" | "continuous";
        /**
          * Default create options set for the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#defaultCreateOptions)
         */
        "defaultCreateOptions"?: SketchDefaultCreateOptions;
        /**
          * By default, sketch will auto-create a new graphics layer if none was provided. Set this prop to true to disable this behavior.
         */
        "defaultGraphicsLayerDisabled"?: boolean;
        /**
          * Default update options set for the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#defaultUpdateOptions)
         */
        "defaultUpdateOptions"?: SketchDefaultUpdateOptions;
        "hideCreateToolsCircle"?: boolean | undefined;
        "hideCreateToolsPoint"?: boolean | undefined;
        "hideCreateToolsPolygon"?: boolean | undefined;
        "hideCreateToolsPolyline"?: boolean | undefined;
        "hideCreateToolsRectangle"?: boolean | undefined;
        "hideDuplicateButton"?: boolean | undefined;
        "hideLabelsToggle"?: boolean | undefined;
        "hideSelectionToolsLassoSelection"?: boolean | undefined;
        "hideSelectionToolsRectangleSelection"?: boolean | undefined;
        "hideSettingsMenu"?: boolean | undefined;
        "hideSnappingControls"?: boolean | undefined;
        "hideSnappingControlsElementsEnabledToggle"?: boolean | undefined;
        "hideSnappingControlsElementsFeatureEnabledToggle"?: boolean | undefined;
        "hideSnappingControlsElementsLayerList"?: boolean | undefined;
        "hideSnappingControlsElementsSelfEnabledToggle"?: boolean | undefined;
        "hideTooltipsToggle"?: boolean | undefined;
        "hideUndoRedoMenu"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Options to configure the sketch labels shown next to each segment of the geometry being created or updated.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#labelOptions)
         */
        "labelOptions"?: SketchLabelOptions;
        /**
          * The [GraphicsLayer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GraphicsLayer.html) associated with the Sketch widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#layer)
         */
        "layer"?: GraphicsLayer;
        /**
          * Determines the layout/orientation of the Sketch widget.
         */
        "layout"?: "horizontal" | "vertical";
        "onArcgisCreate"?: (event: ArcgisSketchCustomEvent<__esri.SketchCreateEvent>) => void;
        "onArcgisDelete"?: (event: ArcgisSketchCustomEvent<__esri.SketchDeleteEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisSketchCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisSketchCustomEvent<never>) => void;
        "onArcgisRedo"?: (event: ArcgisSketchCustomEvent<__esri.SketchRedoEvent>) => void;
        "onArcgisUndo"?: (event: ArcgisSketchCustomEvent<__esri.SketchUndoEvent>) => void;
        "onArcgisUpdate"?: (event: ArcgisSketchCustomEvent<__esri.SketchUpdateEvent>) => void;
        "pointSymbol"?: SimpleMarkerSymbol | PointSymbol3D | TextSymbol | CIMSymbol | WebStyleSymbol;
        "polygonSymbol"?: CIMSymbol | SimpleFillSymbol | PolygonSymbol3D;
        "polylineSymbol"?: SimpleLineSymbol | CIMSymbol | LineSymbol3D;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "showSnappingControlsElementsHeader"?: boolean | undefined;
        /**
          * The [SnappingOptions](https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html) for sketching.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#snappingOptions)
         */
        "snappingOptions"?: SnappingOptions;
        "state"?: "ready" | "disabled" | "active";
        /**
          * Options to configure the tooltip shown next to the cursor when creating or updating graphics.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Sketch.html#tooltipOptions)
         */
        "tooltipOptions"?: SketchTooltipOptions;
        "updateGraphics"?: Collection<Graphic>;
    }
    interface ArcgisSlice {
        /**
          * The slice analysis object being created or modified by the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slice.html#analysis)
         */
        "analysis"?: SliceAnalysis;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "excludeGroundSurface"?: boolean;
        "excludedLayers"?: Collection<Layer | BuildingComponentSublayer>;
        /**
          * Indicates the heading level to use for the "Excluded layers" heading.
         */
        "headingLevel"?: number;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisSliceCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisSliceCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "shape"?: SlicePlane;
        "state"?: "ready" | "disabled" | "slicing" | "sliced";
        "tiltEnabled"?: boolean;
    }
    interface ArcgisSlider {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates if the user can drag the segment between thumbs to update thumb positions.
         */
        "draggableSegmentsEnabled"?: boolean;
        /**
          * When set, the user is restricted from moving slider thumbs to positions higher than this value.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#effectiveMax)
         */
        "effectiveMax"?: number;
        /**
          * When set, the user is restricted from moving slider thumbs to positions less than this value.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#effectiveMin)
         */
        "effectiveMin"?: number;
        "effectiveSegmentElements"?: Collection<HTMLElement>;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        "labelElements"?: Collection<HTMLElement>;
        /**
          * Indicates whether to enable editing input values via keyboard input when the user clicks a label.
         */
        "labelInputsEnabled"?: boolean;
        "labels"?: string[];
        /**
          * Determines the layout/orientation of the Slider widget.
         */
        "layout"?: "horizontal" | "vertical" | "horizontal-reversed" | "vertical-reversed";
        /**
          * The maximum possible data/thumb value of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#max)
         */
        "max"?: number;
        "maxLabelElement"?: HTMLElement;
        /**
          * The minimum possible data/thumb value of the slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#min)
         */
        "min"?: number;
        "minLabelElement"?: HTMLElement;
        "onArcgisMaxChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderMaxChangeEvent>) => void;
        "onArcgisMaxClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderMaxClickEvent>) => void;
        "onArcgisMinChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderMinChangeEvent>) => void;
        "onArcgisMinClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderMinClickEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisSliderCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisSliderCustomEvent<never>) => void;
        "onArcgisSegmentClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderSegmentClickEvent>) => void;
        "onArcgisSegmentDrag"?: (event: ArcgisSliderCustomEvent<__esri.SliderSegmentDragEvent>) => void;
        "onArcgisThumbChange"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbChangeEvent>) => void;
        "onArcgisThumbClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbClickEvent>) => void;
        "onArcgisThumbDrag"?: (event: ArcgisSliderCustomEvent<__esri.SliderThumbDragEvent>) => void;
        "onArcgisTickClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderTickClickEvent>) => void;
        "onArcgisTrackClick"?: (event: ArcgisSliderCustomEvent<__esri.SliderTrackClickEvent>) => void;
        "position"?: __esri.UIPosition;
        /**
          * Defines how slider thumb values should be rounded.
         */
        "precision"?: number;
        /**
          * Indicates whether to enable editing range values via keyboard input when the user clicks a [min](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#min) or [max](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#max) label.
         */
        "rangeLabelInputsEnabled"?: boolean;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "segmentElements"?: Collection<HTMLElement>;
        /**
          * Indicates if the closest thumb will snap to the clicked location on the track.
         */
        "snapOnClickEnabled"?: boolean;
        "state"?: "ready" | "disabled" | "editing" | "dragging";
        "steps"?: string | number[];
        /**
          * When `true`, all segments will sync together in updating thumb values when the user drags any segment.
         */
        "syncedSegmentsEnabled"?: boolean;
        "thumbElements"?: Collection<HTMLElement>;
        /**
          * When `false`, the user can freely move any slider thumb to any position along the track.
         */
        "thumbsConstrained"?: boolean;
        /**
          * When set, renders ticks along the slider track.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#tickConfigs)
         */
        "tickConfigs"?: TickConfig[];
        "tickElements"?: Collection<Collection<TickElementGroup>>;
        /**
          * The HTML Element node representing the slider track.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#trackElement)
         */
        "trackElement"?: HTMLElement;
        "values"?: string | number[];
    }
    interface ArcgisSwipe {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * The direction the Swipe widget moves across the view.
         */
        "direction"?: "horizontal" | "vertical";
        /**
          * The text that shows in a tooltip when hovering over the handle of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#dragLabel)
         */
        "dragLabel"?: string;
        /**
          * A collection of [Layer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html)s that will show on the left or top side of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#leadingLayers)
         */
        "leadingLayers"?: Collection<Layer>;
        "onArcgisPropertyChange"?: (event: ArcgisSwipeCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisSwipeCustomEvent<never>) => void;
        "state"?: "ready" | "disabled";
        "swipePosition"?: number;
        /**
          * A collection of [Layer](https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html)s that will show on the right or bottom side of the Swipe widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#trailingLayers)
         */
        "trailingLayers"?: Collection<Layer>;
    }
    interface ArcgisTableList {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates whether the widget is collapsed.
         */
        "collapsed"?: boolean;
        /**
          * Indicates whether [list items](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html) may be reordered within the list by dragging and dropping.
         */
        "dragEnabled"?: boolean;
        /**
          * Placeholder text used in the filter input if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#visibleElements) is true.
         */
        "filterPlaceholder"?: string;
        /**
          * The value of the filter input text string if [visibleElements.filter](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#visibleElements) is true.
         */
        "filterText"?: string;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Specifies a function that accesses each [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html).  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#listItemCreatedFunction)
         */
        "listItemCreatedFunction"?: (event: any) => void;
        /**
          * The minimum number of list items required to enable drag and drop reordering with [dragEnabled](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#dragEnabled).
         */
        "minDragEnabledItems"?: number;
        /**
          * The minimum number of list items required to display the visibleElements.filter input box.
         */
        "minFilterItems"?: number;
        "onArcgisPropertyChange"?: (event: ArcgisTableListCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisTableListCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisTableListCustomEvent<__esri.TableListTriggerActionEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * A collection of selected [ListItem](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList-ListItem.html)s representing table list items selected by the user.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TableList.html#selectedItems)
         */
        "selectedItems"?: Collection<TableListListItem>;
        /**
          * Specifies the selection mode.
         */
        "selectionMode"?: "none" | "single" | "multiple" | "single-persist";
        "state"?: "ready" | "disabled" | "loading";
        /**
          * The collection of table ListItems displayed within the component.
         */
        "tableItems"?: Collection<TableListListItem>;
        "visibleElementsCloseButton"?: boolean;
        "visibleElementsCollapseButton"?: boolean;
        "visibleElementsErrors"?: boolean;
        "visibleElementsFilter"?: boolean;
        "visibleElementsFlow"?: boolean;
        "visibleElementsHeading"?: boolean;
        "visibleElementsStatusIndicators"?: boolean;
        "visibleElementsTemporaryTableIndicators"?: boolean;
    }
    interface ArcgisTimeSlider {
        /**
          * Defines actions that will appear in a menu when the user clicks the ellipsis button ![timeSlider-actions-menu](https://developers.arcgis.com/javascript/latest/assets/img/apiref/widgets/timeslider/ellipsis.png) in the widget.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#actions)
         */
        "actions"?: Collection<Action>;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * When `true`, sets the widget to a disabled state so the user cannot interact with it.
         */
        "disabled"?: boolean;
        "effectiveStops"?: Date[];
        /**
          * The temporal extent of the entire slider.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#fullTimeExtent)
         */
        "fullTimeExtent"?: TimeExtent;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Determines the layout used by the TimeSlider widget.
         */
        "layout"?: "auto" | "compact" | "wide";
        /**
          * When `true`, the time slider will play its animation in a loop.
         */
        "loop"?: boolean;
        /**
          * The time slider mode.
         */
        "mode"?: "instant" | "time-window" | "cumulative-from-start" | "cumulative-from-end";
        "onArcgisPropertyChange"?: (event: ArcgisTimeSliderCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisTimeSliderCustomEvent<never>) => void;
        "onArcgisTriggerAction"?: (event: ArcgisTimeSliderCustomEvent<__esri.TimeSliderTriggerActionEvent>) => void;
        /**
          * The time (in milliseconds) between animation steps.
         */
        "playRate"?: number;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "playing" | "disabled";
        /**
          * Defines specific locations on the time slider where thumbs will snap to when manipulated.
         */
        "stops"?: StopsByDates | StopsByCount | StopsByInterval;
        /**
          * When set, overrides the default TimeSlider ticks labelling system.
         */
        "tickConfigs"?: TickConfig[];
        /**
          * The current time extent of the time slider.
         */
        "timeExtent"?: TimeExtent;
        /**
          * Shows/hides time in the display.
         */
        "timeVisible"?: boolean;
        /**
          * Dates and times displayed in the widget will be displayed in this time zone.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#timeZone)
         */
        "timeZone"?: string;
    }
    interface ArcgisTrack {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "error"?: any;
        "geolocationOptions"?: any;
        "goToLocationDisabled"?: boolean;
        "graphic"?: Graphic;
        "icon"?: Nil | string;
        "label"?: Nil | string;
        "onArcgisComplete"?: (event: ArcgisTrackCustomEvent<__esri.TrackViewModelTrackEvent>) => void;
        "onArcgisError"?: (event: ArcgisTrackCustomEvent<__esri.TrackViewModelTrackErrorEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisTrackCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisTrackCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "positionFilterFunction"?: Function;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "scale"?: number;
        "state"?: "ready" | "error" | "waiting" | "disabled" | "feature-unsupported" | "tracking";
        "tracking"?: boolean;
    }
    interface ArcgisUtilityNetworkAssociations {
        "autoRefreshAssociationsDisabled"?: boolean;
        "connectivityAssociationsLineSymbol": UtilityNetworkAssociationsWidget["connectivityAssociationsLineSymbol"];
        "includeConnectivityAssociationsDisabled"?: boolean;
        "includeStructuralAttachmentAssociationsDisabled"?: boolean;
        "maxAllowableAssociations"?: number;
        "maxAllowableAssociationsSliderMax": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMax"];
        "maxAllowableAssociationsSliderMin": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderMin"];
        "maxAllowableAssociationsSliderStep": UtilityNetworkAssociationsWidget["maxAllowableAssociationsSliderStep"];
        "onArcgisReady"?: (event: ArcgisUtilityNetworkAssociationsCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "showArrowsConnectivity"?: boolean;
        "showArrowsStructuralAttachment"?: boolean;
        "showAssociationsEnabled"?: boolean;
        "structuralAttachmentAssociationsLineSymbol": UtilityNetworkAssociationsWidget["structuralAttachmentAssociationsLineSymbol"];
        "utilityNetwork"?: UtilityNetworkAssociationsWidget["utilityNetwork"] | undefined;
        "visibleElementsConnectivityAssociationsSettingsArrowsToggle"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsCapSelect"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsColorPicker"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsStylePicker"?: boolean;
        "visibleElementsConnectivityAssociationsSettingsWidthInput"?: boolean;
        "visibleElementsMaxAllowableAssociationsSlider"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsArrowsToggle"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsCapSelect"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsStylePicker"?: boolean;
        "visibleElementsStructuralAttachmentAssociationsSettingsWidthInput"?: boolean;
    }
    interface ArcgisUtilityNetworkTrace {
        "defaultGraphicColor"?: UtilityNetworkTraceWidget["defaultGraphicColor"];
        "disabled"?: boolean;
        "enableResultArea"?: boolean;
        "flags"?: UtilityNetworkTraceWidget["flags"];
        "gdbVersion"?: string;
        "inputSettings"?: UtilityNetworkTraceWidget["inputSettings"];
        "onArcgisAddFlag"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagEvent>) => void;
        "onArcgisAddFlagComplete"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagCompleteEvent>) => void;
        "onArcgisAddFlagError"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddFlagErrorEvent>) => void;
        "onArcgisAddResultArea"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceAddResultAreaEvent>) => void;
        "onArcgisReady"?: (event: ArcgisUtilityNetworkTraceCustomEvent<never>) => void;
        "onArcgisRemoveResultArea"?: (event: ArcgisUtilityNetworkTraceCustomEvent<__esri.UtilityNetworkTraceRemoveResultAreaEvent>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "resultAreaProperties": UtilityNetworkTraceWidget["resultAreaProperties"];
        "selectOnCompleteDisabled"?: boolean;
        "selectedTraces"?: UtilityNetworkTraceWidget["selectedTraces"];
        "showGraphicsOnCompleteDisabled"?: boolean;
        "showSelectionAttributesDisabled"?: boolean;
    }
    interface ArcgisUtilityNetworkValidateTopology {
        "extentToValidate"?: UtilityNetworkValidateTopologyWidget["extentToValidate"];
        "onArcgisReady"?: (event: ArcgisUtilityNetworkValidateTopologyCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "utilityNetwork"?: UtilityNetworkValidateTopologyWidget["utilityNetwork"] | undefined;
    }
    interface ArcgisValuePicker {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Returns `true` if the ValuePicker can be advanced to the next position.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canNext)
         */
        "canNext"?: boolean;
        /**
          * Returns `true` if the ValuePicker can be played.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canPlay)
         */
        "canPlay"?: boolean;
        /**
          * Returns `true` if the ValuePicker can moved to the previous item.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ValuePicker.html#canPrevious)
         */
        "canPrevious"?: boolean;
        /**
          * An optional caption that appears on the ValuePicker widget to give context for the user.
         */
        "caption"?: string;
        /**
          * An optional component for presenting and managing data.
         */
        "component"?: ValuePickerCollection | ValuePickerCombobox | ValuePickerLabel | ValuePickerSlider;
        "hideNextButton"?: boolean | undefined;
        "hidePlayButton"?: boolean | undefined;
        "hidePreviousButton"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        /**
          * The widget's label.  [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Widget.html#label)
         */
        "label"?: string;
        /**
          * Indicates if the widget should be orientated horizontally (default) or vertically.
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * If true, playback will restart when it reaches the end.
         */
        "loop"?: boolean;
        "onArcgisAnimate"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerAnimateEvent>) => void;
        "onArcgisNext"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerNextEvent>) => void;
        "onArcgisPause"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPauseEvent>) => void;
        "onArcgisPlay"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPlayEvent>) => void;
        "onArcgisPrevious"?: (event: ArcgisValuePickerCustomEvent<__esri.ValuePickerPreviousEvent>) => void;
        "onArcgisPropertyChange"?: (event: ArcgisValuePickerCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisValuePickerCustomEvent<never>) => void;
        /**
          * The pause, in milliseconds between playback advancement.
         */
        "playRate"?: number;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        /**
          * The current value of the ValuePicker.
         */
        "values"?: any[] | string[] | number[];
    }
    interface ArcgisVersionManagement {
        "allowEditingDisabled"?: boolean;
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        "closable"?: boolean;
        "icon"?: Nil | string;
        "label"?: string | undefined;
        "mode"?: Nil | string;
        "onArcgisReady"?: (event: ArcgisVersionManagementCustomEvent<never>) => void;
        "onArcgisVersioningStateChanged"?: (event: ArcgisVersionManagementCustomEvent<VersioningStateEvent>) => void;
        "pageSize"?: number;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled" | "executing" | "failed" | "loading";
        "versioningStates"?: Collection<VersioningState>;
        "view"?: MapView;
    }
    interface ArcgisVersionManagementServiceItem {
        "onArcgisFlowItemBack"?: (event: ArcgisVersionManagementServiceItemCustomEvent<void>) => void;
        "onArcgisFlowItemClose"?: (event: ArcgisVersionManagementServiceItemCustomEvent<void>) => void;
        "onArcgisGetVersions"?: (event: ArcgisVersionManagementServiceItemCustomEvent<{
    serviceUrl: string;
  }>) => void;
        "onArcgisManageVersion"?: (event: ArcgisVersionManagementServiceItemCustomEvent<{
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "onArcgisNewVersion"?: (event: ArcgisVersionManagementServiceItemCustomEvent<{
    serviceUrl: string;
  }>) => void;
        "serviceItemElementProps": {
    allowEditing: boolean;
    closable: boolean;
    currentUser: string;
    currentVersionIdentifier: __esri.VersionIdentifier;
    executionError: string | undefined;
    flowElement: HTMLCalciteFlowElement;
    hasAdvEditingUte: boolean;
    heading: string;
    isVersioningApiAvailable: boolean;
    pageSize: number;
    serviceName: string;
    state: string;
    serviceUrl: string;
    strings: typeof T9nStrings;
    versionInfos: __esri.VersionInfo[];
  };
    }
    interface ArcgisVersionManagementVersionItem {
        "onArcgisManageVersion"?: (event: ArcgisVersionManagementVersionItemCustomEvent<{
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "versionItemElementProps": {
    currentUser: string;
    currentVersionIdentifier: __esri.VersionIdentifier;
    hasAdvEditingUte: boolean;
    isVersioningApiAvailable: boolean;
    serviceUrl: string;
    strings: typeof T9nStrings;
    versionInfo: __esri.VersionInfo;
  };
    }
    interface ArcgisVersionManagementVersionList {
        "currentPage"?: number;
        "onArcgisGetVersions"?: (event: ArcgisVersionManagementVersionListCustomEvent<{
    serviceUrl: string;
  }>) => void;
        "onArcgisManageVersion"?: (event: ArcgisVersionManagementVersionListCustomEvent<{
    actionType: string;
    serviceUrl: string;
    versionInfo: __esri.VersionInfo;
  }>) => void;
        "onArcgisNewVersion"?: (event: ArcgisVersionManagementVersionListCustomEvent<{
    serviceUrl: string;
  }>) => void;
        "versionListElementProps": VersionListElementProps;
    }
    interface ArcgisVersionManagementVersionProperties {
        "onArcgisAlterVersion"?: (event: ArcgisVersionManagementVersionPropertiesCustomEvent<{
    alterVersionParameters: __esri.AlterVersionParameters;
  }>) => void;
        "onArcgisCreateVersion"?: (event: ArcgisVersionManagementVersionPropertiesCustomEvent<{
    createVersionParameters: __esri.CreateVersionParameters;
    switchToVersion: boolean;
  }>) => void;
        "onArcgisFlowItemBack"?: (event: ArcgisVersionManagementVersionPropertiesCustomEvent<void>) => void;
        "onArcgisFlowItemClose"?: (event: ArcgisVersionManagementVersionPropertiesCustomEvent<void>) => void;
        "versionPropertiesElementProps": {
    closable: boolean;
    currentUser: string;
    hasAdvEditingUte: boolean;
    serviceUrl: string;
    state: string;
    strings: typeof T9nStrings;
    versionInfo: __esri.VersionInfo | undefined;
  };
    }
    interface ArcgisWeather {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Indicates the heading level to use for the title of the widget.
         */
        "headingLevel"?: number;
        "hideHeader"?: boolean | undefined;
        /**
          * Icon which represents the widget.
         */
        "icon"?: string;
        "label"?: string;
        "onArcgisPropertyChange"?: (event: ArcgisWeatherCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisWeatherCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled";
    }
    interface ArcgisZoom {
        /**
          * If true, the component will not be destroyed automatically when it is disconnected from the document. This is useful when you want to move the component to a different place on the page, or temporary hide it. If this is set, make sure to call the \`destroy\` method when you are done to prevent memory leaks.
         */
        "autoDestroyDisabled"?: boolean;
        /**
          * Icon which represents the widget.
         */
        "icon"?: Nil | string;
        /**
          * The widget's default label.
         */
        "label"?: Nil | string;
        /**
          * Determines the layout/orientation of the Zoom widget.
         */
        "layout"?: Layout;
        /**
          * Overwrite localized strings for this component
         */
        "messageOverrides"?: typeof this.messages._overrides;
        "onArcgisPropertyChange"?: (event: ArcgisZoomCustomEvent<any>) => void;
        "onArcgisReady"?: (event: ArcgisZoomCustomEvent<never>) => void;
        "position"?: __esri.UIPosition;
        "referenceElement"?: ArcgisReferenceElement | Nil | string;
        "state"?: "ready" | "disabled";
    }
    interface IntrinsicElements {
        "arcgis-area-measurement-2d": ArcgisAreaMeasurement2d;
        "arcgis-area-measurement-3d": ArcgisAreaMeasurement3d;
        "arcgis-attachments": ArcgisAttachments;
        "arcgis-basemap-gallery": ArcgisBasemapGallery;
        "arcgis-basemap-layer-list": ArcgisBasemapLayerList;
        "arcgis-basemap-toggle": ArcgisBasemapToggle;
        "arcgis-bookmarks": ArcgisBookmarks;
        "arcgis-building-explorer": ArcgisBuildingExplorer;
        "arcgis-catalog-layer-list": ArcgisCatalogLayerList;
        "arcgis-compass": ArcgisCompass;
        "arcgis-coordinate-conversion": ArcgisCoordinateConversion;
        "arcgis-daylight": ArcgisDaylight;
        "arcgis-directional-pad": ArcgisDirectionalPad;
        "arcgis-directions": ArcgisDirections;
        "arcgis-directline-measurement-3d": ArcgisDirectlineMeasurement3d;
        "arcgis-distance-measurement-2d": ArcgisDistanceMeasurement2d;
        "arcgis-editor": ArcgisEditor;
        "arcgis-elevation-profile": ArcgisElevationProfile;
        "arcgis-expand": ArcgisExpand;
        "arcgis-feature": ArcgisFeature;
        "arcgis-feature-form": ArcgisFeatureForm;
        "arcgis-feature-table": ArcgisFeatureTable;
        "arcgis-feature-templates": ArcgisFeatureTemplates;
        "arcgis-features": ArcgisFeatures;
        "arcgis-floor-filter": ArcgisFloorFilter;
        "arcgis-fullscreen": ArcgisFullscreen;
        "arcgis-histogram": ArcgisHistogram;
        "arcgis-histogram-range-slider": ArcgisHistogramRangeSlider;
        "arcgis-home": ArcgisHome;
        "arcgis-layer-list": ArcgisLayerList;
        "arcgis-legend": ArcgisLegend;
        "arcgis-line-of-sight": ArcgisLineOfSight;
        "arcgis-locate": ArcgisLocate;
        "arcgis-map": ArcgisMap;
        "arcgis-measurement": ArcgisMeasurement;
        "arcgis-navigation-toggle": ArcgisNavigationToggle;
        "arcgis-oriented-imagery-viewer": ArcgisOrientedImageryViewer;
        "arcgis-placement": ArcgisPlacement;
        "arcgis-print": ArcgisPrint;
        "arcgis-scale-bar": ArcgisScaleBar;
        "arcgis-scale-range-slider": ArcgisScaleRangeSlider;
        "arcgis-scene": ArcgisScene;
        "arcgis-search": ArcgisSearch;
        "arcgis-shadow-cast": ArcgisShadowCast;
        "arcgis-sketch": ArcgisSketch;
        "arcgis-slice": ArcgisSlice;
        "arcgis-slider": ArcgisSlider;
        "arcgis-swipe": ArcgisSwipe;
        "arcgis-table-list": ArcgisTableList;
        "arcgis-time-slider": ArcgisTimeSlider;
        "arcgis-track": ArcgisTrack;
        "arcgis-utility-network-associations": ArcgisUtilityNetworkAssociations;
        "arcgis-utility-network-trace": ArcgisUtilityNetworkTrace;
        "arcgis-utility-network-validate-topology": ArcgisUtilityNetworkValidateTopology;
        "arcgis-value-picker": ArcgisValuePicker;
        "arcgis-version-management": ArcgisVersionManagement;
        "arcgis-version-management-service-item": ArcgisVersionManagementServiceItem;
        "arcgis-version-management-version-item": ArcgisVersionManagementVersionItem;
        "arcgis-version-management-version-list": ArcgisVersionManagementVersionList;
        "arcgis-version-management-version-properties": ArcgisVersionManagementVersionProperties;
        "arcgis-weather": ArcgisWeather;
        "arcgis-zoom": ArcgisZoom;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arcgis-area-measurement-2d": LocalJSX.ArcgisAreaMeasurement2d & JSXBase.HTMLAttributes<HTMLArcgisAreaMeasurement2dElement>;
            "arcgis-area-measurement-3d": LocalJSX.ArcgisAreaMeasurement3d & JSXBase.HTMLAttributes<HTMLArcgisAreaMeasurement3dElement>;
            "arcgis-attachments": LocalJSX.ArcgisAttachments & JSXBase.HTMLAttributes<HTMLArcgisAttachmentsElement>;
            "arcgis-basemap-gallery": LocalJSX.ArcgisBasemapGallery & JSXBase.HTMLAttributes<HTMLArcgisBasemapGalleryElement>;
            "arcgis-basemap-layer-list": LocalJSX.ArcgisBasemapLayerList & JSXBase.HTMLAttributes<HTMLArcgisBasemapLayerListElement>;
            "arcgis-basemap-toggle": LocalJSX.ArcgisBasemapToggle & JSXBase.HTMLAttributes<HTMLArcgisBasemapToggleElement>;
            "arcgis-bookmarks": LocalJSX.ArcgisBookmarks & JSXBase.HTMLAttributes<HTMLArcgisBookmarksElement>;
            "arcgis-building-explorer": LocalJSX.ArcgisBuildingExplorer & JSXBase.HTMLAttributes<HTMLArcgisBuildingExplorerElement>;
            "arcgis-catalog-layer-list": LocalJSX.ArcgisCatalogLayerList & JSXBase.HTMLAttributes<HTMLArcgisCatalogLayerListElement>;
            "arcgis-compass": LocalJSX.ArcgisCompass & JSXBase.HTMLAttributes<HTMLArcgisCompassElement>;
            "arcgis-coordinate-conversion": LocalJSX.ArcgisCoordinateConversion & JSXBase.HTMLAttributes<HTMLArcgisCoordinateConversionElement>;
            "arcgis-daylight": LocalJSX.ArcgisDaylight & JSXBase.HTMLAttributes<HTMLArcgisDaylightElement>;
            "arcgis-directional-pad": LocalJSX.ArcgisDirectionalPad & JSXBase.HTMLAttributes<HTMLArcgisDirectionalPadElement>;
            "arcgis-directions": LocalJSX.ArcgisDirections & JSXBase.HTMLAttributes<HTMLArcgisDirectionsElement>;
            "arcgis-directline-measurement-3d": LocalJSX.ArcgisDirectlineMeasurement3d & JSXBase.HTMLAttributes<HTMLArcgisDirectlineMeasurement3dElement>;
            "arcgis-distance-measurement-2d": LocalJSX.ArcgisDistanceMeasurement2d & JSXBase.HTMLAttributes<HTMLArcgisDistanceMeasurement2dElement>;
            "arcgis-editor": LocalJSX.ArcgisEditor & JSXBase.HTMLAttributes<HTMLArcgisEditorElement>;
            "arcgis-elevation-profile": LocalJSX.ArcgisElevationProfile & JSXBase.HTMLAttributes<HTMLArcgisElevationProfileElement>;
            "arcgis-expand": LocalJSX.ArcgisExpand & JSXBase.HTMLAttributes<HTMLArcgisExpandElement>;
            "arcgis-feature": LocalJSX.ArcgisFeature & JSXBase.HTMLAttributes<HTMLArcgisFeatureElement>;
            "arcgis-feature-form": LocalJSX.ArcgisFeatureForm & JSXBase.HTMLAttributes<HTMLArcgisFeatureFormElement>;
            "arcgis-feature-table": LocalJSX.ArcgisFeatureTable & JSXBase.HTMLAttributes<HTMLArcgisFeatureTableElement>;
            "arcgis-feature-templates": LocalJSX.ArcgisFeatureTemplates & JSXBase.HTMLAttributes<HTMLArcgisFeatureTemplatesElement>;
            "arcgis-features": LocalJSX.ArcgisFeatures & JSXBase.HTMLAttributes<HTMLArcgisFeaturesElement>;
            "arcgis-floor-filter": LocalJSX.ArcgisFloorFilter & JSXBase.HTMLAttributes<HTMLArcgisFloorFilterElement>;
            "arcgis-fullscreen": LocalJSX.ArcgisFullscreen & JSXBase.HTMLAttributes<HTMLArcgisFullscreenElement>;
            "arcgis-histogram": LocalJSX.ArcgisHistogram & JSXBase.HTMLAttributes<HTMLArcgisHistogramElement>;
            "arcgis-histogram-range-slider": LocalJSX.ArcgisHistogramRangeSlider & JSXBase.HTMLAttributes<HTMLArcgisHistogramRangeSliderElement>;
            /**
             * Provides a simple widget that switches the esri/views/View to its
             * initial esri/Viewpoint or a previously defined `viewpoint`.
             * @since 4.0
             */
            "arcgis-home": LocalJSX.ArcgisHome & JSXBase.HTMLAttributes<HTMLArcgisHomeElement>;
            "arcgis-layer-list": LocalJSX.ArcgisLayerList & JSXBase.HTMLAttributes<HTMLArcgisLayerListElement>;
            "arcgis-legend": LocalJSX.ArcgisLegend & JSXBase.HTMLAttributes<HTMLArcgisLegendElement>;
            "arcgis-line-of-sight": LocalJSX.ArcgisLineOfSight & JSXBase.HTMLAttributes<HTMLArcgisLineOfSightElement>;
            "arcgis-locate": LocalJSX.ArcgisLocate & JSXBase.HTMLAttributes<HTMLArcgisLocateElement>;
            "arcgis-map": LocalJSX.ArcgisMap & JSXBase.HTMLAttributes<HTMLArcgisMapElement>;
            "arcgis-measurement": LocalJSX.ArcgisMeasurement & JSXBase.HTMLAttributes<HTMLArcgisMeasurementElement>;
            "arcgis-navigation-toggle": LocalJSX.ArcgisNavigationToggle & JSXBase.HTMLAttributes<HTMLArcgisNavigationToggleElement>;
            "arcgis-oriented-imagery-viewer": LocalJSX.ArcgisOrientedImageryViewer & JSXBase.HTMLAttributes<HTMLArcgisOrientedImageryViewerElement>;
            "arcgis-placement": LocalJSX.ArcgisPlacement & JSXBase.HTMLAttributes<HTMLArcgisPlacementElement>;
            "arcgis-print": LocalJSX.ArcgisPrint & JSXBase.HTMLAttributes<HTMLArcgisPrintElement>;
            "arcgis-scale-bar": LocalJSX.ArcgisScaleBar & JSXBase.HTMLAttributes<HTMLArcgisScaleBarElement>;
            "arcgis-scale-range-slider": LocalJSX.ArcgisScaleRangeSlider & JSXBase.HTMLAttributes<HTMLArcgisScaleRangeSliderElement>;
            "arcgis-scene": LocalJSX.ArcgisScene & JSXBase.HTMLAttributes<HTMLArcgisSceneElement>;
            "arcgis-search": LocalJSX.ArcgisSearch & JSXBase.HTMLAttributes<HTMLArcgisSearchElement>;
            "arcgis-shadow-cast": LocalJSX.ArcgisShadowCast & JSXBase.HTMLAttributes<HTMLArcgisShadowCastElement>;
            "arcgis-sketch": LocalJSX.ArcgisSketch & JSXBase.HTMLAttributes<HTMLArcgisSketchElement>;
            "arcgis-slice": LocalJSX.ArcgisSlice & JSXBase.HTMLAttributes<HTMLArcgisSliceElement>;
            "arcgis-slider": LocalJSX.ArcgisSlider & JSXBase.HTMLAttributes<HTMLArcgisSliderElement>;
            "arcgis-swipe": LocalJSX.ArcgisSwipe & JSXBase.HTMLAttributes<HTMLArcgisSwipeElement>;
            "arcgis-table-list": LocalJSX.ArcgisTableList & JSXBase.HTMLAttributes<HTMLArcgisTableListElement>;
            "arcgis-time-slider": LocalJSX.ArcgisTimeSlider & JSXBase.HTMLAttributes<HTMLArcgisTimeSliderElement>;
            "arcgis-track": LocalJSX.ArcgisTrack & JSXBase.HTMLAttributes<HTMLArcgisTrackElement>;
            "arcgis-utility-network-associations": LocalJSX.ArcgisUtilityNetworkAssociations & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkAssociationsElement>;
            "arcgis-utility-network-trace": LocalJSX.ArcgisUtilityNetworkTrace & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkTraceElement>;
            "arcgis-utility-network-validate-topology": LocalJSX.ArcgisUtilityNetworkValidateTopology & JSXBase.HTMLAttributes<HTMLArcgisUtilityNetworkValidateTopologyElement>;
            "arcgis-value-picker": LocalJSX.ArcgisValuePicker & JSXBase.HTMLAttributes<HTMLArcgisValuePickerElement>;
            "arcgis-version-management": LocalJSX.ArcgisVersionManagement & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementElement>;
            "arcgis-version-management-service-item": LocalJSX.ArcgisVersionManagementServiceItem & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementServiceItemElement>;
            "arcgis-version-management-version-item": LocalJSX.ArcgisVersionManagementVersionItem & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionItemElement>;
            "arcgis-version-management-version-list": LocalJSX.ArcgisVersionManagementVersionList & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionListElement>;
            "arcgis-version-management-version-properties": LocalJSX.ArcgisVersionManagementVersionProperties & JSXBase.HTMLAttributes<HTMLArcgisVersionManagementVersionPropertiesElement>;
            "arcgis-weather": LocalJSX.ArcgisWeather & JSXBase.HTMLAttributes<HTMLArcgisWeatherElement>;
            "arcgis-zoom": LocalJSX.ArcgisZoom & JSXBase.HTMLAttributes<HTMLArcgisZoomElement>;
        }
    }
}
