import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type { EventEmitter } from "../../stencil-public-runtime";
import { type ArcgisReferenceElement } from "../../utils/component-utils";
import type { ArcGISMapView, ArcGISSceneView } from "../types";
declare const useSketchWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.Sketch, "icon" | "label" | "viewModel" | "layer" | "layout" | "defaultCreateOptions" | "labelOptions" | "snappingOptions" | "tooltipOptions" | "availableCreateTools" | "creationMode" | "defaultUpdateOptions"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: "ready" | "disabled" | "active" | undefined;
    viewModel?: __esri.SketchViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.SketchProperties): __esri.SketchProperties | Promise<__esri.SketchProperties>;
} | undefined) => __esri.Sketch;
export declare class ArcgisSketch implements Use<typeof useSketchWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement & {
        view?: ArcGISMapView | ArcGISSceneView;
    };
    widget: __esri.Sketch;
    viewModel: __esri.SketchViewModel;
    private _editConstructorProperties;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    activeTool: "circle" | "polygon" | "polyline" | "point" | "rectangle" | "move" | "reshape" | "transform" | "rectangle-selection" | "lasso-selection";
    availableCreateTools: string[];
    createGraphic: __esri.Graphic;
    creationMode: "single" | "update" | "continuous";
    defaultCreateOptions: __esri.SketchDefaultCreateOptions;
    defaultUpdateOptions: __esri.SketchDefaultUpdateOptions;
    /**
     * By default, sketch will auto-create a new graphics layer if none was
     * provided. Set this prop to true to disable this behavior.
     */
    defaultGraphicsLayerDisabled: boolean;
    icon: string;
    label: string;
    labelOptions: __esri.SketchLabelOptions;
    layer: __esri.GraphicsLayer;
    layout: "horizontal" | "vertical";
    pointSymbol: __esri.SimpleMarkerSymbol | __esri.PointSymbol3D | __esri.TextSymbol | __esri.CIMSymbol | __esri.WebStyleSymbol;
    polylineSymbol: __esri.SimpleLineSymbol | __esri.CIMSymbol | __esri.LineSymbol3D;
    polygonSymbol: __esri.CIMSymbol | __esri.SimpleFillSymbol | __esri.PolygonSymbol3D;
    snappingOptions: __esri.SnappingOptions;
    tooltipOptions: __esri.SketchTooltipOptions;
    updateGraphics: __esri.Collection<__esri.Graphic>;
    hideCreateToolsPoint: boolean | undefined;
    hideCreateToolsPolyline: boolean | undefined;
    hideCreateToolsPolygon: boolean | undefined;
    hideCreateToolsRectangle: boolean | undefined;
    hideCreateToolsCircle: boolean | undefined;
    hideDuplicateButton: boolean | undefined;
    hideSelectionToolsRectangleSelection: boolean | undefined;
    hideSelectionToolsLassoSelection: boolean | undefined;
    hideSettingsMenu: boolean | undefined;
    hideLabelsToggle: boolean | undefined;
    hideTooltipsToggle: boolean | undefined;
    hideSnappingControls: boolean | undefined;
    showSnappingControlsElementsHeader: boolean | undefined;
    hideSnappingControlsElementsEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsSelfEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsFeatureEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsLayerList: boolean | undefined;
    hideUndoRedoMenu: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled" | "active";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    widgetCreate: EventEmitter<__esri.SketchCreateEvent>;
    widgetDelete: EventEmitter<__esri.SketchDeleteEvent>;
    widgetRedo: EventEmitter<__esri.SketchRedoEvent>;
    widgetUndo: EventEmitter<__esri.SketchUndoEvent>;
    widgetUpdate: EventEmitter<__esri.SketchUpdateEvent>;
    arcgisReadyHandler(): void;
    cancel(): Promise<void>;
    complete(): Promise<void>;
    create(tool: "circle" | "point" | "polygon" | "polyline" | "rectangle", createOptions?: __esri.SketchViewModelCreateCreateOptions): Promise<void>;
    delete(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    duplicate(): Promise<void>;
    redo(): Promise<void>;
    undo(): Promise<void>;
    update(graphic: __esri.Graphic | __esri.Graphic[], updateOptions?: __esri.SketchViewModelUpdateUpdateOptions): Promise<void>;
}
export {};
