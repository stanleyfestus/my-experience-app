import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useBookmarksWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.Bookmarks, "icon" | "label" | "viewModel" | "disabled" | "dragEnabled" | "filterPlaceholder" | "bookmarks" | "defaultCreateOptions" | "defaultEditOptions" | "filterText"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.BookmarksViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.BookmarksProperties): __esri.BookmarksProperties | Promise<__esri.BookmarksProperties>;
} | undefined) => __esri.Bookmarks;
export declare class ArcgisBookmarks implements Use<typeof useBookmarksWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Bookmarks;
    viewModel: __esri.BookmarksViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    bookmarks: __esri.Collection<__esri.Bookmark>;
    defaultCreateOptions: __esri.BookmarkOptions;
    defaultEditOptions: __esri.BookmarkOptions;
    disabled: boolean;
    dragEnabled: boolean;
    filterPlaceholder: string;
    filterText: string;
    icon: string;
    label: string;
    showAddBookmarkButton: boolean | undefined;
    showCloseButton: boolean | undefined;
    showCollapseButton: boolean | undefined;
    showEditBookmarkButton: boolean | undefined;
    showFilter: boolean | undefined;
    hideFlow: boolean | undefined;
    showHeading: boolean | undefined;
    hideThumbnail: boolean | undefined;
    hideTime: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "loading";
    arcgisReady: EventEmitter<never>;
    widgetBookmarkEdit: EventEmitter<__esri.BookmarksBookmarkEditEvent>;
    widgetBookmarkSelect: EventEmitter<__esri.BookmarksBookmarkSelectEvent>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
}
export {};
