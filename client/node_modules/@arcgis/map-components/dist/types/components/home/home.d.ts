import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Nil } from "@arcgis/components-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
declare const useHomeViewModel: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.HomeViewModel, never> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: "ready" | "disabled" | "going-home" | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    position: __esri.UIPosition;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): unknown;
} | undefined) => __esri.HomeViewModel;
/**
 * Provides a simple widget that switches the esri/views/View to its
 * initial esri/Viewpoint or a previously defined `viewpoint`.
 *
 * @since 4.0
 */
export declare class ArcgisHome implements Use<typeof useHomeViewModel> {
    manager: ControllerManager<this>;
    messages: {
        _lang: string;
        _t9nLocale: "el" | "id" | "hr" | "th" | "tr" | "ar" | "bg" | "bs" | "ca" | "cs" | "da" | "de" | "en" | "es" | "et" | "fi" | "fr" | "he" | "hu" | "it" | "ja" | "ko" | "lt" | "lv" | "nl" | "nb" | "pl" | "pt-BR" | "pt-PT" | "ro" | "ru" | "sk" | "sl" | "sr" | "sv" | "uk" | "vi" | "zh-CN" | "zh-HK" | "zh-TW";
        _loading: boolean;
        _overrides: {
            componentLabel?: string | undefined;
            title?: string | undefined;
            cancel?: string | undefined;
        };
        _original?: {
            componentLabel: string;
            title: string;
            cancel: string;
        } | undefined;
    } & Partial<{
        componentLabel: string;
        title: string;
        cancel: string;
    }>;
    viewModel: __esri.HomeViewModel;
    el: HTMLElement;
    arcgisReady: EventEmitter<never>;
    /**
     * Fires when the go() method is called.
     *
     * @example
     * home.addEventListener("go", (event) => {
     *   console.log("updating viewpoint");
     * });
     */
    viewModelGo: EventEmitter<__esri.HomeViewModelGoEvent>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    goToOverride: __esri.GoToOverride;
    /**
     * Icon displayed in the widget's button.
     *
     * @see [Calcite Icon Search](https://developers.arcgis.com/calcite-design-system/icons/)
     *
     * @since 4.28
     */
    icon: Nil | string;
    /**
     * The widget's default label.
     *
     * @since 4.7
     */
    label: Nil | string;
    /** Overwrite localized strings for this component */
    messageOverrides?: typeof this.messages._overrides;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    /**
     * The esri/Viewpoint, or point of view, to zoom to when
     * going home. The initial value is determined a few different ways:
     *
     * If no esri/views/View is provided, the value is `null`.
     * If the esri/views/View is ready, but the esri/Viewpoint is not defined, the initial
     * value of the esri/Viewpoint is determined when the esri/views/View became ready.
     * If the esri/views/View is ready and the esri/Viewpoint is defined by the user, the initial viewpoint value is the user-defined esri/Viewpoint.
     *
     * @example
     * // Creates a viewpoint centered on the extent of a polygon geometry
     * let vp = new Viewpoint({
     *   targetGeometry: geom.extent
     * });
     *
     * // Sets the model's viewpoint to the Viewpoint based on a polygon geometry
     * home.viewpoint = vp;
     */
    viewpoint: __esri.Viewpoint;
    state: "ready" | "disabled" | "going-home";
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    /**
     * This function provides the ability to interrupt and cancel the process
     * of navigating the view back to the view's initial extent.
     *
     * @since 4.9
     */
    cancelGo(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    /**
     * Animates the view to the initial Viewpoint of the view or the
     * value of `viewpoint`
     */
    go(): Promise<void>;
    render(): VNode;
    private _go;
}
export {};
