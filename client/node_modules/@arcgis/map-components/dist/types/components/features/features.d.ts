import type { EventEmitter } from "../../stencil-public-runtime";
import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Nil } from "@arcgis/components-utils";
declare const useFeaturesWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.Features, "icon" | "map" | "timeZone" | "spatialReference" | "label" | "viewModel" | "content" | "headingLevel" | "goToOverride" | "features" | "promises" | "selectedFeatureIndex"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.FeaturesViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.FeaturesProperties): __esri.FeaturesProperties | Promise<__esri.FeaturesProperties>;
} | undefined) => __esri.Features;
export declare class ArcgisFeatures implements Use<typeof useFeaturesWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Features;
    viewModel: __esri.FeaturesViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    collapsed: boolean;
    actions: __esri.Collection<__esri.ActionButton | __esri.ActionToggle>;
    active: boolean;
    content: string | HTMLElement | __esri.Widget;
    features: __esri.Graphic[];
    featuresPerPage: number;
    featureViewModelAbilities: __esri.Abilities;
    goToOverride: __esri.GoToOverride;
    headingLevel: number;
    includeDefaultActions: boolean;
    icon: string;
    label: string;
    map: __esri.Map;
    promises: Promise<any>[];
    selectedFeature: __esri.Graphic;
    selectedFeatureIndex: number;
    spatialReference: __esri.SpatialReference;
    featuresTitle: string;
    timeZone: string;
    hideActionBar: boolean | undefined;
    hideCloseButton: boolean | undefined;
    showCollapseButton: boolean | undefined;
    hideFeatureNavigation: boolean | undefined;
    hideFlow: boolean | undefined;
    hideHeading: boolean | undefined;
    hideSpinner: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state" | "selectedFeatureIndex" | "selectedFeature";
    }> & CustomEvent<{
        name: "state" | "selectedFeatureIndex" | "selectedFeature";
    }>;
    widgetTriggerAction: EventEmitter<__esri.FeaturesTriggerActionEvent>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    fetchFeatures(screenPoint: __esri.FeaturesFetchFeaturesScreenPoint, options?: __esri.FetchFeaturesOptions): Promise<__esri.FetchPopupFeaturesResult>;
    clear(): Promise<void>;
    close(): Promise<void>;
    next(): Promise<__esri.FeaturesViewModel>;
    open(options?: __esri.FeaturesOpenOptions): Promise<void>;
    previous(): Promise<__esri.FeaturesViewModel>;
    triggerAction(actionIndex: number): Promise<void>;
}
export {};
