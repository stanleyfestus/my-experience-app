import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useSliderWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.Slider, "icon" | "label" | "viewModel" | "min" | "max" | "layout" | "precision" | "draggableSegmentsEnabled" | "effectiveMax" | "effectiveMin" | "labelInputsEnabled" | "rangeLabelInputsEnabled" | "snapOnClickEnabled" | "syncedSegmentsEnabled" | "thumbsConstrained" | "tickConfigs" | "trackElement"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: "ready" | "disabled" | "editing" | "dragging" | undefined;
    viewModel?: __esri.SliderViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.SliderProperties): __esri.SliderProperties | Promise<__esri.SliderProperties>;
} | undefined) => __esri.Slider;
export declare class ArcgisSlider implements Use<typeof useSliderWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Slider;
    viewModel: __esri.SliderViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    draggableSegmentsEnabled: boolean;
    effectiveMax: number;
    effectiveMin: number;
    effectiveSegmentElements: __esri.Collection<HTMLElement>;
    labelElements: __esri.Collection<HTMLElement>;
    labelInputsEnabled: boolean;
    icon: string;
    label: string;
    labels: string[];
    layout: "horizontal" | "vertical" | "horizontal-reversed" | "vertical-reversed";
    min: number;
    max: number;
    maxLabelElement: HTMLElement;
    minLabelElement: HTMLElement;
    precision: number;
    rangeLabelInputsEnabled: boolean;
    segmentElements: __esri.Collection<HTMLElement>;
    snapOnClickEnabled: boolean;
    syncedSegmentsEnabled: boolean;
    thumbElements: __esri.Collection<HTMLElement>;
    thumbsConstrained: boolean;
    tickConfigs: __esri.TickConfig[];
    tickElements: __esri.Collection<__esri.Collection<__esri.TickElementGroup>>;
    trackElement: HTMLElement;
    steps: string | number[];
    values: string | number[];
    position: __esri.UIPosition;
    state: "ready" | "disabled" | "editing" | "dragging";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    widgetMaxChange: EventEmitter<__esri.SliderMaxChangeEvent>;
    widgetMaxClick: EventEmitter<__esri.SliderMaxClickEvent>;
    widgetMinChange: EventEmitter<__esri.SliderMinChangeEvent>;
    widgetMinClick: EventEmitter<__esri.SliderMinClickEvent>;
    widgetSegmentClick: EventEmitter<__esri.SliderSegmentClickEvent>;
    widgetSegmentDrag: EventEmitter<__esri.SliderSegmentDragEvent>;
    widgetThumbChange: EventEmitter<__esri.SliderThumbChangeEvent>;
    widgetThumbClick: EventEmitter<__esri.SliderThumbClickEvent>;
    widgetThumbDrag: EventEmitter<__esri.SliderThumbDragEvent>;
    widgetTickClick: EventEmitter<__esri.SliderTickClickEvent>;
    widgetTrackClick: EventEmitter<__esri.SliderTrackClickEvent>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
}
export {};
