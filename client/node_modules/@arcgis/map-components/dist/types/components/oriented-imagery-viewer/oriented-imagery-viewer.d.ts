import type { EventEmitter } from "../../stencil-public-runtime";
import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type OrientedImageryViewer from "@arcgis/core/widgets/OrientedImageryViewer";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
export type OrientedImageryViewerWidget = InstanceType<typeof OrientedImageryViewer>;
declare const useOrientedImageryViewerWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<OrientedImageryViewer, "icon" | "label" | "viewModel" | "layer" | "disabled" | "currentCoverageVisible" | "galleryOpened" | "imageEnhancementToolActive" | "isAdditionalCoverageVisible" | "isAdditionalPointSourcesVisible" | "mapImageConversionToolState" | "navigationToolActive"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.OrientedImageryViewerViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.OrientedImageryViewerProperties): __esri.OrientedImageryViewerProperties | Promise<__esri.OrientedImageryViewerProperties>;
} | undefined) => OrientedImageryViewer;
export declare class ArcgisOrientedImageryViewer implements Use<typeof useOrientedImageryViewerWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: OrientedImageryViewer;
    viewModel: __esri.OrientedImageryViewerViewModel;
    _hasOrientedImageryLayerToAdd: boolean;
    componentDidLoad(): void;
    icon: string;
    label: string;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    currentCoverageVisible: boolean;
    disabled: boolean;
    galleryOpened: boolean;
    imageEnhancementToolActive: boolean;
    imageGalleryEnabled: boolean;
    orientedImageryLayerItemId: Nil | string;
    isAdditionalCoverageVisible: boolean;
    isAdditionalPointSourcesVisible: boolean;
    layer: __esri.OrientedImageryLayer;
    mapImageConversionToolState: boolean;
    navigationToolActive: boolean;
    referencePoint: __esri.Point;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "layer" | "imageGalleryEnabled";
    }> & CustomEvent<{
        name: "layer" | "imageGalleryEnabled";
    }>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
}
export {};
