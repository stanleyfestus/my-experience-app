import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
declare const useFeatureTableWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.FeatureTable, "icon" | "timeZone" | "label" | "viewModel" | "layer" | "description" | "pageSize" | "editingEnabled" | "highlightEnabled" | "attachmentsEnabled" | "autoRefreshEnabled" | "columnReorderingEnabled" | "filterBySelectionEnabled" | "filterGeometry" | "hiddenFields" | "highlightIds" | "menuConfig" | "multiSortEnabled" | "objectIds" | "outFields" | "pageCount" | "pageIndex" | "paginationEnabled" | "relatedRecordsEnabled" | "returnGeometryEnabled" | "returnMEnabled" | "returnZEnabled" | "tableTemplate"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: "ready" | "error" | "disabled" | "loaded" | "loading" | undefined;
    viewModel?: __esri.FeatureTableViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.FeatureTableProperties): __esri.FeatureTableProperties | Promise<__esri.FeatureTableProperties>;
} | undefined) => __esri.FeatureTable;
export declare class ArcgisFeatureTable implements Use<typeof useFeatureTableWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement & {
        childElem?: HTMLElement;
    };
    widget: __esri.FeatureTable;
    viewModel: __esri.FeatureTableViewModel;
    componentWillLoad(): void;
    componentDidLoad(): void;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    activeFilters: __esri.Collection<__esri.GeometryFilter | __esri.SelectionFilter>;
    activeSortOrders: __esri.ColumnSortOrder[];
    attachmentsEnabled: boolean;
    autoRefreshEnabled: boolean;
    columnReorderingEnabled: boolean;
    columns: __esri.Collection<__esri.Column | __esri.FieldColumn | __esri.GroupColumn | __esri.ActionColumn | __esri.AttachmentsColumn | __esri.RelationshipColumn>;
    description: string | Function;
    icon: string;
    label: string;
    editingEnabled: boolean;
    filterBySelectionEnabled: boolean;
    filterGeometry: __esri.Geometry;
    hiddenFields: __esri.Collection<string>;
    highlightEnabled: boolean;
    highlightIds: __esri.Collection<string | number>;
    layer: __esri.FeatureLayer | __esri.SceneLayer | __esri.GeoJSONLayer | __esri.CatalogFootprintLayer | __esri.CSVLayer | __esri.ImageryLayer | __esri.KnowledgeGraphSublayer | __esri.WFSLayer;
    menuConfig: __esri.TableMenuConfig;
    multiSortEnabled: boolean;
    objectIds: __esri.Collection<string | number>;
    outFields: string[];
    pageCount: number;
    pageIndex: number;
    paginationEnabled: boolean;
    pageSize: number;
    relatedRecordsEnabled: boolean;
    returnGeometryEnabled: boolean;
    returnMEnabled: boolean;
    returnZEnabled: boolean;
    tableTemplate: __esri.TableTemplate;
    timeZone: string;
    itemId: Nil | string;
    url: Nil | string;
    hideHeader: boolean | undefined;
    hideMenu: boolean | undefined;
    hideSelectionColumn: boolean | undefined;
    hideColumnMenus: boolean | undefined;
    hideMenuItemsClearSelection: boolean | undefined;
    hideMenuItemsDeleteSelection: boolean | undefined;
    hideMenuItemsRefreshData: boolean | undefined;
    hideMenuItemsSelectedRecordsShowAllToggle: boolean | undefined;
    hideMenuItemsToggleColumns: boolean | undefined;
    hideMenuItemsZoomToSelection: boolean | undefined;
    state: "ready" | "error" | "disabled" | "loaded" | "loading";
    arcgisReady: EventEmitter<never>;
    arcgisSelectionChange: EventEmitter<__esri.CollectionChangeEvent<number | string>>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    clearSelectionFilter(): Promise<void>;
    deleteSelection(showWarningPrompt?: boolean): Promise<void>;
    filterBySelection(): Promise<void>;
    findColumn(fieldName: string): Promise<__esri.ActionColumn | __esri.AttachmentsColumn | __esri.Column | __esri.GroupColumn | __esri.RelationshipColumn>;
    goToPage(index: number): Promise<void>;
    hideColumn(fieldName: string): Promise<void>;
    nextPage(): Promise<void>;
    previousPage(): Promise<void>;
    refresh(): Promise<void>;
    scrollToLeft(): Promise<void>;
    scrollToBottom(): Promise<void>;
    scrollToIndex(index: number): Promise<void>;
    scrollToRow(objectId: number): Promise<void>;
    scrollToTop(): Promise<void>;
    showAllColumns(): Promise<void>;
    showColumn(fieldName: string): Promise<void>;
    sortColumn(path: string, direction: "asc" | "desc"): Promise<void>;
    zoomToSelection(): Promise<void>;
}
export {};
