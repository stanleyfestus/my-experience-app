import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type WebMap from "@arcgis/core/WebMap";
import type VersionManagementViewModel from "@arcgis/core/widgets/VersionManagement/VersionManagementViewModel";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
export type VersionManagementViewModelWidget = InstanceType<typeof VersionManagementViewModel>;
export type ArcGISWebMap = InstanceType<typeof WebMap>;
declare const useVersionManagementViewModel: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<VersionManagementViewModel, never> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: "ready" | "disabled" | "executing" | "failed" | "loading" | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    position: __esri.UIPosition;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): unknown;
} | undefined) => VersionManagementViewModel;
type VersioningStateEventType = "version-changed" | "version-created" | "version-deleted" | "version-switched";
export interface VersioningStateEvent {
    type?: VersioningStateEventType;
    versionIdentifier?: __esri.VersionInfoVersionIdentifier;
    versioningState?: __esri.VersioningState;
}
export declare class ArcgisVersionManagement implements Use<typeof useVersionManagementViewModel> {
    el: HTMLElement;
    flowElement: HTMLCalciteFlowElement | undefined;
    manager: ControllerManager<this>;
    reactiveUtils: __esri.reactiveUtils;
    viewModel: VersionManagementViewModel;
    arcgisReady: EventEmitter<never>;
    arcgisVersioningStateChanged: EventEmitter<VersioningStateEvent>;
    arcgisPropertyChange: undefined;
    allowEditingDisabled: boolean;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    closable: boolean;
    icon: Nil | string;
    label: string | undefined;
    mode: Nil | string;
    pageSize: number;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    messages: {
        _lang: string;
        _t9nLocale: "el" | "id" | "hr" | "th" | "tr" | "ar" | "bg" | "bs" | "ca" | "cs" | "da" | "de" | "en" | "es" | "et" | "fi" | "fr" | "he" | "hu" | "it" | "ja" | "ko" | "lt" | "lv" | "nl" | "nb" | "pl" | "pt-BR" | "pt-PT" | "ro" | "ru" | "sk" | "sl" | "sr" | "sv" | "uk" | "vi" | "zh-CN" | "zh-HK" | "zh-TW";
        _loading: boolean;
        _overrides: {
            label?: string | undefined;
            actions?: {
                cancelSave?: string | undefined;
                deleteVersion?: string | undefined;
                editVersion?: string | undefined;
                newVersion?: string | undefined;
                refreshVersions?: string | undefined;
                saveVersion?: string | undefined;
                searchVersions?: string | undefined;
                switchToVersion?: string | undefined;
            } | undefined;
            accessLevels?: {
                private?: string | undefined;
                protected?: string | undefined;
                public?: string | undefined;
            } | undefined;
            executionErrors?: {
                invalidVersionName?: string | undefined;
                noAdvancedEditingUserTypeExtension?: string | undefined;
                noFeatureServiceFound?: string | undefined;
                notValidEnterpriseVersion?: string | undefined;
                noVersionManagementServiceFound?: string | undefined;
            } | undefined;
            headers?: {
                currentVersion?: string | undefined;
                manageVersions?: string | undefined;
            } | undefined;
            input?: {
                versionAccess?: string | undefined;
                versionDescription?: string | undefined;
                versionName?: string | undefined;
                versionOwner?: string | undefined;
            } | undefined;
            loadErrors?: {
                noFeatureServices?: string | undefined;
                noViewProperty?: string | undefined;
            } | undefined;
        };
        _original?: {
            label: string;
            actions: {
                cancelSave: string;
                deleteVersion: string;
                editVersion: string;
                newVersion: string;
                refreshVersions: string;
                saveVersion: string;
                searchVersions: string;
                switchToVersion: string;
            };
            accessLevels: {
                private: string;
                protected: string;
                public: string;
            };
            executionErrors: {
                invalidVersionName: string;
                noAdvancedEditingUserTypeExtension: string;
                noFeatureServiceFound: string;
                notValidEnterpriseVersion: string;
                noVersionManagementServiceFound: string;
            };
            headers: {
                currentVersion: string;
                manageVersions: string;
            };
            input: {
                versionAccess: string;
                versionDescription: string;
                versionName: string;
                versionOwner: string;
            };
            loadErrors: {
                noFeatureServices: string;
                noViewProperty: string;
            };
        } | undefined;
    } & {
        label: string;
        actions: {
            cancelSave: string;
            deleteVersion: string;
            editVersion: string;
            newVersion: string;
            refreshVersions: string;
            saveVersion: string;
            searchVersions: string;
            switchToVersion: string;
        };
        accessLevels: {
            private: string;
            protected: string;
            public: string;
        };
        executionErrors: {
            invalidVersionName: string;
            noAdvancedEditingUserTypeExtension: string;
            noFeatureServiceFound: string;
            notValidEnterpriseVersion: string;
            noVersionManagementServiceFound: string;
        };
        headers: {
            currentVersion: string;
            manageVersions: string;
        };
        input: {
            versionAccess: string;
            versionDescription: string;
            versionName: string;
            versionOwner: string;
        };
        loadErrors: {
            noFeatureServices: string;
            noViewProperty: string;
        };
    };
    state: "ready" | "disabled" | "executing" | "failed" | "loading";
    versioningStates: __esri.Collection<__esri.VersioningState>;
    view: __esri.MapView;
    componentWillLoad(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    render(): VNode;
    private _createVersionPropertiesFlowItem;
    private _getLoadError;
    private _handleFlowItemClose;
    private _handleManageVersionAction;
    private _refreshVersionList;
    private _removeVersionListFlowItem;
    private _removeVersionPropertiesFlowItem;
}
export {};
