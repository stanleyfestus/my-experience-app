import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useLayerListWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.LayerList, "icon" | "label" | "viewModel" | "selectedItems" | "headingLevel" | "catalogOptions" | "collapsed" | "dragEnabled" | "filterPlaceholder" | "knowledgeGraphOptions" | "minFilterItems" | "selectionMode" | "visibilityAppearance" | "filterText" | "listItemCreatedFunction" | "minDragEnabledItems"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.LayerListViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.LayerListProperties): __esri.LayerListProperties | Promise<__esri.LayerListProperties>;
} | undefined) => __esri.LayerList;
export declare class ArcgisLayerList implements Use<typeof useLayerListWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.LayerList;
    viewModel: __esri.LayerListViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    collapsed: boolean;
    headingLevel: number;
    /**
     * The CatalogLayerList that displays a catalog layer's dynamic group layer.
     */
    catalogLayerList: __esri.CatalogLayerList;
    catalogOptions: __esri.LayerListCatalogOptions;
    dragEnabled: boolean;
    filterPlaceholder: string;
    filterText: string;
    icon: string;
    knowledgeGraphOptions: __esri.LayerListKnowledgeGraphOptions;
    /**
     * The TableList that displays the tables associated with a KnowledgeGraphLayer.
     */
    tableList: __esri.TableList;
    label: string;
    listItemCreatedFunction: __esri.LayerListListItemCreatedHandler;
    minDragEnabledItems: number;
    minFilterItems: number;
    /**
     * A collection of ListItems representing operational layers.
     */
    operationalItems: __esri.Collection<__esri.ListItem>;
    selectedItems: __esri.Collection<__esri.ListItem>;
    selectionMode: "none" | "single" | "multiple" | "single-persist";
    visibilityAppearance: "default" | "checkbox";
    hideCatalogLayerList: boolean | undefined;
    showCloseButton: boolean | undefined;
    showCollapseButton: boolean | undefined;
    showErrors: boolean | undefined;
    showFilter: boolean | undefined;
    hideFlow: boolean | undefined;
    showHeading: boolean | undefined;
    hideStatusIndicators: boolean | undefined;
    showTemporaryLayerIndicators: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled" | "loading";
    arcgisReady: EventEmitter<never>;
    widgetTriggerAction: EventEmitter<__esri.LayerListTriggerActionEvent>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    triggerAction(action: __esri.ActionButton | __esri.ActionToggle, item: __esri.ListItem): Promise<void>;
}
export {};
