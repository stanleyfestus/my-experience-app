import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ControllerManager } from "@arcgis/components-controllers";
import type { Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useValuePickerWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.ValuePicker, "icon" | "values" | "caption" | "label" | "component" | "layout" | "loop" | "playRate" | "canNext" | "canPlay" | "canPrevious"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: unknown;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.ValuePickerProperties): __esri.ValuePickerProperties | Promise<__esri.ValuePickerProperties>;
} | undefined) => __esri.ValuePicker;
export declare class ArcgisValuePicker implements Use<typeof useValuePickerWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.ValuePicker;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    canNext: boolean;
    canPlay: boolean;
    canPrevious: boolean;
    caption: string;
    component: __esri.ValuePickerCollection | __esri.ValuePickerCombobox | __esri.ValuePickerLabel | __esri.ValuePickerSlider;
    icon: string;
    label: string;
    layout: "horizontal" | "vertical";
    loop: boolean;
    playRate: number;
    hideNextButton: boolean | undefined;
    hidePlayButton: boolean | undefined;
    hidePreviousButton: boolean | undefined;
    values: any[] | string[] | number[];
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "values";
    }> & CustomEvent<{
        name: "values";
    }>;
    widgetAnimate: EventEmitter<__esri.ValuePickerAnimateEvent>;
    widgetNext: EventEmitter<__esri.ValuePickerNextEvent>;
    widgetPause: EventEmitter<__esri.ValuePickerPauseEvent>;
    widgetPlay: EventEmitter<__esri.ValuePickerPlayEvent>;
    widgetPrevious: EventEmitter<__esri.ValuePickerPreviousEvent>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    next(): Promise<void>;
    pause(): Promise<void>;
    play(): Promise<void>;
    previous(): Promise<void>;
}
export {};
