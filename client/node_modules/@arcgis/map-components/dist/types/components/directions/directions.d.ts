import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useDirectionsWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.Directions, "icon" | "label" | "viewModel" | "layer" | "unit" | "headingLevel" | "apiKey" | "maxStops" | "searchProperties"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.DirectionsViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.DirectionsProperties): __esri.DirectionsProperties | Promise<__esri.DirectionsProperties>;
} | undefined) => __esri.Directions;
export declare class ArcgisDirections implements Use<typeof useDirectionsWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Directions;
    viewModel: __esri.DirectionsViewModel;
    componentDidLoad(): void;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    apiKey: string;
    icon: string;
    label: string;
    routeLayerItemId: Nil | string;
    lastRoute: __esri.DirectionsLastRoute;
    layer: __esri.RouteLayer;
    headingLevel: number;
    maxStops: number;
    searchProperties: __esri.DirectionsSearchProperties;
    unit: "imperial" | "metric" | "millimeters" | "centimeters" | "decimeters" | "meters" | "kilometers" | "inches" | "feet" | "yards" | "miles" | "nautical-miles";
    useDefaultRouteLayer: boolean;
    hideLayerDetails: boolean | undefined;
    hideSaveAsButton: boolean | undefined;
    hideSaveButton: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state" | "lastRoute";
    }> & CustomEvent<{
        name: "state" | "lastRoute";
    }>;
    /** Maintain a default route layer */
    private _setDefaultLayer;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    getDirections(): Promise<__esri.RouteLayerSolveResult>;
    save(): Promise<__esri.PortalItem>;
    saveAs(portalItem: Promise<__esri.PortalItem>, options: {
        folder: __esri.PortalFolder;
    }): Promise<__esri.PortalItem>;
    zoomToRoute(): Promise<void>;
}
export {};
