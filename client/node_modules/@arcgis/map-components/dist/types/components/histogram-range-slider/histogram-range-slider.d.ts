import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useHistogramRangeSliderWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager<never>;
    el: HTMLElement;
    autoDestroyDisabled?: boolean | undefined;
    destroy?: (() => Promise<void>) | undefined;
} & Pick<__esri.HistogramRangeSlider, "icon" | "values" | "label" | "viewModel" | "average" | "min" | "max" | "barCreatedFunction" | "bins" | "dataLineCreatedFunction" | "dataLines" | "labelFormatFunction" | "excludedBarColor" | "includedBarColor" | "precision" | "rangeType" | "standardDeviation" | "standardDeviationCount"> & {
    reactiveUtils?: __esri.reactiveUtils | undefined;
    state?: unknown;
    viewModel?: __esri.HistogramRangeSliderViewModel | undefined;
    icon: string | Nil;
    label: string | Nil;
    referenceElement: string | ArcgisReferenceElement | Nil;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | {
        emit(): CustomEvent<undefined>;
    };
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: (HTMLElement & {
            ownedBy?: HTMLElement | undefined;
        }) | undefined;
        view?: __esri.MapView | __esri.SceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.HistogramRangeSliderProperties): __esri.HistogramRangeSliderProperties | Promise<__esri.HistogramRangeSliderProperties>;
} | undefined) => __esri.HistogramRangeSlider;
export declare class ArcgisHistogramRangeSlider implements Use<typeof useHistogramRangeSliderWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.HistogramRangeSlider;
    viewModel: __esri.HistogramRangeSliderViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    icon: string;
    label: string;
    average: number;
    barCreatedFunction: __esri.BarCreatedFunction;
    bins: __esri.Bin[];
    dataLineCreatedFunction: __esri.DataLineCreatedFunction;
    dataLines: __esri.HistogramRangeSliderDataLines[];
    excludedBarColor: __esri.Color;
    includedBarColor: __esri.Color;
    labelFormatFunction: __esri.SliderLabelFormatter;
    max: number;
    min: number;
    precision: number;
    rangeType: "equal" | "not-equal" | "less-than" | "greater-than" | "at-most" | "at-least" | "between" | "not-between";
    standardDeviation: number;
    standardDeviationCount: number;
    values: number[];
    position: __esri.UIPosition;
    state: "ready" | "disabled";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").CovariantEventEmitter<{
        name: "state";
    }> & CustomEvent<{
        name: "state";
    }>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    /**
     * Generates a SQL where clause based on a given field and the slider's
     * rangeType
     */
    generateWhereClause(field: string): Promise<string>;
}
export {};
