/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { r as registerInstance, c as createEvent, g as getElement } from './index-a701542b.js';
import { u as usePropertyChange } from './index-266be087.js';
import { $ as newWidgetsOrientedImageryViewer, a0 as newLayersOrientedImageryLayer } from './index-c73b2050.js';
import { m as makeWidgetController } from './useWidget-f2119dfc.js';
import { u as useControllerManager, g as getSet } from './index-25757424.js';
import './component-utils-5806dcb0.js';

const orientedImageryViewerCss = "";
const ArcgisOrientedImageryViewerStyle0 = orientedImageryViewerCss;

const useOrientedImageryViewerWidget = makeWidgetController(newWidgetsOrientedImageryViewer);
const ArcgisOrientedImageryViewer = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this);
        this.widget = useOrientedImageryViewerWidget(this);
        this.viewModel = this.widget.viewModel;
        this._hasOrientedImageryLayerToAdd = false;
        this.arcgisPropertyChange = usePropertyChange()("imageGalleryEnabled", "layer");
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.position = "bottom-left";
        this.referenceElement = undefined;
        this.currentCoverageVisible = this.widget.currentCoverageVisible;
        this.disabled = this.widget.disabled;
        this.galleryOpened = this.widget.galleryOpened;
        this.imageEnhancementToolActive = this.widget.imageEnhancementToolActive;
        this.imageGalleryEnabled = this.widget.imageGalleryEnabled;
        this.orientedImageryLayerItemId = getSet(undefined, {
            set: (value) => {
                if (value && this.widget) {
                    newLayersOrientedImageryLayer({
                        portalItem: {
                            id: value,
                        },
                    })
                        .then((layer) => {
                        this.layer = layer;
                        if (this.widget.view) {
                            this.widget.view?.map.add(this.layer);
                        }
                        else {
                            this._hasOrientedImageryLayerToAdd = true;
                        }
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.isAdditionalCoverageVisible = this.widget.isAdditionalCoverageVisible;
        this.isAdditionalPointSourcesVisible = this.widget.isAdditionalPointSourcesVisible;
        this.layer = this.widget.layer;
        this.mapImageConversionToolState = this.widget.mapImageConversionToolState;
        this.navigationToolActive = this.widget.navigationToolActive;
        this.referencePoint = this.widget.referencePoint;
        this.autoDestroyDisabled = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentDidLoad() {
        if (this._hasOrientedImageryLayerToAdd) {
            if (this.widget.view) {
                this.widget.view?.map.add(this.layer);
                this._hasOrientedImageryLayerToAdd = false;
            }
            else {
                this.el.addEventListener("arcgisReady", () => {
                    this.widget.view.map.add(this.layer);
                    this._hasOrientedImageryLayerToAdd = false;
                }, { once: true });
            }
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return getElement(this); }
};
ArcgisOrientedImageryViewer.style = ArcgisOrientedImageryViewerStyle0;

export { ArcgisOrientedImageryViewer as arcgis_oriented_imagery_viewer };
