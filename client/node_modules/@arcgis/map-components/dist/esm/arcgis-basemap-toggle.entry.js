/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-a701542b.js';
import { g as globalCss } from './globalCss-4c5375df.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel-29d4d04a.js';
import { p as importApplicationsComponentsBasemapUtils, q as classes, r as newWidgetsBasemapToggleBasemapToggleViewModel } from './index-c73b2050.js';
import { l as load, u as usePropertyChange } from './index-266be087.js';
import { u as useControllerManager } from './index-25757424.js';
import './component-utils-5806dcb0.js';

const base = "esri-basemap-toggle";
const baseThumbnail = "esri-basemap-thumbnail";
const css = {
    base,
    secondaryBasemapImage: `${base}__image--secondary`,
    container: `${baseThumbnail} ${base}__container`,
    image: `${baseThumbnail}__image ${base}__image`,
    imageLoading: `${base}__image--loading`,
    overlay: `${baseThumbnail}__overlay ${base}__image-overlay`,
    title: `${baseThumbnail}__title ${base}__title`,
    overlayScrim: `${baseThumbnail}__overlay-scrim`,
};

const useBasemapToggleViewModel = makeViewModelController(newWidgetsBasemapToggleBasemapToggleViewModel);
const ArcgisBasemapToggle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this);
        this.messages = useT9n();
        this.basemapUtils = load(importApplicationsComponentsBasemapUtils);
        this.viewModel = useBasemapToggleViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("nextBasemap", "state");
        this.activeBasemap = this.viewModel.activeBasemap;
        this.autoDestroyDisabled = false;
        this.icon = "layer-basemap";
        this.label = undefined;
        this.messageOverrides = undefined;
        this.nextBasemap = this.viewModel.nextBasemap;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.showTitle = false;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Toggles to the [next basemap](#nextBasemap).
     */
    async toggle() {
        return await this.viewModel.toggle();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const vm = this.viewModel;
        const activeBasemap = vm.state === "disabled" ? null : vm.activeBasemap;
        const nextBasemap = vm.state === "disabled" ? null : vm.nextBasemap;
        const vmLoading = vm.state === "loading";
        const nextBasemapIncompatible = vm.state === "incompatible-next-basemap";
        const title = nextBasemap?.title ?? "";
        const nextBasemapLoading = nextBasemap && nextBasemap.loadStatus !== "loaded";
        let overlayNode;
        const willShowTitle = this.showTitle && title;
        const willShowAsIncompatible = nextBasemapIncompatible;
        const willShowOverlay = willShowTitle || willShowAsIncompatible;
        const thumbnailStyleActive = this._getThumbnailStyles(activeBasemap);
        const thumbnailStyleNext = this._getThumbnailStyles(nextBasemap);
        if (willShowOverlay) {
            overlayNode = (h("div", { key: 'd7f281c2a7df20e2b362b6dbeab9646c88e9a8da', class: css.overlay }, willShowTitle ? (h("span", { class: css.title, title: title }, title)) : null, willShowAsIncompatible ? (h("calcite-scrim", { class: css.overlayScrim, title: this.messages.incompatibleSpatialReference }, h("calcite-icon", { icon: "exclamation-mark-triangle" }))) : null));
        }
        return (h("div", { key: '9e5edf9c8688c70a72b42962589a12768b9a7c32', class: classes(css.base, globalCss.widget) }, h("calcite-button", { key: '1c0f75cadd134cfcd93d12687b7a0e8f70bf7898', appearance: "transparent", "data-basemap-id": nextBasemap ? nextBasemap.id : "", disabled: nextBasemapIncompatible, kind: "neutral", label: this.label ?? undefined, onClick: () => void this.toggle(), title: this.label ?? undefined }, h("div", { key: 'd01480d263946bcc713c7000a999f80a916febd7', class: classes(css.container, css.secondaryBasemapImage) }, h("div", { key: '08346645943526f40049749f3002cdf0347426b6', class: css.image, style: thumbnailStyleActive })), h("div", { key: '915c11c5f2899294cc6f4c8161bd82037666de03', class: css.container }, h("div", { key: 'aee86dfaef1d22a57e25197397ed1c6b02032767', class: classes(css.image, nextBasemapLoading ? css.imageLoading : null), style: thumbnailStyleNext }, nextBasemapLoading || vmLoading ? (h("calcite-scrim", null, h("span", { "aria-hidden": "true", class: globalCss.loaderAnimation, role: "presentation" }))) : null), overlayNode))));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _getThumbnailStyles(basemap) {
        const thumbnailUrl = this.basemapUtils.getBasemapThumbnailUrl(basemap);
        return thumbnailUrl ? { backgroundImage: `url(${thumbnailUrl})` } : { backgroundImage: "" };
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return getElement(this); }
};

export { ArcgisBasemapToggle as arcgis_basemap_toggle };
