/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { w as watch, p as proxyExports, C as Controller, s as setAmbientComponent } from './index-25757424.js';
import { s as startLocaleObserver, g as getElementLocales } from './index-c73b2050.js';

// src/functional.ts
var makeController = (constructor) => proxy(void 0, constructor);
var FunctionalController = class extends Controller {
  constructor(component, constructor) {
    super(component);
    const originalExports = this.exports;
    try {
      setAmbientComponent(this.component);
      const value = constructor(this.component, this);
      const constructorChangedExports = this.exports !== originalExports;
      if (value instanceof Promise) {
        if (!constructorChangedExports) {
          this.setProvisionalExports(value);
        }
        const resolved = value.then((result) => {
          this.exports = result;
          super.catchUpLifecycle();
        }).catch((error) => {
          this._ready.reject(error);
          console.error(error);
        });
        this.onLoad(async () => await resolved);
      } else {
        if (!constructorChangedExports || value !== void 0) {
          this.exports = value;
        }
        queueMicrotask(() => super.catchUpLifecycle());
      }
    } catch (error) {
      this._ready.reject(error);
      console.error(error);
    }
  }
  /** Noop - will be called in the constructor instead */
  catchUpLifecycle() {
    return;
  }
};
var proxy = proxyExports(FunctionalController);

// src/load.ts
var load = makeController;
var makeT9nController = (getAssetPath) => (options = {}) => (
  // eslint-disable-next-line @typescript-eslint/promise-function-async
  makeController((component, controller) => {
    const componentWithOverrides = component;
    controller.onLifecycle(
      () => startLocaleObserver(
        component.el,
        getAssetPath("./assets"),
        ({ t9nLocale, t9nStrings, lang }) => {
          const withoutOverrides = {
            ...t9nStrings,
            _lang: lang,
            _t9nLocale: t9nLocale,
            _loading: false
          };
          controller.exports = withoutOverrides;
          const label = t9nStrings.componentLabel ?? t9nStrings.widgetLabel;
          if (typeof label === "string" && "label" in component && component.label == null) {
            component.label ?? (component.label = label);
          }
          applyOverrides(componentWithOverrides.messageOverrides);
        },
        options.name
      )
    );
    function applyOverrides(messageOverrides) {
      const currentValue = controller.exports;
      const rawMessages = currentValue._original ?? currentValue;
      const updated = deepMerge(rawMessages, messageOverrides);
      updated._original = rawMessages;
      controller.exports = updated;
    }
    if ("messageOverrides" in componentWithOverrides) {
      controller.onLifecycle(() => watch(componentWithOverrides, "messageOverrides", applyOverrides));
    }
    if (options.blocking) {
      return controller.ready;
    }
    const locale = getElementLocales(component.el);
    const pending = {
      _lang: locale.lang,
      _t9nLocale: locale.t9nLocale,
      _loading: true
    };
    return pending;
  })
);
function deepMerge(original, overwrites) {
  if (!overwrites) {
    return original;
  }
  const merged = { ...original };
  Object.entries(overwrites).forEach(([key, value]) => {
    if (typeof value === "object") {
      merged[key] = deepMerge(original[key], value);
    } else {
      merged[key] = value ?? original[key];
    }
  });
  return merged;
}

// src/usePropertyChange.ts
var usePropertyChange = (_component) => propertyChangeController;
var eventName = "arcgisPropertyChange";
var propertyChangeController = (...toWatch) => makeController((component, controller) => {
  const eventedComponent = component;
  let eventEmitter = eventedComponent[eventName];
  if (component.manager.isLit) {
    eventEmitter = component.constructor.createEvent(eventName, void 0, component);
  }
  controller.onLoad(
    () => controller.onLifecycle(
      () => toWatch.map(
        (name) => (
          // Casting to 'el' to simplify dynamic prop name typing
          watch(component, name, () => eventEmitter.emit({ name }))
        )
      )
    )
  );
  return eventEmitter;
});

export { load as l, makeT9nController as m, usePropertyChange as u };
