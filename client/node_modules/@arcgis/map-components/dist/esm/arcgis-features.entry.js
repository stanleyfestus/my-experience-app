/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { r as registerInstance, c as createEvent, g as getElement } from './index-a701542b.js';
import { u as usePropertyChange } from './index-266be087.js';
import { N as newWidgetsFeatures } from './index-c73b2050.js';
import { m as makeWidgetController } from './useWidget-f2119dfc.js';
import { u as useControllerManager } from './index-25757424.js';
import './component-utils-5806dcb0.js';

const featuresCss = "arcgis-features{}";
const ArcgisFeaturesStyle0 = featuresCss;

const useFeaturesWidget = makeWidgetController(newWidgetsFeatures);
const ArcgisFeatures = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.widgetTriggerAction = createEvent(this, "arcgisTriggerAction", 7);
        this.manager = useControllerManager(this);
        this.widget = useFeaturesWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("selectedFeature", "selectedFeatureIndex", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.collapsed = this.widget.collapsed;
        this.actions = this.viewModel.actions;
        this.active = this.widget.active;
        this.content = this.widget.content;
        this.features = this.widget.features;
        this.featuresPerPage = this.viewModel.featuresPerPage;
        this.featureViewModelAbilities = this.viewModel.featureViewModelAbilities;
        this.goToOverride = this.viewModel.goToOverride;
        this.headingLevel = this.widget.headingLevel;
        this.includeDefaultActions = this.viewModel.includeDefaultActions;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.map = this.widget.map;
        this.promises = this.widget.promises;
        this.selectedFeature = this.widget.selectedFeature;
        this.selectedFeatureIndex = this.widget.selectedFeatureIndex;
        this.spatialReference = this.widget.spatialReference;
        this.featuresTitle = this.widget.title;
        this.timeZone = this.widget.timeZone;
        this.hideActionBar = this.widget.visibleElements.actionBar;
        this.hideCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.hideFeatureNavigation = this.widget.visibleElements.featureNavigation;
        this.hideFlow = this.widget.visibleElements.flow;
        this.hideHeading = this.widget.visibleElements.heading;
        this.hideSpinner = this.widget.visibleElements.spinner;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async fetchFeatures(screenPoint, options) {
        return await this.widget?.fetchFeatures(screenPoint, options);
    }
    async clear() {
        this.widget?.clear();
    }
    async close() {
        this.widget?.close();
    }
    async next() {
        return this.widget?.next();
    }
    async open(options) {
        this.widget?.open(options);
    }
    async previous() {
        return this.widget?.previous();
    }
    async triggerAction(actionIndex) {
        this.widget?.triggerAction(actionIndex);
    }
    get el() { return getElement(this); }
};
ArcgisFeatures.style = ArcgisFeaturesStyle0;

export { ArcgisFeatures as arcgis_features };
