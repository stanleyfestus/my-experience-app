/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { E as newWidgetsEditor } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const editorCss = "";
const ArcgisEditorStyle0 = editorCss;

const useEditorWidget = makeWidgetController(newWidgetsEditor);
const __cmpMeta = [0,"arcgis-editor",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"activeWorkflow":[1040],"allowedWorkflows":[1025,"allowed-workflows"],"icon":[1025],"label":[1025],"labelOptions":[1040],"layerInfos":[1040],"snappingOptions":[1040],"supportingWidgetDefaults":[1040],"tooltipOptions":[1040],"headingLevel":[1026,"heading-level"],"hideCreateFeaturesSection":[1028,"hide-create-features-section"],"hideEditFeaturesSection":[1028,"hide-edit-features-section"],"hideLabelsToggle":[1028,"hide-labels-toggle"],"hideTooltipsToggle":[1028,"hide-tooltips-toggle"],"showSnappingControlsElementsHeader":[1028,"show-snapping-controls-elements-header"],"hideSnappingControlsElementsEnabledToggle":[1028,"hide-snapping-controls-elements-enabled-toggle"],"hideSnappingControlsElementsSelfEnabledToggle":[1028,"hide-snapping-controls-elements-self-enabled-toggle"],"hideSnappingControlsElementsFeatureEnabledToggle":[1028,"hide-snapping-controls-elements-feature-enabled-toggle"],"hideSnappingControlsElementsLayerList":[1028,"hide-snapping-controls-elements-layer-list"],"position":[1025],"state":[1537],"cancelWorkflow":[64],"destroy":[64],"deleteFeatureFromWorkflow":[64],"startCreateFeaturesWorkflowAtFeatureCreation":[64],"startCreateFeaturesWorkflowAtFeatureTypeSelection":[64],"startUpdateWorkflowAtFeatureEdit":[64],"startUpdateWorkflowAtFeatureSelection":[64],"startUpdateWorkflowAtMultipleFeatureSelection":[64]}];
const ArcgisEditor$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisEditor extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useEditorWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("activeWorkflow", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.activeWorkflow = this.widget.activeWorkflow;
        this.allowedWorkflows = this.widget.allowedWorkflows;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.labelOptions = this.widget.labelOptions;
        this.layerInfos = this.widget.layerInfos;
        this.snappingOptions = this.widget.snappingOptions;
        this.supportingWidgetDefaults = this.widget.supportingWidgetDefaults;
        this.tooltipOptions = this.widget.tooltipOptions;
        this.headingLevel = this.widget.headingLevel;
        this.hideCreateFeaturesSection = this.widget.visibleElements.createFeaturesSection;
        this.hideEditFeaturesSection = this.widget.visibleElements.editFeaturesSection;
        this.hideLabelsToggle = this.widget.visibleElements.labelsToggle;
        this.hideTooltipsToggle = this.widget.visibleElements.tooltipsToggle;
        this.showSnappingControlsElementsHeader = this.widget.visibleElements.snappingControlsElements.header;
        this.hideSnappingControlsElementsEnabledToggle = this.widget.visibleElements.snappingControlsElements.enabledToggle;
        this.hideSnappingControlsElementsSelfEnabledToggle = this.widget.visibleElements.snappingControlsElements.selfEnabledToggle;
        this.hideSnappingControlsElementsFeatureEnabledToggle = this.widget.visibleElements.snappingControlsElements.featureEnabledToggle;
        this.hideSnappingControlsElementsLayerList = this.widget.visibleElements.snappingControlsElements.layerList;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancelWorkflow() {
        await this.widget?.cancelWorkflow();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async deleteFeatureFromWorkflow() {
        await this.widget?.deleteFeatureFromWorkflow();
    }
    async startCreateFeaturesWorkflowAtFeatureCreation(info) {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureCreation(info);
    }
    async startCreateFeaturesWorkflowAtFeatureTypeSelection() {
        await this.widget?.startCreateFeaturesWorkflowAtFeatureTypeSelection();
    }
    async startUpdateWorkflowAtFeatureEdit(feature) {
        await this.widget?.startUpdateWorkflowAtFeatureEdit(feature);
    }
    async startUpdateWorkflowAtFeatureSelection() {
        await this.widget?.startUpdateWorkflowAtFeatureSelection();
    }
    async startUpdateWorkflowAtMultipleFeatureSelection(candidates) {
        await this.widget?.startUpdateWorkflowAtMultipleFeatureSelection(candidates);
    }
    get el() { return this; }
    static get style() { return ArcgisEditorStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-editor"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-editor":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisEditor$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisEditor = ArcgisEditor$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisEditor, defineCustomElement };
