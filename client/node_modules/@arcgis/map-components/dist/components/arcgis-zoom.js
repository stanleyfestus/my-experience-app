/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate, h } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { p as classes, an as newWidgetsZoomZoomViewModel } from './index2.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel.js';
import { g as globalCss } from './globalCss.js';
import { u as useControllerManager } from './index4.js';
import "@esri/calcite-components/dist/components/calcite-button.js";

const css = {
    base: "esri-zoom",
    horizontalLayout: "esri-zoom--horizontal",
};

const zoomCss = ".esri-zoom{display:flex;flex-flow:column nowrap}.esri-zoom .esri-widget--button{box-shadow:none}.esri-zoom .esri-widget--button:first-child{margin-bottom:0}.esri-zoom .esri-widget--button:last-child{border-top:solid 1px var(--calcite-color-border-1)}.esri-zoom.esri-zoom--horizontal{flex-flow:row-reverse nowrap}.esri-zoom.esri-zoom--horizontal .esri-widget--button:last-child{border-top:none}.esri-zoom.esri-zoom--horizontal .esri-widget--button:first-child{border-left:solid 1px var(--calcite-color-border-1)}[dir=\"rtl\"] .esri-zoom.esri-zoom--horizontal .esri-widget--button:first-child{border-top:none}[dir=\"rtl\"] .esri-zoom.esri-zoom--horizontal .esri-widget--button:last-child{border-left:solid 1px var(--calcite-color-border-1)}";
const ArcgisZoomStyle0 = zoomCss;

const useZoomViewModel = makeViewModelController(newWidgetsZoomZoomViewModel);
const __cmpMeta = [0,"arcgis-zoom",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"icon":[1537],"label":[1025],"layout":[1537],"messageOverrides":[1040],"position":[1025],"referenceElement":[1025,"reference-element"],"state":[1537],"canZoomIn":[32],"canZoomOut":[32],"destroy":[64],"zoomIn":[64],"zoomOut":[64]}];
const ArcgisZoom$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisZoom extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this,forceUpdate);
        this.messages = useT9n({});
        this.viewModel = useZoomViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.icon = "magnifying-glass-plus";
        this.label = undefined;
        this.layout = "vertical";
        this.messageOverrides = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
        this.canZoomIn = this.viewModel.canZoomIn;
        this.canZoomOut = this.viewModel.canZoomOut;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    /**
     * Zooms the view in by an LOD factor of 0.5.
     */
    async zoomIn() {
        this.viewModel.zoomIn();
    }
    /**
     * Zooms the view out by an LOD factor of 2.
     */
    async zoomOut() {
        this.viewModel.zoomOut();
    }
    render() {
        const rootClasses = {
            [css.horizontalLayout]: this.layout === "horizontal",
        };
        const { canZoomIn, canZoomOut } = this.viewModel;
        const { zoomIn, zoomOut } = this.messages;
        return (h("div", { key: '1669be1a2b0018a4efa0009cf4a465339801af84', class: classes(css.base, globalCss.widget, rootClasses) }, h("calcite-button", { key: 'e283c90ad1ab58d6fc6d87b7eb79f87b8642e418', class: globalCss.widgetButton, disabled: !canZoomIn, iconStart: "plus", kind: "neutral", label: zoomIn, onClick: this.zoomIn.bind(this), title: zoomIn }), h("calcite-button", { key: '1a47a30cb4cf74f4ffc3c8e7d159f32c08c410f6', class: globalCss.widgetButton, disabled: !canZoomOut, iconStart: "minus", kind: "neutral", label: zoomOut, onClick: this.zoomOut.bind(this), title: zoomOut })));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
    static get style() { return ArcgisZoomStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-zoom"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-zoom":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisZoom$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisZoom = ArcgisZoom$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisZoom, defineCustomElement };
