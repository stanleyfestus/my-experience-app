/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { r as newWidgetsBookmarks } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const bookmarksCss = "";
const ArcgisBookmarksStyle0 = bookmarksCss;

const useBookmarksWidget = makeWidgetController(newWidgetsBookmarks);
const __cmpMeta = [0,"arcgis-bookmarks",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"bookmarks":[1040],"defaultCreateOptions":[1040],"defaultEditOptions":[1040],"disabled":[1540],"dragEnabled":[1028,"drag-enabled"],"filterPlaceholder":[1025,"filter-placeholder"],"filterText":[1025,"filter-text"],"icon":[1025],"label":[1025],"showAddBookmarkButton":[1028,"show-add-bookmark-button"],"showCloseButton":[1028,"show-close-button"],"showCollapseButton":[1028,"show-collapse-button"],"showEditBookmarkButton":[1028,"show-edit-bookmark-button"],"showFilter":[1028,"show-filter"],"hideFlow":[1028,"hide-flow"],"showHeading":[1028,"show-heading"],"hideThumbnail":[1028,"hide-thumbnail"],"hideTime":[1028,"hide-time"],"position":[1025],"state":[1537],"destroy":[64]}];
const ArcgisBookmarks$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisBookmarks extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.widgetBookmarkEdit = createEvent(this, "arcgisEdit", 7);
        this.widgetBookmarkSelect = createEvent(this, "arcgisSelect", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useBookmarksWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.bookmarks = this.widget.bookmarks;
        this.defaultCreateOptions = this.widget.defaultCreateOptions;
        this.defaultEditOptions = this.widget.defaultEditOptions;
        this.disabled = this.widget.disabled;
        this.dragEnabled = this.widget.dragEnabled;
        this.filterPlaceholder = this.widget.filterPlaceholder;
        this.filterText = this.widget.filterText;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.showAddBookmarkButton = this.widget.visibleElements.addBookmarkButton;
        this.showCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.showEditBookmarkButton = this.widget.visibleElements.editBookmarkButton;
        this.showFilter = this.widget.visibleElements.filter;
        this.hideFlow = this.widget.visibleElements.flow;
        this.showHeading = this.widget.visibleElements.heading;
        this.hideThumbnail = this.widget.visibleElements.thumbnail;
        this.hideTime = this.widget.visibleElements.time;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return this; }
    static get style() { return ArcgisBookmarksStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-bookmarks"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-bookmarks":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisBookmarks$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisBookmarks = ArcgisBookmarks$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisBookmarks, defineCustomElement };
