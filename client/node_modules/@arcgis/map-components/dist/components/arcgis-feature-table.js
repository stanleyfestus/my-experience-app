/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { J as newWidgetsFeatureTable, K as newLayersFeatureLayer } from './index2.js';
import { m as makeWidgetController } from './useWidget.js';
import { i as isNullOrEmptyString } from './component-utils.js';
import { u as useControllerManager, g as getSet } from './index4.js';

const featureTableCss = ".arcgis-feature-table{width:100%;height:100%}";
const ArcgisFeatureTableStyle0 = featureTableCss;

const useFeatureTableWidget = makeWidgetController(newWidgetsFeatureTable);
const __cmpMeta = [0,"arcgis-feature-table",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"position":[1025],"activeFilters":[1040],"activeSortOrders":[1040],"attachmentsEnabled":[1028,"attachments-enabled"],"autoRefreshEnabled":[1028,"auto-refresh-enabled"],"columnReorderingEnabled":[1028,"column-reordering-enabled"],"columns":[1040],"description":[1025],"icon":[1025],"label":[1025],"editingEnabled":[1028,"editing-enabled"],"filterBySelectionEnabled":[1028,"filter-by-selection-enabled"],"filterGeometry":[1040],"hiddenFields":[1040],"highlightEnabled":[1028,"highlight-enabled"],"highlightIds":[1040],"layer":[1040],"menuConfig":[1040],"multiSortEnabled":[1028,"multi-sort-enabled"],"objectIds":[1040],"outFields":[1040],"pageCount":[1026,"page-count"],"pageIndex":[1026,"page-index"],"paginationEnabled":[1028,"pagination-enabled"],"pageSize":[1026,"page-size"],"relatedRecordsEnabled":[1028,"related-records-enabled"],"returnGeometryEnabled":[1028,"return-geometry-enabled"],"returnMEnabled":[1028,"return-m-enabled"],"returnZEnabled":[1028,"return-z-enabled"],"tableTemplate":[1040],"timeZone":[1025,"time-zone"],"itemId":[1025,"item-id"],"url":[1025],"hideHeader":[1028,"hide-header"],"hideMenu":[1028,"hide-menu"],"hideSelectionColumn":[1028,"hide-selection-column"],"hideColumnMenus":[1028,"hide-column-menus"],"hideMenuItemsClearSelection":[1028,"hide-menu-items-clear-selection"],"hideMenuItemsDeleteSelection":[1028,"hide-menu-items-delete-selection"],"hideMenuItemsRefreshData":[1028,"hide-menu-items-refresh-data"],"hideMenuItemsSelectedRecordsShowAllToggle":[1028,"hide-menu-items-selected-records-show-all-toggle"],"hideMenuItemsToggleColumns":[1028,"hide-menu-items-toggle-columns"],"hideMenuItemsZoomToSelection":[1028,"hide-menu-items-zoom-to-selection"],"state":[1537],"destroy":[64],"clearSelectionFilter":[64],"deleteSelection":[64],"filterBySelection":[64],"findColumn":[64],"goToPage":[64],"hideColumn":[64],"nextPage":[64],"previousPage":[64],"refresh":[64],"scrollToLeft":[64],"scrollToBottom":[64],"scrollToIndex":[64],"scrollToRow":[64],"scrollToTop":[64],"showAllColumns":[64],"showColumn":[64],"sortColumn":[64],"zoomToSelection":[64]}];
const ArcgisFeatureTable$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFeatureTable extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisSelectionChange = createEvent(this, "arcgisSelectionChange", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useFeatureTableWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.position = "manual";
        this.activeFilters = this.widget.activeFilters;
        this.activeSortOrders = this.widget.activeSortOrders;
        this.attachmentsEnabled = this.widget.attachmentsEnabled;
        this.autoRefreshEnabled = this.widget.autoRefreshEnabled;
        this.columnReorderingEnabled = this.widget.columnReorderingEnabled;
        this.columns = this.widget.columns;
        this.description = this.widget.description;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.editingEnabled = this.widget.editingEnabled;
        this.filterBySelectionEnabled = this.widget.filterBySelectionEnabled;
        this.filterGeometry = this.widget.filterGeometry;
        this.hiddenFields = this.widget.hiddenFields;
        this.highlightEnabled = this.widget.highlightEnabled;
        this.highlightIds = this.widget.highlightIds;
        this.layer = this.widget.layer;
        this.menuConfig = this.widget.menuConfig;
        this.multiSortEnabled = this.widget.multiSortEnabled;
        this.objectIds = this.widget.objectIds;
        this.outFields = this.widget.outFields;
        this.pageCount = this.widget.pageCount;
        this.pageIndex = this.widget.pageIndex;
        this.paginationEnabled = this.widget.paginationEnabled;
        this.pageSize = this.widget.pageSize;
        this.relatedRecordsEnabled = this.widget.relatedRecordsEnabled;
        this.returnGeometryEnabled = this.widget.returnGeometryEnabled;
        this.returnMEnabled = this.widget.returnMEnabled;
        this.returnZEnabled = this.widget.returnZEnabled;
        this.tableTemplate = this.widget.tableTemplate;
        this.timeZone = this.widget.timeZone;
        this.itemId = getSet(undefined, {
            set: (value) => {
                if (isNullOrEmptyString(value)) {
                    this.layer = null;
                }
                else if (value) {
                    newLayersFeatureLayer({
                        portalItem: {
                            id: value,
                        },
                    })
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.url = getSet(undefined, {
            set: (value) => {
                if (value) {
                    newLayersFeatureLayer({ url: value })
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.hideHeader = this.widget.visibleElements.header;
        this.hideMenu = this.widget.visibleElements.menu;
        this.hideSelectionColumn = this.widget.visibleElements.selectionColumn;
        this.hideColumnMenus = this.widget.visibleElements.columnMenus;
        this.hideMenuItemsClearSelection = this.widget.visibleElements.menuItems.clearSelection;
        this.hideMenuItemsDeleteSelection = this.widget.visibleElements.menuItems.deleteSelection;
        this.hideMenuItemsRefreshData = this.widget.visibleElements.menuItems.refreshData;
        this.hideMenuItemsSelectedRecordsShowAllToggle = this.widget.visibleElements.menuItems.selectedRecordsShowAllToggle;
        this.hideMenuItemsToggleColumns = this.widget.visibleElements.menuItems.toggleColumns;
        this.hideMenuItemsZoomToSelection = this.widget.visibleElements.menuItems.zoomToSelection;
        this.state = this.widget.state;
    }
    componentWillLoad() {
        this.manager.onLifecycle(() => this.widget.highlightIds.on("change", this.arcgisSelectionChange.emit));
    }
    componentDidLoad() {
        this.el.childElem?.classList.add("arcgis-feature-table");
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async clearSelectionFilter() {
        this.widget?.clearSelectionFilter();
    }
    async deleteSelection(showWarningPrompt) {
        await this.widget?.deleteSelection(showWarningPrompt);
    }
    async filterBySelection() {
        this.widget?.filterBySelection();
    }
    async findColumn(fieldName) {
        return this.widget?.findColumn(fieldName);
    }
    async goToPage(index) {
        this.widget.goToPage(index);
    }
    async hideColumn(fieldName) {
        this.widget?.hideColumn(fieldName);
    }
    async nextPage() {
        this.widget.nextPage();
    }
    async previousPage() {
        this.widget.previousPage();
    }
    async refresh() {
        await this.widget?.refresh();
    }
    async scrollToLeft() {
        this.widget.scrollLeft();
    }
    async scrollToBottom() {
        this.widget.scrollToBottom();
    }
    async scrollToIndex(index) {
        this.widget?.scrollToIndex(index);
    }
    async scrollToRow(objectId) {
        this.widget?.scrollToRow(objectId);
    }
    async scrollToTop() {
        this.widget.scrollToTop();
    }
    async showAllColumns() {
        this.widget?.showAllColumns();
    }
    async showColumn(fieldName) {
        this.widget?.showColumn(fieldName);
    }
    async sortColumn(path, direction) {
        this.widget?.sortColumn(path, direction);
    }
    async zoomToSelection() {
        this.widget?.zoomToSelection();
    }
    get el() { return this; }
    static get style() { return ArcgisFeatureTableStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-feature-table"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-feature-table":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFeatureTable$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFeatureTable = ArcgisFeatureTable$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFeatureTable, defineCustomElement };
