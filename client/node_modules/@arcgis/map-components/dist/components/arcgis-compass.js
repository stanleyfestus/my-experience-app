/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate, h } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { p as classes, v as newWidgetsCompassCompassViewModel } from './index2.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel.js';
import { g as globalCss } from './globalCss.js';
import { u as useControllerManager, g as getSet } from './index4.js';
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-icon.js";

const base = "esri-compass";
const css = {
    base,
    iconContainer: `${base}__icon-container`,
};
const useCompassViewModel = makeViewModelController(newWidgetsCompassCompassViewModel);
const __cmpMeta = [0,"arcgis-compass",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"icon":[1537],"label":[1025],"position":[1537],"orientation":[1040],"referenceElement":[1025,"reference-element"],"state":[1537],"reset":[64],"destroy":[64]}];
const ArcgisCompass$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisCompass extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this,forceUpdate);
        this.messages = useT9n();
        this.viewModel = useCompassViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("state", "orientation");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._toRotationTransform = (orientation) => ({
            transform: `rotateZ(${orientation.z}deg)`,
        });
        this._reset = () => {
            this.viewModel.reset();
        };
        this.autoDestroyDisabled = false;
        this.icon = getSet(undefined, {
            get: (currentValue) => currentValue || (this.state === "rotation" ? "arrow-up" : "compass-needle"),
        });
        this.label = undefined;
        this.position = "top-left";
        this.orientation = this.viewModel.orientation;
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { messages, icon } = this;
        return (h("div", { key: 'cc3a9d3a33f522559ca39c371f16be5a8818c849', class: classes(css.base, globalCss.widget) }, h("calcite-button", { key: '6345fb632e7cc08b302641c433bf60982fa30979', class: globalCss.widgetButton, disabled: this.state === "disabled", kind: "neutral", label: messages.reset, onClick: this._reset, round: true, scale: "s", title: messages.reset }, h("div", { key: 'd8518d5c16a8b8f7a4d302c8a6e0e81120a246b3', "aria-hidden": "true",
            // Fix for Calcite's padding inline/block not being consistent
            class: css.iconContainer, title: messages.reset }, h("calcite-icon", { key: '34816c4f9f85884cd7b23fc3f6818c3bfda6e5e7', icon: icon, style: this._toRotationTransform(this.orientation) })))));
    }
    async reset() {
        return this.viewModel.reset();
    }
    async destroy() {
        await this.manager.destroy();
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-compass"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-compass":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisCompass$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisCompass = ArcgisCompass$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisCompass, defineCustomElement };
