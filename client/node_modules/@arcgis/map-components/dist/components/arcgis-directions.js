/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { z as newLayersRouteLayer, A as newWidgetsDirections } from './index2.js';
import { i as isNullOrEmptyString } from './component-utils.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager, g as getSet } from './index4.js';

const directionsCss = "";
const ArcgisDirectionsStyle0 = directionsCss;

const useDirectionsWidget = makeWidgetController(newWidgetsDirections);
const loggerName = "map-components:arcgis-directions";
const __cmpMeta = [0,"arcgis-directions",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"apiKey":[1025,"api-key"],"icon":[1025],"label":[1025],"routeLayerItemId":[1025,"route-layer-item-id"],"lastRoute":[1040],"layer":[1040],"headingLevel":[1026,"heading-level"],"maxStops":[1026,"max-stops"],"searchProperties":[1040],"unit":[1025],"useDefaultRouteLayer":[1028,"use-default-route-layer"],"hideLayerDetails":[1028,"hide-layer-details"],"hideSaveAsButton":[1028,"hide-save-as-button"],"hideSaveButton":[1028,"hide-save-button"],"position":[1025],"state":[1025],"destroy":[64],"getDirections":[64],"save":[64],"saveAs":[64],"zoomToRoute":[64]}];
const ArcgisDirections$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisDirections extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useDirectionsWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("lastRoute", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.apiKey = this.widget.apiKey;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.routeLayerItemId = getSet(undefined, {
            set: (value) => {
                if (isNullOrEmptyString(value) && !this.useDefaultRouteLayer) {
                    this.widget.view?.map.remove(this.layer);
                    this._setDefaultLayer();
                }
                else if (value && this.widget) {
                    newLayersRouteLayer({
                        portalItem: {
                            id: value,
                        },
                    })
                        .then((layer) => {
                        this.layer = layer;
                        this.widget.view?.map.add(this.layer);
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.lastRoute = this.widget.lastRoute;
        this.layer = this.widget.layer;
        this.headingLevel = this.widget.headingLevel;
        this.maxStops = this.widget.maxStops;
        this.searchProperties = this.widget.searchProperties;
        this.unit = this.widget.unit;
        this.useDefaultRouteLayer = getSet(false, {
            set: (newValue) => {
                this._setDefaultLayer();
                return newValue;
            },
        });
        this.hideLayerDetails = this.widget.visibleElements.layerDetails;
        this.hideSaveAsButton = this.widget.visibleElements.saveAsButton;
        this.hideSaveButton = this.widget.visibleElements.saveButton;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentDidLoad() {
        this._setDefaultLayer();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /** Maintain a default route layer */
    _setDefaultLayer() {
        if (this.useDefaultRouteLayer && !this.routeLayerItemId) {
            newLayersRouteLayer({})
                .then((layer) => {
                this.layer = layer;
                this.widget.view?.map.add(this.layer);
            })
                .catch(console.error);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async getDirections() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to get directions`);
        }
        return await this.widget?.getDirections();
    }
    async save() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to save directions`);
        }
        return await this.widget?.save();
    }
    async saveAs(portalItem, options) {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to save directions as a Portal Item`);
        }
        return await this.widget?.saveAs(portalItem, options);
    }
    async zoomToRoute() {
        if (this.widget?.viewModel?.state !== "ready") {
            throw new Error(`${loggerName} - component not ready to zoom to route`);
        }
        this.widget?.zoomToRoute();
    }
    get el() { return this; }
    static get style() { return ArcgisDirectionsStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-directions"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-directions":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisDirections$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisDirections = ArcgisDirections$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisDirections, defineCustomElement };
