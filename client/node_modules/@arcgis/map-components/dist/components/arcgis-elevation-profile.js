/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { F as newWidgetsElevationProfile } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const elevationProfileCss = "";
const ArcgisElevationProfileStyle0 = elevationProfileCss;

const useElevationProfileWidget = makeWidgetController(newWidgetsElevationProfile);
const __cmpMeta = [0,"arcgis-elevation-profile",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"effectiveUnits":[1040],"highlightEnabled":[1028,"highlight-enabled"],"hoveredChartPosition":[1026,"hovered-chart-position"],"icon":[1025],"label":[1025],"input":[1040],"profiles":[1040],"progress":[1026],"unit":[1025],"uniformChartScaling":[1028,"uniform-chart-scaling"],"unitOptions":[1040],"hideLegend":[1028,"hide-legend"],"hideChart":[1028,"hide-chart"],"hideClearButton":[1028,"hide-clear-button"],"hideSettingsButton":[1028,"hide-settings-button"],"hideSketchButton":[1028,"hide-sketch-button"],"hideSelectButton":[1028,"hide-select-button"],"hideUnitSelector":[1028,"hide-unit-selector"],"hideUniformChartScalingToggle":[1028,"hide-uniform-chart-scaling-toggle"],"position":[1025],"state":[1537],"destroy":[64],"start":[64],"stop":[64]}];
const ArcgisElevationProfile$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisElevationProfile extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useElevationProfileWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("input", "effectiveUnits", "progress", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.effectiveUnits = this.viewModel.effectiveUnits;
        this.highlightEnabled = this.viewModel.highlightEnabled;
        this.hoveredChartPosition = this.viewModel.hoveredChartPosition;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.input = this.widget.input;
        this.profiles = this.widget.profiles;
        this.progress = this.viewModel.progress;
        this.unit = this.widget.unit;
        this.uniformChartScaling = this.viewModel.uniformChartScaling;
        this.unitOptions = this.widget.unitOptions;
        this.hideLegend = this.widget.visibleElements.legend;
        this.hideChart = this.widget.visibleElements.chart;
        this.hideClearButton = this.widget.visibleElements.clearButton;
        this.hideSettingsButton = this.widget.visibleElements.settingsButton;
        this.hideSketchButton = this.widget.visibleElements.sketchButton;
        this.hideSelectButton = this.widget.visibleElements.selectButton;
        this.hideUnitSelector = this.widget.visibleElements.unitSelector;
        this.hideUniformChartScalingToggle = this.widget.visibleElements.uniformChartScalingToggle;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async start() {
        this.widget.viewModel.start();
    }
    async stop() {
        this.widget.viewModel.stop();
    }
    get el() { return this; }
    static get style() { return ArcgisElevationProfileStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-elevation-profile"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-elevation-profile":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisElevationProfile$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisElevationProfile = ArcgisElevationProfile$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisElevationProfile, defineCustomElement };
