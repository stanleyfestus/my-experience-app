/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { w as newWidgetsCoordinateConversion } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const coordinateConversionCss = "";
const ArcgisCoordinateConversionStyle0 = coordinateConversionCss;

const useCoordinateConversionWidget = makeWidgetController(newWidgetsCoordinateConversion);
const __cmpMeta = [0,"arcgis-coordinate-conversion",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"conversions":[1040],"currentLocation":[1040],"formats":[1040],"icon":[1025],"label":[1025],"locationSymbol":[1040],"headingLevel":[1026,"heading-level"],"mode":[1025],"multipleConversionsDisabled":[1028,"multiple-conversions-disabled"],"orientation":[1025],"storageDisabled":[1028,"storage-disabled"],"storageType":[1025,"storage-type"],"hideSettingsButton":[1028,"hide-settings-button"],"hideEditButton":[1028,"hide-edit-button"],"hideExpandButton":[1028,"hide-expand-button"],"hideCaptureButton":[1028,"hide-capture-button"],"position":[1025],"state":[1537],"destroy":[64],"reverseConvert":[64]}];
const ArcgisCoordinateConversion$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisCoordinateConversion extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useCoordinateConversionWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("currentLocation", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.conversions = this.widget.conversions;
        this.currentLocation = this.widget.currentLocation;
        this.formats = this.widget.formats;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.locationSymbol = this.widget.locationSymbol;
        this.headingLevel = this.widget.headingLevel;
        this.mode = this.widget.mode;
        this.multipleConversionsDisabled = this.widget.multipleConversions;
        this.orientation = this.widget.orientation;
        this.storageDisabled = this.widget.storageEnabled;
        this.storageType = this.widget.storageType;
        this.hideSettingsButton = this.widget.visibleElements.settingsButton;
        this.hideEditButton = this.widget.visibleElements.editButton;
        this.hideExpandButton = this.widget.visibleElements.expandButton;
        this.hideCaptureButton = this.widget.visibleElements.captureButton;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async reverseConvert(coordinate, format) {
        return await this.widget?.reverseConvert(coordinate, format);
    }
    get el() { return this; }
    static get style() { return ArcgisCoordinateConversionStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-coordinate-conversion"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-coordinate-conversion":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisCoordinateConversion$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisCoordinateConversion = ArcgisCoordinateConversion$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisCoordinateConversion, defineCustomElement };
