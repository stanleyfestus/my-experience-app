/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { am as newWidgetsWeather } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const weatherCss = "";
const ArcgisWeatherStyle0 = weatherCss;

const useWeatherWidget = makeWidgetController(newWidgetsWeather);
const __cmpMeta = [0,"arcgis-weather",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"icon":[1025],"label":[1025],"headingLevel":[1026,"heading-level"],"hideHeader":[1028,"hide-header"],"position":[1025],"state":[1537],"destroy":[64]}];
const ArcgisWeather$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisWeather extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useWeatherWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.headingLevel = this.widget.headingLevel;
        this.hideHeader = this.widget.visibleElements.header;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return this; }
    static get style() { return ArcgisWeatherStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-weather"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-weather":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisWeather$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisWeather = ArcgisWeather$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisWeather, defineCustomElement };
