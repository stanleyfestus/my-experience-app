/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { ac as newWidgetsSlider } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager, g as getSet } from './index4.js';

const sliderCss = "arcgis-slider{min-width:200px;min-height:25px}";
const ArcgisSliderStyle0 = sliderCss;

const useSliderWidget = makeWidgetController(newWidgetsSlider);
const __cmpMeta = [0,"arcgis-slider",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"draggableSegmentsEnabled":[1028,"draggable-segments-enabled"],"effectiveMax":[1026,"effective-max"],"effectiveMin":[1026,"effective-min"],"effectiveSegmentElements":[1040],"labelElements":[1040],"labelInputsEnabled":[1028,"label-inputs-enabled"],"icon":[1025],"label":[1025],"labels":[1040],"layout":[1025],"min":[1026],"max":[1026],"maxLabelElement":[1040],"minLabelElement":[1040],"precision":[1026],"rangeLabelInputsEnabled":[1028,"range-label-inputs-enabled"],"segmentElements":[1040],"snapOnClickEnabled":[1028,"snap-on-click-enabled"],"syncedSegmentsEnabled":[1028,"synced-segments-enabled"],"thumbElements":[1040],"thumbsConstrained":[1028,"thumbs-constrained"],"tickConfigs":[1040],"tickElements":[1040],"trackElement":[1040],"steps":[1025],"values":[1025],"position":[1025],"state":[1537],"destroy":[64]}];
const ArcgisSlider$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisSlider extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.widgetMaxChange = createEvent(this, "arcgisMaxChange", 7);
        this.widgetMaxClick = createEvent(this, "arcgisMaxClick", 7);
        this.widgetMinChange = createEvent(this, "arcgisMinChange", 7);
        this.widgetMinClick = createEvent(this, "arcgisMinClick", 7);
        this.widgetSegmentClick = createEvent(this, "arcgisSegmentClick", 7);
        this.widgetSegmentDrag = createEvent(this, "arcgisSegmentDrag", 7);
        this.widgetThumbChange = createEvent(this, "arcgisThumbChange", 7);
        this.widgetThumbClick = createEvent(this, "arcgisThumbClick", 7);
        this.widgetThumbDrag = createEvent(this, "arcgisThumbDrag", 7);
        this.widgetTickClick = createEvent(this, "arcgisTickClick", 7);
        this.widgetTrackClick = createEvent(this, "arcgisTrackClick", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useSliderWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.draggableSegmentsEnabled = this.widget.draggableSegmentsEnabled;
        this.effectiveMax = this.widget.effectiveMax;
        this.effectiveMin = this.widget.effectiveMin;
        this.effectiveSegmentElements = this.widget.effectiveSegmentElements;
        this.labelElements = this.widget.labelElements;
        this.labelInputsEnabled = this.widget.labelInputsEnabled;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.labels = this.widget.labels;
        this.layout = this.widget.layout;
        this.min = this.widget.min;
        this.max = this.widget.max;
        this.maxLabelElement = this.widget.maxLabelElement;
        this.minLabelElement = this.widget.minLabelElement;
        this.precision = this.widget.precision;
        this.rangeLabelInputsEnabled = this.widget.rangeLabelInputsEnabled;
        this.segmentElements = this.widget.segmentElements;
        this.snapOnClickEnabled = this.widget.snapOnClickEnabled;
        this.syncedSegmentsEnabled = this.widget.syncedSegmentsEnabled;
        this.thumbElements = this.widget.thumbElements;
        this.thumbsConstrained = this.widget.thumbsConstrained;
        this.tickConfigs = this.widget.tickConfigs;
        this.tickElements = this.widget.tickElements;
        this.trackElement = this.widget.trackElement;
        this.steps = getSet(this.widget.steps, {
            set: (newValue) => (typeof newValue === "string" ? newValue.split(",").map(Number) : newValue),
        });
        this.values = getSet(this.widget.values, {
            set: (newValue) => (typeof newValue === "string" ? newValue.split(",").map(Number) : newValue),
        });
        this.position = "bottom-left";
        this.state = this.widget.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return this; }
    static get style() { return ArcgisSliderStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-slider"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-slider":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisSlider$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisSlider = ArcgisSlider$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisSlider, defineCustomElement };
