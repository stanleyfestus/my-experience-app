/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { af as newWidgetsTimeSlider } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const timeSliderCss = "arcgis-time-slider{}";
const ArcgisTimeSliderStyle0 = timeSliderCss;

const useTimeSliderWidget = makeWidgetController(newWidgetsTimeSlider);
const __cmpMeta = [0,"arcgis-time-slider",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"actions":[1040],"disabled":[1540],"effectiveStops":[1040],"fullTimeExtent":[1040],"icon":[1025],"label":[1025],"layout":[1025],"loop":[1028],"mode":[1025],"playRate":[1026,"play-rate"],"stops":[1040],"tickConfigs":[1040],"timeExtent":[1040],"timeVisible":[1028,"time-visible"],"timeZone":[1025,"time-zone"],"position":[1025],"state":[1537],"destroy":[64],"applyTimeSliderSettings":[64],"next":[64],"play":[64],"previous":[64],"stop":[64],"updateWebDocument":[64]}];
const ArcgisTimeSlider$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisTimeSlider extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.widgetTriggerAction = createEvent(this, "arcgisTriggerAction", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useTimeSliderWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("effectiveStops", "fullTimeExtent", "timeExtent", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.actions = this.widget.actions;
        this.disabled = this.widget.disabled;
        this.effectiveStops = this.widget.effectiveStops;
        this.fullTimeExtent = this.widget.fullTimeExtent;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.layout = this.widget.layout;
        this.loop = this.widget.loop;
        this.mode = this.widget.mode;
        this.playRate = this.widget.playRate;
        this.stops = this.widget.stops;
        this.tickConfigs = this.widget.tickConfigs;
        this.timeExtent = this.widget.timeExtent;
        this.timeVisible = this.widget.timeVisible;
        this.timeZone = this.widget.timeZone;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async applyTimeSliderSettings(settings) {
        Object.assign(this, settings);
    }
    async next() {
        this.widget?.next();
    }
    async play() {
        this.widget?.play();
    }
    async previous() {
        this.widget?.previous();
    }
    async stop() {
        this.widget?.stop();
    }
    async updateWebDocument(webmap) {
        this.widget?.updateWebDocument(webmap);
    }
    get el() { return this; }
    static get style() { return ArcgisTimeSliderStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-time-slider"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-time-slider":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisTimeSlider$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisTimeSlider = ArcgisTimeSlider$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisTimeSlider, defineCustomElement };
