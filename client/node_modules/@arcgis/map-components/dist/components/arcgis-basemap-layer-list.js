/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { m as newWidgetsBasemapLayerList } from './index2.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager, g as getSet } from './index4.js';

const basemapLayerListCss = "";
const ArcgisBasemapLayerListStyle0 = basemapLayerListCss;

const useBasemapLayerListWidget = makeWidgetController(newWidgetsBasemapLayerList);
const __cmpMeta = [0,"arcgis-basemap-layer-list",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"headingLevel":[1026,"heading-level"],"label":[1025],"referenceElement":[1025,"reference-element"],"baseFilterText":[1025,"base-filter-text"],"baseItems":[1040],"baseListItemCreatedFunction":[1040],"basemapTitle":[1025,"basemap-title"],"catalogLayerList":[1040],"catalogOptions":[1040],"collapsed":[1540],"dragEnabled":[1028,"drag-enabled"],"editingTitle":[1028,"editing-title"],"filterPlaceholder":[1025,"filter-placeholder"],"icon":[1025],"knowledgeGraphOptions":[1040],"minFilterItems":[1026,"min-filter-items"],"openTableListItem":[1040],"referenceFilterText":[1025,"reference-filter-text"],"referenceItems":[1040],"referenceListItemCreatedFunction":[1040],"selectedItems":[1040],"selectionMode":[1025,"selection-mode"],"tableList":[1040],"visibilityAppearance":[1025,"visibility-appearance"],"hideBaseLayers":[1028,"hide-base-layers"],"showCloseButton":[1028,"show-close-button"],"showCollapseButton":[1028,"show-collapse-button"],"showEditTitleButton":[1028,"show-edit-title-button"],"showErrors":[1028,"show-errors"],"showFilter":[1028,"show-filter"],"hideFlow":[1028,"hide-flow"],"hideHeading":[1028,"hide-heading"],"hideReferenceLayers":[1028,"hide-reference-layers"],"hideStatusIndicators":[1028,"hide-status-indicators"],"showTemporaryLayerIndicators":[1028,"show-temporary-layer-indicators"],"position":[1025],"state":[1537],"destroy":[64]}];
const ArcgisBasemapLayerList$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisBasemapLayerList extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.widgetTriggerAction = createEvent(this, "arcgisTriggerAction", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useBasemapLayerListWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.headingLevel = this.widget.headingLevel;
        this.label = this.widget.label;
        this.referenceElement = undefined;
        this.baseFilterText = this.widget.baseFilterText;
        this.baseItems = getSet(undefined, {
            get: () => this.widget.baseItems,
            set: "ignore",
        });
        this.baseListItemCreatedFunction = this.widget.baseListItemCreatedFunction;
        this.basemapTitle = this.widget.basemapTitle;
        this.catalogLayerList = getSet(undefined, {
            get: () => this.widget.catalogLayerList,
            set: "ignore",
        });
        this.catalogOptions = this.widget.catalogOptions;
        this.collapsed = this.widget.collapsed;
        this.dragEnabled = this.widget.dragEnabled;
        this.editingTitle = this.widget.editingTitle;
        this.filterPlaceholder = this.widget.filterPlaceholder;
        this.icon = this.widget.icon;
        this.knowledgeGraphOptions = this.widget.knowledgeGraphOptions;
        this.minFilterItems = this.widget.minFilterItems;
        this.openTableListItem = this.widget.openTableListItem;
        this.referenceFilterText = this.widget.referenceFilterText;
        this.referenceItems = getSet(undefined, {
            get: () => this.widget.referenceItems,
            set: "ignore",
        });
        this.referenceListItemCreatedFunction = this.widget.referenceListItemCreatedFunction;
        this.selectedItems = this.widget.selectedItems;
        this.selectionMode = this.widget.selectionMode;
        this.tableList = this.widget.tableList;
        this.visibilityAppearance = this.widget.visibilityAppearance;
        this.hideBaseLayers = this.widget.visibleElements.baseLayers;
        this.showCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.showEditTitleButton = this.widget.visibleElements.editTitleButton;
        this.showErrors = this.widget.visibleElements.errors;
        this.showFilter = this.widget.visibleElements.filter;
        this.hideFlow = this.widget.visibleElements.flow;
        this.hideHeading = this.widget.visibleElements.heading;
        this.hideReferenceLayers = this.widget.visibleElements.referenceLayers;
        this.hideStatusIndicators = this.widget.visibleElements.statusIndicators;
        this.showTemporaryLayerIndicators = this.widget.visibleElements.temporaryLayerIndicators;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return this; }
    static get style() { return ArcgisBasemapLayerListStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-basemap-layer-list"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-basemap-layer-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisBasemapLayerList$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisBasemapLayerList = ArcgisBasemapLayerList$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisBasemapLayerList, defineCustomElement };
