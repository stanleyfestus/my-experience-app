/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate, h } from '@stencil/core/internal/client';
import { g as globalCss } from './globalCss.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel.js';
import { p as classes, V as newWidgetsLocateLocateViewModel } from './index2.js';
import { u as usePropertyChange } from './index3.js';
import { u as useControllerManager } from './index4.js';
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-loader.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";

const legacyIcon = {
    arrowDown: "esri-icon-arrow-down",
    arrowUp: "esri-icon-arrow-up",
    basemap: "esri-icon-basemap",
    bookmark: "esri-icon-bookmark",
    calendar: "esri-icon-calendar",
    checkMark: "esri-icon-check-mark",
    checkboxUnchecked: "esri-icon-checkbox-unchecked",
    close: "esri-icon-close",
    collapse: "esri-icon-collapse",
    defaultAction: "esri-icon-default-action",
    description: "esri-icon-description",
    directions: "esri-icon-directions",
    dockBottom: "esri-icon-dock-bottom",
    dockLeft: "esri-icon-dock-left",
    dockRight: "esri-icon-dock-right",
    down: "esri-icon-down",
    downArrow: "esri-icon-down-arrow",
    download: "esri-icon-download",
    dragHorizontal: "esri-icon-drag-horizontal",
    dragVertical: "esri-icon-drag-vertical",
    duplicate: "esri-icon-duplicate",
    edit: "esri-icon-edit",
    elevationProfile: "esri-icon-elevation-profile",
    environmentSettings: "esri-icon-environment-settings",
    erase: "esri-icon-erase",
    error: "esri-icon-error",
    expand: "esri-icon-expand",
    fontFallbackText: "esri-icon-font-fallback-text",
    forward: "esri-icon-forward",
    gear: "esri-icon-gear",
    handleHorizontal: "esri-icon-handle-horizontal",
    handleVertical: "esri-icon-handle-vertical",
    home: "esri-icon-home",
    icon: "esri-icon",
    launchLinkExternal: "esri-icon-launch-link-external",
    layerList: "esri-icon-layer-list",
    layers: "esri-icon-layers",
    left: "esri-icon-left",
    leftArrows: "esri-icon-left-arrow",
    leftTriangleArrow: "esri-icon-left-triangle-arrow",
    lineOfSight: "esri-icon-line-of-sight",
    link: "esri-icon-link",
    linkExternal: "esri-icon-link-external",
    linkHorizontal: "esri-icon-link-horizontal",
    loadingIndicator: "esri-icon-loading-indicator",
    locate: "esri-icon-locate",
    locateCircled: "esri-icon-locate-circled",
    locked: "esri-icon-locked",
    mapPin: "esri-icon-map-pin",
    maximize: "esri-icon-maximize",
    measure: "esri-icon-measure",
    measureArea: "esri-icon-measure-area",
    measureBuildingHeightShadow: "esri-icon-measure-building-height-shadow",
    measureLine: "esri-icon-measure-line",
    menu: "esri-icon-menu",
    minimize: "esri-icon-minimize",
    minus: "esri-icon-minus",
    nonVisible: "esri-icon-non-visible",
    northNavigation: "esri-icon-north-navigation",
    noticeTriangle: "esri-icon-notice-triangle",
    organization: "esri-icon-organization",
    pan: "esri-icon-pan",
    pan2: "esri-icon-pan2",
    partlyCloudy: "esri-icon-partly-cloudy",
    pause: "esri-icon-pause",
    play: "esri-icon-play",
    playCircled: "esri-icon-play-circled",
    plus: "esri-icon-plus",
    polyline: "esri-icon-polyline",
    printer: "esri-icon-printer",
    radioChecked: "esri-icon-radio-checked",
    radioUnchecked: "esri-icon-radio-unchecked",
    refresh: "esri-icon-refresh",
    reverse: "esri-icon-reverse",
    right: "esri-icon-right",
    rightArrow: "esri-icon-right-arrow",
    rightTriangleArrow: "esri-icon-right-triangle-arrow",
    rotate: "esri-icon-rotate",
    save: "esri-icon-save",
    search: "esri-icon-search",
    settings2: "esri-icon-settings2",
    slice: "esri-icon-slice",
    swap: "esri-icon-swap",
    table: "esri-icon-table",
    timeClock: "esri-icon-time-clock",
    tracking: "esri-icon-tracking",
    trash: "esri-icon-trash",
    unlockedLinkHorizontal: "esri-icon-unlocked-link-horizontal",
    up: "esri-icon-up",
    upArrow: "esri-icon-up-arrow",
    upDownArrows: "esri-icon-up-down-arrows",
    urbanModel: "esri-icon-urban-model",
    vertexGps: "esri-icon-vertex-gps",
    visible: "esri-icon-visible",
    zoomInFixed: "esri-icon-zoom-in-fixed",
    zoomInMagnifyingGlass: "esri-icon-zoom-in-magnifying-glass",
    zoomOutFixed: "esri-icon-zoom-out-fixed",
    zoomToObject: "esri-icon-zoom-to-object",
};

const css = {
    base: "esri-locate",
};
const iconName = "gps-off";
const useLocateViewModel = makeViewModelController(newWidgetsLocateLocateViewModel);
const __cmpMeta = [0,"arcgis-locate",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"geolocationOptions":[1032,"geolocation-options"],"goToLocationDisabled":[1540,"go-to-location-disabled"],"graphic":[1040],"icon":[1537],"label":[1025],"popupDisabled":[1028,"popup-disabled"],"position":[1537],"referenceElement":[1025,"reference-element"],"scale":[1026],"state":[1537],"cancelLocate":[64],"destroy":[64],"locate":[64]}];
const ArcgisLocate$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisLocate extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.viewModelLocate = createEvent(this, "arcgisSuccess", 7);
        this.viewModelLocateError = createEvent(this, "arcgisError", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this,forceUpdate);
        this.messages = useT9n();
        this.viewModel = useLocateViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("state");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._locate = () => {
            const { viewModel } = this;
            if (viewModel.state === "locating") {
                viewModel.cancelLocate();
            }
            else {
                viewModel.locate().catch(() => {
                    /* error already handled by render() */
                });
            }
        };
        this.autoDestroyDisabled = false;
        this.geolocationOptions = this.viewModel.geolocationOptions;
        this.goToLocationDisabled = this.viewModel.goToLocationEnabled;
        this.graphic = this.viewModel.graphic;
        this.icon = iconName;
        this.label = undefined;
        this.popupDisabled = this.viewModel.popupEnabled;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.scale = this.viewModel.scale;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * This function provides the ability to interrupt and cancel the process of
     * programmatically obtaining the location of the user's device.
     */
    async cancelLocate() {
        this.viewModel.cancelLocate();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async locate() {
        return await this.viewModel.locate();
    }
    render() {
        const { viewModel, icon } = this;
        const { state } = viewModel;
        const isLoading = state === "locating";
        const label = isLoading ? this.messages.cancel : this.messages.title;
        const hidden = state === "feature-unsupported";
        const defaultIcon = legacyIcon === undefined ? iconName : undefined;
        const errorText = this._localizeError(this.viewModel?.error);
        return (h("div", { key: '4214efa088483dfb81f0a5f0ff60bea78262b598', class: classes(css.base, globalCss.widget) }, !hidden && (h("calcite-button", { key: 'a20435d8dfc4d32ef3f05539f646b6f819261ad2', class: globalCss.widgetButton, disabled: state === "disabled", "icon-start": isLoading ? undefined : (icon ?? defaultIcon), kind: "neutral", label: label, onClick: this._locate, title: label }, isLoading ? h("calcite-loader", { inline: true, label: "" }) : null)), errorText ? (h("calcite-tooltip", { open: true, "overlay-positioning": "fixed", "reference-element": this.el }, errorText)) : null));
    }
    _localizeError(error) {
        if (error instanceof GeolocationPositionError) {
            if (error.code === GeolocationPositionError.PERMISSION_DENIED) {
                return this.messages?.permissionError;
            }
            else if (error.code === GeolocationPositionError.TIMEOUT) {
                return this.messages?.timeoutError;
            }
            return this.messages?.positionUnavailable;
        }
        if (error instanceof Error) {
            return error.message;
        }
        return undefined;
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-locate"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-locate":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisLocate$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisLocate = ArcgisLocate$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisLocate, defineCustomElement };
