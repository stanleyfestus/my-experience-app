/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate, h } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { p as classes, O as newWidgetsFullscreenFullscreenViewModel } from './index2.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel.js';
import { g as globalCss } from './globalCss.js';
import { u as useControllerManager } from './index4.js';
import "@esri/calcite-components/dist/components/calcite-button.js";

const css = {
    base: "esri-fullscreen",
};
const useFullscreenViewModel = makeViewModelController(newWidgetsFullscreenFullscreenViewModel);
const __cmpMeta = [0,"arcgis-fullscreen",{"element":[1040],"icon":[1537],"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"label":[1025],"messageOverrides":[1040],"position":[1537],"referenceElement":[1025,"reference-element"],"state":[1537],"destroy":[64]}];
const ArcgisFullscreen$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisFullscreen extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this,forceUpdate);
        this.messages = useT9n();
        this.viewModel = useFullscreenViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("state");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._toggle = () => {
            this.viewModel.toggle();
        };
        this.element = this.viewModel.element;
        this.icon = "zoom-out-fixed";
        this.autoDestroyDisabled = false;
        this.label = undefined;
        this.messageOverrides = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
    }
    get fullscreenTitle() {
        const state = this.viewModel?.state;
        return state === "active" ? this.messages.exit : state === "ready" ? this.messages.enter : "";
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const { fullscreenTitle, icon } = this;
        const state = this.viewModel?.state;
        const hidden = state === "feature-unsupported";
        const defaultIcon = state === "ready" || state === "disabled" || state === "feature-unsupported" ? "zoom-out-fixed" : "zoom-in-fixed";
        return (h("div", { key: 'e8420490515fe56879137c622b729965e456851b', class: classes(css.base, globalCss.widget) }, !hidden && (h("calcite-button", { key: '1e2f85600fb51debcc884b89590d09c38f93ff6c', class: globalCss.widgetButton, disabled: state === "disabled", "icon-start": icon ?? defaultIcon, kind: "neutral", label: fullscreenTitle, onClick: this._toggle, title: fullscreenTitle }))));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return this; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-fullscreen"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-fullscreen":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisFullscreen$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisFullscreen = ArcgisFullscreen$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisFullscreen, defineCustomElement };
