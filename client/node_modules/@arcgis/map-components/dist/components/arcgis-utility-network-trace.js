/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { ai as newWidgetsUtilityNetworkTrace, h as importCoreReactiveUtils } from './index2.js';
import { r as referenceElementHelper, d as defineViewProperty, a as attachToParent, f as addHandles } from './component-utils.js';
import { o as onDisconnectedHelper } from './disconnected.js';

const utilityNetworkTraceCss = "";
const ArcgisUtilityNetworkTraceStyle0 = utilityNetworkTraceCss;

const ArcgisUtilityNetworkTrace$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisUtilityNetworkTrace extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisAddFlag = createEvent(this, "arcgisAddFlag", 7);
        this.arcgisAddFlagComplete = createEvent(this, "arcgisAddFlagComplete", 7);
        this.arcgisAddFlagError = createEvent(this, "arcgisAddFlagError", 7);
        this.arcgisAddResultArea = createEvent(this, "arcgisAddResultArea", 7);
        this.arcgisRemoveResultArea = createEvent(this, "arcgisRemoveResultArea", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.enableResultArea = false;
        this.defaultGraphicColor = {
            color: [255, 255, 0, 0.6],
            haloOpacity: 0.9,
            fillOpacity: 0.2,
            hex: "#FFFF00",
        };
        this.disabled = false;
        this.flags = [];
        this.gdbVersion = "sde.DEFAULT";
        this.inputSettings = [];
        this.resultAreaProperties = undefined;
        this.selectedTraces = [];
        this.selectOnCompleteDisabled = false;
        this.showGraphicsOnCompleteDisabled = false;
        this.showSelectionAttributesDisabled = false;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    enableResultAreaWatcher(value) {
        if (this.widget) {
            this.widget.enableResultArea = value;
        }
    }
    defaultGraphicColorWatcher(value) {
        if (this.widget) {
            this.widget.defaultGraphicColor = value;
        }
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    flagsWatcher(value) {
        if (this.widget) {
            this.widget.flags = value;
        }
    }
    gdbVersionWatcher(value) {
        if (this.widget) {
            this.widget.gdbVersion = value;
        }
    }
    inputSettingsWatcher(value) {
        if (this.widget) {
            this.widget.inputSettings = value;
        }
    }
    resultAreaPropertiesWatcher(value) {
        if (this.widget) {
            this.widget.resultAreaProperties = value;
        }
    }
    selectedTracesWatcher(value) {
        if (this.widget) {
            this.widget.selectedTraces = value;
        }
    }
    selectOnCompleteDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.selectOnComplete = !value;
        }
    }
    showGraphicsOnCompleteDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showGraphicsOnComplete = !value;
        }
    }
    showSelectionAttributesDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showSelectionAttributes = !value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget && this.el.childElem) {
            this.view.ui.move(this.el.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async checkCanTrace() {
        await this.widget?.checkCanTrace();
    }
    async confirmReset() {
        this.widget?.confirmReset();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsUtilityNetworkTrace(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        defineViewProperty(this);
        attachToParent(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { key: '0c08d69382de6c22fb9de26dc710b4be828af319', ref: (el) => (this.el.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.el.childElem;
    }
    async _addWatchers() {
        const { watch } = await importCoreReactiveUtils();
        addHandles(this, watch(() => this.widget.disabled, (value) => (this.disabled = value)));
    }
    _createParams() {
        const params = {};
        if (this.defaultGraphicColor) {
            params.defaultGraphicColor = this.defaultGraphicColor;
        }
        if (this.enableResultArea !== undefined) {
            params.enableResultArea = this.enableResultArea;
        }
        if (this.flags) {
            params.flags = this.flags;
        }
        if (this.gdbVersion) {
            params.gdbVersion = this.gdbVersion;
        }
        if (this.inputSettings) {
            params.inputSettings = this.inputSettings;
        }
        if (this.resultAreaProperties) {
            params.resultAreaProperties = this.resultAreaProperties;
        }
        if (this.selectedTraces) {
            params.selectedTraces = this.selectedTraces;
        }
        if (this.selectOnCompleteDisabled !== undefined) {
            params.selectOnComplete = !this.selectOnCompleteDisabled;
        }
        if (this.showGraphicsOnCompleteDisabled !== undefined) {
            params.showGraphicsOnComplete = !this.showGraphicsOnCompleteDisabled;
        }
        if (this.showSelectionAttributesDisabled !== undefined) {
            params.showSelectionAttributes = !this.showSelectionAttributesDisabled;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("add-flag", (e) => this.arcgisAddFlag.emit(e));
        this.widget.on("add-flag-complete", (e) => this.arcgisAddFlagComplete.emit(e));
        this.widget.on("add-flag-error", (e) => this.arcgisAddFlagError.emit(e));
        this.widget.on("add-result-area", (e) => this.arcgisAddResultArea.emit(e));
        this.widget.on("remove-result-area", (e) => this.arcgisRemoveResultArea.emit(e));
    }
    get el() { return this; }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "enableResultArea": ["enableResultAreaWatcher"],
        "defaultGraphicColor": ["defaultGraphicColorWatcher"],
        "disabled": ["disabledWatcher"],
        "flags": ["flagsWatcher"],
        "gdbVersion": ["gdbVersionWatcher"],
        "inputSettings": ["inputSettingsWatcher"],
        "resultAreaProperties": ["resultAreaPropertiesWatcher"],
        "selectedTraces": ["selectedTracesWatcher"],
        "selectOnCompleteDisabled": ["selectOnCompleteDisabledWatcher"],
        "showGraphicsOnCompleteDisabled": ["showGraphicsOnCompleteDisabledWatcher"],
        "showSelectionAttributesDisabled": ["showSelectionAttributesDisabledWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
    static get style() { return ArcgisUtilityNetworkTraceStyle0; }
}, [0, "arcgis-utility-network-trace", {
        "referenceElement": [1, "reference-element"],
        "enableResultArea": [4, "enable-result-area"],
        "defaultGraphicColor": [16],
        "disabled": [1540],
        "flags": [16],
        "gdbVersion": [1, "gdb-version"],
        "inputSettings": [16],
        "resultAreaProperties": [16],
        "selectedTraces": [16],
        "selectOnCompleteDisabled": [4, "select-on-complete-disabled"],
        "showGraphicsOnCompleteDisabled": [4, "show-graphics-on-complete-disabled"],
        "showSelectionAttributesDisabled": [4, "show-selection-attributes-disabled"],
        "position": [1],
        "view": [1040],
        "widget": [1040],
        "checkCanTrace": [64],
        "confirmReset": [64]
    }, undefined, {
        "referenceElement": ["referenceElementWatcher"],
        "enableResultArea": ["enableResultAreaWatcher"],
        "defaultGraphicColor": ["defaultGraphicColorWatcher"],
        "disabled": ["disabledWatcher"],
        "flags": ["flagsWatcher"],
        "gdbVersion": ["gdbVersionWatcher"],
        "inputSettings": ["inputSettingsWatcher"],
        "resultAreaProperties": ["resultAreaPropertiesWatcher"],
        "selectedTraces": ["selectedTracesWatcher"],
        "selectOnCompleteDisabled": ["selectOnCompleteDisabledWatcher"],
        "showGraphicsOnCompleteDisabled": ["showGraphicsOnCompleteDisabledWatcher"],
        "showSelectionAttributesDisabled": ["showSelectionAttributesDisabledWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-utility-network-trace"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-utility-network-trace":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisUtilityNetworkTrace$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisUtilityNetworkTrace = ArcgisUtilityNetworkTrace$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisUtilityNetworkTrace, defineCustomElement };
