/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$1 } from './version-management-version-item.js';
import "@esri/calcite-components/dist/components/calcite-block.js";
import "@esri/calcite-components/dist/components/calcite-action.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";
import "@esri/calcite-components/dist/components/calcite-pagination.js";
import "@esri/calcite-components/dist/components/calcite-input-text.js";
import "@esri/calcite-components/dist/components/calcite-list.js";
import "@esri/calcite-components/dist/components/calcite-fab.js";
import "@esri/calcite-components/dist/components/calcite-notice.js";
import "@esri/calcite-components/dist/components/calcite-flow-item.js";
import "@esri/calcite-components/dist/components/calcite-panel.js";

const ArcgisVersionManagementVersionList = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionList extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisNewVersion = createEvent(this, "arcgisNewVersion", 7);
        this.arcgisGetVersions = createEvent(this, "arcgisGetVersions", 7);
        this.arcgisManageVersion = createEvent(this, "arcgisManageVersion", 7);
        this._handleFilterChange = () => {
            const { versionListElementProps: { versionInfos }, } = this;
            const filterText = this._filterInputElement.value.toUpperCase();
            this._filteredVersionInfos =
                filterText === ""
                    ? versionInfos
                    : versionInfos.filter((version) => version.versionIdentifier.name.toUpperCase().includes(filterText) ||
                        version.versionIdentifier.guid.toUpperCase().includes(filterText));
            if (this._filteredVersionInfos.length) {
                this.currentPage = 1;
            }
        };
        this._handleNoticeClosed = () => {
            this.versionListElementProps = {
                ...this.versionListElementProps,
                executionError: undefined,
            };
        };
        this._handlePaginationChange = (event) => {
            this.currentPage = event.target.startItem;
        };
        this.currentPage = 1;
        this.versionListElementProps = undefined;
        this._filteredVersionInfos = undefined;
    }
    propertiesChangeHandler(newValue, oldValue) {
        if (oldValue.versionInfos !== newValue.versionInfos) {
            this._filteredVersionInfos = this.versionListElementProps.versionInfos;
            if (this._filterInputElement) {
                this._handleFilterChange();
            }
        }
    }
    componentWillLoad() {
        this._filteredVersionInfos = this.versionListElementProps.versionInfos;
    }
    componentDidRender() {
        this._filterInputElement?.setFocus();
    }
    render() {
        const { currentPage, versionListElementProps: { closable, currentUser, currentVersionIdentifier, executionError, hasAdvEditingUte, heading, isVersioningApiAvailable, pageSize, serviceName, serviceUrl, state, strings: { headers }, strings, versionInfos, }, } = this;
        const currentVersionIdentifierBlock = (h("calcite-block", { heading: headers.currentVersion, description: currentVersionIdentifier.name, overlayPositioning: "fixed" }));
        const actionRefreshVersions = (h("calcite-action", { id: "actionRefreshVersions", icon: "refresh", text: "", onClick: () => {
                this.arcgisGetVersions.emit({
                    serviceUrl,
                });
            }, slot: "header-actions-end" }, h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: "actionRefreshVersions" }, h("span", null, strings.actions.refreshVersions))));
        this._paginatedVersionInfos =
            this._filteredVersionInfos.length > pageSize
                ? this._paginate(this._filteredVersionInfos, pageSize, currentPage)
                : this._filteredVersionInfos;
        const pagination = this._filteredVersionInfos.length > pageSize ? (h("calcite-pagination", { onCalcitePaginationChange: this._handlePaginationChange, pageSize: 1, startItem: currentPage, totalItems: Math.ceil(this._filteredVersionInfos.length / pageSize) })) : undefined;
        const versionItems = this._paginate(this._paginatedVersionInfos, pageSize, 1).map((versionInfo) => {
            const versionItemElementProps = {
                currentUser,
                currentVersionIdentifier,
                isCurrentVersionCard: false,
                hasAdvEditingUte,
                isVersioningApiAvailable,
                serviceUrl,
                strings,
                versionInfo,
            };
            return (h("arcgis-version-management-version-item", { versionItemElementProps: versionItemElementProps }));
        });
        const versionFilter = versionInfos.length > pageSize ? (h("calcite-block", { heading: "", open: true }, h("calcite-input-text", { ref: (node) => {
                this._filterInputElement = node;
            }, clearable: true, icon: "search", onCalciteInputTextInput: this._handleFilterChange, placeholder: strings.actions.searchVersions }))) : undefined;
        const versionList = h("calcite-list", null, versionItems);
        const newVersionButton = isVersioningApiAvailable && hasAdvEditingUte ? (h("calcite-fab", { appearance: "outline-fill", slot: "fab", textEnabled: true, text: strings.actions.newVersion, onClick: () => {
                this.arcgisNewVersion.emit({
                    serviceUrl,
                });
            } })) : undefined;
        const noticeError = executionError ? (h("calcite-notice", { onCalciteNoticeClose: this._handleNoticeClosed, class: "notice", closable: true, kind: "warning", open: true, scale: "s", slot: "footer", width: "full" }, h("div", { slot: "message" }, this._getExecutionError(executionError)))) : undefined;
        return (h("calcite-flow-item", { closable: closable, description: serviceName, heading: heading }, h("calcite-panel", { loading: state === "executing" }, currentVersionIdentifierBlock, h("calcite-panel", { heading: this._filteredVersionInfos.length
                ? `${strings.headers.manageVersions} (${this._filteredVersionInfos.length})`
                : strings.headers.manageVersions }, actionRefreshVersions, versionFilter, versionList, newVersionButton), pagination, noticeError)));
    }
    _getExecutionError(executionError) {
        const { versionListElementProps: { strings: { executionErrors }, }, } = this;
        switch (executionError) {
            case "no-advanced-editing-user-type-extension":
                return executionErrors.noAdvancedEditingUserTypeExtension;
            case "no-feature-service-found":
                return executionErrors.noFeatureServiceFound;
            case "no-valid-enterprise-version":
                return executionErrors.notValidEnterpriseVersion;
            case "no-valid-version-name":
                return executionErrors.invalidVersionName;
            default:
                return executionError;
        }
    }
    _paginate(versionInfos, pageSize, pageNumber) {
        return versionInfos.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
    }
    get el() { return this; }
    static get watchers() { return {
        "versionListElementProps": ["propertiesChangeHandler"]
    }; }
}, [0, "arcgis-version-management-version-list", {
        "currentPage": [1538, "current-page"],
        "versionListElementProps": [16],
        "_filteredVersionInfos": [32]
    }, undefined, {
        "versionListElementProps": ["propertiesChangeHandler"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-list", "arcgis-version-management-version-item"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-list":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionList);
            }
            break;
        case "arcgis-version-management-version-item":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionList as A, defineCustomElement as d };
