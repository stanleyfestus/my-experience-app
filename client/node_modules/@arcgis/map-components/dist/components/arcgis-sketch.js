/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
import { proxyCustomElement, HTMLElement, createEvent, forceUpdate } from '@stencil/core/internal/client';
import { u as usePropertyChange } from './index3.js';
import { a9 as newLayersGraphicsLayer, aa as newWidgetsSketch } from './index2.js';
import { m as makeWidgetController } from './useWidget.js';
import { u as useControllerManager } from './index4.js';

const sketchCss = "arcgis-sketch{}";
const ArcgisSketchStyle0 = sketchCss;

const useSketchWidget = makeWidgetController(newWidgetsSketch);
const __cmpMeta = [0,"arcgis-sketch",{"autoDestroyDisabled":[1028,"auto-destroy-disabled"],"referenceElement":[1025,"reference-element"],"activeTool":[1537,"active-tool"],"availableCreateTools":[1040],"createGraphic":[1040],"creationMode":[1025,"creation-mode"],"defaultCreateOptions":[1040],"defaultUpdateOptions":[1040],"defaultGraphicsLayerDisabled":[1028,"default-graphics-layer-disabled"],"icon":[1025],"label":[1025],"labelOptions":[1040],"layer":[1040],"layout":[1025],"pointSymbol":[1040],"polylineSymbol":[1040],"polygonSymbol":[1040],"snappingOptions":[1040],"tooltipOptions":[1040],"updateGraphics":[1040],"hideCreateToolsPoint":[1028,"hide-create-tools-point"],"hideCreateToolsPolyline":[1028,"hide-create-tools-polyline"],"hideCreateToolsPolygon":[1028,"hide-create-tools-polygon"],"hideCreateToolsRectangle":[1028,"hide-create-tools-rectangle"],"hideCreateToolsCircle":[1028,"hide-create-tools-circle"],"hideDuplicateButton":[1028,"hide-duplicate-button"],"hideSelectionToolsRectangleSelection":[1028,"hide-selection-tools-rectangle-selection"],"hideSelectionToolsLassoSelection":[1028,"hide-selection-tools-lasso-selection"],"hideSettingsMenu":[1028,"hide-settings-menu"],"hideLabelsToggle":[1028,"hide-labels-toggle"],"hideTooltipsToggle":[1028,"hide-tooltips-toggle"],"hideSnappingControls":[1028,"hide-snapping-controls"],"showSnappingControlsElementsHeader":[1028,"show-snapping-controls-elements-header"],"hideSnappingControlsElementsEnabledToggle":[1028,"hide-snapping-controls-elements-enabled-toggle"],"hideSnappingControlsElementsSelfEnabledToggle":[1028,"hide-snapping-controls-elements-self-enabled-toggle"],"hideSnappingControlsElementsFeatureEnabledToggle":[1028,"hide-snapping-controls-elements-feature-enabled-toggle"],"hideSnappingControlsElementsLayerList":[1028,"hide-snapping-controls-elements-layer-list"],"hideUndoRedoMenu":[1028,"hide-undo-redo-menu"],"position":[1025],"state":[1537],"cancel":[64],"complete":[64],"create":[64],"delete":[64],"destroy":[64],"duplicate":[64],"redo":[64],"undo":[64],"update":[64]},[[0,"arcgisReady","arcgisReadyHandler"]]];
const ArcgisSketch$1 = /*@__PURE__*/ proxyCustomElement(class ArcgisSketch extends HTMLElement {
    connectedCallback() { this.manager._connectedCallback(); }
    disconnectedCallback() { this.manager._disconnectedCallback(); }
    constructor() {
        super();
        this.__registerHost();
this.constructor.__registerControllers = ()=>__cmpMeta[2]??{};
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.widgetCreate = createEvent(this, "arcgisCreate", 7);
        this.widgetDelete = createEvent(this, "arcgisDelete", 7);
        this.widgetRedo = createEvent(this, "arcgisRedo", 7);
        this.widgetUndo = createEvent(this, "arcgisUndo", 7);
        this.widgetUpdate = createEvent(this, "arcgisUpdate", 7);
        this.manager = useControllerManager(this,forceUpdate);
        this.widget = useSketchWidget(this, { editConstructorProperties: this._editConstructorProperties });
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.activeTool = this.widget.activeTool;
        this.availableCreateTools = this.widget.availableCreateTools;
        this.createGraphic = this.widget.createGraphic;
        this.creationMode = this.widget.creationMode;
        this.defaultCreateOptions = this.widget.defaultCreateOptions;
        this.defaultUpdateOptions = this.widget.defaultUpdateOptions;
        this.defaultGraphicsLayerDisabled = false;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.labelOptions = this.widget.labelOptions;
        this.layer = this.widget.layer;
        this.layout = this.widget.layout;
        this.pointSymbol = this.viewModel.pointSymbol;
        this.polylineSymbol = this.viewModel.polylineSymbol;
        this.polygonSymbol = this.viewModel.polygonSymbol;
        this.snappingOptions = this.widget.snappingOptions;
        this.tooltipOptions = this.widget.tooltipOptions;
        this.updateGraphics = this.widget.updateGraphics;
        this.hideCreateToolsPoint = this.widget.visibleElements.createTools.point;
        this.hideCreateToolsPolyline = this.widget.visibleElements.createTools.polyline;
        this.hideCreateToolsPolygon = this.widget.visibleElements.createTools.polygon;
        this.hideCreateToolsRectangle = this.widget.visibleElements.createTools.rectangle;
        this.hideCreateToolsCircle = this.widget.visibleElements.createTools.circle;
        this.hideDuplicateButton = this.widget.visibleElements.duplicateButton;
        this.hideSelectionToolsRectangleSelection = this.widget.visibleElements.selectionTools["rectangle-selection"];
        this.hideSelectionToolsLassoSelection = this.widget.visibleElements.selectionTools["lasso-selection"];
        this.hideSettingsMenu = this.widget.visibleElements.settingsMenu;
        this.hideLabelsToggle = this.widget.visibleElements.labelsToggle;
        this.hideTooltipsToggle = this.widget.visibleElements.tooltipsToggle;
        this.hideSnappingControls = this.widget.visibleElements.snappingControls;
        this.showSnappingControlsElementsHeader = this.widget.visibleElements.snappingControlsElements.header;
        this.hideSnappingControlsElementsEnabledToggle = this.widget.visibleElements.snappingControlsElements.enabledToggle;
        this.hideSnappingControlsElementsSelfEnabledToggle = this.widget.visibleElements.snappingControlsElements.selfEnabledToggle;
        this.hideSnappingControlsElementsFeatureEnabledToggle = this.widget.visibleElements.snappingControlsElements.featureEnabledToggle;
        this.hideSnappingControlsElementsLayerList = this.widget.visibleElements.snappingControlsElements.layerList;
        this.hideUndoRedoMenu = this.widget.visibleElements.undoRedoMenu;
        this.position = "bottom-left";
        this.state = this.widget.state;
    }
    async _editConstructorProperties(properties) {
        if (!this.defaultGraphicsLayerDisabled) {
            properties.layer ?? (properties.layer = await newLayersGraphicsLayer({
                title: "Sketch Layer",
            }));
        }
        return properties;
    }
    //--------------------------------------------------------------------------
    //
    //  Listeners
    //
    //--------------------------------------------------------------------------
    arcgisReadyHandler() {
        if (!this.defaultGraphicsLayerDisabled && !this.el.view?.map.layers.includes(this.widget.layer)) {
            this.el.view?.map.add(this.widget.layer);
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async cancel() {
        this.widget?.cancel();
    }
    async complete() {
        this.widget?.complete();
    }
    async create(tool, createOptions) {
        await this.widget?.create(tool, createOptions);
    }
    async delete() {
        this.widget?.delete();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async duplicate() {
        this.widget?.duplicate();
    }
    async redo() {
        this.widget?.redo();
    }
    async undo() {
        this.widget?.undo();
    }
    async update(graphic, updateOptions) {
        return void this.widget?.update(graphic, updateOptions);
    }
    get el() { return this; }
    static get style() { return ArcgisSketchStyle0; }
}, __cmpMeta);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-sketch"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-sketch":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisSketch$1);
            }
            break;
    } });
}
defineCustomElement$1();

const ArcgisSketch = ArcgisSketch$1;
const defineCustomElement = defineCustomElement$1;

export { ArcgisSketch, defineCustomElement };
