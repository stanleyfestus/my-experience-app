/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');

const ArcgisVersionManagementServiceItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisFlowItemBack = index.createEvent(this, "arcgisFlowItemBack", 7);
        this.arcgisFlowItemClose = index.createEvent(this, "arcgisFlowItemClose", 7);
        this.arcgisGetVersions = index.createEvent(this, "arcgisGetVersions", 7);
        this.arcgisManageVersion = index.createEvent(this, "arcgisManageVersion", 7);
        this.arcgisNewVersion = index.createEvent(this, "arcgisNewVersion", 7);
        this._versionListEventListeners = new Map();
        this._arcgisGetVersions = (event) => {
            this.arcgisGetVersions.emit(event.detail);
        };
        this._arcgisManageVersion = (event) => {
            this.arcgisManageVersion.emit(event.detail);
        };
        this._arcgisNewVersion = (event) => {
            this.arcgisNewVersion.emit(event.detail);
        };
        this.serviceItemElementProps = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        if (this._versionList) {
            this._removeVersionListEventListeners(this._versionList);
        }
    }
    render() {
        const { serviceItemElementProps: { allowEditing, closable, currentUser, executionError, currentVersionIdentifier, flowElement, hasAdvEditingUte, heading, isVersioningApiAvailable, pageSize, serviceName, serviceUrl, state, strings, versionInfos, }, } = this;
        let { _versionList: versionList } = this;
        const comboboxVersions = (index.h("calcite-combobox", { key: '55e20d6e5f51b908ad71384612d1832aa6b1bf31', clearDisabled: true, label: serviceName, maxItems: 5, overlayPositioning: "fixed", selectionMode: "single-persist", onCalciteComboboxChange: (event) => {
                const node = event.target;
                const versionInfo = versionInfos.find((version) => version.versionIdentifier.guid === node.value);
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            } }, versionInfos
            ? versionInfos.map((versionInfo) => (index.h("calcite-combobox-item", { selected: currentVersionIdentifier.guid === versionInfo.versionIdentifier.guid &&
                    currentVersionIdentifier.name === versionInfo.versionIdentifier.name, textLabel: versionInfo.versionIdentifier.name, value: versionInfo.versionIdentifier.guid })))
            : undefined));
        let actionManageVersions;
        let tooltipManageVersions;
        if (allowEditing) {
            actionManageVersions = (index.h("calcite-action", { key: '5d130fb6308283a8405d5d786ccc5deed2a65b1d', id: `actionManageVersions_${serviceName}`, icon: "list", scale: "s", slot: "control", text: "", onClick: async () => {
                    versionList = document.createElement("arcgis-version-management-version-list");
                    versionList.versionListElementProps = {
                        closable,
                        currentUser,
                        currentVersionIdentifier,
                        executionError,
                        hasAdvEditingUte,
                        heading,
                        isVersioningApiAvailable,
                        pageSize,
                        serviceName,
                        serviceUrl,
                        state,
                        strings,
                        versionInfos,
                    };
                    versionList.addEventListener("calciteFlowItemBack", (e) => {
                        e.preventDefault();
                        this.arcgisFlowItemBack.emit();
                    });
                    versionList.addEventListener("calciteFlowItemClose", () => {
                        this.arcgisFlowItemClose.emit();
                    });
                    this._addVersionListEventListeners(versionList);
                    flowElement.append(versionList);
                } }));
            tooltipManageVersions = (index.h("calcite-tooltip", { key: '522b0802ecd431e4f9a1069e20f65c3256fb6e0c', overlayPositioning: "fixed", referenceElement: `actionManageVersions_${serviceName}` }, index.h("span", { key: '15b78ec25223344535c237f5cd35f39c19007fa3' }, strings.headers.manageVersions)));
        }
        return (index.h("calcite-block", { key: 'ce0894bbfcadf673e7a72fc51d3fc73caa383189', open: true, heading: serviceName }, comboboxVersions, actionManageVersions, tooltipManageVersions));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addVersionListEventListeners(versionList) {
        versionList.addEventListener("arcgisGetVersions", this._arcgisGetVersions);
        this._versionListEventListeners.set("arcgisGetVersions", this._arcgisGetVersions);
        versionList.addEventListener("arcgisManageVersion", this._arcgisManageVersion);
        this._versionListEventListeners.set("arcgisManageVersion", this._arcgisManageVersion);
        versionList.addEventListener("arcgisNewVersion", this._arcgisNewVersion);
        this._versionListEventListeners.set("arcgisNewVersion", this._arcgisNewVersion);
    }
    _removeVersionListEventListeners(versionList) {
        for (const [type, listener] of this._versionListEventListeners) {
            versionList.removeEventListener(type, listener);
        }
    }
    get el() { return index.getElement(this); }
};

const ArcgisVersionManagementVersionProperties = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisAlterVersion = index.createEvent(this, "arcgisAlterVersion", 7);
        this.arcgisCreateVersion = index.createEvent(this, "arcgisCreateVersion", 7);
        this.arcgisFlowItemBack = index.createEvent(this, "arcgisFlowItemBack", 7);
        this.arcgisFlowItemClose = index.createEvent(this, "arcgisFlowItemClose", 7);
        this._switchToVersion = true;
        this._handleCancel = () => {
            this.arcgisFlowItemBack.emit();
        };
        this._handleChange = (event) => {
            const { _mode: mode, _ownerName: ownerName, _versionName: versionName, versionPropertiesElementProps: { currentUser, serviceUrl, versionInfo }, } = this;
            let { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters } = this;
            if (mode === "create") {
                if (!createVersionParameters) {
                    createVersionParameters = {
                        access: "public",
                        description: "",
                        featureServerUrl: serviceUrl,
                        ownerName: currentUser.toUpperCase(),
                        versionName: "",
                    };
                }
            }
            if (mode === "edit") {
                if (!alterVersionParameters) {
                    alterVersionParameters = {
                        featureServerUrl: serviceUrl,
                        versionIdentifier: versionInfo.versionIdentifier,
                        ownerName,
                        versionName,
                        access: versionInfo.access,
                        description: versionInfo.description,
                    };
                }
            }
            switch (event.type) {
                case "calciteChipGroupSelect": {
                    const name = event.target.label;
                    const value = event.target.selectedItems[0].value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteInputTextInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteTextAreaInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
            }
            if (mode === "create") {
                if (createVersionParameters.access !== "public" &&
                    currentUser.toUpperCase() !== createVersionParameters.ownerName?.toUpperCase()) {
                    this.switchToVersionCheckboxElement.checked = false;
                    this.switchToVersionCheckboxElement.disabled = true;
                }
                else {
                    this.switchToVersionCheckboxElement.disabled = false;
                }
                this._createVersionParameters = createVersionParameters;
            }
            if (mode === "edit") {
                this._alterVersionParameters = alterVersionParameters;
            }
        };
        this._handleClose = () => {
            this.arcgisFlowItemClose.emit();
        };
        this._handleSave = () => {
            const { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters, _mode: mode, _switchToVersion: switchToVersion, } = this;
            if (mode === "create") {
                this.arcgisCreateVersion.emit({
                    createVersionParameters,
                    switchToVersion,
                });
            }
            if (mode === "edit") {
                this.arcgisAlterVersion.emit({
                    alterVersionParameters,
                });
            }
        };
        this._handleSwitchToVersionChange = (event) => {
            this._switchToVersion = event.target.checked;
        };
        this.versionPropertiesElementProps = undefined;
    }
    async componentWillLoad() {
        const { versionPropertiesElementProps: { versionInfo }, } = this;
        if (versionInfo) {
            this._mode = "edit";
            this._fullVersionName = versionInfo.versionIdentifier.name;
            this._ownerName = this._fullVersionName.substring(0, this._fullVersionName.lastIndexOf(".")).toUpperCase();
            this._versionName = this._fullVersionName.substring(this._fullVersionName.lastIndexOf(".") + 1);
        }
        else {
            this._mode = "create";
        }
    }
    componentDidRender() {
        if (this._mode === "create") {
            this.versionNameInputElement?.setFocus();
        }
    }
    render() {
        const { versionPropertiesElementProps: { closable, currentUser, hasAdvEditingUte, state, strings, versionInfo }, _mode: mode, _ownerName: ownerName, _versionName: versionName, } = this;
        const buttons = (index.h("div", { key: '4e99683b73d48620d257c6eef9dc8bec44670f86' }, index.h("calcite-button", { key: '6f313add53b98c3246ed6a368e452e3b8ebcfb0f', appearance: "outline", slot: "footer", width: "half", onClick: this._handleCancel }, strings.actions.cancelSave), index.h("calcite-button", { key: '44d4708c675f58e53bdbf40a6cb52001122ecb0e', slot: "footer", width: "half", onClick: this._handleSave }, strings.actions.saveVersion)));
        const chipGroupAccessLevel = (index.h("calcite-label", { key: '03460347514da9101cc618a122dc52a7d3610048' }, strings.input.versionAccess, index.h("calcite-chip-group", { key: '7a394d87442486c4ec8e7a59335e6c242b95dc85', label: "access", onCalciteChipGroupSelect: this._handleChange, selectionMode: "single-persist" }, index.h("calcite-chip", { key: 'f7cdaf6069006437d6cfdfb05bf5f04330bcdcb7', selected: (mode === "edit" && versionInfo.access === "public") || mode === "create", value: "public" }, strings.accessLevels.public), index.h("calcite-chip", { key: '2a7ccc29721fff575e1083407a6aa9f1bebb0f93', selected: mode === "edit" && versionInfo.access === "protected", value: "protected" }, strings.accessLevels.protected), index.h("calcite-chip", { key: '24a6ed16765556542b491ecaf764a9c5efb8cdc6', selected: mode === "edit" && versionInfo.access === "private", value: "private" }, strings.accessLevels.private))));
        const inputDescription = (index.h("calcite-label", { key: '8bef26f80caf771d61f259b69051a4c2d2614e8f' }, strings.input.versionDescription, index.h("calcite-text-area", { key: '295736fed7212ee5bf845b76a59ba23a9472474b', name: "description", onCalciteTextAreaInput: this._handleChange, resize: "vertical", value: mode === "edit" ? versionInfo.description : "" })));
        const inputName = (index.h("calcite-label", { key: '0d98dee41473433fad40a8944e341943bce8c9e6' }, strings.input.versionName, index.h("calcite-input-text", { key: '53647af8f8b0383733caf725ae928618517527a9', ref: (node) => {
                this.versionNameInputElement = node;
            }, name: "versionName", onCalciteInputTextInput: this._handleChange, maxLength: 62, value: mode === "edit" ? versionName : "" })));
        const inputOwner = (index.h("calcite-label", { key: 'dab16d84730f2a28f7c7c58210fba5cf0d18868a' }, strings.input.versionOwner, index.h("calcite-input-text", { key: 'cb8317e35c5b5c8a4a97c414411fba39e1aeca3e', name: "ownerName", onCalciteInputTextInput: this._handleChange, disabled: !hasAdvEditingUte, value: mode === "edit" ? ownerName : currentUser.toUpperCase() })));
        const switchToVersionCheckbox = mode === "create" ? (index.h("calcite-label", { layout: "inline" }, index.h("calcite-checkbox", { ref: (node) => {
                this.switchToVersionCheckboxElement = node;
            }, checked: true, name: "switchToVersion", onCalciteCheckboxChange: this._handleSwitchToVersionChange }), strings.actions.switchToVersion)) : undefined;
        return (index.h("calcite-flow-item", { key: '331bac8a5fda0fa38f78d0ae4cf843b694f9385a', closable: closable, description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion, onCalciteFlowItemClose: this._handleClose }, index.h("calcite-panel", { key: 'fadaf572a4e872e4b894a8b250cf7db4a572c604', loading: state === "executing" }, index.h("calcite-block", { key: '4c9f807cb52444ca935e6d9fec2ac21c195e9b13', heading: "", open: true }, inputName, inputDescription, chipGroupAccessLevel, inputOwner, switchToVersionCheckbox, buttons))));
    }
    get el() { return index.getElement(this); }
};

exports.arcgis_version_management_service_item = ArcgisVersionManagementServiceItem;
exports.arcgis_version_management_version_properties = ArcgisVersionManagementVersionProperties;
