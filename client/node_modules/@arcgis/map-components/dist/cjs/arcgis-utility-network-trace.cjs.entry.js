/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const index$1 = require('./index-87ff723d.js');
const componentUtils = require('./component-utils-b8b66725.js');
const disconnected = require('./disconnected-fe7766d5.js');

const utilityNetworkTraceCss = "";
const ArcgisUtilityNetworkTraceStyle0 = utilityNetworkTraceCss;

const ArcgisUtilityNetworkTrace = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisAddFlag = index.createEvent(this, "arcgisAddFlag", 7);
        this.arcgisAddFlagComplete = index.createEvent(this, "arcgisAddFlagComplete", 7);
        this.arcgisAddFlagError = index.createEvent(this, "arcgisAddFlagError", 7);
        this.arcgisAddResultArea = index.createEvent(this, "arcgisAddResultArea", 7);
        this.arcgisRemoveResultArea = index.createEvent(this, "arcgisRemoveResultArea", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.enableResultArea = false;
        this.defaultGraphicColor = {
            color: [255, 255, 0, 0.6],
            haloOpacity: 0.9,
            fillOpacity: 0.2,
            hex: "#FFFF00",
        };
        this.disabled = false;
        this.flags = [];
        this.gdbVersion = "sde.DEFAULT";
        this.inputSettings = [];
        this.resultAreaProperties = undefined;
        this.selectedTraces = [];
        this.selectOnCompleteDisabled = false;
        this.showGraphicsOnCompleteDisabled = false;
        this.showSelectionAttributesDisabled = false;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void componentUtils.referenceElementHelper(this, value);
    }
    enableResultAreaWatcher(value) {
        if (this.widget) {
            this.widget.enableResultArea = value;
        }
    }
    defaultGraphicColorWatcher(value) {
        if (this.widget) {
            this.widget.defaultGraphicColor = value;
        }
    }
    disabledWatcher(value, old) {
        if (this.widget && value !== old) {
            this.widget.disabled = value;
        }
    }
    flagsWatcher(value) {
        if (this.widget) {
            this.widget.flags = value;
        }
    }
    gdbVersionWatcher(value) {
        if (this.widget) {
            this.widget.gdbVersion = value;
        }
    }
    inputSettingsWatcher(value) {
        if (this.widget) {
            this.widget.inputSettings = value;
        }
    }
    resultAreaPropertiesWatcher(value) {
        if (this.widget) {
            this.widget.resultAreaProperties = value;
        }
    }
    selectedTracesWatcher(value) {
        if (this.widget) {
            this.widget.selectedTraces = value;
        }
    }
    selectOnCompleteDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.selectOnComplete = !value;
        }
    }
    showGraphicsOnCompleteDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showGraphicsOnComplete = !value;
        }
    }
    showSelectionAttributesDisabledWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.showSelectionAttributes = !value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget && this.el.childElem) {
            this.view.ui.move(this.el.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    async checkCanTrace() {
        await this.widget?.checkCanTrace();
    }
    async confirmReset() {
        this.widget?.confirmReset();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await index$1.newWidgetsUtilityNetworkTrace(params);
        this.widget = widget;
        await this._addWatchers();
        this._proxyEvents();
        this._addContainer();
        componentUtils.defineViewProperty(this);
        componentUtils.attachToParent(this);
    }
    disconnectedCallback() {
        disconnected.onDisconnectedHelper(this);
    }
    render() {
        return index.h("div", { key: '0c08d69382de6c22fb9de26dc710b4be828af319', ref: (el) => (this.el.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.el.childElem;
    }
    async _addWatchers() {
        const { watch } = await index$1.importCoreReactiveUtils();
        componentUtils.addHandles(this, watch(() => this.widget.disabled, (value) => (this.disabled = value)));
    }
    _createParams() {
        const params = {};
        if (this.defaultGraphicColor) {
            params.defaultGraphicColor = this.defaultGraphicColor;
        }
        if (this.enableResultArea !== undefined) {
            params.enableResultArea = this.enableResultArea;
        }
        if (this.flags) {
            params.flags = this.flags;
        }
        if (this.gdbVersion) {
            params.gdbVersion = this.gdbVersion;
        }
        if (this.inputSettings) {
            params.inputSettings = this.inputSettings;
        }
        if (this.resultAreaProperties) {
            params.resultAreaProperties = this.resultAreaProperties;
        }
        if (this.selectedTraces) {
            params.selectedTraces = this.selectedTraces;
        }
        if (this.selectOnCompleteDisabled !== undefined) {
            params.selectOnComplete = !this.selectOnCompleteDisabled;
        }
        if (this.showGraphicsOnCompleteDisabled !== undefined) {
            params.showGraphicsOnComplete = !this.showGraphicsOnCompleteDisabled;
        }
        if (this.showSelectionAttributesDisabled !== undefined) {
            params.showSelectionAttributes = !this.showSelectionAttributesDisabled;
        }
        if (this.view) {
            params.view = this.view;
        }
        return params;
    }
    _proxyEvents() {
        this.widget.on("add-flag", (e) => this.arcgisAddFlag.emit(e));
        this.widget.on("add-flag-complete", (e) => this.arcgisAddFlagComplete.emit(e));
        this.widget.on("add-flag-error", (e) => this.arcgisAddFlagError.emit(e));
        this.widget.on("add-result-area", (e) => this.arcgisAddResultArea.emit(e));
        this.widget.on("remove-result-area", (e) => this.arcgisRemoveResultArea.emit(e));
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "enableResultArea": ["enableResultAreaWatcher"],
        "defaultGraphicColor": ["defaultGraphicColorWatcher"],
        "disabled": ["disabledWatcher"],
        "flags": ["flagsWatcher"],
        "gdbVersion": ["gdbVersionWatcher"],
        "inputSettings": ["inputSettingsWatcher"],
        "resultAreaProperties": ["resultAreaPropertiesWatcher"],
        "selectedTraces": ["selectedTracesWatcher"],
        "selectOnCompleteDisabled": ["selectOnCompleteDisabledWatcher"],
        "showGraphicsOnCompleteDisabled": ["showGraphicsOnCompleteDisabledWatcher"],
        "showSelectionAttributesDisabled": ["showSelectionAttributesDisabledWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisUtilityNetworkTrace.style = ArcgisUtilityNetworkTraceStyle0;

exports.arcgis_utility_network_trace = ArcgisUtilityNetworkTrace;
