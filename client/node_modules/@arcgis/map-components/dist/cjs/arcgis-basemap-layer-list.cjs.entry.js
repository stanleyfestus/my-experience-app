/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const index$2 = require('./index-fbb18e12.js');
const index$3 = require('./index-87ff723d.js');
const useWidget = require('./useWidget-3971aff7.js');
const index$1 = require('./index-bb8f4b21.js');
require('./component-utils-b8b66725.js');

const basemapLayerListCss = "";
const ArcgisBasemapLayerListStyle0 = basemapLayerListCss;

const useBasemapLayerListWidget = useWidget.makeWidgetController(index$3.newWidgetsBasemapLayerList);
const ArcgisBasemapLayerList = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.widgetTriggerAction = index.createEvent(this, "arcgisTriggerAction", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useBasemapLayerListWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.headingLevel = this.widget.headingLevel;
        this.label = this.widget.label;
        this.referenceElement = undefined;
        this.baseFilterText = this.widget.baseFilterText;
        this.baseItems = index$1.getSet(undefined, {
            get: () => this.widget.baseItems,
            set: "ignore",
        });
        this.baseListItemCreatedFunction = this.widget.baseListItemCreatedFunction;
        this.basemapTitle = this.widget.basemapTitle;
        this.catalogLayerList = index$1.getSet(undefined, {
            get: () => this.widget.catalogLayerList,
            set: "ignore",
        });
        this.catalogOptions = this.widget.catalogOptions;
        this.collapsed = this.widget.collapsed;
        this.dragEnabled = this.widget.dragEnabled;
        this.editingTitle = this.widget.editingTitle;
        this.filterPlaceholder = this.widget.filterPlaceholder;
        this.icon = this.widget.icon;
        this.knowledgeGraphOptions = this.widget.knowledgeGraphOptions;
        this.minFilterItems = this.widget.minFilterItems;
        this.openTableListItem = this.widget.openTableListItem;
        this.referenceFilterText = this.widget.referenceFilterText;
        this.referenceItems = index$1.getSet(undefined, {
            get: () => this.widget.referenceItems,
            set: "ignore",
        });
        this.referenceListItemCreatedFunction = this.widget.referenceListItemCreatedFunction;
        this.selectedItems = this.widget.selectedItems;
        this.selectionMode = this.widget.selectionMode;
        this.tableList = this.widget.tableList;
        this.visibilityAppearance = this.widget.visibilityAppearance;
        this.hideBaseLayers = this.widget.visibleElements.baseLayers;
        this.showCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.showEditTitleButton = this.widget.visibleElements.editTitleButton;
        this.showErrors = this.widget.visibleElements.errors;
        this.showFilter = this.widget.visibleElements.filter;
        this.hideFlow = this.widget.visibleElements.flow;
        this.hideHeading = this.widget.visibleElements.heading;
        this.hideReferenceLayers = this.widget.visibleElements.referenceLayers;
        this.hideStatusIndicators = this.widget.visibleElements.statusIndicators;
        this.showTemporaryLayerIndicators = this.widget.visibleElements.temporaryLayerIndicators;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return index.getElement(this); }
};
ArcgisBasemapLayerList.style = ArcgisBasemapLayerListStyle0;

exports.arcgis_basemap_layer_list = ArcgisBasemapLayerList;
