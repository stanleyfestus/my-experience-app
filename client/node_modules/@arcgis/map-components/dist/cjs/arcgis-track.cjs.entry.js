/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const globalCss = require('./globalCss-8e3b5c64.js');
const useViewModel = require('./useViewModel-408f0a4f.js');
const index$3 = require('./index-87ff723d.js');
const index$2 = require('./index-fbb18e12.js');
const index$1 = require('./index-bb8f4b21.js');
require('./component-utils-b8b66725.js');

const css = {
    base: "esri-track",
};
const useTrackViewModel = useViewModel.makeViewModelController(index$3.newWidgetsTrackTrackViewModel);
const ArcgisTrack = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.viewModelTrack = index.createEvent(this, "arcgisComplete", 7);
        this.viewModelTrackError = index.createEvent(this, "arcgisError", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = index$1.useControllerManager(this);
        this.messages = useViewModel.useT9n();
        this.viewModel = useTrackViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._toggleTracking = () => {
            if (!this.viewModel) {
                return;
            }
            const { state } = this.viewModel;
            if (state === "feature-unsupported" ||
                state === "disabled") {
                return;
            }
            if (state === "tracking" || state === "waiting") {
                this.viewModel.stop();
                return;
            }
            this.viewModel.start();
        };
        this.autoDestroyDisabled = false;
        this.error = this.viewModel.error;
        this.geolocationOptions = this.viewModel.geolocationOptions;
        this.goToLocationDisabled = this.viewModel.goToLocationEnabled;
        this.graphic = this.viewModel.graphic;
        this.icon = "compass-north-circle";
        this.label = undefined;
        this.positionFilterFunction = this.viewModel.positionFilterFunction;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.scale = this.viewModel.scale;
        this.state = this.viewModel.state;
        this.tracking = this.viewModel.tracking;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const { viewModel, messages, icon } = this;
        const state = viewModel?.state;
        const isTracking = state === "tracking";
        const errorText = this._localizeError(this.viewModel?.error);
        const label = (isTracking ? messages?.stopTracking : messages?.startTracking) ?? "";
        const hidden = state === "feature-unsupported";
        const iconStart = (state === "tracking" ? "pause" : undefined) ?? icon ?? undefined;
        return (index.h("div", { key: '61dd5a2bc84057cb74d3edf796b820e3d4de9d57', class: index$3.classes(css.base, globalCss.globalCss.widget) }, !hidden && (index.h("calcite-button", { key: '4e8b016417d3bb7609d570026e9bdb76cf8e9793', class: globalCss.globalCss.widgetButton, disabled: state === "disabled", "icon-start": iconStart, kind: "neutral", label: label, loading: state === "waiting", onClick: this._toggleTracking, title: label })), errorText ? (index.h("calcite-tooltip", { open: true, "overlay-positioning": "fixed", "reference-element": this.el }, errorText)) : null));
    }
    async start() {
        this.viewModel.start();
    }
    async stop() {
        this.viewModel.stop();
    }
    _localizeError(error) {
        if (error instanceof GeolocationPositionError) {
            if (error.code === GeolocationPositionError.PERMISSION_DENIED) {
                return this.messages?.permissionError;
            }
            else if (error.code === GeolocationPositionError.TIMEOUT) {
                return this.messages?.timeoutError;
            }
            return this.messages?.positionUnavailable;
        }
        if (error instanceof Error) {
            return error.message;
        }
        return undefined;
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};

exports.arcgis_track = ArcgisTrack;
