/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const index$2 = require('./index-fbb18e12.js');
const index$3 = require('./index-87ff723d.js');
const useViewModel = require('./useViewModel-408f0a4f.js');
const index$1 = require('./index-bb8f4b21.js');
require('./component-utils-b8b66725.js');

const versionManagementCss = ".calcite-flow-widget{width:350px}calcite-block{margin:0}calcite-pagination{justify-content:center}";
const ArcgisVersionManagementStyle0 = versionManagementCss;

const useVersionManagementViewModel = useViewModel.makeViewModelController(index$3.newWidgetsVersionManagementVersionManagementViewModel);
const ArcgisVersionManagement = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisVersioningStateChanged = index.createEvent(this, "arcgisVersioningStateChanged", 7);
        this.manager = index$1.useControllerManager(this);
        this.reactiveUtils = index$2.load(index$3.importCoreReactiveUtils);
        this.viewModel = useVersionManagementViewModel(this);
        this.messages = useViewModel.useT9n({ blocking: true });
        this.allowEditingDisabled = false;
        this.autoDestroyDisabled = false;
        this.closable = false;
        this.icon = undefined;
        this.label = undefined;
        this.mode = undefined;
        this.pageSize = 5;
        this.position = "top-right";
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
        this.versioningStates = this.viewModel.versioningStates;
        this.view = this.viewModel.view;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { watch } = this.reactiveUtils;
        this.manager.onLifecycle(() => [
            watch(() => this.viewModel.state, (state) => {
                const { flowElement } = this;
                const versionProperties = flowElement?.getElementsByTagName("arcgis-version-management-version-properties")[0];
                const versionList = flowElement?.getElementsByTagName("arcgis-version-management-version-list")[0];
                if (state === "disabled") {
                    if (versionProperties) {
                        this._removeVersionPropertiesFlowItem(flowElement);
                    }
                    if (versionList) {
                        this._removeVersionListFlowItem(flowElement);
                    }
                    return;
                }
                if (versionList) {
                    versionList.versionListElementProps = {
                        ...versionList.versionListElementProps,
                        executionError: this.viewModel.executionError,
                    };
                    versionList.versionListElementProps = {
                        ...versionList.versionListElementProps,
                        state,
                    };
                }
                if (versionProperties) {
                    versionProperties.versionPropertiesElementProps = {
                        ...versionProperties.versionPropertiesElementProps,
                        state,
                    };
                }
            }),
        ]);
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const { allowEditingDisabled, closable, flowElement, label, messages, pageSize, viewModel, viewModel: { loadError, state }, } = this;
        const arrayServiceNames = Array.from(viewModel.serviceNameLookup, ([url, name]) => ({ url, name }));
        const serviceItems = state !== "disabled" ? (index.h(index.Fragment, null, arrayServiceNames.map((service) => {
            const serviceItemElementProps = {
                allowEditing: !allowEditingDisabled,
                closable,
                currentUser: viewModel.userLookup.get(service.url),
                currentVersionIdentifier: viewModel.versioningStateLookup.get(service.url).currentVersionInfo
                    .versionIdentifier,
                executionError: undefined,
                flowElement: flowElement,
                hasAdvEditingUte: viewModel.advancedEditingUserTypeExtensionLookup.get(service.url),
                heading: label,
                isVersioningApiAvailable: (viewModel.serverVersionLookup.get(service.url) ?? 0) >= 11.2,
                pageSize,
                serviceName: service.name,
                state,
                serviceUrl: service.url,
                strings: messages,
                versionInfos: viewModel.versioningStateLookup.get(service.url)?.versionInfos ?? [],
            };
            return (index.h("arcgis-version-management-service-item", { serviceItemElementProps: serviceItemElementProps, onArcgisGetVersions: async (event) => {
                    await this._refreshVersionList(event.detail.serviceUrl);
                }, onArcgisFlowItemBack: () => {
                    this._removeVersionListFlowItem(flowElement);
                }, onArcgisFlowItemClose: () => {
                    this._handleFlowItemClose();
                }, onArcgisManageVersion: (event) => {
                    this._handleManageVersionAction(event, flowElement);
                }, onArcgisNewVersion: (event) => {
                    const versionPropertiesFlow = this._createVersionPropertiesFlowItem(event.detail.serviceUrl, undefined);
                    flowElement?.appendChild(versionPropertiesFlow);
                } }));
        }))) : undefined;
        const notice = state === "disabled" ? (index.h("calcite-notice", { class: "notice", closable: false, kind: "warning", open: true, scale: "s", slot: "footer", width: "full" }, index.h("div", { slot: "message" }, this._getLoadError(loadError)))) : undefined;
        return (index.h("calcite-flow", { ref: (node) => {
                this.flowElement = node;
            }, class: this.mode === "dialog" ? "" : "calcite-flow-widget" }, index.h("calcite-flow-item", { closable: this.closable, heading: label ?? undefined, onCalciteFlowItemClose: () => {
                this._handleFlowItemClose();
            } }, index.h("calcite-panel", { loading: state === "loading" || state === "executing" }, serviceItems, notice))));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _createVersionPropertiesFlowItem(serviceUrl, versionInfo) {
        const { closable, flowElement, viewModel, viewModel: { state }, } = this;
        const versionProperties = document.createElement("arcgis-version-management-version-properties");
        versionProperties.versionPropertiesElementProps = {
            closable,
            currentUser: viewModel.userLookup.get(serviceUrl),
            hasAdvEditingUte: viewModel.advancedEditingUserTypeExtensionLookup.get(serviceUrl),
            serviceUrl,
            state,
            strings: this.messages,
            versionInfo,
        };
        versionProperties.addEventListener("arcgisCreateVersion", (event) => {
            const { createVersionParameters, switchToVersion } = event.detail;
            viewModel
                .createVersion(createVersionParameters)
                .then(async (createVersionResult) => {
                if (createVersionResult) {
                    this.arcgisVersioningStateChanged.emit({
                        type: "version-created",
                        versionIdentifier: createVersionResult.versionIdentifier,
                        versioningState: viewModel.versioningStateLookup.get(serviceUrl),
                    });
                }
                if (switchToVersion) {
                    await this.viewModel
                        .changeVersion(serviceUrl, createVersionResult.versionIdentifier.name, createVersionResult.versionIdentifier.guid)
                        .then((changeVersionResult) => {
                        if (changeVersionResult) {
                            this.arcgisVersioningStateChanged.emit({
                                type: "version-switched",
                                versionIdentifier: createVersionResult.versionIdentifier,
                                versioningState: viewModel.versioningStateLookup.get(serviceUrl),
                            });
                        }
                    });
                }
                await this._refreshVersionList(serviceUrl);
            })
                .finally(() => {
                this._removeVersionPropertiesFlowItem(flowElement);
            });
        });
        versionProperties.addEventListener("arcgisAlterVersion", async (event) => {
            const { flowElement } = this;
            const { alterVersionParameters } = event.detail;
            await viewModel
                .alterVersion(alterVersionParameters)
                .then(async (alterVersionResult) => {
                if (alterVersionResult) {
                    this.arcgisVersioningStateChanged.emit({
                        type: "version-changed",
                        versionIdentifier: alterVersionParameters.versionIdentifier,
                        versioningState: viewModel.versioningStateLookup.get(serviceUrl),
                    });
                }
                await this._refreshVersionList(serviceUrl);
            })
                .finally(() => {
                this._removeVersionPropertiesFlowItem(flowElement);
            });
        });
        versionProperties.addEventListener("arcgisFlowItemBack", () => {
            this._removeVersionPropertiesFlowItem(this.flowElement);
        });
        versionProperties.addEventListener("calciteFlowItemBack", (event) => {
            event.preventDefault();
            this._removeVersionPropertiesFlowItem(this.flowElement);
        });
        versionProperties.addEventListener("calciteFlowItemClose", () => {
            this._handleFlowItemClose();
        });
        return versionProperties;
    }
    _getLoadError(loadError) {
        const { messages } = this;
        switch (loadError) {
            case "no-feature-services":
                return messages.loadErrors.noFeatureServices;
            case "no-view-property":
                return messages.loadErrors.noViewProperty;
            default:
                return loadError;
        }
    }
    _handleFlowItemClose() {
        const versionManagementComponent = document.querySelector("arcgis-version-management");
        const parentElement = versionManagementComponent.parentElement;
        parentElement?.removeChild(versionManagementComponent);
    }
    async _handleManageVersionAction(e, flowElement) {
        const { actionType, serviceUrl, versionInfo } = e.detail;
        const { viewModel } = this;
        switch (actionType) {
            case "changeVersion": {
                viewModel
                    .changeVersion(serviceUrl, versionInfo.versionIdentifier.name, versionInfo.versionIdentifier.guid)
                    .then((changeVersionResult) => {
                    if (changeVersionResult) {
                        this.arcgisVersioningStateChanged.emit({
                            type: "version-switched",
                            versionIdentifier: versionInfo.versionIdentifier,
                            versioningState: viewModel.versioningStateLookup.get(serviceUrl),
                        });
                    }
                    const versionList = flowElement?.getElementsByTagName("arcgis-version-management-version-list")[0];
                    if (versionList) {
                        if (versionList) {
                            versionList.versionListElementProps = {
                                ...versionList.versionListElementProps,
                                currentVersionIdentifier: viewModel.versioningStateLookup.get(serviceUrl).currentVersionInfo.versionIdentifier,
                            };
                        }
                    }
                });
                break;
            }
            case "deleteVersion": {
                viewModel
                    .deleteVersion(serviceUrl, versionInfo.versionIdentifier.name, versionInfo.versionIdentifier.guid)
                    .then(async (deleteVersionResult) => {
                    if (deleteVersionResult) {
                        this.arcgisVersioningStateChanged.emit({
                            type: "version-deleted",
                            versionIdentifier: versionInfo.versionIdentifier,
                            versioningState: viewModel.versioningStateLookup.get(serviceUrl),
                        });
                    }
                    await this._refreshVersionList(serviceUrl);
                });
                break;
            }
            case "editVersion": {
                const versionPropertiesFlow = this._createVersionPropertiesFlowItem(serviceUrl, versionInfo);
                flowElement.appendChild(versionPropertiesFlow);
                break;
            }
        }
    }
    async _refreshVersionList(serviceUrl) {
        const { flowElement, viewModel } = this;
        if (flowElement) {
            const versionInfos = await viewModel.getVersionInfos(serviceUrl);
            const serviceItemElements = flowElement.getElementsByTagName("arcgis-version-management-service-item");
            for (const serviceItemElement of serviceItemElements) {
                if (serviceItemElement.serviceItemElementProps.serviceUrl === serviceUrl) {
                    serviceItemElement.serviceItemElementProps = {
                        ...serviceItemElement.serviceItemElementProps,
                        versionInfos,
                    };
                }
            }
            const versionListElement = flowElement.getElementsByTagName("arcgis-version-management-version-list")[0];
            if (versionListElement) {
                versionListElement.versionListElementProps = {
                    ...versionListElement.versionListElementProps,
                    currentVersionIdentifier: viewModel.versioningStateLookup.get(serviceUrl).currentVersionInfo.versionIdentifier,
                    versionInfos,
                };
            }
        }
    }
    _removeVersionListFlowItem(flowElement) {
        for (const childNode of flowElement.childNodes) {
            if (childNode.nodeName.toUpperCase() === "ARCGIS-VERSION-MANAGEMENT-VERSION-LIST") {
                flowElement.removeChild(childNode);
            }
            if (childNode.nodeName.toUpperCase() === "CALCITE-FLOW-ITEM") {
                childNode.hidden = false;
            }
        }
    }
    _removeVersionPropertiesFlowItem(flowElement) {
        for (const childNode of flowElement.childNodes) {
            if (childNode.nodeName.toUpperCase() === "ARCGIS-VERSION-MANAGEMENT-VERSION-PROPERTIES") {
                flowElement.removeChild(childNode);
            }
            if (childNode.nodeName.toUpperCase() === "ARCGIS-VERSION-MANAGEMENT-VERSION-LIST") {
                childNode.getElementsByTagName("calcite-flow-item")[0].hidden = false;
            }
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};
ArcgisVersionManagement.style = ArcgisVersionManagementStyle0;

exports.arcgis_version_management = ArcgisVersionManagement;
