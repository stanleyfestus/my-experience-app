/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');

const ArcgisVersionManagementVersionItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisManageVersion = index.createEvent(this, "arcgisManageVersion", 7);
        this.versionItemElementProps = undefined;
    }
    render() {
        const { versionItemElementProps: { currentUser, currentVersionIdentifier, hasAdvEditingUte, isVersioningApiAvailable, serviceUrl, strings: { actions }, versionInfo, }, } = this;
        const fullVersionName = versionInfo.versionIdentifier.name;
        const versionName = fullVersionName.substring(fullVersionName.lastIndexOf(".") + 1); // label
        const versionOwner = fullVersionName.substring(0, fullVersionName.lastIndexOf(".")).toUpperCase(); // description
        const guid = versionInfo.versionIdentifier.guid;
        const actionElementId = `actionSwitchToVersion_${guid}`;
        const canEditVersion = versionOwner.toUpperCase() === currentUser.toUpperCase() && isVersioningApiAvailable && hasAdvEditingUte;
        const isCurrentVersion = currentVersionIdentifier.guid === versionInfo.versionIdentifier.guid;
        const startActionChangeVersion = (index.h("calcite-action", { key: '14f7c8b59b3beb9a160b10a1f7252a9c490dd96b', disabled: isCurrentVersion, id: actionElementId, icon: "code-branch", text: "", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            }, slot: "actions-start" }));
        const startActionChangeVersionTooltip = !isCurrentVersion ? (index.h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: actionElementId }, index.h("span", null, actions.switchToVersion))) : undefined;
        return (index.h("calcite-list-item", { key: 'a031cfd07866803ae8d06f53593288d3f17fa288', description: versionOwner, label: versionName, selected: false, value: guid }, startActionChangeVersion, startActionChangeVersionTooltip, index.h("calcite-action-menu", { key: 'fb64c8bdc470942f2348073d40c894be4a88fd93', "overlay-positioning": "fixed", slot: "actions-end", label: "" }, index.h("calcite-action", { key: '1009f3d41a1b36d1d835f4b7fc36159baa4c1320', disabled: isCurrentVersion, icon: "code-branch", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.switchToVersion, textEnabled: true }), index.h("calcite-action", { key: 'a7e7400c15dc6151a8b68075c509c30b2a75fcb6', disabled: !canEditVersion || isCurrentVersion, icon: "code-branch-edit", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "editVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.editVersion, textEnabled: true }), index.h("calcite-action", { key: 'afafe0b02b45bc233a758ac5ab1f18a7aef77d8d', disabled: !canEditVersion || (canEditVersion && isCurrentVersion), icon: "trash", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "deleteVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.deleteVersion, textEnabled: true }))));
    }
    get el() { return index.getElement(this); }
};

const ArcgisVersionManagementVersionList = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisNewVersion = index.createEvent(this, "arcgisNewVersion", 7);
        this.arcgisGetVersions = index.createEvent(this, "arcgisGetVersions", 7);
        this.arcgisManageVersion = index.createEvent(this, "arcgisManageVersion", 7);
        this._handleFilterChange = () => {
            const { versionListElementProps: { versionInfos }, } = this;
            const filterText = this._filterInputElement.value.toUpperCase();
            this._filteredVersionInfos =
                filterText === ""
                    ? versionInfos
                    : versionInfos.filter((version) => version.versionIdentifier.name.toUpperCase().includes(filterText) ||
                        version.versionIdentifier.guid.toUpperCase().includes(filterText));
            if (this._filteredVersionInfos.length) {
                this.currentPage = 1;
            }
        };
        this._handleNoticeClosed = () => {
            this.versionListElementProps = {
                ...this.versionListElementProps,
                executionError: undefined,
            };
        };
        this._handlePaginationChange = (event) => {
            this.currentPage = event.target.startItem;
        };
        this.currentPage = 1;
        this.versionListElementProps = undefined;
        this._filteredVersionInfos = undefined;
    }
    propertiesChangeHandler(newValue, oldValue) {
        if (oldValue.versionInfos !== newValue.versionInfos) {
            this._filteredVersionInfos = this.versionListElementProps.versionInfos;
            if (this._filterInputElement) {
                this._handleFilterChange();
            }
        }
    }
    componentWillLoad() {
        this._filteredVersionInfos = this.versionListElementProps.versionInfos;
    }
    componentDidRender() {
        this._filterInputElement?.setFocus();
    }
    render() {
        const { currentPage, versionListElementProps: { closable, currentUser, currentVersionIdentifier, executionError, hasAdvEditingUte, heading, isVersioningApiAvailable, pageSize, serviceName, serviceUrl, state, strings: { headers }, strings, versionInfos, }, } = this;
        const currentVersionIdentifierBlock = (index.h("calcite-block", { heading: headers.currentVersion, description: currentVersionIdentifier.name, overlayPositioning: "fixed" }));
        const actionRefreshVersions = (index.h("calcite-action", { id: "actionRefreshVersions", icon: "refresh", text: "", onClick: () => {
                this.arcgisGetVersions.emit({
                    serviceUrl,
                });
            }, slot: "header-actions-end" }, index.h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: "actionRefreshVersions" }, index.h("span", null, strings.actions.refreshVersions))));
        this._paginatedVersionInfos =
            this._filteredVersionInfos.length > pageSize
                ? this._paginate(this._filteredVersionInfos, pageSize, currentPage)
                : this._filteredVersionInfos;
        const pagination = this._filteredVersionInfos.length > pageSize ? (index.h("calcite-pagination", { onCalcitePaginationChange: this._handlePaginationChange, pageSize: 1, startItem: currentPage, totalItems: Math.ceil(this._filteredVersionInfos.length / pageSize) })) : undefined;
        const versionItems = this._paginate(this._paginatedVersionInfos, pageSize, 1).map((versionInfo) => {
            const versionItemElementProps = {
                currentUser,
                currentVersionIdentifier,
                isCurrentVersionCard: false,
                hasAdvEditingUte,
                isVersioningApiAvailable,
                serviceUrl,
                strings,
                versionInfo,
            };
            return (index.h("arcgis-version-management-version-item", { versionItemElementProps: versionItemElementProps }));
        });
        const versionFilter = versionInfos.length > pageSize ? (index.h("calcite-block", { heading: "", open: true }, index.h("calcite-input-text", { ref: (node) => {
                this._filterInputElement = node;
            }, clearable: true, icon: "search", onCalciteInputTextInput: this._handleFilterChange, placeholder: strings.actions.searchVersions }))) : undefined;
        const versionList = index.h("calcite-list", null, versionItems);
        const newVersionButton = isVersioningApiAvailable && hasAdvEditingUte ? (index.h("calcite-fab", { appearance: "outline-fill", slot: "fab", textEnabled: true, text: strings.actions.newVersion, onClick: () => {
                this.arcgisNewVersion.emit({
                    serviceUrl,
                });
            } })) : undefined;
        const noticeError = executionError ? (index.h("calcite-notice", { onCalciteNoticeClose: this._handleNoticeClosed, class: "notice", closable: true, kind: "warning", open: true, scale: "s", slot: "footer", width: "full" }, index.h("div", { slot: "message" }, this._getExecutionError(executionError)))) : undefined;
        return (index.h("calcite-flow-item", { closable: closable, description: serviceName, heading: heading }, index.h("calcite-panel", { loading: state === "executing" }, currentVersionIdentifierBlock, index.h("calcite-panel", { heading: this._filteredVersionInfos.length
                ? `${strings.headers.manageVersions} (${this._filteredVersionInfos.length})`
                : strings.headers.manageVersions }, actionRefreshVersions, versionFilter, versionList, newVersionButton), pagination, noticeError)));
    }
    _getExecutionError(executionError) {
        const { versionListElementProps: { strings: { executionErrors }, }, } = this;
        switch (executionError) {
            case "no-advanced-editing-user-type-extension":
                return executionErrors.noAdvancedEditingUserTypeExtension;
            case "no-feature-service-found":
                return executionErrors.noFeatureServiceFound;
            case "no-valid-enterprise-version":
                return executionErrors.notValidEnterpriseVersion;
            case "no-valid-version-name":
                return executionErrors.invalidVersionName;
            default:
                return executionError;
        }
    }
    _paginate(versionInfos, pageSize, pageNumber) {
        return versionInfos.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
    }
    get el() { return index.getElement(this); }
    static get watchers() { return {
        "versionListElementProps": ["propertiesChangeHandler"]
    }; }
};

exports.arcgis_version_management_version_item = ArcgisVersionManagementVersionItem;
exports.arcgis_version_management_version_list = ArcgisVersionManagementVersionList;
