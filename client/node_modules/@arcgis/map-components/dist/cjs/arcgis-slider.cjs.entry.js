/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const index$3 = require('./index-87ff723d.js');
const index$2 = require('./index-fbb18e12.js');
const useWidget = require('./useWidget-3971aff7.js');
const index$1 = require('./index-bb8f4b21.js');
require('./component-utils-b8b66725.js');

const sliderCss = "arcgis-slider{min-width:200px;min-height:25px}";
const ArcgisSliderStyle0 = sliderCss;

const useSliderWidget = useWidget.makeWidgetController(index$3.newWidgetsSlider);
const ArcgisSlider = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.widgetMaxChange = index.createEvent(this, "arcgisMaxChange", 7);
        this.widgetMaxClick = index.createEvent(this, "arcgisMaxClick", 7);
        this.widgetMinChange = index.createEvent(this, "arcgisMinChange", 7);
        this.widgetMinClick = index.createEvent(this, "arcgisMinClick", 7);
        this.widgetSegmentClick = index.createEvent(this, "arcgisSegmentClick", 7);
        this.widgetSegmentDrag = index.createEvent(this, "arcgisSegmentDrag", 7);
        this.widgetThumbChange = index.createEvent(this, "arcgisThumbChange", 7);
        this.widgetThumbClick = index.createEvent(this, "arcgisThumbClick", 7);
        this.widgetThumbDrag = index.createEvent(this, "arcgisThumbDrag", 7);
        this.widgetTickClick = index.createEvent(this, "arcgisTickClick", 7);
        this.widgetTrackClick = index.createEvent(this, "arcgisTrackClick", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useSliderWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.draggableSegmentsEnabled = this.widget.draggableSegmentsEnabled;
        this.effectiveMax = this.widget.effectiveMax;
        this.effectiveMin = this.widget.effectiveMin;
        this.effectiveSegmentElements = this.widget.effectiveSegmentElements;
        this.labelElements = this.widget.labelElements;
        this.labelInputsEnabled = this.widget.labelInputsEnabled;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.labels = this.widget.labels;
        this.layout = this.widget.layout;
        this.min = this.widget.min;
        this.max = this.widget.max;
        this.maxLabelElement = this.widget.maxLabelElement;
        this.minLabelElement = this.widget.minLabelElement;
        this.precision = this.widget.precision;
        this.rangeLabelInputsEnabled = this.widget.rangeLabelInputsEnabled;
        this.segmentElements = this.widget.segmentElements;
        this.snapOnClickEnabled = this.widget.snapOnClickEnabled;
        this.syncedSegmentsEnabled = this.widget.syncedSegmentsEnabled;
        this.thumbElements = this.widget.thumbElements;
        this.thumbsConstrained = this.widget.thumbsConstrained;
        this.tickConfigs = this.widget.tickConfigs;
        this.tickElements = this.widget.tickElements;
        this.trackElement = this.widget.trackElement;
        this.steps = index$1.getSet(this.widget.steps, {
            set: (newValue) => (typeof newValue === "string" ? newValue.split(",").map(Number) : newValue),
        });
        this.values = index$1.getSet(this.widget.values, {
            set: (newValue) => (typeof newValue === "string" ? newValue.split(",").map(Number) : newValue),
        });
        this.position = "bottom-left";
        this.state = this.widget.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    get el() { return index.getElement(this); }
};
ArcgisSlider.style = ArcgisSliderStyle0;

exports.arcgis_slider = ArcgisSlider;
