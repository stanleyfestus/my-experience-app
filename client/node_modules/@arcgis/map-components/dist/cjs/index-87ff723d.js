/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

// src/array-utils.ts

// src/css-utils.ts
function classes(...classes2) {
  const effectiveClasses = [];
  for (let i = 0; i < classes2.length; i++) {
    const arg = classes2[i];
    if (typeof arg === "string") {
      effectiveClasses.push(arg);
    } else if (Array.isArray(arg)) {
      effectiveClasses.push.apply(effectiveClasses, arg);
    } else if (typeof arg === "object") {
      for (const prop in arg) {
        if (arg[prop]) {
          effectiveClasses.push(prop);
        }
      }
    }
  }
  const className = effectiveClasses.join(" ");
  effectiveClasses.length = 0;
  return className;
}

// src/deferred.ts
var Deferred = class {
  /**
   * Resolves the promise.
   * @param value The value to resolve the promise with.
   */
  resolve(_value) {
  }
  /**
   * Rejects the promise.
   */
  reject(_error) {
  }
  /**
   * Creates a new deferred promise.
   */
  constructor() {
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
  }
};

// src/dom.ts
function inTargetElement(element, targetElement) {
  let currentElement = element;
  while (currentElement) {
    if (currentElement === targetElement) {
      return true;
    }
    if (!currentElement.parentNode) {
      return false;
    }
    if (currentElement.parentNode instanceof ShadowRoot) {
      currentElement = currentElement.parentNode.host;
    } else {
      currentElement = currentElement.parentNode;
    }
  }
  return false;
}
function observeAncestorsMutation(element, attributeFilter, callback) {
  const { subscribe } = observe(attributeFilter);
  return subscribe((mutations) => {
    const matched = mutations.some((mutation) => inTargetElement(element, mutation.target));
    if (matched) {
      callback();
    }
  });
}
var observers = {};
function observe(attributeFilter) {
  const attributes = attributeFilter.join(",");
  const previousObserver = observers[attributes];
  if (previousObserver !== void 0) {
    return previousObserver;
  }
  const subscribers = /* @__PURE__ */ new Set();
  const mutationObserver = new MutationObserver((mutations) => subscribers.forEach((callback) => callback(mutations)));
  mutationObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter,
    subtree: true
  });
  const observer = {
    subscribe(callback) {
      subscribers.add(callback);
      return {
        remove: () => {
          subscribers.delete(callback);
          if (subscribers.size === 0) {
            mutationObserver.disconnect();
            observers[attributes] = void 0;
          }
        }
      };
    }
  };
  observers[attributes] = observer;
  return observer;
}
function closestElement(base, selector) {
  let currentElement = base;
  while (currentElement) {
    const element = currentElement.closest(selector);
    if (element) {
      return element;
    }
    const rootElement = currentElement.getRootNode();
    if (rootElement === document) {
      return null;
    }
    currentElement = rootElement.host;
  }
  return null;
}
function getElementAttribute(el, prop, fallbackValue) {
  const closest = closestElement(el, `[${prop}]`);
  return closest?.getAttribute(prop) ?? fallbackValue;
}

// src/errors.ts
function safeCall(callback, thisContext, ...rest) {
  try {
    return callback?.call(thisContext, ...rest);
  } catch (error) {
    console.error(error, callback);
  }
  return void 0;
}
async function safeAsyncCall(callback, thisContext, ...rest) {
  try {
    const result = callback?.call(thisContext, ...rest);
    return result instanceof Promise ? await result : result;
  } catch (error) {
    console.error(error, callback);
  }
  return void 0;
}

// src/intl.ts
var supportedLocalesArray = [
  "ar",
  "bg",
  "bs",
  "ca",
  "cs",
  "da",
  "de",
  "el",
  "en",
  "es",
  "et",
  "fi",
  "fr",
  "he",
  "hr",
  "hu",
  "id",
  "it",
  "ja",
  "ko",
  "lt",
  "lv",
  "nl",
  "nb",
  "pl",
  "pt-BR",
  "pt-PT",
  "ro",
  "ru",
  "sk",
  "sl",
  "sr",
  "sv",
  "th",
  "tr",
  "uk",
  "vi",
  "zh-CN",
  "zh-HK",
  "zh-TW"
];
var supportedLocales = new Set(supportedLocalesArray);
var defaultLocale = "en";
var localeEquivalencies = {
  // We use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle
  pt: "pt-PT",
  // We support both 'nb' and 'no' (BCP 47) for Norwegian but only `nb` has corresponding bundle
  no: "nb",
  // We can `zh-CN` as base translation for chinese locales which has no corresponding bundle.
  zh: "zh-CN"
};
async function fetchT9nStringsBundle(locale, assetsPath, prefix = "") {
  const path = `${assetsPath}/${prefix}`;
  const filePath = `${path}${locale}.json`;
  t9nStringsCache[filePath] ?? (t9nStringsCache[filePath] = fetchBundle(locale, path));
  return await t9nStringsCache[filePath];
}
var t9nStringsCache = {};
async function fetchBundle(locale, path) {
  const filePath = `${path}${locale}.json`;
  try {
    const response = await fetch(filePath);
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.error(error);
    return {};
  }
  if (locale === defaultLocale) {
    return {};
  }
  return await fetchBundle(defaultLocale, path);
}
function getElementLocales(element) {
  const lang = getElementAttribute(element, "lang", navigator.language || defaultLocale);
  return { lang, t9nLocale: langToLocale(lang) };
}
function langToLocale(lang) {
  const parts = lang.split("-");
  const normalized = `${parts[0].toLowerCase()}${parts.slice(1).join("-").toUpperCase()}`;
  if (supportedLocales.has(normalized)) {
    return normalized;
  }
  const languageCode = normalized.slice(0, 2).toLowerCase();
  const locale = localeEquivalencies[languageCode] ?? languageCode;
  if (supportedLocales.has(locale)) {
    return locale;
  }
  return defaultLocale;
}
function startLocaleObserver(element, assetsPath, onUpdated, assetName) {
  let result = void 0;
  const callback = () => void updateComponentLocaleState(element, assetsPath, assetName).then((newResult) => {
    if (result?.lang !== newResult.lang || result.t9nLocale !== newResult.t9nLocale || result.t9nStrings !== newResult.t9nStrings) {
      onUpdated(newResult);
    }
    result = newResult;
  }).catch(console.error);
  callback();
  return observeAncestorsMutation(element, ["lang"], callback);
}
async function updateComponentLocaleState(element, assetsPath, assetName = element.tagName.toLowerCase().split("-").slice(1).join("-")) {
  const { lang, t9nLocale } = getElementLocales(element);
  const t9nAssetsPath = `${assetsPath}/${assetName}/t9n`;
  const prefix = `${assetName}.t9n.`;
  const t9nStrings = await fetchT9nStringsBundle(t9nLocale, t9nAssetsPath, prefix);
  return { lang, t9nLocale, t9nStrings };
}
var camelToKebab = (string) => string.replace(upperBeforeLower, (upper, remainder) => `${remainder === 0 ? "" : "-"}${upper.toLowerCase()}`);
var upperBeforeLower = /[A-Z]+(?![a-z])|[A-Z]/gu;

// src/timeouts.ts
function devToolsAwareTimeout(callback, timeout) {
  const interval = timeout > longTimeoutThreshold ? longTimeoutInterval : timeout / shortTimeoutIntervals;
  let elapsed = 0;
  const reference = setInterval(() => {
    elapsed += interval;
    if (elapsed >= timeout) {
      clearInterval(reference);
      callback();
    }
  }, interval);
  return reference;
}
var longTimeoutThreshold = 4e3;
var longTimeoutInterval = 2e3;
var shortTimeoutIntervals = 4;
function isNotUndefined(item) {
  return item !== void 0;
}

// src/index.ts
var isAMD = typeof window !== "undefined" && "$arcgis" in window && typeof window.$arcgis === "object" && "import" in window.$arcgis && !("forceESM" in window.$arcgis);
function isDefaultModule(module) {
  return module.default !== void 0;
}
async function importCoreAccessor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/Accessor");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/core/Accessor.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importLayersFeatureLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/FeatureLayer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/FeatureLayer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newLayersFeatureLayer(properties) {
  const ModConstructor = await importLayersFeatureLayer();
  return new ModConstructor(properties);
}
async function importLayersGraphicsLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/GraphicsLayer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/GraphicsLayer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newLayersGraphicsLayer(properties) {
  const ModConstructor = await importLayersGraphicsLayer();
  return new ModConstructor(properties);
}
async function importLayersOrientedImageryLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/OrientedImageryLayer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/OrientedImageryLayer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newLayersOrientedImageryLayer(properties) {
  const ModConstructor = await importLayersOrientedImageryLayer();
  return new ModConstructor(properties);
}
async function importLayersRouteLayer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/layers/RouteLayer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/layers/RouteLayer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newLayersRouteLayer(properties) {
  const ModConstructor = await importLayersRouteLayer();
  return new ModConstructor(properties);
}
async function importViewsMapView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/MapView");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/views/MapView.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newViewsMapView(properties) {
  const ModConstructor = await importViewsMapView();
  return new ModConstructor(properties);
}
async function importViewsSceneView() {
  if (isAMD) {
    return await window.$arcgis.import("esri/views/SceneView");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/views/SceneView.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newViewsSceneView(properties) {
  const ModConstructor = await importViewsSceneView();
  return new ModConstructor(properties);
}
async function importWebMap() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebMap");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/WebMap.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWebMap(properties) {
  const ModConstructor = await importWebMap();
  return new ModConstructor(properties);
}
async function importWebScene() {
  if (isAMD) {
    return await window.$arcgis.import("esri/WebScene");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/WebScene.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWebScene(properties) {
  const ModConstructor = await importWebScene();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement2D");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/AreaMeasurement2D.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsAreaMeasurement2D(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement2D();
  return new ModConstructor(properties);
}
async function importWidgetsAreaMeasurement3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/AreaMeasurement3D");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/AreaMeasurement3D.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsAreaMeasurement3D(properties) {
  const ModConstructor = await importWidgetsAreaMeasurement3D();
  return new ModConstructor(properties);
}
async function importWidgetsAttachments() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Attachments");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Attachments.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsAttachments(properties) {
  const ModConstructor = await importWidgetsAttachments();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapGallery() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapGallery");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/BasemapGallery.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsBasemapGallery(properties) {
  const ModConstructor = await importWidgetsBasemapGallery();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapLayerList");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/BasemapLayerList.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsBasemapLayerList(properties) {
  const ModConstructor = await importWidgetsBasemapLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsBasemapToggleBasemapToggleViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BasemapToggle/BasemapToggleViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/BasemapToggle/BasemapToggleViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsBasemapToggleBasemapToggleViewModel(properties) {
  const ModConstructor = await importWidgetsBasemapToggleBasemapToggleViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsBookmarks() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Bookmarks");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Bookmarks.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsBookmarks(properties) {
  const ModConstructor = await importWidgetsBookmarks();
  return new ModConstructor(properties);
}
async function importWidgetsBuildingExplorer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/BuildingExplorer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/BuildingExplorer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsBuildingExplorer(properties) {
  const ModConstructor = await importWidgetsBuildingExplorer();
  return new ModConstructor(properties);
}
async function importWidgetsCatalogLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CatalogLayerList");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/CatalogLayerList.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsCatalogLayerList(properties) {
  const ModConstructor = await importWidgetsCatalogLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsCompassCompassViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Compass/CompassViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Compass/CompassViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsCompassCompassViewModel(properties) {
  const ModConstructor = await importWidgetsCompassCompassViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsCoordinateConversion() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/CoordinateConversion");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/CoordinateConversion.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsCoordinateConversion(properties) {
  const ModConstructor = await importWidgetsCoordinateConversion();
  return new ModConstructor(properties);
}
async function importWidgetsDaylight() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Daylight");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Daylight.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsDaylight(properties) {
  const ModConstructor = await importWidgetsDaylight();
  return new ModConstructor(properties);
}
async function importWidgetsDirectionalPad() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectionalPad");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/DirectionalPad.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsDirectionalPad(properties) {
  const ModConstructor = await importWidgetsDirectionalPad();
  return new ModConstructor(properties);
}
async function importWidgetsDirections() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Directions");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Directions.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsDirections(properties) {
  const ModConstructor = await importWidgetsDirections();
  return new ModConstructor(properties);
}
async function importWidgetsDirectLineMeasurement3D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DirectLineMeasurement3D");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/DirectLineMeasurement3D.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsDirectLineMeasurement3D(properties) {
  const ModConstructor = await importWidgetsDirectLineMeasurement3D();
  return new ModConstructor(properties);
}
async function importWidgetsDistanceMeasurement2D() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/DistanceMeasurement2D");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/DistanceMeasurement2D.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsDistanceMeasurement2D(properties) {
  const ModConstructor = await importWidgetsDistanceMeasurement2D();
  return new ModConstructor(properties);
}
async function importWidgetsEditor() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Editor");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Editor.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsEditor(properties) {
  const ModConstructor = await importWidgetsEditor();
  return new ModConstructor(properties);
}
async function importWidgetsElevationProfile() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ElevationProfile");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/ElevationProfile.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsElevationProfile(properties) {
  const ModConstructor = await importWidgetsElevationProfile();
  return new ModConstructor(properties);
}
async function importWidgetsExpand() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Expand");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Expand.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsExpand(properties) {
  const ModConstructor = await importWidgetsExpand();
  return new ModConstructor(properties);
}
async function importWidgetsFeature() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Feature");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Feature.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFeature(properties) {
  const ModConstructor = await importWidgetsFeature();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureForm() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureForm");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/FeatureForm.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFeatureForm(properties) {
  const ModConstructor = await importWidgetsFeatureForm();
  return new ModConstructor(properties);
}
async function importWidgetsFeatures() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Features");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Features.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFeatures(properties) {
  const ModConstructor = await importWidgetsFeatures();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTable() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTable");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/FeatureTable.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFeatureTable(properties) {
  const ModConstructor = await importWidgetsFeatureTable();
  return new ModConstructor(properties);
}
async function importWidgetsFeatureTemplates() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FeatureTemplates");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/FeatureTemplates.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFeatureTemplates(properties) {
  const ModConstructor = await importWidgetsFeatureTemplates();
  return new ModConstructor(properties);
}
async function importWidgetsFloorFilter() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/FloorFilter");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/FloorFilter.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFloorFilter(properties) {
  const ModConstructor = await importWidgetsFloorFilter();
  return new ModConstructor(properties);
}
async function importWidgetsFullscreenFullscreenViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Fullscreen/FullscreenViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Fullscreen/FullscreenViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsFullscreenFullscreenViewModel(properties) {
  const ModConstructor = await importWidgetsFullscreenFullscreenViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsHistogram() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Histogram");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Histogram.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsHistogram(properties) {
  const ModConstructor = await importWidgetsHistogram();
  return new ModConstructor(properties);
}
async function importWidgetsHistogramRangeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/HistogramRangeSlider");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/HistogramRangeSlider.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsHistogramRangeSlider(properties) {
  const ModConstructor = await importWidgetsHistogramRangeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsHomeHomeViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Home/HomeViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Home/HomeViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsHomeHomeViewModel(properties) {
  const ModConstructor = await importWidgetsHomeHomeViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsLayerList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LayerList");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/LayerList.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsLayerList(properties) {
  const ModConstructor = await importWidgetsLayerList();
  return new ModConstructor(properties);
}
async function importWidgetsLegend() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Legend");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Legend.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsLegend(properties) {
  const ModConstructor = await importWidgetsLegend();
  return new ModConstructor(properties);
}
async function importWidgetsLineOfSight() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/LineOfSight");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/LineOfSight.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsLineOfSight(properties) {
  const ModConstructor = await importWidgetsLineOfSight();
  return new ModConstructor(properties);
}
async function importWidgetsLocateLocateViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Locate/LocateViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Locate/LocateViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsLocateLocateViewModel(properties) {
  const ModConstructor = await importWidgetsLocateLocateViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsMeasurement() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Measurement");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Measurement.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsMeasurement(properties) {
  const ModConstructor = await importWidgetsMeasurement();
  return new ModConstructor(properties);
}
async function importWidgetsNavigationToggle() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/NavigationToggle");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/NavigationToggle.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsNavigationToggle(properties) {
  const ModConstructor = await importWidgetsNavigationToggle();
  return new ModConstructor(properties);
}
async function importWidgetsOrientedImageryViewer() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/OrientedImageryViewer");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/OrientedImageryViewer.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsOrientedImageryViewer(properties) {
  const ModConstructor = await importWidgetsOrientedImageryViewer();
  return new ModConstructor(properties);
}
async function importWidgetsPrint() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Print");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Print.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsPrint(properties) {
  const ModConstructor = await importWidgetsPrint();
  return new ModConstructor(properties);
}
async function importWidgetsScaleBarScaleBarViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleBar/ScaleBarViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/ScaleBar/ScaleBarViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsScaleBarScaleBarViewModel(properties) {
  const ModConstructor = await importWidgetsScaleBarScaleBarViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsScaleRangeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ScaleRangeSlider");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/ScaleRangeSlider.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsScaleRangeSlider(properties) {
  const ModConstructor = await importWidgetsScaleRangeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSearch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Search");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Search.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsSearch(properties) {
  const ModConstructor = await importWidgetsSearch();
  return new ModConstructor(properties);
}
async function importWidgetsShadowCast() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ShadowCast");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/ShadowCast.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsShadowCast(properties) {
  const ModConstructor = await importWidgetsShadowCast();
  return new ModConstructor(properties);
}
async function importWidgetsSketch() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Sketch");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Sketch.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsSketch(properties) {
  const ModConstructor = await importWidgetsSketch();
  return new ModConstructor(properties);
}
async function importWidgetsSlice() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slice");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Slice.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsSlice(properties) {
  const ModConstructor = await importWidgetsSlice();
  return new ModConstructor(properties);
}
async function importWidgetsSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Slider");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Slider.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsSlider(properties) {
  const ModConstructor = await importWidgetsSlider();
  return new ModConstructor(properties);
}
async function importWidgetsSwipe() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Swipe");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Swipe.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsSwipe(properties) {
  const ModConstructor = await importWidgetsSwipe();
  return new ModConstructor(properties);
}
async function importWidgetsTableList() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TableList");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/TableList.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsTableList(properties) {
  const ModConstructor = await importWidgetsTableList();
  return new ModConstructor(properties);
}
async function importWidgetsTimeSlider() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/TimeSlider");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/TimeSlider.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsTimeSlider(properties) {
  const ModConstructor = await importWidgetsTimeSlider();
  return new ModConstructor(properties);
}
async function importWidgetsTrackTrackViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Track/TrackViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Track/TrackViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsTrackTrackViewModel(properties) {
  const ModConstructor = await importWidgetsTrackTrackViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkAssociations() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkAssociations");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/UtilityNetworkAssociations.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsUtilityNetworkAssociations(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkAssociations();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkTrace() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkTrace");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/UtilityNetworkTrace.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsUtilityNetworkTrace(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkTrace();
  return new ModConstructor(properties);
}
async function importWidgetsUtilityNetworkValidateTopology() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/UtilityNetworkValidateTopology");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/UtilityNetworkValidateTopology.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsUtilityNetworkValidateTopology(properties) {
  const ModConstructor = await importWidgetsUtilityNetworkValidateTopology();
  return new ModConstructor(properties);
}
async function importWidgetsValuePicker() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/ValuePicker");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/ValuePicker.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsValuePicker(properties) {
  const ModConstructor = await importWidgetsValuePicker();
  return new ModConstructor(properties);
}
async function importWidgetsVersionManagementVersionManagementViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/VersionManagement/VersionManagementViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/VersionManagement/VersionManagementViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsVersionManagementVersionManagementViewModel(properties) {
  const ModConstructor = await importWidgetsVersionManagementVersionManagementViewModel();
  return new ModConstructor(properties);
}
async function importWidgetsWeather() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Weather");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Weather.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsWeather(properties) {
  const ModConstructor = await importWidgetsWeather();
  return new ModConstructor(properties);
}
async function importWidgetsZoomZoomViewModel() {
  if (isAMD) {
    return await window.$arcgis.import("esri/widgets/Zoom/ZoomViewModel");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/widgets/Zoom/ZoomViewModel.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function newWidgetsZoomZoomViewModel(properties) {
  const ModConstructor = await importWidgetsZoomZoomViewModel();
  return new ModConstructor(properties);
}
async function importCoreAccessorSupportDecorators() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/accessorSupport/decorators");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/core/accessorSupport/decorators.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importCoreReactiveUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/core/reactiveUtils");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/core/reactiveUtils.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importIntl() {
  if (isAMD) {
    return await window.$arcgis.import("esri/intl");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/intl.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importApplicationsComponentsGetDefaultUnits() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/getDefaultUnits");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/applications/Components/getDefaultUnits.js')); });
  return isDefaultModule(module) ? module.default : module;
}
async function importApplicationsComponentsBasemapUtils() {
  if (isAMD) {
    return await window.$arcgis.import("esri/applications/Components/basemapUtils");
  }
  const module = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@arcgis/core/applications/Components/basemapUtils.js')); });
  return isDefaultModule(module) ? module.default : module;
}

exports.Deferred = Deferred;
exports.camelToKebab = camelToKebab;
exports.classes = classes;
exports.devToolsAwareTimeout = devToolsAwareTimeout;
exports.getElementLocales = getElementLocales;
exports.importApplicationsComponentsBasemapUtils = importApplicationsComponentsBasemapUtils;
exports.importApplicationsComponentsGetDefaultUnits = importApplicationsComponentsGetDefaultUnits;
exports.importCoreAccessor = importCoreAccessor;
exports.importCoreAccessorSupportDecorators = importCoreAccessorSupportDecorators;
exports.importCoreReactiveUtils = importCoreReactiveUtils;
exports.importIntl = importIntl;
exports.isNotUndefined = isNotUndefined;
exports.newLayersFeatureLayer = newLayersFeatureLayer;
exports.newLayersGraphicsLayer = newLayersGraphicsLayer;
exports.newLayersOrientedImageryLayer = newLayersOrientedImageryLayer;
exports.newLayersRouteLayer = newLayersRouteLayer;
exports.newViewsMapView = newViewsMapView;
exports.newViewsSceneView = newViewsSceneView;
exports.newWebMap = newWebMap;
exports.newWebScene = newWebScene;
exports.newWidgetsAreaMeasurement2D = newWidgetsAreaMeasurement2D;
exports.newWidgetsAreaMeasurement3D = newWidgetsAreaMeasurement3D;
exports.newWidgetsAttachments = newWidgetsAttachments;
exports.newWidgetsBasemapGallery = newWidgetsBasemapGallery;
exports.newWidgetsBasemapLayerList = newWidgetsBasemapLayerList;
exports.newWidgetsBasemapToggleBasemapToggleViewModel = newWidgetsBasemapToggleBasemapToggleViewModel;
exports.newWidgetsBookmarks = newWidgetsBookmarks;
exports.newWidgetsBuildingExplorer = newWidgetsBuildingExplorer;
exports.newWidgetsCatalogLayerList = newWidgetsCatalogLayerList;
exports.newWidgetsCompassCompassViewModel = newWidgetsCompassCompassViewModel;
exports.newWidgetsCoordinateConversion = newWidgetsCoordinateConversion;
exports.newWidgetsDaylight = newWidgetsDaylight;
exports.newWidgetsDirectLineMeasurement3D = newWidgetsDirectLineMeasurement3D;
exports.newWidgetsDirectionalPad = newWidgetsDirectionalPad;
exports.newWidgetsDirections = newWidgetsDirections;
exports.newWidgetsDistanceMeasurement2D = newWidgetsDistanceMeasurement2D;
exports.newWidgetsEditor = newWidgetsEditor;
exports.newWidgetsElevationProfile = newWidgetsElevationProfile;
exports.newWidgetsExpand = newWidgetsExpand;
exports.newWidgetsFeature = newWidgetsFeature;
exports.newWidgetsFeatureForm = newWidgetsFeatureForm;
exports.newWidgetsFeatureTable = newWidgetsFeatureTable;
exports.newWidgetsFeatureTemplates = newWidgetsFeatureTemplates;
exports.newWidgetsFeatures = newWidgetsFeatures;
exports.newWidgetsFloorFilter = newWidgetsFloorFilter;
exports.newWidgetsFullscreenFullscreenViewModel = newWidgetsFullscreenFullscreenViewModel;
exports.newWidgetsHistogram = newWidgetsHistogram;
exports.newWidgetsHistogramRangeSlider = newWidgetsHistogramRangeSlider;
exports.newWidgetsHomeHomeViewModel = newWidgetsHomeHomeViewModel;
exports.newWidgetsLayerList = newWidgetsLayerList;
exports.newWidgetsLegend = newWidgetsLegend;
exports.newWidgetsLineOfSight = newWidgetsLineOfSight;
exports.newWidgetsLocateLocateViewModel = newWidgetsLocateLocateViewModel;
exports.newWidgetsMeasurement = newWidgetsMeasurement;
exports.newWidgetsNavigationToggle = newWidgetsNavigationToggle;
exports.newWidgetsOrientedImageryViewer = newWidgetsOrientedImageryViewer;
exports.newWidgetsPrint = newWidgetsPrint;
exports.newWidgetsScaleBarScaleBarViewModel = newWidgetsScaleBarScaleBarViewModel;
exports.newWidgetsScaleRangeSlider = newWidgetsScaleRangeSlider;
exports.newWidgetsSearch = newWidgetsSearch;
exports.newWidgetsShadowCast = newWidgetsShadowCast;
exports.newWidgetsSketch = newWidgetsSketch;
exports.newWidgetsSlice = newWidgetsSlice;
exports.newWidgetsSlider = newWidgetsSlider;
exports.newWidgetsSwipe = newWidgetsSwipe;
exports.newWidgetsTableList = newWidgetsTableList;
exports.newWidgetsTimeSlider = newWidgetsTimeSlider;
exports.newWidgetsTrackTrackViewModel = newWidgetsTrackTrackViewModel;
exports.newWidgetsUtilityNetworkAssociations = newWidgetsUtilityNetworkAssociations;
exports.newWidgetsUtilityNetworkTrace = newWidgetsUtilityNetworkTrace;
exports.newWidgetsUtilityNetworkValidateTopology = newWidgetsUtilityNetworkValidateTopology;
exports.newWidgetsValuePicker = newWidgetsValuePicker;
exports.newWidgetsVersionManagementVersionManagementViewModel = newWidgetsVersionManagementVersionManagementViewModel;
exports.newWidgetsWeather = newWidgetsWeather;
exports.newWidgetsZoomZoomViewModel = newWidgetsZoomZoomViewModel;
exports.safeAsyncCall = safeAsyncCall;
exports.safeCall = safeCall;
exports.startLocaleObserver = startLocaleObserver;
