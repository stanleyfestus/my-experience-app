/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.0-next.58
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-80ecaa0e.js');
const index$2 = require('./index-fbb18e12.js');
const index$3 = require('./index-87ff723d.js');
const useWidget = require('./useWidget-3971aff7.js');
const componentUtils = require('./component-utils-b8b66725.js');
const index$1 = require('./index-bb8f4b21.js');

const featureTableCss = ".arcgis-feature-table{width:100%;height:100%}";
const ArcgisFeatureTableStyle0 = featureTableCss;

const useFeatureTableWidget = useWidget.makeWidgetController(index$3.newWidgetsFeatureTable);
const ArcgisFeatureTable = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisSelectionChange = index.createEvent(this, "arcgisSelectionChange", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useFeatureTableWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.position = "manual";
        this.activeFilters = this.widget.activeFilters;
        this.activeSortOrders = this.widget.activeSortOrders;
        this.attachmentsEnabled = this.widget.attachmentsEnabled;
        this.autoRefreshEnabled = this.widget.autoRefreshEnabled;
        this.columnReorderingEnabled = this.widget.columnReorderingEnabled;
        this.columns = this.widget.columns;
        this.description = this.widget.description;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.editingEnabled = this.widget.editingEnabled;
        this.filterBySelectionEnabled = this.widget.filterBySelectionEnabled;
        this.filterGeometry = this.widget.filterGeometry;
        this.hiddenFields = this.widget.hiddenFields;
        this.highlightEnabled = this.widget.highlightEnabled;
        this.highlightIds = this.widget.highlightIds;
        this.layer = this.widget.layer;
        this.menuConfig = this.widget.menuConfig;
        this.multiSortEnabled = this.widget.multiSortEnabled;
        this.objectIds = this.widget.objectIds;
        this.outFields = this.widget.outFields;
        this.pageCount = this.widget.pageCount;
        this.pageIndex = this.widget.pageIndex;
        this.paginationEnabled = this.widget.paginationEnabled;
        this.pageSize = this.widget.pageSize;
        this.relatedRecordsEnabled = this.widget.relatedRecordsEnabled;
        this.returnGeometryEnabled = this.widget.returnGeometryEnabled;
        this.returnMEnabled = this.widget.returnMEnabled;
        this.returnZEnabled = this.widget.returnZEnabled;
        this.tableTemplate = this.widget.tableTemplate;
        this.timeZone = this.widget.timeZone;
        this.itemId = index$1.getSet(undefined, {
            set: (value) => {
                if (componentUtils.isNullOrEmptyString(value)) {
                    this.layer = null;
                }
                else if (value) {
                    index$3.newLayersFeatureLayer({
                        portalItem: {
                            id: value,
                        },
                    })
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.url = index$1.getSet(undefined, {
            set: (value) => {
                if (value) {
                    index$3.newLayersFeatureLayer({ url: value })
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.hideHeader = this.widget.visibleElements.header;
        this.hideMenu = this.widget.visibleElements.menu;
        this.hideSelectionColumn = this.widget.visibleElements.selectionColumn;
        this.hideColumnMenus = this.widget.visibleElements.columnMenus;
        this.hideMenuItemsClearSelection = this.widget.visibleElements.menuItems.clearSelection;
        this.hideMenuItemsDeleteSelection = this.widget.visibleElements.menuItems.deleteSelection;
        this.hideMenuItemsRefreshData = this.widget.visibleElements.menuItems.refreshData;
        this.hideMenuItemsSelectedRecordsShowAllToggle = this.widget.visibleElements.menuItems.selectedRecordsShowAllToggle;
        this.hideMenuItemsToggleColumns = this.widget.visibleElements.menuItems.toggleColumns;
        this.hideMenuItemsZoomToSelection = this.widget.visibleElements.menuItems.zoomToSelection;
        this.state = this.widget.state;
    }
    componentWillLoad() {
        this.manager.onLifecycle(() => this.widget.highlightIds.on("change", this.arcgisSelectionChange.emit));
    }
    componentDidLoad() {
        this.el.childElem?.classList.add("arcgis-feature-table");
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async clearSelectionFilter() {
        this.widget?.clearSelectionFilter();
    }
    async deleteSelection(showWarningPrompt) {
        await this.widget?.deleteSelection(showWarningPrompt);
    }
    async filterBySelection() {
        this.widget?.filterBySelection();
    }
    async findColumn(fieldName) {
        return this.widget?.findColumn(fieldName);
    }
    async goToPage(index) {
        this.widget.goToPage(index);
    }
    async hideColumn(fieldName) {
        this.widget?.hideColumn(fieldName);
    }
    async nextPage() {
        this.widget.nextPage();
    }
    async previousPage() {
        this.widget.previousPage();
    }
    async refresh() {
        await this.widget?.refresh();
    }
    async scrollToLeft() {
        this.widget.scrollLeft();
    }
    async scrollToBottom() {
        this.widget.scrollToBottom();
    }
    async scrollToIndex(index) {
        this.widget?.scrollToIndex(index);
    }
    async scrollToRow(objectId) {
        this.widget?.scrollToRow(objectId);
    }
    async scrollToTop() {
        this.widget.scrollToTop();
    }
    async showAllColumns() {
        this.widget?.showAllColumns();
    }
    async showColumn(fieldName) {
        this.widget?.showColumn(fieldName);
    }
    async sortColumn(path, direction) {
        this.widget?.sortColumn(path, direction);
    }
    async zoomToSelection() {
        this.widget?.zoomToSelection();
    }
    get el() { return index.getElement(this); }
};
ArcgisFeatureTable.style = ArcgisFeatureTableStyle0;

exports.arcgis_feature_table = ArcgisFeatureTable;
