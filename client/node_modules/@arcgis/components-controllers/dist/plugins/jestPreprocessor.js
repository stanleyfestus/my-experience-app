import {
  removeMutableWarning
} from "../chunk-6IMU6L3V.js";

// src/plugins/jestPreprocessor.ts
import jest from "@stencil/core/testing/jest-preprocessor.js";
import fs from "fs";
var stencilJest = jest;
var jestPreprocessorCode = fs.readFileSync(__filename, "utf8");
var transformer = {
  ...stencilJest,
  getCacheKey: (sourceText, sourcePath, options) => `${stencilJest.getCacheKey?.(sourceText, sourcePath, options)}:${jestPreprocessorCode}`,
  process(sourceText, sourcePath, ...rest) {
    const shouldTransformCoreAdapter = sourcePath.endsWith("core-adapter/dist/index.cjs");
    const result = stencilJest.process(
      shouldTransformCoreAdapter ? transformCoreAdapter(sourceText) : sourceText,
      sourcePath,
      ...rest
    );
    const shouldTransformControllers = (sourcePath.endsWith(".ts") || sourcePath.endsWith(".tsx")) && sourceText.includes("@Component(");
    const shouldRemoveMutable = sourcePath.endsWith("@stencil/core/internal/testing/index.js");
    return {
      ...result,
      code: shouldTransformControllers ? transformControllers(result.code) : shouldRemoveMutable ? removeMutableWarning(result.code) : result.code
    };
  }
};
var jestPreprocessor_default = transformer;
var registerInstance = "__stencil_registerInstance(";
function transformControllers(code) {
  const lines = code.split("\n");
  const lastRequireLine = lines.findLastIndex((line) => line.includes('= require("')) + 1;
  const updated = [
    ...lines.slice(0, lastRequireLine),
    `const {forceUpdate} = require("@stencil/core/internal/testing");`,
    ...lines.slice(lastRequireLine)
  ].join("\n");
  return updated.replaceAll(
    registerInstance,
    `this.constructor.__registerControllers = ()=>hostRef.$cmpMeta$.$members$??{};${registerInstance}`
  ).replaceAll(/COMPILER_META[\s\S]*\};/gu, transformMeta).replaceAll("useControllerManager)(this)", "useControllerManager)(this,forceUpdate)");
}
var transformMeta = (meta) => meta.replaceAll(flagsRegex, "$<key>true");
var flags = [
  "hasLifecycle",
  "hasComponentWillLoadFn",
  "hasComponentDidLoadFn",
  "hasComponentWillUpdateFn",
  "hasComponentDidUpdateFn",
  "hasComponentWillRenderFn",
  "hasComponentDidRenderFn",
  "hasConnectedCallbackFn",
  "hasDisconnectedCallbackFn",
  "hasWatchCallback"
];
var flagsRegex = new RegExp(`(?<key>(?:${flags.join("|")})"?\\s*:\\s*)false`, "gu");
var transformCoreAdapter = (code) => `${code.replaceAll(reAsyncImport, "await jestTransformerLock(()=>$<import>)")}
${locker}`;
var reAsyncImport = /await (?<import>import\("[^"]+"\))/gu;
var locker = `var jestTransformerLock = (function () {
  var locks = new Set();
  function doLoad(load) {
    if (locks.size === 0) return load();
    else return Promise.all(locks).then(load);
  }
  return function lock(load) {
    var promise = doLoad(load).finally(() => locks.delete(promise));
    locks.add(promise);
    return promise;
  };
})();`;
export {
  jestPreprocessor_default as default
};
