"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/plugins/index.ts
var plugins_exports = {};
__export(plugins_exports, {
  useComponentsControllers: () => useComponentsControllers
});
module.exports = __toCommonJS(plugins_exports);

// src/framework.ts
var import_components_utils = require("@arcgis/components-utils");

// src/plugins/utils.ts
function removeMutableWarning(code) {
  const warning = "is immutable but was modified from within the component";
  const index = code.indexOf(warning);
  if (index === -1) {
    throw new Error(
      "Couldn't find check for mutable in Stencil's code. This may have happened if Stencil updated their source code in src/runtime/proxy-component.ts - this plugin needs to be updated to match new Stencil version"
    );
  }
  const warningStart = code.lastIndexOf("consoleDevWarn", index);
  const warningEnd = code.indexOf(");", warningStart) + ");".length;
  return code.slice(0, warningStart) + code.slice(warningEnd);
}

// src/plugins/rollupPlugin.ts
var useComponentsControllers = () => ({
  name: "use-components-controllers",
  transform(code, id) {
    if (id.startsWith("@stencil") && code.includes("export const BUILD =")) {
      return updateBuildFlags(code);
    }
    if (id.includes("@stencil/core/internal/client/") && code.includes(initializeComponent)) {
      return transformLazy(code);
    }
    if (
      // Is in components folder
      id.includes("/src/components/") && // Defines HTML element
      code.includes("extends HTMLElement ") && // Defines controller manager
      code.includes("manager =")
    ) {
      return transformEsm(code);
    }
  }
});
function updateBuildFlags(code) {
  const newCode = code.replaceAll(reTypeMapping, (_match, key) => {
    typeMapping.delete(key);
    return `${key}: true`;
  });
  if (typeMapping.size > 0) {
    throw new Error(
      `Could not find the following properties in Stencil's "BUILD" object: ${[...typeMapping].join(", ")}. This may have happened if Stencil updated their source code in src/app-data/index.ts - this plugin needs to be updated to match new Stencil version`
    );
  }
  return { code: newCode, map: null };
}
var typeMapping = /* @__PURE__ */ new Set([
  "lifecycle",
  "connectedCallback",
  "disconnectedCallback",
  "cmpWillLoad",
  "cmpDidLoad",
  "cmpWillUpdate",
  "cmpDidUpdate"
]);
var reTypeMapping = new RegExp(`(?<key>${[...typeMapping].join("|")})\\s*:\\s*(?:false|true)`, "gu");
var initializeComponent = "new Cstr(hostRef);";
function transformLazy(code) {
  const splitOnConstructor = code.split(initializeComponent);
  if (splitOnConstructor.length === 1) {
    throw new Error(
      "Couldn't find component initialization in initializeComponent. This may have happened if Stencil updated their source code in src/runtime/initialize-component.ts - this plugin needs to be updated to match new Stencil version"
    );
  } else if (splitOnConstructor.length > 2) {
    throw new Error(
      "Found multiple component initializations in initializeComponent. This may have happened if Stencil updated their source code in src/runtime/initialize-component.ts - this plugin needs to be updated to match new Stencil version"
    );
  }
  const withoutMutable = removeMutableWarning(splitOnConstructor[0]);
  const updated = `${withoutMutable}Cstr.__forceUpdate=forceUpdate;Cstr.__registerControllers=(component)=>{registerInstance(component,hostRef);return hostRef.$cmpMeta$.$members$??{}};${initializeComponent}Cstr.__registerControllers=undefined;${splitOnConstructor[1]}`;
  return {
    code: updated,
    map: null
  };
}
function transformEsm(code) {
  const lines = code.split("\n");
  const componentStart = lines.findIndex((line) => line.includes("extends HTMLElement "));
  if (componentStart === -1) {
    throw new Error("Failed to find component start in dist-custom-elements build");
  }
  const componentMeta = code.match(reComponentMeta)?.[0];
  if (componentMeta === void 0) {
    throw new Error("Failed to find component meta in dist-custom-elements build");
  }
  let parsedComponentMeta = void 0;
  try {
    parsedComponentMeta = JSON.parse(componentMeta.replaceAll(reUndefined, "null"));
  } catch (error) {
    throw new Error(`Failed to parse component meta as JSON in dist-custom-elements build: ${String(error)}`);
  }
  if (!Array.isArray(parsedComponentMeta)) {
    throw new Error("Expected component meta to be an array in dist-custom-elements build");
  }
  const transformedMeta = transformEsmMeta(parsedComponentMeta);
  const hasMembers = parsedComponentMeta !== transformedMeta;
  const meta = `const ${metaVariable} = ${JSON.stringify(transformedMeta).replaceAll(reNull, "undefined")};`;
  const componentStartLine = lines[componentStart];
  const importLine = lines.findLastIndex((line) => line.includes("@stencil/core/internal/client"));
  if (importLine === -1) {
    throw new Error("Unable to find the stencil runtime import line in dist-custom-elements build output");
  }
  const hasForceUpdateImport = lines.slice(0, importLine + 1).some((line) => line.includes("forceUpdate"));
  const updated = hasForceUpdateImport ? code : [
    ...lines.slice(0, importLine),
    lines[importLine].replace("}", ",forceUpdate}"),
    ...lines.slice(importLine + 1)
  ].join("\n");
  const final = addLifecycleCalls(
    updated.replace(componentStartLine, `${meta}
${componentStartLine}`).replace(componentMeta, metaVariable).replace(registerHost, `${registerHost}
${hasMembers ? registerControllers : registerControllersNoMembers}`).replaceAll("useControllerManager(this)", "useControllerManager(this,forceUpdate)")
  );
  return { code: final, map: null };
}
var reComponentMeta = /\[\d+,\s"[\w-]+"[\s\S]*\](?=\))/u;
var reUndefined = /(?<=[ ,])undefined(?=[,\]])/gu;
var reNull = /(?<=,)null(?=[,\]])/gu;
var metaVariable = "__cmpMeta";
var membersMetaIndex = 2;
var registerHost = "this.__registerHost();";
var registerControllers = `this.constructor.__registerControllers = ()=>${metaVariable}[${membersMetaIndex}]??{};`;
var registerControllersNoMembers = `this.constructor.__registerControllers = ()=>({});`;
var transformEsmMeta = (meta) => meta[membersMetaIndex] == null ? meta : [
  ...meta.slice(0, membersMetaIndex),
  Object.fromEntries(
    Object.entries(meta[membersMetaIndex]).map(([prop, data]) => [
      prop,
      [makePropsMutable(data[0]), ...data.slice(1)]
    ])
  ),
  ...meta.slice(membersMetaIndex + 1)
];
var makePropsMutable = (type) => (type & 31 /* Prop */) === 0 ? type : type | 1024 /* Mutable */;
var addLifecycleCalls = (code) => addLifecycleCall(addLifecycleCall(code, "connectedCallback"), "disconnectedCallback");
function addLifecycleCall(code, lifecycle) {
  const lifecycleSignature = `  ${lifecycle}() {`;
  const constructorSignature = "  constructor() {";
  const controllerCall = `this.manager._${lifecycle}();`;
  const lifecycleSignatureStart = code.indexOf(lifecycleSignature);
  if (lifecycleSignatureStart === -1) {
    return code.replace(constructorSignature, `${lifecycleSignature} ${controllerCall} }
  ${constructorSignature}`);
  } else {
    const lifecycleSignatureEnd = lifecycleSignatureStart + lifecycleSignature.length;
    return [
      code.slice(0, lifecycleSignatureEnd),
      `
        ${controllerCall}`,
      code.slice(lifecycleSignatureEnd)
    ].join("");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useComponentsControllers
});
