import type { WebChartTextSymbol, IField, ISimpleLineSymbol, Color } from "@arcgis/charts-spec";
export declare const PopoverType: {
    readonly BarChartDataPopover: "HTMLArcgisChartsConfigBarChartPopoverElement";
    readonly BarChartSeriesPopover: "HTMLArcgisChartsConfigBarChartSeriesPopoverElement";
    readonly BoxPlotDataPopover: "HTMLArcgisChartsConfigBoxPlotPopoverElement";
    readonly BoxPlotSeriesPopover: "HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement";
    readonly ChartRenamePopover: "HTMLArcgisChartsConfigChartRenamePopoverElement";
    readonly FormatPopover: "HTMLArcgisChartsConfigFormatPopoverElement";
    readonly GuidePopover: "HTMLArcgisChartsConfigGuidePopoverElement";
    readonly HistogramDataPopover: "HTMLArcgisChartsConfigHistogramPopoverElement";
    readonly LineChartDataPopover: "HTMLArcgisChartsConfigLineChartPopoverElement";
    readonly LineChartSeriesPopover: "HTMLArcgisChartsConfigLineChartSeriesPopoverElement";
    readonly PieChartDataPopover: "HTMLArcgisChartsConfigPieChartPopoverElement";
    readonly PieChartSlicesPopover: "HTMLArcgisChartsConfigPieChartSlicesPopoverElement";
    readonly ScatterPlotDataPopover: "HTMLArcgisChartsConfigScatterPlotPopoverElement";
    readonly SelectChartTypePopover: "HTMLArcgisChartsConfigSelectChartTypePopoverElement";
};
export type PopoverType = (typeof PopoverType)[keyof typeof PopoverType];
interface IPopoverConfig {
    popoverClose: (e: CustomEvent) => void;
}
interface IDataPopoverConfig extends IPopoverConfig {
    layerFieldsInfo: IField[];
}
interface IConfigPopoverConfig extends IPopoverConfig {
    hostElement?: any;
    placement: string;
    referenceElement?: HTMLElement;
}
export interface IHistogramDataPopoverConfig extends IDataPopoverConfig {
    updateSymbolProps: (e: CustomEvent) => void;
    updateProps: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
}
export interface IBarChartDataPopoverConfig extends IDataPopoverConfig {
    onBarChartDataChange: (e: CustomEvent) => void;
}
export interface IBarChartSeriesPopoverConfig extends IConfigPopoverConfig {
    seriesNameChange: (e: CustomEvent) => void;
    seriesColorChange: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
}
export interface IBoxPlotDataPopoverConfig extends IDataPopoverConfig {
    onBoxPlotDataChange: (e: CustomEvent) => void;
}
export interface IBoxPlotSeriesPopoverConfig extends IConfigPopoverConfig {
    seriesNameChange: (e: CustomEvent) => void;
    seriesColorChange: (e: CustomEvent) => void;
    seriesLineStyleChange: (e: CustomEvent) => void;
    seriesLineWidthChange: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
    labelCanBeConfigured: boolean;
}
export interface ILineChartDataPopoverConfig extends IDataPopoverConfig {
    onLineChartDataChange: (e: CustomEvent) => void;
}
export interface IPieChartDataPopoverConfig extends IDataPopoverConfig {
    onPieChartDataChange: (e: CustomEvent) => void;
}
export interface IChartFormatPopoverConfig extends IConfigPopoverConfig {
    selectedElement: Color | ISimpleLineSymbol | WebChartTextSymbol | undefined;
    referenceElement: any;
    updateSymbolProps: (e: CustomEvent) => void;
    updateTextProps: (e: CustomEvent) => void;
    updateBackground: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
}
export interface IGuidePopoverConfig extends IPopoverConfig {
    colorChange: (e: CustomEvent<Color>) => void;
    symbolChange: (e: CustomEvent<ISimpleLineSymbol>) => void;
    popoverDismiss: (e: CustomEvent) => void;
}
export interface ILineChartSeriesPopoverConfig extends IPopoverConfig {
    referenceElement: any;
    placement: string;
    seriesNameChange: (e: CustomEvent) => void;
    seriesColorChange: (e: CustomEvent) => void;
    seriesLineStyleChange: (e: CustomEvent) => void;
    seriesLineWidthChange: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
}
export interface IPieChartSlicePopoverConfig extends IPopoverConfig {
    referenceElement: any;
    placement: string;
    sliceNameChange: (e: CustomEvent) => void;
    sliceColorChange: (e: CustomEvent) => void;
    openChange: (e: CustomEvent) => void;
}
export interface IScatterPlotChartPopoverConfig extends IPopoverConfig {
    setTrendLineSymbol: (e: CustomEvent) => void;
    setFixedSymbolRGBAColor: (e: CustomEvent<Color>) => void;
    setXYField: (e: CustomEvent<string>) => void;
    setSizeVariableField: (e: CustomEvent<string>) => void;
    openChange: (e: CustomEvent) => void;
}
export interface ISelectChartTypePopoverConfig extends IPopoverConfig {
    onSelectChartTypeChange: (e: CustomEvent) => Promise<void> | void;
}
export interface IChartRenamePopoverConfig extends IPopoverConfig {
    name: string;
    popoverReferenceElement: any;
    onChartRename: (e: CustomEvent) => void;
}
/**
 * remove popover element
 * @param popover popover element to be removed
 */
export declare const removePopover: (popover: any) => null;
/**
 * create a popover element based on the input parameters
 * @param popoverType popover type to be created
 * @param popoverConfig config used to configure popover
 * @returns popover element
 */
export declare const createPopover: (popoverType: PopoverType, popoverConfig: IPopoverConfig) => any;
/**
 * edit popover element dynamically
 * @param popover a popover element
 * @param isOpen determine whether to open popover or not
 */
export declare const editPopover: (popover: any, isOpen?: boolean) => void;
export {};
