import type { IFeatureLayer, WebChartDataTypes, WebChart } from "@arcgis/charts-spec";
import type FeatureLayer from "@arcgis/core/layers/FeatureLayer";
import type { WebChartConfigFields } from "./interfaces";
/**
 * Creates a chart renderer based on the provided config fields and inline data
 * @param props.categoryField The category field
 * @param props.numericFields The numeric fields
 * @param props.configFields The config fields
 * @param props.inlineData The data to convert
 */
export declare function convertConfigFieldsToChartRenderer(props: {
    categoryField: string;
    numericFields: string[];
    configFields?: WebChartConfigFields;
    inlineData: WebChartDataTypes;
}): WebChart["chartRenderer"];
/**
 * Converts an array of inline data to a feature set and returns an IFeatureLayer
 * @param props.categoryField The category field
 * @param props.categoryType The category type
 * @param props.numericFields The numeric fields
 * @param props.inlineData The inline data to convert
 */
export declare function convertInlineDataToLayerDefinition(props: {
    categoryField: string;
    categoryType: "date" | "number" | "string";
    numericFields: string[];
    inlineData: WebChartDataTypes;
}): IFeatureLayer | undefined;
/**
 * Converts an array of inline data into a feature collection.
 * Also returns a chartRenderer if the configFields are provided.
 * @param props.categoryField The category field
 * @param props.categoryType The category type
 * @param props.numericFields The numeric fields
 * @param props.configFields The config fields
 * @param props.inlineData The inline data
 */
export declare function convertInlineConfigToLayerConfig(props: {
    categoryField: string;
    categoryType: "date" | "number" | "string";
    numericFields: string[];
    configFields?: WebChartConfigFields;
    inlineData: WebChartDataTypes;
}): Promise<{
    chartRenderer?: WebChart["chartRenderer"];
    iLayer?: IFeatureLayer;
    layer?: FeatureLayer;
}>;
