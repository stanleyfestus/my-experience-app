import type { WebChartBarChartSeries, WebChartLineChartSeries, WebChartHistogramSeries, WebChartScatterPlotSeries, WebChartPieChartSeries, WebChartPieChartLegend, WebMapWebChart, WebMapWebGaugeChart, WebMapWebBoxPlot, WebChartGaugeSeries, WebChartBoxPlotSeries, WebChart, WebGaugeChart, WebChartLegend } from "@arcgis/charts-spec";
/**
 * Interface to hold action bar props
 */
export interface ActionBarHideActionsProps {
    /**
     * determines whether to hide clear selection action or not
     */
    hideClearSelection?: boolean;
    /**
     * determines whether to hide filter by extent action or not
     */
    hideFilterByExtent?: boolean;
    /**
     * determines whether to hide filter by selection action or not
     */
    hideFilterBySelection?: boolean;
    /**
     * determines whether to hide full extent action or not
     */
    hideFullExtent?: boolean;
    /**
     * determines whether to hide legend action or not
     */
    hideLegend?: boolean;
    /**
     * determines whether to hide rotate action or not
     */
    hideRotateChart?: boolean;
    /**
     * determines whether to hide selection action or not
     */
    hideSelection?: boolean;
    /**
     * determines whether to hide switch selection action or not
     */
    hideSwitchSelection?: boolean;
    /**
     * determines whether to hide zoom action or not
     */
    hideZoom?: boolean;
    /**
     * determines whether to hide expand action or not
     */
    hideExpandAction?: boolean;
}
export declare const ChartComponentEvents: {
    readonly DataProcessComplete: "arcgisDataProcessComplete";
    readonly DataFetchComplete: "arcgisDataFetchComplete";
    readonly DataProcessError: "arcgisDataProcessError";
    readonly LegendItemVisibilityChange: "arcgisLegendItemVisibilityChange";
    readonly UpdateComplete: "arcgisUpdateComplete";
    readonly SeriesColorChange: "arcgisSeriesColorChange";
    readonly AxesMinMaxChange: "arcgisAxesMinMaxChange";
    readonly DefaultActionSelect: "arcgisDefaultActionSelect";
    readonly SelectionComplete: "arcgisSelectionComplete";
    readonly ActionBarToggle: "arcgisActionBarToggle";
    readonly NoRenderPropChange: "arcgisNoRenderPropChange";
    readonly BadDataWarningRaise: "arcgisBadDataWarningRaise";
    readonly SeriesOrder: "arcgisSeriesOrder";
    readonly RuntimeError: "arcgisRuntimeError";
};
export declare const DefaultChartActions: {
    readonly FilterBySelection: "filterBySelection";
    readonly FilterByExtent: "filterByExtent";
    readonly Legend: "legend";
    readonly RotateChart: "rotateChart";
    readonly Selection: "selection";
    readonly ClearSelection: "clearSelection";
    readonly SwitchSelection: "switchSelection";
    readonly Zoom: "zoom";
    readonly FullExtent: "fullExtent";
    readonly Configure: "configure";
};
export type DefaultChartActions = (typeof DefaultChartActions)[keyof typeof DefaultChartActions];
/**
 * Type alias for a Histogram config.
 */
export type HistogramConfig = Omit<WebChart | WebMapWebChart, "series"> & {
    series: WebChartHistogramSeries[];
};
/**
 * Type alias for a Scatter Plot config.
 */
export type ScatterPlotConfig = Omit<WebChart | WebMapWebChart, "series"> & {
    series: WebChartScatterPlotSeries[];
};
/**
 * Type alias for a Gauge Chart config.
 */
export type GaugeChartConfig = WebGaugeChart | WebMapWebGaugeChart;
/**
 * Type alias for a Box Plot config.
 */
export type BoxPlotConfig = WebMapWebBoxPlot;
/**
 * Type alias for the supported chart series types.
 */
export type SupportedChartSeries = WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartGaugeSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartPieChartSeries | WebChartScatterPlotSeries;
/**
 * Type alias for a Chart configuration.
 *
 * This type is generic and supports configuration for different chart types, data source types, and data source requirement policies.
 *
 * It extends and modifies the base `WebMapWebChart` while replacing the generic `series` with the specific series type.
 *
 *
 * @template T - The series type. It can be any of the supported chart series types.
 * @template V - The chart type. This acts as the base type for the configuration. Default type is derived from the series type.
 */
export type ChartConfig<T extends SupportedChartSeries = SupportedChartSeries, V extends WebMapWebChart = T extends WebChartBoxPlotSeries ? WebMapWebBoxPlot : T extends WebChartGaugeSeries ? WebMapWebGaugeChart : WebMapWebChart> = Omit<V, "legend" | "series"> & {
    series: T[];
    legend?: T extends WebChartPieChartSeries ? WebChartPieChartLegend : WebChartLegend;
};
export declare const ActionToggle: {
    readonly Active: "active";
    readonly Inactive: "inactive";
};
export type ActionToggle = (typeof ActionToggle)[keyof typeof ActionToggle];
export declare const ActionState: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
export type ActionState = (typeof ActionState)[keyof typeof ActionState];
export declare const ErrorPolicy: {
    readonly Ignore: "ignore";
    readonly Throw: "throw";
};
export type ErrorPolicy = (typeof ErrorPolicy)[keyof typeof ErrorPolicy];
declare const ChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
type ChangePolicy = (typeof ChangePolicy)[keyof typeof ChangePolicy];
export declare const LayerFilterChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type LayerFilterChangePolicy = ChangePolicy;
export declare const LayerRendererChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type LayerRendererChangePolicy = ChangePolicy;
export {};
