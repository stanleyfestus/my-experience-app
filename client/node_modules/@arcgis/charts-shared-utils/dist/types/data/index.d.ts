import type { WebChart, WebChartBin, WebChartDataItem, WebChartDataTypes, WebChartSeriesType, WebGaugeChart, WebMapWebChart } from "@arcgis/charts-spec";
import { ChartSubType } from "../misc/interfaces";
import type { BoxPlotYValueProps, DataMinMax } from "./interfaces";
import { BoxPlotYFieldKeys } from "./interfaces";
/**
 * Generates the y field names for box plot
 * @param y
 * @returns
 */
export declare function getBoxPlotStatisticFieldNames(y?: string): Record<BoxPlotYFieldKeys, string>;
/**
 * Check the `subType` in the chart config to determine whether the chart is a gauge by feature.
 * If `subType` is not defined, the chart is defaulted to be a statistic gauge.
 *
 * @param config the chart config
 * @default false
 */
export declare function isGaugeByFeature(config: WebGaugeChart): boolean;
/**
 * From fetched data (type: WebChartDataTypes) returns the part containing the data that
 * is to be assigned to the chart (WebChartDataItem[] | WebChartBin[])
 * @param props.fetchedData The fetched finished data
 */
export declare function extractChartDataFromFetchedData(fetchedData?: WebChartDataTypes): WebChartBin[] | WebChartDataItem[] | undefined;
/**
 * Determine whether the current box plot has multi-fields or not based on its query type
 * @param chartSubType: Box plot sub type
 */
export declare function isMultiFieldsBoxPlot(chartSubType?: ChartSubType): boolean;
/**
 * Compute Y value for given Box Plot Y field key based on the provided config
 * @param props.key The BoxPlotYFieldKeys related to the stat
 * @param props.y The y field to use to get the y value
 * @param props.chartSubType The box plot sub type
 * @param props.splitBy The where clause used as a split-by value for a given series
 * @param props.splitByValue The split-by value for a given series
 * @param props.showOutliers Whether to show the outliers
 * @param props.standardizeValues Whether to show the standardized values
 */
export declare function getBoxPlotYValue(props: BoxPlotYValueProps): string;
/**
 * Check if the Box-plot data item has valid open or close (first quartile/third quartile) values since those values are considered as necessary.
 * @param props.dataItem The WebChartDataItem to check for valid values
 * @param props.y The y value
 * @param props.splitBy The split-by value
 * @param props.showOutliers Whether the outliers are shown
 */
export declare function doesBoxPlotItemHaveValidQuartiles(props: {
    dataItem: WebChartDataItem;
    y?: string;
    splitBy?: string;
    showOutliers?: boolean;
}): boolean;
/**
 * Gathers the list of `y` values used by a chart from the series configs.
 * For non-aggregated split-by bar/line charts, the y values are constructed from the series's where clauses.
 *
 * Notes:
 * 1. If the list of visible series id is provided it will be used to filter out the series, otherwise they will all be considered.
 * 2. The returned y list should be independently from any prefix or suffix that are used for other features like
 * color match, selection, tooltips, etc.
 * @param seriesConfig The array of configs for the chart series.
 * @param filteredSeriesIds List of series ids to use as a filter.
 */
export declare function getYList(seriesConfig: WebChartSeriesType[], filteredSeriesIds?: string[]): string[];
/**
 * Gathers the list of `y` values used by a box plot from the series configs.
 * @param props.showMean Whether the box plot mean lines are shown
 * @param props.seriesConfig The array of configs for the chart series.
 * @param props.filteredSeriesIds List of series ids to use as a filter.
 */
export declare function getBoxPlotYList(props: {
    showMean?: boolean;
    seriesConfig: WebChartSeriesType[];
    filteredSeriesIds?: string[];
}): string[];
/**
 * validate the individual bar chart data item using its x and y values
 * @param props.dataItem The bar/line chart data item
 * @param props.x The x value from series config
 * @param props.y The y value from series config
 * @param props.nullAsValid Whether to consider `null` values as valid
 */
export declare function validateBarNLineChartDataItem(props: {
    dataItem: WebChartDataItem;
    x: string;
    y: string;
    nullAsValid?: boolean;
}): boolean;
/**
 * Indicates whether a data set is empty (no bar, no slice, etc.) and contains at least one valid item.
 * @param props.config The chart's config
 * @param props.nullAsValid Whether to consider `null` values as valid
 * @param props.dataSet The chart's data
 * @returns A boolean
 */
export declare function isEmptyDataset(props: {
    chartConfig?: WebChart | WebGaugeChart | WebMapWebChart;
    nullAsValid?: boolean;
    dataSet?: WebChartDataItem[];
}): boolean;
/**
 * Looks for the min and max values from a data set, considering only the visible series.
 * @param props.chartConfig The chart config
 * @param props.chartData The chart's data (as fed to the amCharts chart)
 * @param props.filteredSeriesIds List of series ids to use as a filter
 */
export declare function getDataMinMaxFromSeries(props: {
    chartConfig: WebChart | WebMapWebChart;
    chartData: WebChartDataItem[];
    filteredSeriesIds?: string[];
}): DataMinMax;
