import type { SupportedLayer, WebChart, WebChartSeriesType, WebMapWebChart } from "@arcgis/charts-spec";
import { RESTSymbolType, WebChartVersionStatus } from "@arcgis/charts-spec";
import type FeatureLayerView from "@arcgis/core/views/layers/FeatureLayerView";
/**
 * Finds the matching layer fields for a list of fields.
 *
 * @param {(string[] | undefined)} fields
 * @param {SupportedLayer} queryObject
 * @returns
 */
export declare function matchFieldsList(fieldsList: string[] | undefined, queryObject: SupportedLayer): Promise<string[] | undefined>;
/**
 * Adds a iLayer to a WebMapWebChart.
 * If the `queryObject` prop is provided an `iLayer` is added to the config.
 * @param props.chartConfig The chart config with no iLayer
 * @param props.queryObject The layer or feature layer view instance. Its information are **not** used to create the iLayer.
 * @returns The update chart config with a `iLayer` property
 */
export declare function addILayer<T extends WebMapWebChart>(props: {
    chartConfig: T;
    queryObject?: FeatureLayerView | SupportedLayer;
}): T & WebChart;
/**
 * Retrieve and construct chart version information based on the input version and the currently supported ArcGIS Chart versions
 * defined in `chartConfigVersions`.  Returned information includes:
 *
 * - versionStatus: whether the input chart version is the same | older | newer | unrecognized, comparing with the current chart version,
 * which is defined in `WebChartCurrentVersion`.  An unrecognized version is one that is neither undefined nor conformed to the
 * sematic versioning spec, that is `Major.Minor.Patch`
 * - versions: an array of versions that will be used in the `appConversion()`.
 *  + For any version that is not recognized, versions will be set to `unrecognizedVersion`;
 *  + If the input version is the same or newer, versions will be the input version;
 *  + Otherwise, versions will be a list of versions that is older and closer to the input version, plus all the supported versions
 * that are newer than the input version.
 *
 * Note: The input chart version needs to conform to the format defined by sematic versioning spec; otherwise it will be treated as unrecognized.
 *
 * @param configVersion The input config version.
 */
export declare function getChartVersionInfo(configVersion?: string): {
    versionStatus: WebChartVersionStatus;
    versions: string[];
};
/**
 * Get the series to use as a reference for the chart. That's the one containing important common information like the query,
 * the split-by field, etc.
 * For box plot we need to handle the specific case of the mean line series.
 * @param chartConfig The chart config
 */
export declare function getSeriesReference(chartConfig: WebMapWebChart): WebChartSeriesType;
/**
 * Find the expected symbol type for a guide given the start and end values.
 * @param guide The guide to analyze
 */
export declare function findExpectedGuideSymbol(start: Date | number | string | null, end: Date | number | string | null | undefined): RESTSymbolType;
