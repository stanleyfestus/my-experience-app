import type Ajv from "ajv";
import type { RESTFieldType, RESTStatisticType } from "@arcgis/charts-spec";
import type { ErrorKeywords } from "../../errors/interfaces";
export declare const ConfigWarningKeywords: {
    readonly NonNumericAggregation: "nonNumericAggregation";
    readonly DuplicateSeriesID: "duplicateSeriesId";
};
type ConfigWarningKeywords = (typeof ConfigWarningKeywords)[keyof typeof ConfigWarningKeywords];
interface NumericAggregationParams {
    fieldName: string;
    fieldType: RESTFieldType;
    aggregationRequested: RESTStatisticType;
}
interface DuplicateSeriesIdParams {
    seriesName: string;
    seriesId: string;
}
interface LayerLoadFailureParams {
    url: string;
    portalItemId: string;
}
export interface ConfigWarningObject {
    keyword: ConfigWarningKeywords;
    dataPath: string;
    message: string;
    params: DuplicateSeriesIdParams | NumericAggregationParams;
}
export interface CustomErrorObject {
    keyword: ErrorKeywords;
    message: string;
    params: LayerLoadFailureParams;
}
/**
 * Validation Status interface which described the validity of the input WebChart config
 */
export interface ValidationStatus {
    valid: boolean;
    schemaErrors: Ajv.ErrorObject[];
    customErrors: CustomErrorObject[];
    warnings: ConfigWarningObject[];
}
export declare const ConfigErrorKeywords: {
    readonly Required: "required";
    readonly MinLength: "minLength";
    readonly MinItems: "minItems";
    readonly MaxItems: "maxItems";
    readonly Pattern: "pattern";
    readonly AdditionalProperties: "additionalProperties";
    readonly Enum: "enum";
    readonly AnyOf: "anyOf";
};
export declare const DataWarningKeywords: {
    readonly BadData: "badData";
    readonly EmptyDataSet: "emptyDataSet";
    readonly HistogramEmptyField: "histogramEmptyField";
    readonly BarElementExceedsLimit: "barElementExceedsLimit";
    readonly LineChartExceedsLimit: "lineChartExceedsLimit";
    readonly BoxPlotExceedsLimit: "boxPlotExceedsLimit";
    readonly BoxPlotOutliersExceedsLimit: "boxPlotOutliersExceedsLimit";
    readonly PieChartExceedsLimit: "pieChartExceedsLimit";
    readonly GaugeExceedsLimit: "gaugeExceedsLimit";
    readonly PieChartMixOfNegativePositiveSlices: "PieChartMixOfNegativePositiveSlices";
    readonly NegativeValueInSqrtCalculation: "negativeValueInSqrtCalculation";
    readonly NegativeValueInLogCalculation: "negativeValueInLogCalculation";
    readonly NegativeValueInXAxisLogScale: "negativeValueInXAxisLogScale";
    readonly NegativeValueInYAxisLogScale: "negativeValueInYAxisLogScale";
};
export type DataWarningKeywords = (typeof DataWarningKeywords)[keyof typeof DataWarningKeywords];
interface ElementCountExceededParams {
    actualCount: number;
    totalLimit: number;
    seriesLimit?: number;
}
export interface DataWarningObject {
    keyword: DataWarningKeywords;
    header: string;
    message: string;
    params?: ElementCountExceededParams;
}
export {};
