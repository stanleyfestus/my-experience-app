import type { ISimpleFillSymbol, ISimpleLineSymbol, ISimpleMarkerSymbol, WebChartLineChartSeries, WebChartTextSymbol, WebChart, WebChartStackedKinds, WebMapWebChart, WebChartSeries, WebChartBoxPlotSeries, WebChartGaugeSeries, WebBoxPlot, WebGaugeChart, IFeatureLayer, CategoryFormatOptions, DateTimeFormatOptions, NumberFormatOptions } from "@arcgis/charts-spec";
import type { ChartTypes } from "../misc";
import type { ChartConfig, SupportedChartSeries } from "../types";
export type StringIndexable<T> = Record<string, unknown> & T;
/**
 * Web chart series with rotated property
 */
export type WebChartSeriesWithRotatedProp = WebChartSeries & {
    rotated?: boolean;
};
/**
 * Check if the chart config supports rotation or not
 * @param config - the chart config
 */
export declare function isRotationSupported(config: WebChart | WebMapWebChart): config is {
    series: WebChartSeriesWithRotatedProp[];
} & (WebChart | WebMapWebChart);
/**
 * Web chart series with stackedType property
 */
type WebChartSeriesWithStackedTypeProp = WebChartSeries & {
    stackedType?: WebChartStackedKinds;
};
/**
 * Check if the chart config supports rotation or not
 * @param config - the chart config
 */
export declare function isStackedTypeSupported(config: WebChart | WebMapWebChart): config is {
    series: WebChartSeriesWithStackedTypeProp[];
} & (WebChart | WebMapWebChart);
/**
 * Type guard for ISimpleFillSymbol
 * @param symbol
 */
export declare function isSFS(symbol: any): symbol is ISimpleFillSymbol;
/**
 * Type guard for ISimpleLineSymbol
 * @param symbol
 */
export declare function isSLS(symbol: any): symbol is ISimpleLineSymbol;
/**
 * Type guard for ISimpleMarkerSymbol
 * @param symbol
 */
export declare function isSMS(symbol: any): symbol is ISimpleMarkerSymbol;
/**
 * Type guard for WebChartTextSymbol
 * @param symbol
 */
export declare function isWebChartTextSymbol(symbol: any): symbol is WebChartTextSymbol;
/**
 * Determines if the provided `config` has a `iLayer` property.
 * @param config
 */
export declare function hasILayer<SeriesType extends SupportedChartSeries>(config: ChartConfig<SeriesType> | undefined): config is ChartConfig<SeriesType, SeriesType extends WebChartBoxPlotSeries ? WebBoxPlot : SeriesType extends WebChartGaugeSeries ? WebGaugeChart : WebChart>;
export declare function hasILayer(config: WebMapWebChart | undefined): config is WebChart & {
    iLayer: IFeatureLayer;
};
/**
 * Determines if the provided `config` is the specified chart type `T`.
 * @param config The chart config to check.
 * @param chartType The chart type to check against.
 */
export declare function isChartType<T extends ChartConfig>(config: WebMapWebChart | undefined, chartType: ChartTypes | undefined): config is T;
/**
 * Determines if the series is a box plot series.
 * @param series The series to check.
 */
export declare function isBoxPlotSeries(series: WebChartSeries): series is WebChartBoxPlotSeries;
/**
 * Determines if the series is a line chart series.
 * @param series The series to check.
 */
export declare function isLineChartSeries(series: WebChartSeries): series is WebChartLineChartSeries;
/**
 * Determines if the series array is of type box plot series.
 * @param series The series to check.
 */
export declare function isBoxPlotSeriesArray(series: WebChartSeries[]): series is WebChartBoxPlotSeries[];
/**
 * Type guard for axis format being NumberFormatOptions
 * @param valueFormat - valueFormat to check
 */
export declare function isNumberFormatOptions(valueFormat: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined): valueFormat is NumberFormatOptions;
export {};
