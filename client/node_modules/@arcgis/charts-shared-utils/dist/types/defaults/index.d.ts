import type { Color, ISimpleLineSymbol, ISimpleMarkerSymbol, IFont, ISimpleFillSymbol, WebChartPieChartTick, WebChartNeedle, CategoryFormatOptions, NumberFormatOptions, WebChartAxis, WebChartGaugeAxis, WebChartBarChartSeries, WebChartLegend, WebChartText, WebChartHistogramSeries, WebChartScatterPlotSeries, ScatterPlotOverlays, WebChartOverlay, HistogramOverlays, DateTimeFormatOptions, WebChartLineChartSeries, WebChartPieChartSeries, WebChartGaugeSeries, SizePolicy, WebMapWebChart, WebMapWebGaugeChart, WebChartTextSymbol, WebChartBoxPlotSeries, WebMapWebBoxPlot } from "@arcgis/charts-spec";
import { WebChartStackedKinds, WebChartTypes } from "@arcgis/charts-spec";
import type { ChartElementLimit, ChartTextProps, QueryDefaults, ChartElementTechnicalLimit } from "./interfaces";
import { TextElements } from "./interfaces";
export declare const histogramBinCount = 32;
export declare const featuresExtentField = "arcgis_charts_features_extent";
export declare const queryDefaults: QueryDefaults;
export declare const queryCalculatedExpr: string[];
export declare const fullOpacity = 1;
export declare const reducedOpacity = 0.7;
export declare const defaultGridLineOpacity = 25;
export declare const defaultAxisLineColor: Color;
export declare const defaultPieTickColor: Color;
export declare const defaultLineSymbolStyle: "esriSLSSolid";
export declare const defaultLineSymbolWidth = 2;
export declare const pieChartSpecialSlicesId: {
    defaultGroupOfSlicesId: string;
    sliceIdPrefix: string;
    undefinedSliceId: string;
    nullSliceId: string;
    emptySliceId: string;
};
export declare const defaultBoxPlotCategory = "arcgis_charts_box_plot_category";
export declare const ramp: number[][];
/**
 * Returns a specific color from the default ramp, given an index. If the index is > than the ramp length,
 * we use modulo to get the corresponding color.
 * @param props.colorIndex The index to fetch the color from the `ramp` or `overlayRamp` array
 * @param props.opacity The opacity to set the alpha value, set to 255 as default
 * @param props.histogramOverlays The boolean that is used to identify from which array to fetch default colors
 */
export declare function getOneRampColor(props: {
    colorIndex?: number;
    opacity?: number;
    histogramOverlays?: boolean;
}): Color;
export declare function getDefaultColor(opacity?: number): Color;
/**
 * random color with alpha 70% for authoring page.
 * @param opacityPercentage default is 1
 */
export declare function generateRandomRestColor(opacityPercentage?: number): Color;
export declare function getDefaultFont(type?: TextElements): IFont;
export declare function getDefaultTextSymbol(text?: string, font?: IFont, type?: TextElements): WebChartTextSymbol;
export declare function getDefaultChartText(props?: ChartTextProps): WebChartText;
export declare function getDefaultLineSymbol(props?: {
    color?: Color;
    useRandomColor?: boolean;
    useRampColor?: {
        colorIndex?: number;
    };
    width?: number;
    opacity?: number;
    isHistogramOverlay?: boolean;
}): ISimpleLineSymbol;
export declare function getDefaultCategoryFormat(): CategoryFormatOptions;
export declare function getDefaultDateFormat(): DateTimeFormatOptions;
export declare function getDefaultNumberFormat(): NumberFormatOptions;
export declare function getDefaultStatNumberFormat(): NumberFormatOptions;
export declare function getDefaultPercentNumberFormat(): NumberFormatOptions;
export declare function getDefaultValueAxis(text?: string): WebChartAxis;
export declare function getDefaultLegend(): WebChartLegend;
export declare function getDefaultOverlay(overlayIndex: number): WebChartOverlay;
export declare function getDefaultBackground(): Color;
export declare function getDefaultTitle(): Promise<string>;
export declare function getDefaultBoxPlotElementSymbol(seriesIndex?: number, useRandomColor?: boolean): ISimpleFillSymbol;
/**
 * Returns a default marker symbol for a line chart
 * @param seriesIndex The series index to pick a symbol color
 * @param useRandomColor Whether to randomize the marker color
 * @returns
 */
export declare function getDefaultLineChartMarkerSymbol(seriesIndex?: number): ISimpleMarkerSymbol;
/**
 * Returns a default line symbol for a line chart
 * @param seriesIndex The series index to pick a symbol color
 */
export declare function getDefaultLineChartLineSymbol(seriesIndex?: number): ISimpleLineSymbol;
export declare function getDefaultScatterPlotMarkerSymbol(useRandomColor?: boolean): ISimpleMarkerSymbol;
export declare function getDefaultScatterPlotSizePolicy(): Required<SizePolicy>;
export declare function getDefaultTrendLine(useRandomColor?: boolean): Required<ScatterPlotOverlays>;
export declare function getScatterPlotSeries(id: string): WebChartScatterPlotSeries;
/**
 * Returns default axes based on chart type as per the WebChart Specification
 * @param chartType The type of WebChart which is of type WebChartTypes
 *
 */
export declare function getDefaultAxes(chartType: WebChartTypes): Promise<WebChartAxis[]>;
/**
 * Returns the default gauge needle
 */
export declare function getDefaultGaugeNeedle(): WebChartNeedle;
/**
 * Returns the gauge axes
 */
export declare function getGaugeAxes(): Promise<WebChartGaugeAxis[]>;
/**
 * Returns a default LineChartSeries object as per the WebChart Specification
 */
export declare function getDefaultLineChartSeries(props: {
    objectIDField?: string;
    seriesIndex?: number;
}): Promise<Required<Pick<WebChartLineChartSeries, "dataLabels" | "lineSymbol" | "markerSymbol" | "query">> & WebChartLineChartSeries>;
/**
 * Returns a default symbol for a bar chart series
 * @param seriesIndex The series index to pick a symbol color
 */
export declare function getDefaultBarChartSeriesSymbol(seriesIndex?: number): ISimpleFillSymbol;
/**
 * Returns a default BarChartSeries object as per the WebChart Specification
 */
export declare function getDefaultBarChartSeries(props: {
    objectIDField?: string;
    seriesIndex?: number;
}): Promise<Required<Pick<WebChartBarChartSeries, "dataLabels" | "fillSymbol" | "query">> & WebChartBarChartSeries>;
/**
 * Returns a default BoxPlotSeries object as per the WebBoxPlot Specification
 */
export declare function getDefaultBoxPlotSeries(seriesIndex?: number): Promise<WebChartBoxPlotSeries>;
/**
 * Returns a default pie chart tick object as per the WebChart Specification
 */
export declare function getDefaultPieChartTick(): WebChartPieChartTick;
/**
 * Returns a default symbol for a pie chart
 */
export declare function getDefaultPieChartSymbol(): ISimpleFillSymbol;
/**
 * Returns a default PieChartSeries object as per the WebChart Specification
 */
export declare function getDefaultPieChartSeries(objectIDField?: string): Promise<Required<Pick<WebChartPieChartSeries, "dataLabels" | "fillSymbol" | "query">> & WebChartPieChartSeries>;
/**
 * Returns a default GaugeSeries object as per the WebChart Specification
 */
export declare function getDefaultGaugeSeries(props: {
    objectIDField?: string;
}): WebChartGaugeSeries;
/**
 * Returns the default chart rotation.
 */
export declare function getDefaultChartRotation(): boolean;
export declare function getDefaultBarChart(id?: string): Promise<WebMapWebChart>;
export declare function getDefaultBoxPlot(id?: string): Promise<WebMapWebBoxPlot>;
export declare function getDefaultLineChart(id?: string): Promise<WebMapWebChart>;
export declare function getDefaultPieChart(id?: string): Promise<WebMapWebChart>;
export declare function getDefaultGauge(id?: string): Promise<WebMapWebGaugeChart>;
export declare function getDefaultScatterPlot(id?: string): Promise<WebMapWebChart>;
export declare function getDefaultHistogramOverlays(): Required<HistogramOverlays>;
export declare function getDefaultHistogramSymbol(): ISimpleFillSymbol;
export declare function getDefaultHistogramSeries(): Omit<Required<WebChartHistogramSeries>, "dataTooltipDateFormat" | "dataTooltipPercentFormat" | "dataTooltipValueFormat" | "query">;
export declare function getDefaultHistogram(id?: string): Promise<WebMapWebChart>;
/**
 * Returns a list of render limitations, mainly set for performance reasons. They can be overridden through the chart options,
 * or let as defaults.
 */
export declare function getChartLimits(customizedLimits?: ChartElementLimit): Required<ChartElementLimit>;
/**
 * Returns a list of technical limitations, mainly to the size of large queries.
 */
export declare function getChartTechnicalLimits(): ChartElementTechnicalLimit;
/**
 * Returns the label for the provided aggregation type.
 * @param aggregationType
 */
export declare function getDefaultAggregationTypeLabel(aggregationType: string): Promise<string>;
/**
 * Returns the label for the provided time aggregation type.
 * @param aggregationType
 */
export declare function getDefaultTimeAggregationTypeLabel(timeAggregationType: string | undefined): Promise<string>;
/**
 * Returns the default stacked type for Bar or Line chart with multiple series.
 *  */
export declare function getDefaultStackedType(): WebChartStackedKinds;
/**
 * Returns the default label to show when there is no R2 value computed or set for scatter plot
 *
 * @returns {Promise<string>}
 */
export declare function getDefaultNoR2Label(): Promise<string>;
export declare const pieChartInnerRadius = 0;
export declare const boxPlotOutliersSuffix = "_arcgis_charts_outliers";
export declare const boxPlotZScoreSuffix = "_arcgis_charts_z_score";
export declare const defaultColorForBoxPlotWithMeanLines: Color;
