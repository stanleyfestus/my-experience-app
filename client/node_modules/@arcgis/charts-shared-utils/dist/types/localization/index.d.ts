import type { ComponentLocaleItem, LocaleInfo, LocaleItem } from "./interfaces";
import type MapView from "@arcgis/core/views/MapView";
import type { CommonStrings, ErrorStrings } from "../t9n/interfaces";
/**
 * Generates and returns a message with the keys in the input statement replaced with new values.
 * @param message
 * @param parameters
 */
export declare function formatMessage(statement: Readonly<string>, parameters: Readonly<LocaleItem>): string;
/**
 * Finds the locale of the closest element to the given element.
 * If no element given, and converts `window.navigator.language` into a supported locale.
 * @param element
 */
export declare function getLocaleInfo(element?: Element): LocaleInfo;
/**
 * Converts the given `timeZone` from ArcGIS `MapView` to a valid time zone string.
 * @param {MapView["timeZone"] | undefined} timeZone
 * @returns {MapView["timeZone"] | undefined}
 */
export declare function convertTimeZone(timeZone: MapView["timeZone"] | undefined): string | undefined;
/**
 * Returns the date string in the Calcite date picker's expected format `YYYY-MM-DD` based on the given date and time zone.
 * @param {Date} date
 * @param {string} timeZone
 * @returns {string}
 */
export declare function getDateStringInCalciteDatePickerFormat(date: Date, timeZone: string): string;
/**
 * Returns the time string in the Calcite time picker's expected format `HH:mm` based on the given date and time zone.
 * @param {Date} date
 * @param {string} timeZone
 * @returns {string}
 */
export declare function getTimeStringInCalciteTimePickerFormat(date: Date, timeZone: string): string;
/**
 * Fetches locale string for a given component
 * @param element The component's HTML element
 * @param baseURL The base URL to fetch the locale file
 * @param removeArcgisPrefix Whether to remove the `arcgis-` from the file name (currently used by the charts-config package).
 */
export declare function fetchComponentLocaleStrings<T extends LocaleItem>(element: Element, baseURL: string, removeArcgisPrefix?: boolean): Promise<ComponentLocaleItem<T>>;
/**
 * Fetches locale error strings for a given component
 * @param element The component's HTML element
 * @param baseURL The base URL to fetch the locale file
 */
export declare function fetchComponentLocaleCommonStrings<T extends CommonStrings | ErrorStrings>(props: {
    element: Element;
    baseURL: string;
    filePrefix: "common" | "errors";
}): Promise<T>;
/**
 * Returns if the detected language is rtl or ltr and returns the direction
 * @param element
 */
export declare function fetchLanguageDirection(element?: Element): "ltr" | "rtl";
/**
 * Performs locale aware parse float
 * @param localizedString string that has to be parsed
 * @param locale  locale used for parsing the float
 */
export declare function localeParseFloat(localizedString: string, locale?: string): number;
/**
 * Returns a default `CommonStrings` t9n object.
 * This is used by the chart components unit tests and the charts-js Storybook demos.
 */
export declare function getDefaultErrorsStrings(): ErrorStrings;
/**
 * Returns a default `CommonStrings` t9n object.
 * This is used by the chart components unit tests and the charts-js Storybook demos.
 */
export declare function getDefaultCommonStrings(): CommonStrings;
