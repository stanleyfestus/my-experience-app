import type { SupportedLayer, WebChartQuery } from "@arcgis/charts-spec";
import type Query from "@arcgis/core/rest/support/Query";
import type Geometry from "@arcgis/core/geometry/Geometry";
import type TimeExtent from "@arcgis/core/time/TimeExtent";
import type { QueryObject } from "../feature-layer";
/**
 * Indicates whether a query can be cached. It is not when:
 * - a geometry is set
 * - a date filter is set
 * @param query The query object or query parameters
 */
export declare function isQueryCacheable(query: __esri.QueryProperties | Query): boolean;
export declare function getMaxRecords(layer?: SupportedLayer): number;
/**
 * Function building a where clause by concatenating a list of filters by using the AND operator.
 * @param filterList The list of filters to combine
 * @param operand The operand to use to combine the filters (OR, AND...)
 */
export declare function combineFilters(filterList: (string | undefined)[], operand?: string): string;
/**
 * Computes the time extent to be used by the query.
 * @param queryObject The layer or feature layer view
 * @param defaultTimeExtent The time extent defined at the series config level or provided at runtime
 */
export declare function getQueryTimeExtent(queryObject: QueryObject, defaultTimeExtent?: WebChartQuery["timeExtent"]): WebChartQuery["timeExtent"] | undefined;
/**
 * Computes the extent to be used by the query. We prioritize the feature layer view extent
 * over the series config extent, unless `ignoreViewExtent` is set to true.
 * @param props.queryObject The layer or feature layer view
 * @param props.defaultGeometry The geometry defined at the series config level or provided at runtime
 * @param props.ignoreViewExtent Whether to ignore the view's extent
 */
export declare function getQueryGeometry(props: {
    queryObject: QueryObject;
    defaultGeometry?: WebChartQuery["geometry"];
    ignoreViewExtent?: boolean;
}): WebChartQuery["geometry"] | undefined;
/**
 * Transforms a [timestamp, timestamp] to a JSAPI TimeExtent object
 * @param timeExtentConfig The time extent filter from the config
 */
export declare function mapQueryTimeExtent(timeExtentConfig?: WebChartQuery["timeExtent"]): Promise<TimeExtent | undefined>;
/**
 * Transforms a IGeometry to a JSAPI Geometry
 * @param geometryConfig The geometry from the config
 */
export declare function mapQueryGeometry(geometryConfig?: WebChartQuery["geometry"]): Promise<Geometry | undefined>;
export declare function mapQuery(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    maxRecordCountFactor?: number;
}): Promise<Query>;
export declare function getMaxRecordCountFactor(layer?: SupportedLayer): number | undefined;
