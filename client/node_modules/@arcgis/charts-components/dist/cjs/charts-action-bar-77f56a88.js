/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See LICENSE.md for details.
 * v4.31.0-next.103
 */
'use strict';

const index = require('./index-ba28e81f.js');
const actionBarUtils = require('./action-bar-utils-4eba529f.js');

const HTMLClasses = {
    actionBar: "action-bar"
};

const chartsActionBarCss = ".action-bar{display:flex;flex-direction:column;height:100%;border-right:1px solid var(--calcite-color-border-2);overflow-x:hidden}";
const ArcgisChartsActionBarStyle0 = chartsActionBarCss;

const ArcGISChartsActionBar = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisDefaultActionSelect = index.createEvent(this, "arcgisDefaultActionSelect", 7);
        this.arcgisActionBarToggle = index.createEvent(this, "arcgisActionBarToggle", 7);
        /**
         * Element reference for expand action in calciteActionBar
         * @type {HTMLCalciteActionElement | null}
         * @category Private
         * @default null
         */
        this.expandAction = null;
        /**
         * Handler for default action click event
         * @category Event handler
         * @param {MouseEvent} e Event payload from click
         */
        this.handleDefaultActionClick = (e) => {
            const action = e.target;
            const payload = {
                actionId: action.id,
                actionActive: false,
            };
            switch (action.id) {
                case actionBarUtils.Em.Legend:
                    // Legend toggle active state
                    this.legendToggle = this.legendToggle === actionBarUtils.Am.Active ? actionBarUtils.Am.Inactive : actionBarUtils.Am.Active;
                    payload.actionActive = this.legendToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.RotateChart:
                    // Rotate Chart toggle active state
                    this.rotateChartToggle =
                        this.rotateChartToggle === actionBarUtils.Am.Active ? actionBarUtils.Am.Inactive : actionBarUtils.Am.Active;
                    payload.actionActive = this.rotateChartToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.FilterBySelection:
                    // Filter by Selection toggle active state
                    this.filterBySelectionToggle =
                        this.filterBySelectionToggle === actionBarUtils.Am.Active ? actionBarUtils.Am.Inactive : actionBarUtils.Am.Active;
                    payload.actionActive = this.filterBySelectionToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.FilterByExtent:
                    // Filter by Extent toggle active state
                    this.filterByExtentToggle =
                        this.filterByExtentToggle === actionBarUtils.Am.Active ? actionBarUtils.Am.Inactive : actionBarUtils.Am.Active;
                    payload.actionActive = this.filterByExtentToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.Selection:
                    // Activate Selection action and deactivate Zoom action
                    this.selectionToggle = actionBarUtils.Am.Active;
                    this.zoomToggle = actionBarUtils.Am.Inactive;
                    payload.actionActive = this.selectionToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.Zoom:
                    // Activate Zoom action and deactivate Selection action
                    this.zoomToggle = actionBarUtils.Am.Active;
                    this.selectionToggle = actionBarUtils.Am.Inactive;
                    payload.actionActive = this.zoomToggle === actionBarUtils.Am.Active;
                    break;
                case actionBarUtils.Em.ClearSelection:
                    payload.actionActive = this.clearSelectionToggle === actionBarUtils.Am.Active;
                    break;
            }
            this.arcgisDefaultActionSelect.emit(payload);
        };
        /**
         * Handler for calciteActionBarToggle event
         * @category Event handler
         */
        this.handleCalciteActionBarToggle = () => {
            this.expanded = this.calciteActionBar.expanded;
            this.setCustomActionsExpanded();
            this.arcgisActionBarToggle.emit(this.expanded);
        };
        /**
         * Handler for mouseOver event that creates a tooltip for the hovered action
         * @category Event handler
         * @param {MouseEvent} e Event payload from mouse over
         */
        this.handleMouseOver = (e) => {
            // Only show tooltip if action bar in not expanded
            if (!this.calciteActionBar.expanded) {
                const element = e.target;
                if (this.actionTooltip !== undefined) {
                    this.actionTooltip = actionBarUtils.destroyTooltip(this.actionTooltip);
                }
                // Find action from target element or its child
                let action;
                if (element?.tagName === "CALCITE-ACTION") {
                    action = element;
                }
                else if (element?.tagName === "DIV") {
                    action = element.firstChild;
                }
                if (action !== undefined) {
                    this.actionTooltip = actionBarUtils.createTooltip(action.text, action);
                    this.actionTooltip.open = true;
                }
            }
            else {
                this.actionTooltip = actionBarUtils.destroyTooltip(this.actionTooltip);
            }
        };
        /**
         * Handler for mouseOut event that destroys current action tooltip
         * @category Event handler
         */
        this.handleMouseOut = () => {
            if (this.actionTooltip !== null) {
                this.actionTooltip = actionBarUtils.destroyTooltip(this.actionTooltip);
            }
        };
        /**
         * Handler for `slotchange` event to set custom action event handlers dynamically
         * @category Event handler
         * @param {Event} e Event payload from slot change
         */
        this.handleSlotChange = (e) => {
            const slot = e.target;
            const customActions = slot.assignedElements();
            for (const action of customActions) {
                action.onmouseover = this.handleMouseOver;
            }
        };
        this.forceDisableActions = false;
        this.legendToggle = actionBarUtils.Am.Inactive;
        this.legendState = actionBarUtils.Mm.Enabled;
        this.legendTitle = undefined;
        this.rotateChartToggle = actionBarUtils.Am.Inactive;
        this.rotateChartState = actionBarUtils.Mm.Enabled;
        this.rotateChartTitle = undefined;
        this.filterBySelectionToggle = actionBarUtils.Am.Inactive;
        this.filterBySelectionState = actionBarUtils.Mm.Enabled;
        this.filterBySelectionTitle = undefined;
        this.filterByExtentToggle = actionBarUtils.Am.Inactive;
        this.filterByExtentState = actionBarUtils.Mm.Enabled;
        this.filterByExtentTitle = undefined;
        this.actionBarSelectionMode = actionBarUtils._m.MultiSelectionWithCtrlKey;
        this.selectionToggle = actionBarUtils.Am.Inactive;
        this.selectionState = actionBarUtils.Mm.Enabled;
        this.selectionTitle = undefined;
        this.zoomToggle = actionBarUtils.Am.Inactive;
        this.zoomState = actionBarUtils.Mm.Enabled;
        this.zoomTitle = undefined;
        this.fullExtentToggle = actionBarUtils.Am.Inactive;
        this.fullExtentState = actionBarUtils.Mm.Enabled;
        this.fullExtentTitle = undefined;
        this.clearSelectionToggle = actionBarUtils.Am.Inactive;
        this.clearSelectionState = actionBarUtils.Mm.Enabled;
        this.clearSelectionTitle = undefined;
        this.switchSelectionToggle = actionBarUtils.Am.Inactive;
        this.switchSelectionState = actionBarUtils.Mm.Enabled;
        this.switchSelectionTitle = undefined;
        this.expanded = false;
        this.actionBarHideActionsProps = undefined;
        this.actionTooltip = null;
    }
    /**
     * Renders default actions
     * @category Private
     */
    renderDefaultActions() {
        return [
            this.actionBarHideActionsProps?.hideLegend !== true ||
                this.actionBarHideActionsProps?.hideRotateChart !== true ? (index.h("calcite-action-group", null, this.actionBarHideActionsProps?.hideLegend !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.Legend, text: this.legendTitle ?? this.strings?.legend, active: this.legendToggle === actionBarUtils.Am.Active, disabled: this.legendState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }, index.h("calcite-icon", { icon: "legend", scale: "s", flipRtl: true })))) : null, this.actionBarHideActionsProps?.hideRotateChart !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.RotateChart, icon: "rotate", text: this.rotateChartTitle ?? this.strings?.rotateChart, active: this.rotateChartToggle === actionBarUtils.Am.Active, disabled: this.rotateChartState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null)) : null,
            this.actionBarHideActionsProps?.hideFilterBySelection !== true ||
                this.actionBarHideActionsProps?.hideFilterByExtent !== true ? (index.h("calcite-action-group", null, this.actionBarHideActionsProps?.hideFilterBySelection !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.FilterBySelection, icon: "selection-filter", text: this.filterBySelectionTitle ?? this.strings?.filterBySelection, active: this.filterBySelectionToggle === actionBarUtils.Am.Active, disabled: this.filterBySelectionState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null, this.actionBarHideActionsProps?.hideFilterByExtent !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.FilterByExtent, icon: "extent-filter", text: this.filterByExtentTitle ?? this.strings?.filterByExtent, active: this.filterByExtentToggle === actionBarUtils.Am.Active, disabled: this.filterByExtentState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null)) : null,
            this.actionBarHideActionsProps?.hideSelection !== true ||
                this.actionBarHideActionsProps?.hideZoom !== true ||
                this.actionBarHideActionsProps?.hideFullExtent !== true ||
                this.actionBarHideActionsProps?.hideClearSelection !== true ||
                this.actionBarHideActionsProps?.hideSwitchSelection !== true ? (index.h("calcite-action-group", null, this.actionBarHideActionsProps?.hideZoom !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.Zoom, icon: "magnifying-glass", text: this.zoomTitle ?? this.strings?.zoom, active: this.zoomToggle === actionBarUtils.Am.Active, disabled: this.zoomState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null, this.actionBarHideActionsProps?.hideSelection !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.Selection, icon: "cursor-selection", text: this.selectionTitle ?? this.strings?.selection, active: this.selectionToggle === actionBarUtils.Am.Active, disabled: this.selectionState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null, this.actionBarHideActionsProps?.hideClearSelection !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.ClearSelection, icon: "erase", text: this.clearSelectionTitle ?? this.strings?.clearSelection, active: this.clearSelectionToggle === actionBarUtils.Am.Active, disabled: this.clearSelectionState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null, this.actionBarHideActionsProps?.hideFullExtent !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.FullExtent, icon: "zoom-out-fixed", text: this.fullExtentTitle ?? this.strings?.fullExtent, active: this.fullExtentToggle === actionBarUtils.Am.Active, disabled: this.fullExtentState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null, this.actionBarHideActionsProps?.hideSwitchSelection !== true ? (index.h("div", { onMouseOver: this.handleMouseOver }, index.h("calcite-action", { id: actionBarUtils.Em.SwitchSelection, icon: "arrow-right-left", text: this.switchSelectionTitle ?? this.strings?.switchSelection, active: this.switchSelectionToggle === actionBarUtils.Am.Active, disabled: this.switchSelectionState === actionBarUtils.Mm.Disabled || this.forceDisableActions, onClick: this.handleDefaultActionClick }))) : null)) : null,
        ];
    }
    /**
     * Sets whether text is expanded on all custom actions
     * @category Private
     */
    setCustomActionsExpanded() {
        this.el.querySelectorAll("calcite-action").forEach((action) => {
            const calciteAction = action;
            calciteAction.textEnabled = this.expanded;
        });
    }
    /**
     * @category Lifecycle
     */
    render() {
        return (index.h(index.Host, { key: '5eac9a282709696d507ba41b3ea165a47579a6f8' }, index.h("calcite-action-bar", { key: 'b974ddb840a9437c215e19624b1fc88bdbeb857a', class: HTMLClasses.actionBar, onCalciteActionBarToggle: this.handleCalciteActionBarToggle, onMouseOut: this.handleMouseOut, expanded: this.expanded, ref: (ref) => {
                this.calciteActionBar = ref;
                this.calciteActionBar.expandDisabled = this.actionBarHideActionsProps?.hideExpandAction ?? false;
            }, messageOverrides: { expand: this.strings.expand, collapse: this.strings.collapse }, "overflow-actions-disabled": true }, index.h("slot", { key: 'dc85d140a8db820a7111fa94ec909ce7f2011d62', name: actionBarUtils.Slot.customActionTop, onSlotchange: this.handleSlotChange }), this.renderDefaultActions(), index.h("slot", { key: 'c34bbbe4fee48ff35164dbf13366f1e5c8ac3879', name: actionBarUtils.Slot.customActionBelow, onSlotchange: this.handleSlotChange }))));
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings } = await actionBarUtils.aa(this.el, index.getAssetPath(`.`), true));
    }
    /**
     * @category Lifecycle
     */
    componentDidRender() {
        this.handleExpandTooltip();
    }
    /**
     * @category Lifecycle
     */
    disconnectedCallback() {
        this.actionTooltip?.remove();
    }
    /**
     * handle creation and deletion of the expand tooltip
     * @category Private
     */
    handleExpandTooltip() {
        if (this.expandAction === null) {
            this.expandAction = this.calciteActionBar.shadowRoot?.querySelector("calcite-action") ?? null;
            if (this.expandAction !== null) {
                this.expandAction.addEventListener("mouseenter", () => {
                    // add expand tooltip only iff
                    // a. calcite action bar is collapsed (not expanded)
                    // b. document body have calcite tooltip as its last child
                    //
                    if (!this.calciteActionBar?.expanded &&
                        this.expandAction !== null &&
                        !document.body.contains(this.actionTooltip)) {
                        this.actionTooltip = actionBarUtils.createTooltip(this.strings.expand, this.expandAction);
                        this.actionTooltip.open = true;
                    }
                });
                this.expandAction.addEventListener("mouseleave", () => {
                    if (!this.calciteActionBar?.expanded && this.actionTooltip !== null) {
                        this.actionTooltip = actionBarUtils.destroyTooltip(this.actionTooltip);
                    }
                });
                this.expandAction.addEventListener("click", () => {
                    // destroy tooltip when the user clicks on expand action
                    if (this.calciteActionBar?.expanded && this.actionTooltip !== null) {
                        this.actionTooltip = actionBarUtils.destroyTooltip(this.actionTooltip);
                    }
                });
            }
        }
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};
ArcGISChartsActionBar.style = ArcgisChartsActionBarStyle0;

exports.ArcGISChartsActionBar = ArcGISChartsActionBar;
