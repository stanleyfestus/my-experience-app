import type { EventEmitter } from "../../stencil-public-runtime";
import type { WebChart, WebChartScatterPlotDataItem, CalculatedMinMaxBoundsPayload, LegendItemVisibility, WebChartLegendPositions, WebMapWebChart, WebChartDataFilters, SupportedLayer } from "@arcgis/charts-spec";
import type { NotifyOptions, ScatterPlotLabelFormatCallback, GuideTooltipFormatCallback, AxisLabelFormatCallback, MessageOptions } from "@arcgis/charts-js";
import type { ValidationStatus, SelectionData, ActionModes, SelectionTheme, CursorRange, DataWarningObject, SeriesSymbolsMap } from "@arcgis/charts-shared-utils";
import { ErrorPolicy, LayerFilterChangePolicy, LayerRendererChangePolicy } from "@arcgis/charts-shared-utils";
import type MapView from "@arcgis/core/views/MapView";
import type SceneView from "@arcgis/core/views/SceneView";
import type FeatureLayerView from "@arcgis/core/views/layers/FeatureLayerView";
/**
 * @slot action-bar - A slot for adding charts-action-bar component or calcite-action-bar.
 */
export declare class ArcGISChartsScatterPlot {
    /**
     * A reference to the DOM node inside which chart is created
     * @type {HTMLDivElement | undefined}
     * @category Private
     */
    private chartRef?;
    /**
     * The instance of the rendered chart
     * @type {ChartInstance | undefined}
     * @category Private
     */
    private chart?;
    /**
     * The scatterplot HTML element.
     * @type {HTMLArcgisChartsScatterPlotElement}
     * @element
     */
    el: HTMLArcgisChartsScatterPlotElement;
    /**
     * ArcGIS Web Chart Specification that defines the chart component
     * When the `config` prop is updated, it closes the modal opened via `notify` method.
     * @type {WebChart | WebMapWebChart | undefined}
     * @category Public
     * @default undefined
     */
    config?: WebChart | WebMapWebChart;
    /**
     * Helps identifying an update triggered after a view extent change.
     * This is used to support a selection workflow while the filter by extent mode is enabled.
     * @type {boolean | undefined}
     * @category Private
     * @default undefined
     */
    private viewExtentUpdated?;
    /**
     * Defines the cursor behavior on the chart (zoom, selection...).
     * @category Public
     * @default undefined
     */
    actionMode?: ActionModes;
    /**
     * Sets the cursor range:
     * - CursorRange.MultiAxes: allows to draw a free rectangle
     * - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis
     * - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis
     * - undefined: defaults to a preset behavior according to the chart type and action mode
     * Applies only when the action mode is set to zoom or multi-selection.
     * @type {CursorRange | undefined}
     * @category Public
     * @default undefined
     */
    cursorRange?: CursorRange;
    /**
     * Used to set the legend's position on the chart.
     * @type {WebChartLegendPositions | undefined}
     * @category Public
     * @default undefined
     */
    legendPosition?: WebChartLegendPositions;
    /**
     * When `true`, the legend is visible on the chart.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    legendVisibility?: boolean;
    /**
     * Used to access to the FeatureLayerView instance in order to perform client-side queries.
     * @type {MapView | SceneView | undefined}
     * @category Public
     * @default undefined
     */
    view?: MapView | SceneView;
    /**
     * Used to perform queries.
     * If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
     * @type {SupportedLayer | FeatureLayerView | undefined}
     * @category Public
     * @default undefined
     */
    layer?: FeatureLayerView | SupportedLayer;
    /**
     * When this property is set, it will apply a selection on the chart matching the provided selection.
     * @type {SelectionData | undefined}
     * @category Public
     * @default undefined
     */
    selectionData?: SelectionData;
    /**
     * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart.
     * Only considered for a data source using a feature layer.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    returnSelectionOIDs?: boolean;
    /**
     * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    returnSelectionIndexes?: boolean;
    /**
     * When `true`, all chart elements are filtered based on selection.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    filterBySelection?: boolean;
    /**
     * When `true`, all interactions on the chart are disabled.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    disableInteractions?: boolean;
    /**
     * When `true`, disables the toggling of trend line via the legend items.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    disableTogglingLegendItems?: boolean;
    /**
     * When `true`, charts are built one by one.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    queueChartCreation?: boolean;
    /**
     * When `true`, animations on the chart are enabled.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    useAnimatedCharts?: boolean;
    /**
     * When `true`, the licence watermark is hidden.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    hideLicenceWatermark?: boolean;
    /**
     * When `true, the responsive features are enabled.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    enableResponsiveFeatures?: boolean;
    /**
     * When `true`, a chart will be auto-disposed if a new one is created in the same container.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    autoDisposeChart?: boolean;
    /**
     * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    placeholder?: string;
    /**
     * Used to provide a customized theme for the selected and non selected elements.
     * If no style is provided for the selected elements, a default selection is applied.
     * If no style is provided for the non selected elements, the chart's style is applied.
     * @type {SelectionTheme | undefined}
     * @category Public
     * @default undefined
     */
    selectionTheme?: SelectionTheme;
    /**
     * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers
     * that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed
     * (via chart cursor or scrollbar), to increase performance.
     * This property will be set when the chart is created and cannot be updated after that.
     * It's recommended that this property should only be set to true for small datasets.
     * When left `undefined`, will be treated as `false`.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    ignoreSmoothRenderingLimit?: boolean;
    /**
     * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
     * @type {ScatterPlotLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    tooltipFormatter?: ScatterPlotLabelFormatCallback;
    /**
     * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
     * @type {ScatterPlotLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    dataLabelFormatter?: ScatterPlotLabelFormatCallback;
    /**
     * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
     * @type {GuideTooltipFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    /**
     * Indicates whether to show the Arcgis charts notify panel. False by default
     * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
     * @type {AxisLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    xAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
     * @type {AxisLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    yAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * Used to set the options available to handle specific messages displayed by the chart.
     * @type {MessageOptions | undefined}
     * @category Public
     * @default undefined
     */
    messageOptions?: MessageOptions;
    /**
     * Whether to display an error alert and hide the chart when it can't be created or updated.
     * @type {ErrorPolicy | undefined}
     * @default "throw"
     */
    errorPolicy: ErrorPolicy;
    /**
     * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    hideLoaderAnimation?: boolean;
    /**
     * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
     * @type {WebChartDataFilters | undefined}
     * @category Public
     * @default undefined
     */
    runtimeDataFilters?: WebChartDataFilters;
    /**
     * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
     * @type {LayerFilterChangePolicy | undefined}
     * @category Public
     * @default "refresh"
     */
    layerFilterChangePolicy: LayerFilterChangePolicy;
    /**
     * When `true`, allows the chart to be updated when the layer's renderer changes.
     * Applies on a layer data source and when the color match feature is enabled.
     * Chart will still update its colors when a data update may be triggered at a later point
     * @type {LayerRendererChangePolicy | undefined}
     * @category Public
     * @default "refresh"
     */
    layerRendererChangePolicy: LayerRendererChangePolicy;
    /**
     * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView.
     * By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any
     * geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters).
     * Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
     * @type boolean
     * @category Public
     * @default false
     */
    ignoreViewExtent: boolean;
    /**
     * When `true`, the Arcgis Charts notify panel will be shown.
     * @type {boolean}
     * @category Private
     * @default false
     */
    private showNotifyPanel;
    /**
     * When `true`, the next round of update will be skipped.
     * @type {boolean}
     * @category Private
     * @default false
     */
    private skipNextUpdate;
    /**
     * Hold the processing state of the chart
     * @type {Promise<ChartInstance> | undefined}
     * @category Private
     */
    private chartCreationProcessing?;
    /**
     * The heading text for the  Arcgis charts notify panel.
     * @type {string | undefined}
     * @category Private
     */
    private notifyHeading?;
    /**
     * The message text for the  Arcgis charts notify panel.
     * @type {string | undefined}
     * @category Private
     */
    private notifyMessage?;
    /**
     * The optional parameters for the  Arcgis charts notify panel.
     * @type {PanelOptions | undefined}
     * @category Private
     */
    private notifyOptions?;
    /**
     * Localized common strings
     * @type {CommonStrings}
     * @category Private
     */
    private commonStrings;
    /**
     * Localized error strings
     * @type {ErrorStrings}
     * @category Private
     */
    private errorStrings;
    /**
     * List of props which should not trigger a render when changed
     * @type {string[]}
     * @category Private
     */
    private noRenderProps;
    /**
     * List of props which should trigger a data update
     * @type {string[]}
     * @category Private
     */
    private dataUpdateNeededProps;
    /**
     * List of all the properties updated since the last update. Useful when multiple properties are updated
     * within the same time frame, while some of them require some extra logic to be applied.
     * @type {Set<string>}
     * @category Private
     */
    private updatedProps;
    /**
     * Listener on the layer's definition expression
     * @type {IHandle | undefined}
     * @category Private
     */
    private layerFilterListener;
    /**
     * Listener on the layer's renderer
     * @type {IHandle | undefined}
     * @category Private
     */
    private layerRendererListener;
    /**
     * Listeners used to update the chart's data when the view's extent changes
     * @type {IHandle[] | undefined}
     * @category Private
     */
    private extentChangeListeners;
    /**
     * Function in charge of calling for a chart update.
     * @type {queueAsPromised<void, void> | undefined}
     * @category Private
     */
    private debouncedChartUpdate;
    /**
     * Event triggered when an error occurred that prevents the chart from being created or updated
     * @type {EventEmitter}
     * @event
     */
    arcgisRuntimeError: EventEmitter;
    /**
     * Event triggered when an error occurred while fetching of processing the data for the chart
     * @type {EventEmitter}
     * @event
     */
    arcgisDataProcessError: EventEmitter;
    /**
     * Event triggered once the chart data has been processed
     * @type {EventEmitter<WebChartScatterPlotDataItem>}
     * @event
     */
    arcgisDataProcessComplete: EventEmitter<WebChartScatterPlotDataItem>;
    /**
     * Event triggered once a legend item visibility has been changed
     * @type {EventEmitter<LegendItemVisibility>}
     * @event
     */
    arcgisLegendItemVisibilityChange: EventEmitter<LegendItemVisibility>;
    /**
     * Event triggered once the chart is updated
     * @type {EventEmitter<ValidationStatus>}
     * @event
     */
    arcgisUpdateComplete: EventEmitter<ValidationStatus>;
    /**
     * Event triggered when an error is detected with the data set
     * @type {EventEmitter<DataWarningObject>}
     * @event
     */
    arcgisBadDataWarningRaise: EventEmitter<DataWarningObject>;
    /**
     * Event triggered once the chart series color have been assigned
     * @type {EventEmitter<SeriesSymbolsMap>}
     * @event
     */
    arcgisSeriesColorChange: EventEmitter<SeriesSymbolsMap>;
    /**
     * Event triggered once the chart axes min/max values are computed
     * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
     * @event
     */
    arcgisAxesMinMaxChange: EventEmitter<CalculatedMinMaxBoundsPayload[]>;
    /**
     * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a marker
     * @type {EventEmitter<SelectionData>}
     * @event
     */
    arcgisSelectionComplete: EventEmitter<SelectionData>;
    /**
     * Listener on event coming from the chart container indicating the chart data has been processed.
     * emitting an event carrying the chart data, the trendline points and the r2 statistic
     * @param {CustomEvent<WebChartScatterPlotDataItem>} event The event carrying the chart data processed by the core
     * @category Custom-event handler
     */
    handleChartOutputDataChange(event: CustomEvent<WebChartScatterPlotDataItem>): void;
    /**
     * Listener on event coming from the chart container indicating a legend item visibility has been changed.
     * emitting an event carrying the item id and its new visibility
     * @param {CustomEvent} event The event carrying the item id and its new visibility
     * @category Custom-event handler
     */
    handleLegendItemVisibilityChanged(event: CustomEvent): void;
    /**
     * Listener on event coming from the chart container indicating a chart is updated
     * @param {CustomEvent} event The event carrying the ValidationStatus
     * @category Custom-event handler
     */
    handleUpdateCompleted(event: CustomEvent): void;
    /**
     * Listener on event coming from the chart container indicating an error in the data set
     * @param {CustomEvent} event The event carrying details about the error
     * @category Custom-event handler
     */
    handleBadDataWarningRaise(event: CustomEvent): void;
    /**
     * Listener on event coming from the chart container indicating the chart series color
     * have been assigned
     * @param {CustomEvent<SeriesSymbolsMap>} event The event carrying the series colors
     * @category Custom-event handler
     */
    handleSeriesColorsChange(event: CustomEvent<SeriesSymbolsMap>): void;
    /**
     * Listener on event coming from the chart container indicating the chart axes
     * min and max values have been computed
     * @param {CustomEvent} event The event carrying the axes min and max
     * @category Custom-event handler
     */
    handleAxesMinMaxChange(event: CustomEvent): void;
    /**
     * Listener on event coming from the chart container
     * on selection of one or multiple markers
     * @param {CustomEvent<SelectionData>} event The event carrying the selected elements
     * @category Custom-event handler
     */
    handleSelection(event: CustomEvent<SelectionData>): void;
    /**
     * Listener on event coming from the chart container
     * when more elements than the authorized limit have been selected.
     * @category Custom-event handler
     */
    handleTooManySelectedElements(): void;
    /**
     * Listener on event coming from the closure of a calcite-alert.
     * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.
     * @param {CustomEvent} event The event carrying the alert closure
     * @category Custom-event handler
     */
    handleAlertClosed(event: CustomEvent): void;
    /**
     * Called every time the view prop is updated.
     * Add a listener to it to keep the chart in sync.
     * @param {MapView | SceneView | undefined} newView The new view
     * @param {MapView | SceneView | undefined} oldView The old view
     * @category Watch handler
     */
    viewChange(newView: MapView | SceneView | undefined, oldView: MapView | SceneView | undefined): Promise<void>;
    /**
     * Called every time the layer prop is updated.
     * Adds listeners to it to keep the chart in sync.
     * @category Watch handler
     */
    layerChange(): Promise<void>;
    /**
     * Called every time the `runtimeDataFilters` prop is updated.
     * The property name is added to the `updatedProps` list in order to trigger later a data update.
     * The mechanism is also done by `componentShouldUpdate` but doesn't always work when multiple properties are
     * updated at the same time (e.g. only 1 `componentShouldUpdate` is called while 2 properties were changed).
     * For that reason all the properties implying a data update (see this.dataUpdateNeededProps) need a @Watch
     * to ensure the chart update to consider them properly.
     * Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6095
     * @category Watch handler
     */
    runtimeDataFiltersChange(): Promise<void>;
    /**
     * Called every time the disableInteractions prop is updated.
     * Helps setting a css class on the chart to either enable or disable the chart interactions.
     * @param {boolean} newValue The new value of the disableInteractions prop
     */
    disableInteractionsChange(newValue: boolean): Promise<void>;
    /**
     * Called every time the position of the legend is updated
     * @param {WebChartLegendPositions} newLegendPosition The new position of the legend
     * @category Watch handler
     */
    legendPositionChange(newLegendPosition: WebChartLegendPositions): void;
    /**
     * Called every time the visibility of the legend is updated
     * @param {boolean} newLegendVisibility The new visibility of the legend
     * @category Watch handler
     */
    legendVisibilityChange(newLegendVisibility: boolean): void;
    /**
     * Called every time the filter by selection is updated.
     * Resets the axes min/max.
     * @category Watch handler
     */
    filterBySelectionChanged(): void;
    /**
     * Called every time when the property `layerFilterChangePolicy` changes
     * Adds a listener on the layer's filter when the property is `true`, removes it otherwise.
     * @param {LayerFilterChangePolicy | undefined} newRefreshOnLayerFilter The new value of refresh on layer filter
     * @category Watch handler
     */
    layerFilterChangePolicyCallBack(newRefreshOnLayerFilter: LayerFilterChangePolicy | undefined): void;
    /**
     * Called every time when the property `layerRendererChangePolicy` changes
     * Adds a listener on the layer's renderer when the property is `true`, removes it otherwise.
     * @param {LayerRendererChangePolicy | undefined} newRefreshOnLayerRenderer The new value of refresh on layer renderer
     * @category Watch handler
     */
    layerRendererChangePolicyCallBack(newRefreshOnLayerRenderer: LayerRendererChangePolicy | undefined): void;
    /**
     * Notify method allows passing external messages to the chart component.
     * It can be used to pass validation or information messages.
     * In a situation where a config update is overriding your notification modal,
     * consider waiting for the `arcgisUpdateComplete` event.
     * @param {string | undefined} [message] The message to display
     * @param {string | undefined} [heading] The heading of the message
     * @param {NotifyOptions | undefined} [options] The options to apply to the message
     * @category Public
     */
    notify(message?: string, heading?: string, options?: NotifyOptions): Promise<void>;
    /**
     * Triggers an alert to display an error message.
     * @category Public
     * @param {string | undefined} [errorMessage]
     */
    errorAlert(errorMessage?: string): Promise<void>;
    /**
     * Resets the chart zoom to bring it back to full extent
     * @category Public
     */
    resetZoom(): Promise<void>;
    /**
     * Switches the selection on the chart.
     * @category Public
     */
    switchSelection(): Promise<void>;
    /**
     * Clears all selection on the chart.
     * @category Public
     */
    clearSelection(): Promise<void>;
    /**
     * Re-render the chart.
     * @param {boolean | undefined} [props.updateData] Indicates whether to fetch new data. Default: true.
     * @param {boolean | undefined} [props.updateExtent] Indicates whether the view's extent is to update. Default: false.
     * @param {boolean | undefined} [props.resetAxesBounds] Option to reset the axes bounds along with the refresh.
     * @category Public
     */
    refresh(props?: {
        updateData?: boolean;
        resetAxesBounds?: boolean;
        updateExtent?: boolean;
    }): Promise<void>;
    /**
     * Prevents render for noRenderProps
     * @category Lifecycle
     */
    componentShouldUpdate(...args: any[]): boolean;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentDidLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentDidUpdate(): Promise<void>;
    /**
     * Called when the component is removed from the DOM.
     * @category Lifecycle
     */
    disconnectedCallback(): Promise<void>;
    /**
     * @category Lifecycle
     */
    render(): HTMLDivElement;
    /**
     * Adds the listener to listen to the layer definitionExpression and renderer changes
     * @category Private
     */
    private addLayerListeners;
    /**
     * Adds the listener to listen to the layer definitionExpression changes
     * @category Private
     */
    private setLayerFilterListener;
    /**
     * Adds a listener to listen to the layer's renderer changes when color match is enabled for a layer data source
     * @category Private
     */
    private setLayerRendererListener;
    /**
     * Adds a listener to listen to the view's extent change
     * @category Private
     */
    private setExtentChangeListener;
    /**
     * Removes the listeners added to listen to the layer definitionExpression and renderer changes
     * @category Private
     */
    private removeLayerListeners;
    /**
     * Removes the layer filter listener when layer definitionExpression changes
     * @category Private
     */
    private removeLayerFilterListener;
    /**
     * Removes the layer renderer listener when layer renderer changes
     * @category Private
     */
    private removeLayerRendererListener;
    /**
     * Removes the listeners added to listen to the view's extent change
     * @category Private
     */
    private removeExtentChangeListeners;
    /**
     * If the chart config version is newer than the current one, display a message in a popup.
     * @category Private
     */
    private checkForIncompatibleChartVersion;
    /**
     * creates arcgis chart instance
     * @param {boolean} firstCreation Indicates whether it's the first time the component is created
     * @category Private
     */
    private createChartInstance;
}
