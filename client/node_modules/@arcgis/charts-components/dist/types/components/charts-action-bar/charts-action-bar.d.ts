import type { EventEmitter } from "../../stencil-public-runtime";
import type { ActionBarHideActionsProps } from "@arcgis/charts-shared-utils";
import { ActionModes, ActionToggle, ActionState } from "@arcgis/charts-shared-utils";
import type { DefaultActionSelectPayload } from "../../interfaces";
/**
 * @slot custom-action-top - A slot for adding custom `calcite-action` to the top of the default actions.
 * @slot custom-action-below - A slot for adding custom `calcite-action` to the bottom of the default actions.
 */
export declare class ArcGISChartsActionBar {
    /**
     * When `true`, overrides the individual settings for each action to instead force disable them all.
     * @category Public
     * @type {boolean}
     * @default false
     */
    forceDisableActions: boolean;
    /**
     * When active, the legend action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    legendToggle: ActionToggle;
    /**
     * When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    legendState: ActionState;
    /**
     * Custom title for the legend action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    legendTitle?: string | undefined;
    /**
     * When active, the rotate chart action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    rotateChartToggle: ActionToggle;
    /**
     * When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    rotateChartState: ActionState;
    /**
     * Custom title for the rotate chart action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    rotateChartTitle?: string | undefined;
    /**
     * When active, the filter by selection action is highlighted.
     * @category Public
     * type {ActionToggle}
     * @default "inactive"
     */
    filterBySelectionToggle: ActionToggle;
    /**
     * When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    filterBySelectionState: ActionState;
    /**
     * Custom title for the filter by selection action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    filterBySelectionTitle?: string | undefined;
    /**
     * When active, the filter by extent action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    filterByExtentToggle: ActionToggle;
    /**
     * When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    filterByExtentState: ActionState;
    /**
     * Custom title for the filter by extent action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    filterByExtentTitle?: string | undefined;
    /**
     * Action bar selection mode. Defines which selection mode the slotted action bar should use.
     * @category Public
     * @type {Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"> | undefined}
     * @default "multiSelectionWithCtrlKey"
     */
    actionBarSelectionMode?: Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey">;
    /**
     * When active, the selection action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    selectionToggle: ActionToggle;
    /**
     * When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    selectionState: ActionState;
    /**
     * Custom title for the selection action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    selectionTitle?: string | undefined;
    /**
     * When active, the zoom action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    zoomToggle: ActionToggle;
    /**
     * When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    zoomState: ActionState;
    /**
     * Custom title for the zoom action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    zoomTitle?: string | undefined;
    /**
     * When active, the full extent action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    fullExtentToggle: ActionToggle;
    /**
     * When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    fullExtentState: ActionState;
    /**
     * Custom title for the full extent action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    fullExtentTitle?: string | undefined;
    /**
     * When active, the clear selection action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    clearSelectionToggle: ActionToggle;
    /**
     * When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    clearSelectionState: ActionState;
    /**
     * Custom title for the clear selection action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    clearSelectionTitle?: string | undefined;
    /**
     * When active, the switch selection action is highlighted.
     * @category Public
     * @type {ActionToggle}
     * @default "inactive"
     */
    switchSelectionToggle: ActionToggle;
    /**
     * When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.
     * @category Public
     * @type {ActionState}
     * @default "enabled"
     */
    switchSelectionState: ActionState;
    /**
     * Custom title for the switch selection action.
     * @category Public
     * @type {string | undefined}
     * @default undefined
     */
    switchSelectionTitle?: string | undefined;
    /**
     * When `true`, the action bar is expanded.
     * @category Public
     * @type {boolean}
     * @default false
     */
    expanded: boolean;
    /**
     * Holds properties that determine whether to hide certain action or not in the action bar.
     * @category Public
     * @type {ActionBarHideActionsProps | undefined}
     * @default undefined
     */
    actionBarHideActionsProps?: ActionBarHideActionsProps;
    /**
     * Tooltip shown upon hovering an action.
     * @category Private
     * @type {HTMLCalciteTooltipElement | null}
     * @default null
     */
    private actionTooltip;
    /**
     * Event triggered once a default action is selected
     * @type {EventEmitter<DefaultActionSelectPayload>}
     * @event
     */
    arcgisDefaultActionSelect: EventEmitter<DefaultActionSelectPayload>;
    /**
     * Event triggered once action bar expand is toggled
     * @type {EventEmitter<boolean>}
     * @event
     */
    arcgisActionBarToggle: EventEmitter<boolean>;
    /**
     * @type {HTMLArcgisChartsActionBarElement}
     * @element
     */
    el: HTMLArcgisChartsActionBarElement;
    /**
     * Element reference for calcite action bar
     * @type {HTMLCalciteActionBarElement}
     * @category Private
     */
    private calciteActionBar;
    /**
     * Element reference for expand action in calciteActionBar
     * @type {HTMLCalciteActionElement | null}
     * @category Private
     * @default null
     */
    private expandAction;
    /**
     * Localized string
     * @type {typeof import("./t9n/charts-action-bar.t9n.en.json")}
     * @category Private
     */
    private strings;
    /**
     * Handler for default action click event
     * @category Event handler
     * @param {MouseEvent} e Event payload from click
     */
    private handleDefaultActionClick;
    /**
     * Renders default actions
     * @category Private
     */
    private renderDefaultActions;
    /**
     * Handler for calciteActionBarToggle event
     * @category Event handler
     */
    private handleCalciteActionBarToggle;
    /**
     * Handler for mouseOver event that creates a tooltip for the hovered action
     * @category Event handler
     * @param {MouseEvent} e Event payload from mouse over
     */
    private handleMouseOver;
    /**
     * Handler for mouseOut event that destroys current action tooltip
     * @category Event handler
     */
    private handleMouseOut;
    /**
     * Handler for `slotchange` event to set custom action event handlers dynamically
     * @category Event handler
     * @param {Event} e Event payload from slot change
     */
    private handleSlotChange;
    /**
     * Sets whether text is expanded on all custom actions
     * @category Private
     */
    private setCustomActionsExpanded;
    /**
     * @category Lifecycle
     */
    render(): HTMLArcgisChartsActionBarElement;
    /**
     * @category Lifecycle
     */
    componentWillLoad(): Promise<void>;
    /**
     * @category Lifecycle
     */
    componentDidRender(): void;
    /**
     * @category Lifecycle
     */
    disconnectedCallback(): void;
    /**
     * handle creation and deletion of the expand tooltip
     * @category Private
     */
    private handleExpandTooltip;
}
