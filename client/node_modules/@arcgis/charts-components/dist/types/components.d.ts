/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ActionBarHideActionsProps, ActionModes, ActionState, ActionToggle, ChartElementLimit, CursorRange, DataWarningObject, ErrorPolicy, LayerFilterChangePolicy, LayerRendererChangePolicy, PieSlicesSymbols, SelectionData, SelectionTheme, SeriesSymbolsMap, ValidationStatus } from "@arcgis/charts-shared-utils";
import { DefaultActionSelectPayload, NoRenderPropChangePayload } from "./interfaces";
import { CalculatedMinMaxBoundsPayload, LegendItemVisibility, SupportedLayer, WebChart, WebChartDataFilters, WebChartDataItem, WebChartGenericDataItem, WebChartHistogramDataItem, WebChartLegendPositions, WebChartScatterPlotDataItem, WebGaugeChart, WebMapWebChart, WebMapWebGaugeChart } from "@arcgis/charts-spec";
import { AxisLabelFormatCallback, BarAndLineDataLabelFormatCallback, BarAndLineTooltipFormatCallback, BoxPlotTooltipFormatCallback, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, HistogramLabelFormatCallback, MessageOptions, NotifyOptions, PieChartLabelFormatCallback, PieChartLegendValueLabelFormatCallback, PreRenderCallback, ScatterPlotLabelFormatCallback } from "@arcgis/charts-js";
import { MissingSplitBySeriesProps } from "./utils/interfaces";
import { AxisLabelFormatCallback as AxisLabelFormatCallback1, GuideTooltipFormatCallback as GuideTooltipFormatCallback1, MessageOptions as MessageOptions1, NotifyOptions as NotifyOptions1, ScatterPlotLabelFormatCallback as ScatterPlotLabelFormatCallback1 } from "@arcgis/charts-js-next";
export { ActionBarHideActionsProps, ActionModes, ActionState, ActionToggle, ChartElementLimit, CursorRange, DataWarningObject, ErrorPolicy, LayerFilterChangePolicy, LayerRendererChangePolicy, PieSlicesSymbols, SelectionData, SelectionTheme, SeriesSymbolsMap, ValidationStatus } from "@arcgis/charts-shared-utils";
export { DefaultActionSelectPayload, NoRenderPropChangePayload } from "./interfaces";
export { CalculatedMinMaxBoundsPayload, LegendItemVisibility, SupportedLayer, WebChart, WebChartDataFilters, WebChartDataItem, WebChartGenericDataItem, WebChartHistogramDataItem, WebChartLegendPositions, WebChartScatterPlotDataItem, WebGaugeChart, WebMapWebChart, WebMapWebGaugeChart } from "@arcgis/charts-spec";
export { AxisLabelFormatCallback, BarAndLineDataLabelFormatCallback, BarAndLineTooltipFormatCallback, BoxPlotTooltipFormatCallback, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, HistogramLabelFormatCallback, MessageOptions, NotifyOptions, PieChartLabelFormatCallback, PieChartLegendValueLabelFormatCallback, PreRenderCallback, ScatterPlotLabelFormatCallback } from "@arcgis/charts-js";
export { MissingSplitBySeriesProps } from "./utils/interfaces";
export { AxisLabelFormatCallback as AxisLabelFormatCallback1, GuideTooltipFormatCallback as GuideTooltipFormatCallback1, MessageOptions as MessageOptions1, NotifyOptions as NotifyOptions1, ScatterPlotLabelFormatCallback as ScatterPlotLabelFormatCallback1 } from "@arcgis/charts-js-next";
export namespace Components {
    interface ArcgisChartsActionBar {
        /**
          * Holds properties that determine whether to hide certain action or not in the action bar.
          * @category Public
          * @type {ActionBarHideActionsProps | undefined}
          * @default undefined
         */
        "actionBarHideActionsProps"?: ActionBarHideActionsProps;
        /**
          * Action bar selection mode. Defines which selection mode the slotted action bar should use.
          * @category Public
          * @type {Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"> | undefined}
          * @default "multiSelectionWithCtrlKey"
         */
        "actionBarSelectionMode"?: Extract<
    ActionModes,
    "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"
  >;
        /**
          * When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "clearSelectionState": ActionState;
        /**
          * Custom title for the clear selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "clearSelectionTitle"?: string | undefined;
        /**
          * When active, the clear selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "clearSelectionToggle": ActionToggle;
        /**
          * When `true`, the action bar is expanded.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "expanded": boolean;
        /**
          * When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterByExtentState": ActionState;
        /**
          * Custom title for the filter by extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterByExtentTitle"?: string | undefined;
        /**
          * When active, the filter by extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "filterByExtentToggle": ActionToggle;
        /**
          * When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterBySelectionState": ActionState;
        /**
          * Custom title for the filter by selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterBySelectionTitle"?: string | undefined;
        /**
          * When active, the filter by selection action is highlighted.
          * @category Public type {ActionToggle}
          * @default "inactive"
         */
        "filterBySelectionToggle": ActionToggle;
        /**
          * When `true`, overrides the individual settings for each action to instead force disable them all.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "forceDisableActions": boolean;
        /**
          * When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "fullExtentState": ActionState;
        /**
          * Custom title for the full extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "fullExtentTitle"?: string | undefined;
        /**
          * When active, the full extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "fullExtentToggle": ActionToggle;
        /**
          * When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "legendState": ActionState;
        /**
          * Custom title for the legend action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "legendTitle"?: string | undefined;
        /**
          * When active, the legend action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "legendToggle": ActionToggle;
        /**
          * When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "rotateChartState": ActionState;
        /**
          * Custom title for the rotate chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "rotateChartTitle"?: string | undefined;
        /**
          * When active, the rotate chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "rotateChartToggle": ActionToggle;
        /**
          * When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "selectionState": ActionState;
        /**
          * Custom title for the selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "selectionTitle"?: string | undefined;
        /**
          * When active, the selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "selectionToggle": ActionToggle;
        /**
          * When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "switchSelectionState": ActionState;
        /**
          * Custom title for the switch selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "switchSelectionTitle"?: string | undefined;
        /**
          * When active, the switch selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "switchSelectionToggle": ActionToggle;
        /**
          * When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "zoomState": ActionState;
        /**
          * Custom title for the zoom action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "zoomTitle"?: string | undefined;
        /**
          * When active, the zoom action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "zoomToggle": ActionToggle;
    }
    interface ArcgisChartsBarChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart, and the legend, if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @category Public
          * @param message The message to display in the notification panel.
          * @param heading The heading to display in the notification panel.
          * @param options The options to apply to the notification panel.
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsBarChartBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to apply to the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions1) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * Used to set a custom time zone for the chart.
          * @type {__esri.MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: __esri.MapView["timeZone"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {__esri.MapView | __esri.SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: __esri.MapView | __esri.SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
    interface ArcgisChartsBarLineChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars and markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to customize the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol or `lineSymbol` will be applied to the new bar or line series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsBoxPlot {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display in the notify panel
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a SupportedLayer and the `view` property is provided, it will be used to access the FeatureLayerView instance in order to perform client-side queries.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display in the notify panel
          * @param heading The heading to display in the notify panel
          * @param options The options to apply to the notify panel
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BoxPlotTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BoxPlotTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsGauge {
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * A callback function used to format the axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "axisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * Used to customize the maximum number of features allowed on the feature-based gauge. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config from information extracted from the data for instance.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebGaugeChart | WebMapWebGaugeChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebGaugeChart | WebMapWebGaugeChart;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * The index of the feature to be rendered. Only used when the gauge is a feature-based gauge.
          * @type {number | undefined}
          * @category Public
          * @default undefined
         */
        "featureIndex"?: number;
        /**
          * A callback function used to format the inner label. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GaugeInnerLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "gaugeInnerLabelFormatter"?: GaugeInnerLabelFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @type {string | undefined} [message] The message to display
          * @type {string | undefined} [heading] The heading of the message
          * @type {NotifyOptions | undefined} [options] The options to customize the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
    }
    interface ArcgisChartsHistogram {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {HistogramLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: HistogramLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, toggling the overlays via the legend items is disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to apply to the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {HistogramLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: HistogramLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsLineChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {boolean | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to customize the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the properties `lineSymbol` and `markerSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsLineChartBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {boolean | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to apply to the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions1) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the properties `lineSymbol` and `markerSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
    interface ArcgisChartsPieChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of slices allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limit.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config.series[0].slices property from instance.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such. The series properties `displayNumericValueOnDataLabel` and `displayPercentageOnDataLabel` will be ignored if a callback is provided.
          * @type {PieChartLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: PieChartLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of Pie slices via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage The error message to display
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * A callback function used to format the legend value labels. If the returned string contains HTML tags they will be interpreted as such. If provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.
          * @type {PieChartLegendValueLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "legendValueLabelFormatter"?: PieChartLegendValueLabelFormatCallback;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to customize the notification
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such. The series properties `displayNumericValueOnTooltip` and `displayPercentageOnTooltip` will be ignored if a callback is provided.
          * @type {PieChartLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: PieChartLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
    }
    interface ArcgisChartsScatterPlot {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ScatterPlotLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of trend line via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to apply to the message
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ScatterPlotLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsScatterPlotBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Clears all selection on the chart.
          * @category Public
         */
        "clearSelection": () => Promise<void>;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ScatterPlotLabelFormatCallback1;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of trend line via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Triggers an alert to display an error message.
          * @category Public
          * @param errorMessage
         */
        "errorAlert": (errorMessage?: string) => Promise<void>;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy": ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent": boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy": LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy": LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Notify method allows passing external messages to the chart component. It can be used to pass validation or information messages. In a situation where a config update is overriding your notification modal, consider waiting for the `arcgisUpdateComplete` event.
          * @param message The message to display
          * @param heading The heading of the message
          * @param options The options to customize the message
          * @category Public
         */
        "notify": (message?: string, heading?: string, options?: NotifyOptions1) => Promise<void>;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * Re-render the chart.
          * @param props.updateData Indicates whether to fetch new data. Default: true.
          * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
          * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh.
          * @category Public
         */
        "refresh": (props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }) => Promise<void>;
        /**
          * Resets the chart zoom to bring it back to full extent
          * @category Public
         */
        "resetZoom": () => Promise<void>;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * Switches the selection on the chart.
          * @category Public
         */
        "switchSelection": () => Promise<void>;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ScatterPlotLabelFormatCallback1;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
}
export interface ArcgisChartsActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsActionBarElement;
}
export interface ArcgisChartsBarChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsBarChartElement;
}
export interface ArcgisChartsBarChartBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsBarChartBetaElement;
}
export interface ArcgisChartsBarLineChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsBarLineChartElement;
}
export interface ArcgisChartsBoxPlotCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsBoxPlotElement;
}
export interface ArcgisChartsGaugeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsGaugeElement;
}
export interface ArcgisChartsHistogramCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsHistogramElement;
}
export interface ArcgisChartsLineChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsLineChartElement;
}
export interface ArcgisChartsLineChartBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsLineChartBetaElement;
}
export interface ArcgisChartsPieChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsPieChartElement;
}
export interface ArcgisChartsScatterPlotCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsScatterPlotElement;
}
export interface ArcgisChartsScatterPlotBetaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLArcgisChartsScatterPlotBetaElement;
}
declare global {
    interface HTMLArcgisChartsActionBarElementEventMap {
        "arcgisDefaultActionSelect": DefaultActionSelectPayload;
        "arcgisActionBarToggle": boolean;
    }
    interface HTMLArcgisChartsActionBarElement extends Components.ArcgisChartsActionBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsActionBarElement: {
        prototype: HTMLArcgisChartsActionBarElement;
        new (): HTMLArcgisChartsActionBarElement;
    };
    interface HTMLArcgisChartsBarChartElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsBarChartElement extends Components.ArcgisChartsBarChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsBarChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarChartElement, ev: ArcgisChartsBarChartCustomEvent<HTMLArcgisChartsBarChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsBarChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarChartElement, ev: ArcgisChartsBarChartCustomEvent<HTMLArcgisChartsBarChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsBarChartElement: {
        prototype: HTMLArcgisChartsBarChartElement;
        new (): HTMLArcgisChartsBarChartElement;
    };
    interface HTMLArcgisChartsBarChartBetaElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsBarChartBetaElement extends Components.ArcgisChartsBarChartBeta, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsBarChartBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarChartBetaElement, ev: ArcgisChartsBarChartBetaCustomEvent<HTMLArcgisChartsBarChartBetaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsBarChartBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarChartBetaElement, ev: ArcgisChartsBarChartBetaCustomEvent<HTMLArcgisChartsBarChartBetaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsBarChartBetaElement: {
        prototype: HTMLArcgisChartsBarChartBetaElement;
        new (): HTMLArcgisChartsBarChartBetaElement;
    };
    interface HTMLArcgisChartsBarLineChartElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsBarLineChartElement extends Components.ArcgisChartsBarLineChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsBarLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarLineChartElement, ev: ArcgisChartsBarLineChartCustomEvent<HTMLArcgisChartsBarLineChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsBarLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBarLineChartElement, ev: ArcgisChartsBarLineChartCustomEvent<HTMLArcgisChartsBarLineChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsBarLineChartElement: {
        prototype: HTMLArcgisChartsBarLineChartElement;
        new (): HTMLArcgisChartsBarLineChartElement;
    };
    interface HTMLArcgisChartsBoxPlotElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsBoxPlotElement extends Components.ArcgisChartsBoxPlot, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsBoxPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBoxPlotElement, ev: ArcgisChartsBoxPlotCustomEvent<HTMLArcgisChartsBoxPlotElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsBoxPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsBoxPlotElement, ev: ArcgisChartsBoxPlotCustomEvent<HTMLArcgisChartsBoxPlotElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsBoxPlotElement: {
        prototype: HTMLArcgisChartsBoxPlotElement;
        new (): HTMLArcgisChartsBoxPlotElement;
    };
    interface HTMLArcgisChartsGaugeElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
    }
    interface HTMLArcgisChartsGaugeElement extends Components.ArcgisChartsGauge, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsGaugeElementEventMap>(type: K, listener: (this: HTMLArcgisChartsGaugeElement, ev: ArcgisChartsGaugeCustomEvent<HTMLArcgisChartsGaugeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsGaugeElementEventMap>(type: K, listener: (this: HTMLArcgisChartsGaugeElement, ev: ArcgisChartsGaugeCustomEvent<HTMLArcgisChartsGaugeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsGaugeElement: {
        prototype: HTMLArcgisChartsGaugeElement;
        new (): HTMLArcgisChartsGaugeElement;
    };
    interface HTMLArcgisChartsHistogramElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartHistogramDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
    }
    interface HTMLArcgisChartsHistogramElement extends Components.ArcgisChartsHistogram, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisChartsHistogramElement, ev: ArcgisChartsHistogramCustomEvent<HTMLArcgisChartsHistogramElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsHistogramElementEventMap>(type: K, listener: (this: HTMLArcgisChartsHistogramElement, ev: ArcgisChartsHistogramCustomEvent<HTMLArcgisChartsHistogramElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsHistogramElement: {
        prototype: HTMLArcgisChartsHistogramElement;
        new (): HTMLArcgisChartsHistogramElement;
    };
    interface HTMLArcgisChartsLineChartElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsLineChartElement extends Components.ArcgisChartsLineChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsLineChartElement, ev: ArcgisChartsLineChartCustomEvent<HTMLArcgisChartsLineChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsLineChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsLineChartElement, ev: ArcgisChartsLineChartCustomEvent<HTMLArcgisChartsLineChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsLineChartElement: {
        prototype: HTMLArcgisChartsLineChartElement;
        new (): HTMLArcgisChartsLineChartElement;
    };
    interface HTMLArcgisChartsLineChartBetaElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
        "arcgisNoRenderPropChange": NoRenderPropChangePayload;
        "arcgisSeriesOrder": string[];
    }
    interface HTMLArcgisChartsLineChartBetaElement extends Components.ArcgisChartsLineChartBeta, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsLineChartBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsLineChartBetaElement, ev: ArcgisChartsLineChartBetaCustomEvent<HTMLArcgisChartsLineChartBetaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsLineChartBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsLineChartBetaElement, ev: ArcgisChartsLineChartBetaCustomEvent<HTMLArcgisChartsLineChartBetaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsLineChartBetaElement: {
        prototype: HTMLArcgisChartsLineChartBetaElement;
        new (): HTMLArcgisChartsLineChartBetaElement;
    };
    interface HTMLArcgisChartsPieChartElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartGenericDataItem;
        "arcgisDataFetchComplete": WebChartDataItem[];
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": PieSlicesSymbols;
        "arcgisSelectionComplete": SelectionData;
    }
    interface HTMLArcgisChartsPieChartElement extends Components.ArcgisChartsPieChart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsPieChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsPieChartElement, ev: ArcgisChartsPieChartCustomEvent<HTMLArcgisChartsPieChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsPieChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartsPieChartElement, ev: ArcgisChartsPieChartCustomEvent<HTMLArcgisChartsPieChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsPieChartElement: {
        prototype: HTMLArcgisChartsPieChartElement;
        new (): HTMLArcgisChartsPieChartElement;
    };
    interface HTMLArcgisChartsScatterPlotElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartScatterPlotDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
    }
    interface HTMLArcgisChartsScatterPlotElement extends Components.ArcgisChartsScatterPlot, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsScatterPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsScatterPlotElement, ev: ArcgisChartsScatterPlotCustomEvent<HTMLArcgisChartsScatterPlotElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsScatterPlotElementEventMap>(type: K, listener: (this: HTMLArcgisChartsScatterPlotElement, ev: ArcgisChartsScatterPlotCustomEvent<HTMLArcgisChartsScatterPlotElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsScatterPlotElement: {
        prototype: HTMLArcgisChartsScatterPlotElement;
        new (): HTMLArcgisChartsScatterPlotElement;
    };
    interface HTMLArcgisChartsScatterPlotBetaElementEventMap {
        "arcgisRuntimeError": any;
        "arcgisDataProcessError": any;
        "arcgisDataProcessComplete": WebChartScatterPlotDataItem;
        "arcgisLegendItemVisibilityChange": LegendItemVisibility;
        "arcgisUpdateComplete": ValidationStatus;
        "arcgisBadDataWarningRaise": DataWarningObject;
        "arcgisSeriesColorChange": SeriesSymbolsMap;
        "arcgisAxesMinMaxChange": CalculatedMinMaxBoundsPayload[];
        "arcgisSelectionComplete": SelectionData;
    }
    interface HTMLArcgisChartsScatterPlotBetaElement extends Components.ArcgisChartsScatterPlotBeta, HTMLStencilElement {
        addEventListener<K extends keyof HTMLArcgisChartsScatterPlotBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsScatterPlotBetaElement, ev: ArcgisChartsScatterPlotBetaCustomEvent<HTMLArcgisChartsScatterPlotBetaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLArcgisChartsScatterPlotBetaElementEventMap>(type: K, listener: (this: HTMLArcgisChartsScatterPlotBetaElement, ev: ArcgisChartsScatterPlotBetaCustomEvent<HTMLArcgisChartsScatterPlotBetaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLArcgisChartsScatterPlotBetaElement: {
        prototype: HTMLArcgisChartsScatterPlotBetaElement;
        new (): HTMLArcgisChartsScatterPlotBetaElement;
    };
    interface HTMLElementTagNameMap {
        "arcgis-charts-action-bar": HTMLArcgisChartsActionBarElement;
        "arcgis-charts-bar-chart": HTMLArcgisChartsBarChartElement;
        "arcgis-charts-bar-chart-beta": HTMLArcgisChartsBarChartBetaElement;
        "arcgis-charts-bar-line-chart": HTMLArcgisChartsBarLineChartElement;
        "arcgis-charts-box-plot": HTMLArcgisChartsBoxPlotElement;
        "arcgis-charts-gauge": HTMLArcgisChartsGaugeElement;
        "arcgis-charts-histogram": HTMLArcgisChartsHistogramElement;
        "arcgis-charts-line-chart": HTMLArcgisChartsLineChartElement;
        "arcgis-charts-line-chart-beta": HTMLArcgisChartsLineChartBetaElement;
        "arcgis-charts-pie-chart": HTMLArcgisChartsPieChartElement;
        "arcgis-charts-scatter-plot": HTMLArcgisChartsScatterPlotElement;
        "arcgis-charts-scatter-plot-beta": HTMLArcgisChartsScatterPlotBetaElement;
    }
}
declare namespace LocalJSX {
    interface ArcgisChartsActionBar {
        /**
          * Holds properties that determine whether to hide certain action or not in the action bar.
          * @category Public
          * @type {ActionBarHideActionsProps | undefined}
          * @default undefined
         */
        "actionBarHideActionsProps"?: ActionBarHideActionsProps;
        /**
          * Action bar selection mode. Defines which selection mode the slotted action bar should use.
          * @category Public
          * @type {Extract<ActionModes, "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"> | undefined}
          * @default "multiSelectionWithCtrlKey"
         */
        "actionBarSelectionMode"?: Extract<
    ActionModes,
    "monoSelection" | "multiSelection" | "multiSelectionWithCtrlKey"
  >;
        /**
          * When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "clearSelectionState"?: ActionState;
        /**
          * Custom title for the clear selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "clearSelectionTitle"?: string | undefined;
        /**
          * When active, the clear selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "clearSelectionToggle"?: ActionToggle;
        /**
          * When `true`, the action bar is expanded.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "expanded"?: boolean;
        /**
          * When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterByExtentState"?: ActionState;
        /**
          * Custom title for the filter by extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterByExtentTitle"?: string | undefined;
        /**
          * When active, the filter by extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "filterByExtentToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "filterBySelectionState"?: ActionState;
        /**
          * Custom title for the filter by selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "filterBySelectionTitle"?: string | undefined;
        /**
          * When active, the filter by selection action is highlighted.
          * @category Public type {ActionToggle}
          * @default "inactive"
         */
        "filterBySelectionToggle"?: ActionToggle;
        /**
          * When `true`, overrides the individual settings for each action to instead force disable them all.
          * @category Public
          * @type {boolean}
          * @default false
         */
        "forceDisableActions"?: boolean;
        /**
          * When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "fullExtentState"?: ActionState;
        /**
          * Custom title for the full extent action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "fullExtentTitle"?: string | undefined;
        /**
          * When active, the full extent action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "fullExtentToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "legendState"?: ActionState;
        /**
          * Custom title for the legend action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "legendTitle"?: string | undefined;
        /**
          * When active, the legend action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "legendToggle"?: ActionToggle;
        /**
          * Event triggered once action bar expand is toggled
          * @type {EventEmitter<boolean>}
          * @event
         */
        "onArcgisActionBarToggle"?: (event: ArcgisChartsActionBarCustomEvent<boolean>) => void;
        /**
          * Event triggered once a default action is selected
          * @type {EventEmitter<DefaultActionSelectPayload>}
          * @event
         */
        "onArcgisDefaultActionSelect"?: (event: ArcgisChartsActionBarCustomEvent<DefaultActionSelectPayload>) => void;
        /**
          * When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "rotateChartState"?: ActionState;
        /**
          * Custom title for the rotate chart action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "rotateChartTitle"?: string | undefined;
        /**
          * When active, the rotate chart action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "rotateChartToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "selectionState"?: ActionState;
        /**
          * Custom title for the selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "selectionTitle"?: string | undefined;
        /**
          * When active, the selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "selectionToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "switchSelectionState"?: ActionState;
        /**
          * Custom title for the switch selection action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "switchSelectionTitle"?: string | undefined;
        /**
          * When active, the switch selection action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "switchSelectionToggle"?: ActionToggle;
        /**
          * When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.
          * @category Public
          * @type {ActionState}
          * @default "enabled"
         */
        "zoomState"?: ActionState;
        /**
          * Custom title for the zoom action.
          * @category Public
          * @type {string | undefined}
          * @default undefined
         */
        "zoomTitle"?: string | undefined;
        /**
          * When active, the zoom action is highlighted.
          * @category Public
          * @type {ActionToggle}
          * @default "inactive"
         */
        "zoomToggle"?: ActionToggle;
    }
    interface ArcgisChartsBarChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart, and the legend, if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsBarChartCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsBarChartCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsBarChartCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsBarChartCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsBarChartCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsBarChartCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsBarChartCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsBarChartCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsBarChartCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsBarChartCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsBarChartCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsBarChartBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsBarChartBetaCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsBarChartBetaCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsBarChartBetaCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsBarChartBetaCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsBarChartBetaCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
          * @event
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsBarChartBetaCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsBarChartBetaCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsBarChartBetaCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsBarChartBetaCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsBarChartBetaCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsBarChartBetaCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {__esri.MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: __esri.MapView["timeZone"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {__esri.MapView | __esri.SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: __esri.MapView | __esri.SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
    interface ArcgisChartsBarLineChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars and markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsBarLineChartCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsBarLineChartCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsBarLineChartCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsBarLineChartCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsBarLineChartCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsBarLineChartCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsBarLineChartCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsBarLineChartCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsBarLineChartCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsBarLineChartCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsBarLineChartCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol or `lineSymbol` will be applied to the new bar or line series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsBoxPlot {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of bars allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a SupportedLayer and the `view` property is provided, it will be used to access the FeatureLayerView instance in order to perform client-side queries.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsBoxPlotCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsBoxPlotCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsBoxPlotCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsBoxPlotCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsBoxPlotCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
          * @event
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsBoxPlotCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsBoxPlotCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsBoxPlotCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsBoxPlotCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsBoxPlotCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsBoxPlotCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BoxPlotTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BoxPlotTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the property `fillSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
          * @default undefined
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsGauge {
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * A callback function used to format the axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "axisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * Used to customize the maximum number of features allowed on the feature-based gauge. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config from information extracted from the data for instance.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebGaugeChart | WebMapWebGaugeChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebGaugeChart | WebMapWebGaugeChart;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * The index of the feature to be rendered. Only used when the gauge is a feature-based gauge.
          * @type {number | undefined}
          * @category Public
          * @default undefined
         */
        "featureIndex"?: number;
        /**
          * A callback function used to format the inner label. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GaugeInnerLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "gaugeInnerLabelFormatter"?: GaugeInnerLabelFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axis min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsGaugeCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsGaugeCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsGaugeCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsGaugeCustomEvent<any>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsGaugeCustomEvent<any>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsGaugeCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
    }
    interface ArcgisChartsHistogram {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {HistogramLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: HistogramLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, toggling the overlays via the legend items is disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsHistogramCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsHistogramCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartHistogramDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsHistogramCustomEvent<WebChartHistogramDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsHistogramCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsHistogramCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsHistogramCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a bar
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsHistogramCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsHistogramCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsHistogramCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {HistogramLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: HistogramLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsLineChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineDataLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: BarAndLineDataLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {boolean | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsLineChartCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsLineChartCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsLineChartCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsLineChartCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsLineChartCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
          * @event
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsLineChartCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsLineChartCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a line
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsLineChartCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsLineChartCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsLineChartCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsLineChartCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {BarAndLineTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: BarAndLineTooltipFormatCallback;
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the properties `lineSymbol` and `markerSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsLineChartBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of markers allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limits.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of series via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {boolean | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the series is completely hidden from the displayed chart if it doesn't have data (i.e. empty), for example, after applying a data filter, filter by attribute or geometry (as when using the filter by extent)
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideEmptySeries"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsLineChartBetaCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsLineChartBetaCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsLineChartBetaCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsLineChartBetaCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsLineChartBetaCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when a no-render prop is changed
          * @type {EventEmitter<NoRenderPropChangePayload>}
          * @event
         */
        "onArcgisNoRenderPropChange"?: (event: ArcgisChartsLineChartBetaCustomEvent<NoRenderPropChangePayload>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsLineChartBetaCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a line
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsLineChartBetaCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsLineChartBetaCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event carrying the series id as they have been sorted following the `orderOptions` instructions
          * @event
         */
        "onArcgisSeriesOrder"?: (event: ArcgisChartsLineChartBetaCustomEvent<string[]>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsLineChartBetaCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "rotation"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * When `true`, the series properties `timeIntervalUnits` and `timeIntervalSize` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "setTimeBinningInfoWhenNotProvided"?: boolean;
        /**
          * Used to set a custom time zone for the chart.
          * @type {MapView["timeZone"] | undefined}
          * @category Public
          * @default undefined
         */
        "timeZone"?: MapView["timeZone"];
        /**
          * Whether to update the series when the data updates while the chart uses a split-by field configuration. If `addMissingSeries` is set to true new series will be added to cover the split-by values not referenced by the config. The default style from the properties `lineSymbol` and `markerSymbol` will be applied to the new series.
          * @type {MissingSplitBySeriesProps | undefined}
          * @category Public
         */
        "updateSplitBySeries"?: MissingSplitBySeriesProps;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
    interface ArcgisChartsPieChart {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * Used to customize the number maximum of slices allowed on the chart. The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation or update of the chart, or render the elements up to the given limit.
          * @type {ChartElementLimit | undefined}
          * @category Public
          * @default undefined
         */
        "chartLimits"?: ChartElementLimit;
        /**
          * Lifecycle function executed after the data has been processed and before the chart renders. Can be used to alter the config.series[0].slices property from instance.
          * @type {PreRenderCallback | undefined}
          * @category Public
          * @default undefined
         */
        "chartWillRender"?: PreRenderCallback;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such. The series properties `displayNumericValueOnDataLabel` and `displayPercentageOnDataLabel` will be ignored if a callback is provided.
          * @type {PieChartLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: PieChartLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of Pie slices via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * A callback function used to format the legend value labels. If the returned string contains HTML tags they will be interpreted as such. If provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.
          * @type {PieChartLegendValueLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "legendValueLabelFormatter"?: PieChartLegendValueLabelFormatCallback;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsPieChartCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been fetched. Does not contain information about the group of slices.
          * @type {EventEmitter<WebChartDataItem[]>}
          * @event
         */
        "onArcgisDataFetchComplete"?: (event: ArcgisChartsPieChartCustomEvent<WebChartDataItem[]>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartGenericDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsPieChartCustomEvent<WebChartGenericDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsPieChartCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsPieChartCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsPieChartCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, by clicking on a slice
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsPieChartCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the series slice symbols have been assigned
          * @type {EventEmitter<PieSlicesSymbols>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsPieChartCustomEvent<PieSlicesSymbols>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsPieChartCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload. Applies only to: - charts using an aggregation - data source using a feature layer compatible with envelope aggregation The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnFeaturesExtent"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such. The series properties `displayNumericValueOnTooltip` and `displayPercentageOnTooltip` will be ignored if a callback is provided.
          * @type {PieChartLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: PieChartLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
    }
    interface ArcgisChartsScatterPlot {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ScatterPlotLabelFormatCallback;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of trend line via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsScatterPlotCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsScatterPlotCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartScatterPlotDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsScatterPlotCustomEvent<WebChartScatterPlotDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsScatterPlotCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsScatterPlotCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsScatterPlotCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a marker
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsScatterPlotCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsScatterPlotCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsScatterPlotCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ScatterPlotLabelFormatCallback;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback;
    }
    interface ArcgisChartsScatterPlotBeta {
        /**
          * Defines the cursor behavior on the chart (zoom, selection...).
          * @type {ActionModes | undefined}
          * @category Public
          * @default undefined
         */
        "actionMode"?: ActionModes;
        /**
          * When `true`, a chart will be auto-disposed if a new one is created in the same container.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "autoDisposeChart"?: boolean;
        /**
          * ArcGIS Web Chart Specification that defines the chart component When the `config` prop is updated, it closes the modal opened via `notify` method.
          * @type {WebChart | WebMapWebChart | undefined}
          * @category Public
          * @default undefined
         */
        "config"?: WebChart | WebMapWebChart;
        /**
          * Sets the cursor range: - CursorRange.MultiAxes: allows to draw a free rectangle - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis - undefined: defaults to a preset behavior according to the chart type and action mode Applies only when the action mode is set to zoom or multi-selection.
          * @type {CursorRange | undefined}
          * @category Public
          * @default undefined
         */
        "cursorRange"?: CursorRange;
        /**
          * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "dataLabelFormatter"?: ScatterPlotLabelFormatCallback1;
        /**
          * When `true`, all interactions on the chart are disabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableInteractions"?: boolean;
        /**
          * When `true`, disables the toggling of trend line via the legend items.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "disableTogglingLegendItems"?: boolean;
        /**
          * When `true, the responsive features are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "enableResponsiveFeatures"?: boolean;
        /**
          * Whether to display an error alert and hide the chart when it can't be created or updated.
          * @type {ErrorPolicy | undefined}
          * @default "throw"
         */
        "errorPolicy"?: ErrorPolicy;
        /**
          * When `true`, all chart elements are filtered based on selection.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "filterBySelection"?: boolean;
        /**
          * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
          * @type {GuideTooltipFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "guideTooltipFormatter"?: GuideTooltipFormatCallback1;
        /**
          * When `true`, the licence watermark is hidden.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLicenceWatermark"?: boolean;
        /**
          * When `true`, hides the loader animation (curtain and spinner), showed by default at every update.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "hideLoaderAnimation"?: boolean;
        /**
          * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed (via chart cursor or scrollbar), to increase performance. This property will be set when the chart is created and cannot be updated after that. It's recommended that this property should only be set to true for small datasets. When left `undefined`, will be treated as `false`.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "ignoreSmoothRenderingLimit"?: boolean;
        /**
          * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView. By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters). Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
          * @type boolean
          * @category Public
          * @default false
         */
        "ignoreViewExtent"?: boolean;
        /**
          * Used to perform queries. If the layer is a FeatureLayerView or if the SupportedLayer and the `view` property are both provided, the queries will be executed client-side.
          * @type {SupportedLayer | FeatureLayerView | undefined}
          * @category Public
          * @default undefined
         */
        "layer"?: FeatureLayerView | SupportedLayer;
        /**
          * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
          * @type {LayerFilterChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerFilterChangePolicy"?: LayerFilterChangePolicy;
        /**
          * When `true`, allows the chart to be updated when the layer's renderer changes. Applies on a layer data source and when the color match feature is enabled. Chart will still update its colors when a data update may be triggered at a later point
          * @type {LayerRendererChangePolicy | undefined}
          * @category Public
          * @default "refresh"
         */
        "layerRendererChangePolicy"?: LayerRendererChangePolicy;
        /**
          * Used to set the legend's position on the chart.
          * @type {WebChartLegendPositions | undefined}
          * @category Public
          * @default undefined
         */
        "legendPosition"?: WebChartLegendPositions;
        /**
          * When `true`, the legend is visible on the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "legendVisibility"?: boolean;
        /**
          * Used to set the options available to handle specific messages displayed by the chart.
          * @type {MessageOptions | undefined}
          * @category Public
          * @default undefined
         */
        "messageOptions"?: MessageOptions1;
        /**
          * Event triggered once the chart axes min/max values are computed
          * @type {EventEmitter<CalculatedMinMaxBoundsPayload[]>}
          * @event
         */
        "onArcgisAxesMinMaxChange"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<CalculatedMinMaxBoundsPayload[]>) => void;
        /**
          * Event triggered when an error is detected with the data set
          * @type {EventEmitter<DataWarningObject>}
          * @event
         */
        "onArcgisBadDataWarningRaise"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<DataWarningObject>) => void;
        /**
          * Event triggered once the chart data has been processed
          * @type {EventEmitter<WebChartScatterPlotDataItem>}
          * @event
         */
        "onArcgisDataProcessComplete"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<WebChartScatterPlotDataItem>) => void;
        /**
          * Event triggered when an error occurred while fetching of processing the data for the chart
          * @type {EventEmitter}
          * @event
         */
        "onArcgisDataProcessError"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<any>) => void;
        /**
          * Event triggered once a legend item visibility has been changed
          * @type {EventEmitter<LegendItemVisibility>}
          * @event
         */
        "onArcgisLegendItemVisibilityChange"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<LegendItemVisibility>) => void;
        /**
          * Event triggered when an error occurred that prevents the chart from being created or updated
          * @type {EventEmitter}
          * @event
         */
        "onArcgisRuntimeError"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<any>) => void;
        /**
          * Event triggered when a selection is done on the chart, whether it is by drawing a rectangle or clicking on a marker
          * @type {EventEmitter<SelectionData>}
          * @event
         */
        "onArcgisSelectionComplete"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<SelectionData>) => void;
        /**
          * Event triggered once the chart series color have been assigned
          * @type {EventEmitter<SeriesSymbolsMap>}
          * @event
         */
        "onArcgisSeriesColorChange"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<SeriesSymbolsMap>) => void;
        /**
          * Event triggered once the chart is updated
          * @type {EventEmitter<ValidationStatus>}
          * @event
         */
        "onArcgisUpdateComplete"?: (event: ArcgisChartsScatterPlotBetaCustomEvent<ValidationStatus>) => void;
        /**
          * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
          * @type {string | undefined}
          * @category Public
          * @default undefined
         */
        "placeholder"?: string;
        /**
          * When `true`, charts are built one by one.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "queueChartCreation"?: boolean;
        /**
          * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionIndexes"?: boolean;
        /**
          * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart. Only considered for a data source using a feature layer.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "returnSelectionOIDs"?: boolean;
        /**
          * When `true`, applies runtime filters to the chart's data while in Feature Layer mode.
          * @type {WebChartDataFilters | undefined}
          * @category Public
          * @default undefined
         */
        "runtimeDataFilters"?: WebChartDataFilters;
        /**
          * When this property is set, it will apply a selection on the chart matching the provided selection.
          * @type {SelectionData | undefined}
          * @category Public
          * @default undefined
         */
        "selectionData"?: SelectionData;
        /**
          * Used to provide a customized theme for the selected and non selected elements. If no style is provided for the selected elements, a default selection is applied. If no style is provided for the non selected elements, the chart's style is applied.
          * @type {SelectionTheme | undefined}
          * @category Public
          * @default undefined
         */
        "selectionTheme"?: SelectionTheme;
        /**
          * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
          * @type {ScatterPlotLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "tooltipFormatter"?: ScatterPlotLabelFormatCallback1;
        /**
          * When `true`, animations on the chart are enabled.
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "useAnimatedCharts"?: boolean;
        /**
          * When `true`, reads the fields from layer.popupTemplate and uses their alias when rendering tooltips
          * @type {boolean | undefined}
          * @category Public
          * @default undefined
         */
        "usePopupTemplateFieldsInfo"?: boolean;
        /**
          * Used to access to the FeatureLayerView instance in order to perform client-side queries.
          * @type {MapView | SceneView | undefined}
          * @category Public
          * @default undefined
         */
        "view"?: MapView | SceneView;
        /**
          * Indicates whether to show the Arcgis charts notify panel. False by default A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "xAxisLabelFormatter"?: AxisLabelFormatCallback1;
        /**
          * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
          * @type {AxisLabelFormatCallback | undefined}
          * @category Public
          * @default undefined
         */
        "yAxisLabelFormatter"?: AxisLabelFormatCallback1;
    }
    interface IntrinsicElements {
        "arcgis-charts-action-bar": ArcgisChartsActionBar;
        "arcgis-charts-bar-chart": ArcgisChartsBarChart;
        "arcgis-charts-bar-chart-beta": ArcgisChartsBarChartBeta;
        "arcgis-charts-bar-line-chart": ArcgisChartsBarLineChart;
        "arcgis-charts-box-plot": ArcgisChartsBoxPlot;
        "arcgis-charts-gauge": ArcgisChartsGauge;
        "arcgis-charts-histogram": ArcgisChartsHistogram;
        "arcgis-charts-line-chart": ArcgisChartsLineChart;
        "arcgis-charts-line-chart-beta": ArcgisChartsLineChartBeta;
        "arcgis-charts-pie-chart": ArcgisChartsPieChart;
        "arcgis-charts-scatter-plot": ArcgisChartsScatterPlot;
        "arcgis-charts-scatter-plot-beta": ArcgisChartsScatterPlotBeta;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arcgis-charts-action-bar": LocalJSX.ArcgisChartsActionBar & JSXBase.HTMLAttributes<HTMLArcgisChartsActionBarElement>;
            "arcgis-charts-bar-chart": LocalJSX.ArcgisChartsBarChart & JSXBase.HTMLAttributes<HTMLArcgisChartsBarChartElement>;
            "arcgis-charts-bar-chart-beta": LocalJSX.ArcgisChartsBarChartBeta & JSXBase.HTMLAttributes<HTMLArcgisChartsBarChartBetaElement>;
            "arcgis-charts-bar-line-chart": LocalJSX.ArcgisChartsBarLineChart & JSXBase.HTMLAttributes<HTMLArcgisChartsBarLineChartElement>;
            "arcgis-charts-box-plot": LocalJSX.ArcgisChartsBoxPlot & JSXBase.HTMLAttributes<HTMLArcgisChartsBoxPlotElement>;
            "arcgis-charts-gauge": LocalJSX.ArcgisChartsGauge & JSXBase.HTMLAttributes<HTMLArcgisChartsGaugeElement>;
            "arcgis-charts-histogram": LocalJSX.ArcgisChartsHistogram & JSXBase.HTMLAttributes<HTMLArcgisChartsHistogramElement>;
            "arcgis-charts-line-chart": LocalJSX.ArcgisChartsLineChart & JSXBase.HTMLAttributes<HTMLArcgisChartsLineChartElement>;
            "arcgis-charts-line-chart-beta": LocalJSX.ArcgisChartsLineChartBeta & JSXBase.HTMLAttributes<HTMLArcgisChartsLineChartBetaElement>;
            "arcgis-charts-pie-chart": LocalJSX.ArcgisChartsPieChart & JSXBase.HTMLAttributes<HTMLArcgisChartsPieChartElement>;
            "arcgis-charts-scatter-plot": LocalJSX.ArcgisChartsScatterPlot & JSXBase.HTMLAttributes<HTMLArcgisChartsScatterPlotElement>;
            "arcgis-charts-scatter-plot-beta": LocalJSX.ArcgisChartsScatterPlotBeta & JSXBase.HTMLAttributes<HTMLArcgisChartsScatterPlotBetaElement>;
        }
    }
}
