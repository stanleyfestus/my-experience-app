import type { ChartOptions, GlobalOptions } from "@arcgis/charts-js";
import type { SupportedLayer, WebChart, WebChartLegendPositions, WebMapWebChart } from "@arcgis/charts-spec";
import type FeatureLayerView from "@arcgis/core/views/layers/FeatureLayerView";
import type { ArcGISChartsBarChart } from "../components/charts-bar-chart/charts-bar-chart";
import type { ArcGISChartsBarLineChart } from "../components/charts-bar-line-chart/charts-bar-line-chart";
import type { ArcGISChartsBoxPlot } from "../components/charts-box-plot/charts-box-plot";
import type { ArcGISChartsLineChart } from "../components/charts-line-chart/charts-line-chart";
import type { ChartComponentType } from "../interfaces";
import type { ArcGISChartsBarChartBeta } from "../components/charts-bar-chart-beta/charts-bar-chart-beta";
import type { ArcGISChartsLineChartBeta } from "../components/charts-line-chart-beta/charts-line-chart-beta";
/**
 * Updates the legend position for a given WebChart config.
 * Returns the updated config.
 * @param newLegendPosition
 * @param config
 */
export declare function updateLegendPosition(newLegendPosition: WebChartLegendPositions, config?: WebChart): WebChart | undefined;
/**
 * Updates the legend visibility for a given WebChart config.
 * Returns the updated config.
 * @param visible
 * @param config
 */
export declare function updateLegendVisibility(visible: boolean, config?: WebChart): WebChart | undefined;
/**
 * Resets the axes bounds.
 * Returns the updated config.
 * @param config
 */
export declare function resetAxesBounds(config?: WebChart | WebMapWebChart): WebChart | undefined;
/**
 * Gathers the components' properties to build a GlobalOptions object to be used at creation or update
 * @param component The chart's component
 */
export declare function gatherComponentGlobalOptions(component: ChartComponentType): GlobalOptions;
/**
 * Gathers the components' properties to build a ChartOptions object to be used at creation or update
 * @param props.component The chart component
 * @param props.dataUpdated The components' private property indicating whether the data was updated
 * @param props.viewExtentUpdated The components' private property indicating whether the extent was updated
 * @returns
 */
export declare function gatherComponentOptions(props: {
    component: ChartComponentType;
    dataUpdated?: boolean;
    viewExtentUpdated?: boolean;
}): ChartOptions;
/**
 * Checks whether the provided data source is valid. The conditions are:
 * - iLayer is defined
 * - OR Layer / FeatureLayerView instance is provided
 * @param config The component's config
 * @param layer The component's layer
 */
export declare function isValidDataSource(config?: WebChart | WebMapWebChart, layer?: FeatureLayerView | SupportedLayer): boolean;
/**
 * Will add missing series to the chart config if:
 * - the config uses a split-by field
 * - adding missing series was requested (through the `updateSplitBySeries` property)
 * - unique values for the given split-by field don't have a series associated
 * @param component The chart component
 * @param options The runtime options
 */
export declare function addMissingSplitBySeries(component: ArcGISChartsBarChart | ArcGISChartsBarChartBeta | ArcGISChartsBarLineChart | ArcGISChartsBoxPlot | ArcGISChartsLineChart | ArcGISChartsLineChartBeta, options: ChartOptions): Promise<void>;
