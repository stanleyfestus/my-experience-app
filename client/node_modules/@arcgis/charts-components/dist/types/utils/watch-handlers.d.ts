import type { LayerAndViewListenerProps } from "./interfaces";
/**
 * Adds a listener on the feature layer, so every time the definition expression (filter) is modified we update
 * the chart.
 * @param props.layer The feature layer
 * @param props.view The view
 * @param props.component The chart component
 */
export declare function addLayerFilterListener(props: LayerAndViewListenerProps): Promise<IHandle | undefined>;
/**
 * Adds a listener on the feature layer, so every time the renderer is modified we update the chart.
 * @param props.layer The feature layer
 * @param props.view The view
 * @param props.component The chart component
 */
export declare function addLayerRendererListener(props: LayerAndViewListenerProps): Promise<IHandle | undefined>;
/**
 * Adds a listener on the feature layer view, so every time the view's extent is modified we update
 * the chart.
 * @param props.layer The feature layer
 * @param props.view The view
 * @param props.component The chart component
 */
export declare function addExtentChangeListener(props: LayerAndViewListenerProps): Promise<IHandle[] | undefined>;
