import type { Root, Series } from "@amcharts/amcharts5";
import type { Axis, AxisRenderer } from "@amcharts/amcharts5/xy";
import { XYChart } from "@amcharts/amcharts5/xy";
import type { TimeIntervalInfo, WebChart, WebChartAxis, WebChartDataTypes } from "@arcgis/charts-spec";
import type { AxisDataValidatedEvent } from "../../../../interfaces";
/**
 * Indicates whether the axes need to be recreated.
 * @param props.chart The chart
 * @param props.chartConfig The chart configuration
 * @param props.rotationChanged Whether the chart's rotation changed
 * @param props.axisLabelsBehaviorChanged Whether the axes labels behavior changed
 */
export declare function isInitializingAxesNeeded(props: {
    chart: XYChart;
    chartConfig: WebChart;
    rotationChanged: boolean;
    axisLabelsBehaviorChanged?: [boolean, boolean];
}): boolean;
/**
 * Check if the axis associated with the axisRenderer is an X-Axis.
 * @param axisRenderer The renderer associated with the axis to check for.
 * @param isRotated Whether the chart is rotated.
 */
export declare function isXAxis(axisRenderer: AxisRenderer, isRotated?: boolean): boolean;
/**
 * Indicates whether the log scale is compatible with the data.
 * @param axis The axis to check
 * @param isSecondValueAxis Whether the axis is the second value axis (in dual axis mode)
 * @data The data to check
 */
export declare function whetherLogScaleIsDataCompatible(props: {
    axis: Axis<AxisRenderer>;
    isSecondValueAxis?: boolean;
    data?: WebChartDataTypes;
}): boolean;
/**
 * Activating the `logarithmic` property of the axis.
 * Activated only on a value or date axis and according to the config property.
 * @param axis
 * @param isLogarithmic
 */
export declare function updateAxisLogarithmic(props: {
    axis: Axis<AxisRenderer>;
    isLogarithmic?: boolean;
    isSecondValueAxis?: boolean;
}): void;
/**
 * Sets maxPrecision property to 0 (if `integers only` option is set to true in axis config) for a Value Axis, or
 * if the value format explicitly requests no decimals
 * @param axis The axis on which to set the `maxPrecision` property
 * @param axisConfig The axis config
 */
export declare function updateAxisMaxPrecision(axis: Axis<AxisRenderer>, axisConfig: WebChartAxis): void;
/**
 * Initialize cursor tooltip on the axis.
 * @param root The root
 * @param axis The axis on which to initialize the cursor tooltip
 */
export declare function initializeAxisCursorTooltip(root: Root, axis: Axis<AxisRenderer>): void;
/**
 * Sets the cursor tooltip to true/false according to the axis setting in the config, to show or hide cursor tooltips on the axis.
 * If not specified then the value will be set to false.
 * @param props.root The root
 * @param props.axis The axis on which to display or hide the cursor tooltip
 * @param props.displayCursorTooltip Whether to display the cursor tooltip
 */
export declare function updateAxisCursorTooltip(props: {
    root: Root;
    axis: Axis<AxisRenderer>;
    displayCursorTooltip?: boolean;
}): void;
/**
 * Updates a date axis base interval.
 * Applies a change only if a time interval info is provided
 * @param axis The axis to act on
 * @param timeIntervalInfo The object containing the size and unit to use as a base interval
 */
export declare function updateBaseInterval(axis: Axis<AxisRenderer>, timeIntervalInfo?: TimeIntervalInfo): void;
/**
 * Update chart's axes using either chart config's min/max or the min/max from data.
 *
 * Notes:
 *  This function forces the axis to set its bounds based on the visible series only and their stack type.
 *  When `strictMinMax` is set to `true`, amCharts
 *  will by default force the bounds to the highest value from the data set, whether the corresponding series are
 *  shown or hidden (keeping a consistent extent no matter the hidden series).
 * @param chart The chart
 * @param data The data
 */
export declare function updateAxesMinMax(chart?: XYChart, data?: WebChartDataTypes): void;
/**
 * Adds adapters to the axis' strokeWidth and strokeOpacity properties to update the zero grid line.
 * @param axis The axis
 */
export declare function addZeroLineAdapters(axis: Axis<AxisRenderer>): void;
/**
 * Helps recalculating the axes bounds when a series visibility changes.
 * @param series The series to monitor
 */
export declare function updateAxesMinMaxOnSeriesVisibilityChange(series: Series): void;
/**
 *
 * @param axis
 * @returns maximum height of tallest axis label
 * Finds the tallest axis label (greatest height) and returns it based on the
 * label's text value, its height and whether its defined
 */
export declare function getTallestAxisLabel(axis: Axis<AxisRenderer>): number;
/**
 * Sends an event containing the axes bounds
 * @param event The axis event fired when the axis data is validated
 */
export declare function axisMinMaxChangedCallback(event: AxisDataValidatedEvent): void;
