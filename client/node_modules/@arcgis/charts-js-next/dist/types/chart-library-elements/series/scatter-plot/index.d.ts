import type { SerialChart, Series } from "@amcharts/amcharts5";
import { LineSeries } from "@amcharts/amcharts5/xy";
import type { InitializeScatterPlotSeriesProps, UpdateScatterPlotSeriesProps } from "./interfaces";
/**
 * Indicates whether the provided series instance is a scatter plot overlay series (trendline).
 * @param series The series instance
 */
export declare function isScatterPlotOverlaySeries(series: Series): boolean;
/**
 * Finds a scatter plot series amongst the chart's series. For now we handle only one marker series
 * per scatter plot so it will return the first it finds.
 * @param chart The chart
 */
export declare function getScatterPlotMarkerSeries(chart: SerialChart): Series | undefined;
/**
 * Finds a scatter plot trend line series amongst the chart's series. For now we handle only one trend line series
 * per scatter plot so it will return the first it finds.
 * @param chart The chart
 */
export declare function getTrendLineSeries(chart: SerialChart): Series | undefined;
/**
 * Function initializing the chart series. The data is set by `updateScatterPlotSeries`
 * @param props
 */
export declare function initializeScatterPlotSeries(props: InitializeScatterPlotSeriesProps): Promise<LineSeries[]>;
/**
 * Update the scatter plot series
 * @param props.root The root
 * @param props.chartConfig The chart configuration
 * @param props.seriesConfig The series configuration
 * @param props.options The runtime chart options
 * @param props.fieldList The layer's field list
 * @param props.markerSeries The marker series
 * @param props.trendLineSeries The trend line series
 * @param props.data The chart data
 * @param props.dataWasUpdated Whether the data was updated
 * @param props.seriesWereReinitialized Whether the series were reinitialized before an update
 */
export declare function updateScatterPlotSeries(props: UpdateScatterPlotSeriesProps): void;
