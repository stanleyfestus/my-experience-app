import { Series, Sprite } from "@amcharts/amcharts5";
import { SelectionTheme } from "@arcgis/charts-shared-utils";
import { PointerUpEvent, SelectEndedEvent } from "../../interfaces";
/**
 * Indicates whether the multi-selection is requested, either because the user is pressing the Ctrl/Cmd key when performing a selection,
 * or because the multi-selection-with-ctrl-key option has been selected.
 * // TODO: to implement to finalize migration from v4:
 * - click on axis label
 * @param selectionEvent The click or range selection event
 */
export declare function isMultiSelectionOn(selectionEvent: PointerUpEvent | SelectEndedEvent): boolean;
/**
 * Set the state on the chart element.
 * @param props.element The element of which state is to be toggled.
 * @param props.selected Indicate whether the element is the target of, or part of, a group selection via a hit or range selection event.
 * @param props.multiSelect Indicate whether multiple selection mode is currently on. Default value is true if not provided.
 * @param props.isDateOrCategoryAxis Indicate whether the current x-axis is a date or category axis.  Default value is false if not provided.
 * @param props.useNativeState Indicate whether native active state should be used.  Default value is false if not provided.
 * @param props.backToDefaultState Indicate whether default inactive state should be used. Default value is false if not provided.
 */
export declare function toggleStateForElement(props: {
    element?: Sprite;
    selected: boolean;
    multiSelect?: boolean;
    isDateOrCategoryAxis?: boolean;
    useNativeState?: boolean;
    backToDefaultState?: boolean;
}): boolean;
/**
 * Indicates whether the elements that are not part of the current selection action (click or range)
 * need to be deselected.
 * It is true when the action mode is 'mono-selection' or 'multi-selection-with-ctrl-key' and the Ctrl/Cmd key is not pressed.
 * False otherwise (new selection is added to the current one).
 * @param selectionEvent The click or range selection event
 * @param series The series instance
 */
export declare function needToDeselectOtherElements(selectionEvent: PointerUpEvent | SelectEndedEvent, series: Series): boolean;
/**
 * This function sets the theme applied to the elements (bars, slices...) when they are selected.
 * @param element The element to which the theme is to be applied.
 * @param customSelectionTheme The custom selection theme to be applied.
 */
export declare function setSelectionTheme(element: Sprite, customSelectionTheme?: SelectionTheme): void;
