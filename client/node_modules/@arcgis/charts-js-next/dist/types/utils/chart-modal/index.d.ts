import type { WebChart, WebChartDataTypes, WebGaugeChart, WebMapWebChart } from "@arcgis/charts-spec";
import type { ValidationStatus, ErrorStrings } from "@arcgis/charts-shared-utils";
import { DataWarningKeywords } from "@arcgis/charts-shared-utils";
import type { NotifyOptions } from "@arcgis/charts-js-common";
import type { Chart, Root } from "@amcharts/amcharts5";
import { Modal } from "@amcharts/amcharts5";
export declare function initializeChartModal(root: Root): Modal;
export declare function resetChartModal(chartModal: Modal): void;
export declare function displayModalMessage(props: {
    chartModal: Modal;
    message?: string;
    title?: string;
    closable: boolean;
}): void;
/**
 * Validates the `WebChart` config and displays the `Errors` and `Warnings` them in the chart popup.
 * Both `Errors` and `Warnings` are non-dismissible.
 * @param props.chartModal The chart's modal
 * @param props.chartConfig The optional chart config
 * @param props.createMessage The optional error and warning to be displayed
 * @param props.status The validation status containing details about why the config is invalid
 * @param props.errorStrings The t9n error strings
 */
export declare function displayInvalidConfigMessage(props: {
    chartModal?: Modal;
    chartConfig?: WebChart | WebGaugeChart;
    createMessage?: string;
    status: ValidationStatus;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Setting a message for the chart to display when it fails to create the chart due to bad data.
 * @param chart The chart
 * @param chartModal The chart's modal
 * @param chartConfig The chart's config
 * @param invalidType The type of invalid data
 * @param elementCount The number of elements related to the error
 * @param seriesCount The number of series in the chart
 * @param openModal Whether to open the modal or not
 * @param errorStrings The t9n error strings
 */
export declare function raiseInvalidDataWarning(props: {
    chart: Chart;
    chartModal?: Modal;
    chartConfig?: WebChart | WebMapWebChart;
    invalidType?: DataWarningKeywords;
    elementCount?: number;
    seriesCount?: number;
    openModal?: boolean;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Checks whether the logarithmic scale can be applied to the chart's axes when the option is enabled.
 * If not:
 * - sends an event
 * - opens the chart's modal (when the chart options don't say otherwise) with a default message
 * @param props.chart The chart
 * @param props.chartModal The chart's modal
 * @param props.data The chart's data
 * @param props.errorStrings The t9n error strings
 */
export declare function raiseLogScaleNotCompatibleWarning(props: {
    chart: Chart;
    chartModal?: Modal;
    data?: WebChartDataTypes;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Checks whether the chart's data is empty and if so:
 * - sends an event
 * - opens the chart's modal (when the chart options don't say otherwise) with a default message
 * @param chart The chart
 * @param chartModal The chart's modal
 * @param chartConfig The chart's config
 * @param data The chart's data
 * @param errorStrings The t9n error strings
 */
export declare function raiseNoDataWarning(props: {
    chart: Chart;
    chartModal?: Modal;
    chartConfig?: WebChart | WebGaugeChart;
    data?: WebChartDataTypes;
    errorStrings: ErrorStrings;
}): Promise<void>;
/**
 * Notifies the uses with any message we want to display on the chart modal.
 * @param props.chart The chart
 * @param props.chartModal The chart's modal
 * @param props.message The message to display
 * @param props.heading The title
 * @param props.options NotifyOptions for the modal
 */
export declare function notify(props: {
    chart: Chart;
    chartModal: Modal;
    message?: string;
    heading?: string;
    options?: NotifyOptions;
}): void;
