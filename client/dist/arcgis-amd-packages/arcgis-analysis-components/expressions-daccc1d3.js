define(["exports","./index2-31657c04"],(function(e,t){"use strict";function n(e,t){if(!1===e)throw new Error(t)}let i=0;function s(){return i+=1,`${i}`}const a=86399e3;const r=Object.freeze({equal:(e,t)=>`${e} = ${t}`,not_equal:(e,t)=>`${e} <> ${t}`,is_in:(e,t)=>`${e} IN(${t.join(", ")})`,is_not_in:(e,t)=>`${e} NOT IN(${t.join(", ")})`,less:(e,t)=>`${e} < ${t}`,less_or_equal:(e,t)=>`${e} <= ${t}`,greater:(e,t)=>`${e} > ${t}`,greater_or_equal:(e,t)=>`${e} >= ${t}`,between:(e,t)=>`${e} BETWEEN ${t.join(" AND ")}`,not_between:(e,t)=>`${e} NOT BETWEEN ${t.join(" AND ")}`,contains:(e,t)=>`${e} LIKE '%${t.slice(1,-1)}%'`,not_contains:(e,t)=>`${e} NOT LIKE '%${t.slice(1,-1)}%'`,begins_with:(e,t)=>`${e} LIKE '${t.slice(1,-1)}%'`,not_begins_with:(e,t)=>`${e} NOT LIKE '${t.slice(1,-1)}%'`,ends_with:(e,t)=>`${e} LIKE '%${t.slice(1,-1)}'`,not_ends_with:(e,t)=>`${e} NOT LIKE '%${t.slice(1,-1)}'`,is_empty:(e,t)=>`${e} = ''`,is_not_empty:(e,t)=>`${e} <> ''`,is_blank:(e,t)=>`${e} IS Null`,is_not_blank:(e,t)=>`${e} IS NOT Null`,is_on:(e,t)=>`${e} BETWEEN ${t}`,is_not_on:(e,t)=>`${e} NOT BETWEEN ${t}`,is_before:(e,t)=>`${e} < ${t}`,is_after:(e,t)=>`${e} > ${t}`,in_the_last:(e,t)=>`${e} BETWEEN ${t}`,not_in_the_last:(e,t)=>`${e} NOT BETWEEN ${t}`,is_true:(e,t)=>`${e} IS TRUE`,is_false:(e,t)=>`${e} IS FALSE`}),o={"<":"less","<=":"less_or_equal",">":"greater",">=":"greater_or_equal","=":"equal","<>":"not_equal",IN:"is_in","NOT IN":"is_not_in",BETWEEN:"between",NOTBETWEEN:"not_between"},l=["between","not_between","equal","not_equal","is_in","is_not_in","greater","greater_or_equal","less","less_or_equal","is_blank","is_not_blank"],u=["equal","not_equal","is_in","is_not_in","contains","not_contains","begins_with","not_begins_with","ends_with","not_ends_with","is_blank","is_not_blank","is_empty","is_not_empty"],c=["between","not_between","is_on","is_not_on","is_before","is_after","in_the_last","not_in_the_last","is_blank","is_not_blank"],p=["between","not_between","is_on","is_not_on","is_before","is_after","in_the_last","not_in_the_last","is_blank","is_not_blank"],d=["is_blank","is_not_blank"],h=["is_blank","is_not_blank","is_true","is_false"],_=["between","not_between"],y=["is_in","is_not_in"],f=["in_the_last","not_in_the_last"],g=["is_blank","is_not_blank","is_empty","is_not_empty","is_true","is_false"];function m(e){return _.includes(e)}function $(e){return y.includes(e)}function w(e){return g.includes(e)}function T(e,t){return t?`"${e}"`:e}function b(e,t){switch(t){case"integer":case"small-integer":case"big-integer":case"long":case"oid":return null==e?"0":("number"!=typeof e&&(e=parseInt(e)),"number"==typeof e&&isNaN(e)?"0":`${e}`);case"double":case"single":return null==e?"0.0":("number"!=typeof e&&(e=parseFloat(e)),"number"==typeof e&&isNaN(e)?"0.0":`${e}`);case"date":const n=e instanceof Date?e:void 0;return void 0!==n?`timestamp '${function(e){if(void 0===e)return"";const t=`${e.getUTCFullYear()}`;let n=`${e.getUTCMonth()+1}`;1===n.length&&(n=`0${n}`);let i=`${e.getUTCDate()}`;1===i.length&&(i=`0${i}`);let s=`${e.getUTCHours()}`;1===s.length&&(s=`0${s}`);let a=`${e.getUTCMinutes()}`;1===a.length&&(a=`0${a}`);let r=`${e.getUTCSeconds()}`;return 1===r.length&&(r=`0${r}`),`${t}-${n}-${i} ${s}:${a}:${r}`}(n)}'`:"''";case"date-only":return void 0!==e?`date '${e}'`:"''";case"string":return`'${null==e?"":e.replace(/'/g,"''")}'`;case"boolean":case"geometry":return"";default:throw new Error(`Unsupported data type: ${t}`)}}function v(e){switch(e.type){case"string":case"number":case"date":case"boolean":return e.value;case"null":return null;case"timestamp":return function(e){const t=new Date(e);return new Date(t.getTime()-6e4*t.getTimezoneOffset())}(e.value);default:throw new Error(`Invalid expression: unsupported node value: ${e.type}.`)}}const E=["Meters","Kilometers","Feet","Yards","Miles"];var I;function N(e){return null==e}function D(e){let t=!0;return(N(e)||""===e||"number"==typeof e&&isNaN(e))&&(t=!1),t}class R{constructor(e,t,n,i,a){this.field=e,this.dataType=t,this.value=n,this.operator=i,this.id=a??s()}}class L extends R{constructor(){super(...arguments),this.type="value"}validate(){return w(this.operator)||D(this.value)}toSQL(e){let t;if("date"===this.dataType)t=this.toSQLForDate(this.value,this.operator,e);else if("date-only"===this.dataType)t=this.toSQLForDateOnly(this.value,this.operator,e);else{const n=T(this.field,!0===e?.useDelimitedIdentifiers),i=b(this.value,this.dataType);t=r[this.operator](n,i)}return t}toSQLForDate(e,t,n){const i=T(this.field,!0===n?.useDelimitedIdentifiers);switch(t){case"is_on":case"is_not_on":const n=void 0!==e?function(e){const t=function(e){return new Date(e.toDateString())}(e),n=function(e){return new Date(e.getTime()+a)}(e);return[t,n]}(e).map((e=>b(e,"date"))):["''","''"];return r[t](i,`${n[0]} AND ${n[1]}`);default:const s=b(e,"date");return r[t](i,s)}}toSQLForDateOnly(e,t,n){const i=T(this.field,!0===n?.useDelimitedIdentifiers),s=b(e,this.dataType);switch(t){case"is_on":return r.equal(i,s);case"is_not_on":return r.not_equal(i,s);default:return r[t](i,s)}}}class S extends R{constructor(){super(...arguments),this.type="multi-value"}get validValues(){return this.value.filter(D)}validate(){return this.validValues.length>0}toSQL(e){const t=T(this.field,!0===e?.useDelimitedIdentifiers),n=this.validValues.map((e=>b(e,this.dataType)));return r[this.operator](t,n)}}class x extends R{constructor(){super(...arguments),this.type="range"}validate(){return D(this.value[0])&&D(this.value[1])}toSQL(e){const t=T(this.field,!0===e?.useDelimitedIdentifiers),n=b(this.value[0],this.dataType),i=b(this.value[1],this.dataType);return r[this.operator](t,[n,i])}}class O extends R{constructor(){super(...arguments),this.type="distance"}validate(){return D(this.value.distance)&&D(this.value.unit)}toSQL(e){if("date"!==this.dataType&&"date-only"!==this.dataType)throw new Error(`Unsupported data type for 'Distance' expressions: ${this.dataType}`);const t=T(this.field,!0===e?.useDelimitedIdentifiers),n=function(e,t,n){const i="date-only"===n?"CURRENT_DATE":"CURRENT_TIMESTAMP";switch(t){case"minute":return`CURRENT_TIMESTAMP - INTERVAL '${e}' MINUTE AND CURRENT_TIMESTAMP`;case"hour":return`CURRENT_TIMESTAMP - INTERVAL '${e}' HOUR AND CURRENT_TIMESTAMP`;case"day":return`${i} - INTERVAL '${e}' DAY AND ${i}`;case"week":return`${i} - INTERVAL '${7*e}' DAY AND ${i}`;default:throw new Error(`Unsupported unit for 'In the last' queries: ${t}`)}}(this.value.distance??0,this.value.unit??"hour",this.dataType);return r[this.operator](t,n)}}class k{constructor(e,t,n,i){this.layer=e,this.selectingLayer=t,this.spatialRelationship=n,this.spatialRelationshipParams=i}get isDistanceRelationship(){return"withinDistance"===this.spatialRelationship||"notWithinDistance"===this.spatialRelationship}validate(){let e=void 0!==this.selectingLayer&&void 0!==this.spatialRelationship;if(this.isDistanceRelationship){const{distance:t,units:n}=this.spatialRelationshipParams??{};e=e&&D(t)&&D(n)}return e}changeSelectingLayer(e){return new k(this.layer,e,this.spatialRelationship,this.spatialRelationshipParams)}static getValidLayersForRelationships(e,t,n){const i=new Map;return n.forEach((n=>{let s=this.filterLayersBasedOnGeometryType(e,t,n);s=this.getValidSelectingLayers(e,s??[]),i.set(n,s)})),i}static filterLayersBasedOnGeometryType(e,t,n){const i=new Map;t.forEach((e=>{i.has(e.geometryType)?i.get(e.geometryType).push(e):i.set(e.geometryType,[e])}));const s=e.geometryType,a=i.get("polygon")??[],r=i.get("polyline")??[],o=i.get("point")??[],l=i.get("multipoint")??[];let u=[];return u="contains"===n||"notContains"===n?"polygon"===s?[...o,...r,...a,...l]:"polyline"===s?[...o,...r,...l]:"point"===s||"multipoint"===s?[...o,...l]:[]:"within"===n||"notWithin"===n?"point"===s||"multipoint"===s?[...o,...r,...a,...l]:"polyline"===s?[...a,...r]:"polygon"===s?a:[]:t,u}static getValidSelectingLayers(e,t){return t.filter((t=>e.id!==t.id))}changeSpatialRelationship(e){const t=new k(this.layer,this.selectingLayer,e);return t.isDistanceRelationship&&(t.spatialRelationshipParams={distance:this.spatialRelationshipParams?.distance,units:this.spatialRelationshipParams?.units??E[0]}),t}changeSpatialRelationshipDistance(e){const t={...this.spatialRelationshipParams,distance:e};return new k(this.layer,this.selectingLayer,this.spatialRelationship,t)}changeSpatialRelationshipUnit(e){const t={...this.spatialRelationshipParams,units:e};return new k(this.layer,this.selectingLayer,this.spatialRelationship,t)}}function q(e,t,n){const i=t?.allowGeometryFields??!1,s=[n?.geometryFieldsInfo?.shapeAreaField,n?.geometryFieldsInfo?.shapeLengthField].includes(e.name)&&!1===i;if(!0===t?.hideObjectIdField&&e.name===n?.objectIdField||!0===s)return!1;switch(e.type){case"string":case"small-integer":case"integer":case"single":case"double":case"long":case"big-integer":case"date":case"date-only":case"geometry":case"oid":return!0;default:return!1}}function F(e,t){let n;return N(e.description)||(e.description===t?.booleanFieldDescription?n="boolean":!0===t?.geometryFieldDescriptions?.includes(e.description)&&(n="geometry")),n}function W(e){let t="value";return m(e)?t="range":$(e)?t="multi-value":function(e){return f.includes(e)}(e)&&(t="distance"),t}class U{constructor(e){this.expression=e}changeOperator(e){const{field:t,dataType:n,id:i}=this.expression,s=I.create({field:t,dataType:n,operator:e,id:i});return W(e)===this.expression.type&&(s.value=this.expression.value),s}changeField(e,t){if(!q(e,t))throw new Error(`Unsupported field type '${e.type}' for '${e.name}'`);const n=F(e,t)??e.type;return I.create({field:e.name,dataType:n,id:this.expression.id})}changeValue(e){return I.create({field:this.expression.field,dataType:this.expression.dataType,operator:this.expression.operator,value:e,id:this.expression.id})}static create({field:e,dataType:t,operator:n,id:i,value:s}){let a,r,o;switch(t){case"string":a="equal",r=u;break;case"small-integer":case"integer":case"big-integer":case"single":case"double":case"long":case"oid":a="equal",r=l;break;case"date":a="is_on",r=c;break;case"date-only":a="is_on",r=p;break;case"geometry":a="is_blank",r=d;break;case"boolean":a="is_true",r=h;break;default:throw new Error(`Data type not supported: ${t}`)}if(void 0!==n&&!r.includes(n))throw new Error(`Invalid operator '${n}' for type '${e}'`);const _=n??a;switch(W(_)){case"value":o=new L(e,t,s,_,i);break;case"multi-value":o=new S(e,t,s??[],_,i);break;case"range":o=new x(e,t,s??[void 0,void 0],_,i);break;case"distance":o=new O(e,t,s??{unit:"day"},_,i)}return o}static createDefaultForLayer(e,t){const n=e.fields.filter((n=>q(n,t,e)));if(!(n.length<1)){const e=n[0],i=F(e,t)??e.type;return I.create({field:e.name,dataType:i})}}}I=U,U.fromSQL=async(e,n,i)=>{const s=await t.parseWhereClause(e,n);return I.fromSQLNode(s.parseTree,n,i)},U.fromSQLNode=(e,t,i)=>{let s,r;n("binary-expression"===e.type,"Invalid expression: not a condition."),"column-reference"===e.left.type?(s=e.left,r=e.right):(s=e.right,r=e.left),n("column-reference"===s.type,"Invalid expression: missing column reference.");const l=t.get(s.column);let u;n(q(l,i),"Invalid expression: unsupported field.");const c=o[e.operator],p=function(e){if("expression-list"!==e.type)return;const t=e.value;if(2===t.length&&"binary-expression"===t[0].type&&"current-time"===t[0].left.type&&"interval"===t[0].right.type&&"current-time"===t[1].type&&"interval-period"===t[0].right.qualifier.type){const e=t[0].right.qualifier.period,i=Number.parseFloat(t[0].right.value.value);switch(n(!isNaN(i),`Invalid expression: unsupported value '${i}' for 'In the last' queries.`),e){case"day":return i%7==0?{distance:i/7,unit:"week"}:{distance:i,unit:"day"};case"hour":return{distance:i,unit:"hour"};case"minute":return{distance:i,unit:"minute"};case"month":case"second":case"year":throw new Error(`Unsupported unit '${e}' for 'In the last' queries.`)}}}(r);if(void 0!==p){const e="between"===c?"in_the_last":"not_in_the_last";u=new O(l.name,l.type,p,e)}else if(m(c)){n("expression-list"===r.type,"Invalid expression: invalid value type.");const e=r.value,t=v(e[0]),i=v(e[1]);if(u=new x(l.name,l.type,[t,i],c),t instanceof Date&&i instanceof Date&&function(e){const t=e[0],n=(i=e[1],new Date(i.getTime()-a));var i;return Math.abs(n.getTime()-t.getTime())<1e3}([t,i])){const e="between"===u.operator?"is_on":"is_not_on";u=new L(l.name,"date",t,e)}}else if($(c)){n("expression-list"===r.type,"Invalid expression: invalid value type.");const e=r.value.map(v);u=new S(l.name,l.type,e,c)}else{const[t,s]=function(e,t){const i=v(t);switch(e){case"IS":if(null===i)return["is_blank",void 0];if("boolean"==typeof i)return[!0===i?"is_true":"is_false",void 0];throw new Error("Invalid expression: unsupported value for `IS` operator.");case"ISNOT":if(null===i)return["is_not_blank",void 0];throw new Error("Invalid expression: unsupported value for `ISNOT` operator.");case"=":return""===i?["is_empty",""]:"date"===t.type?["is_on",i]:["equal",i];case"<>":return""===i?["is_not_empty",""]:"date"===t.type?["is_not_on",i]:["not_equal",i];case"<":return"date"===t.type||"timestamp"===t.type?["is_before",i]:["less",i];case">":return"date"===t.type||"timestamp"===t.type?["is_after",i]:["greater",i];case"LIKE":return n("string"==typeof i,"Invalid expression: unsupported value for `LIKE` operator."),i.startsWith("%")&&i.endsWith("%")?["contains",i.substring(1,i.length-1)]:i.endsWith("%")?["begins_with",i.substring(0,i.length-1)]:i.startsWith("%")?["ends_with",i.substring(1)]:["equal",i];case"NOT LIKE":return n("string"==typeof i,"Invalid expression: unsupported value for `NOT LIKE` operator."),i.startsWith("%")&&i.endsWith("%")?["not_contains",i.slice(1,i.length-1)]:i.endsWith("%")?["not_begins_with",i.slice(0,i.length-1)]:i.startsWith("%")?["not_ends_with",i.slice(1)]:["not_equal",i];default:const s=o[e];return n(void 0!==s,"Invalid expression: unsupported operator."),[s,i]}}(e.operator,r),a=F(l,i)??l.type;u=new L(l.name,a,s,t)}return u},e.BooleanOperators=h,e.DateOnlyOperators=p,e.DateOperators=c,e.DistanceUnitsByType={date:["minute","hour","day","week"],"date-only":["day","week"]},e.ExpressionController=U,e.ExpressionGroupOperator={And:"and",Or:"or",Default:""},e.GeometryOperators=d,e.NumericOperators=l,e.SpatialExpression=k,e.SpatialRelationshipUnits=E,e.SpatialRelationships={Intersects:"intersects",NotIntersects:"notIntersects",WithinDistance:"withinDistance",NotWithinDistance:"notWithinDistance",Contains:"contains",NotContains:"notContains",Within:"within",NotWithin:"notWithin",Nearest:"nearest"},e.StringOperators=u,e.assert=n,e.getIncrementalId=s,e.isFloatFieldType=function(e){return"single"===e||"double"===e},e.isIntFieldType=function(e){return"small-integer"===e||"integer"===e||"big-integer"===e||"long"===e||"oid"===e},e.isNoValueOperator=w,e.isRangeOperator=m,e.isSupportedField=q}));